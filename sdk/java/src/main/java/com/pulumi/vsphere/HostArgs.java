// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.vsphere.inputs.HostServiceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostArgs Empty = new HostArgs();

    /**
     * The ID of the Compute Cluster this host should
     * be added to. This should not be set if `datacenter` is set. Conflicts with:
     * `cluster_managed`.
     * 
     */
    @Import(name="cluster")
    private @Nullable Output<String> cluster;

    /**
     * @return The ID of the Compute Cluster this host should
     * be added to. This should not be set if `datacenter` is set. Conflicts with:
     * `cluster_managed`.
     * 
     */
    public Optional<Output<String>> cluster() {
        return Optional.ofNullable(this.cluster);
    }

    /**
     * Can be set to `true` if compute cluster
     * membership will be managed through the `compute_cluster` resource rather
     * than the`host` resource. Conflicts with: `cluster`.
     * 
     */
    @Import(name="clusterManaged")
    private @Nullable Output<Boolean> clusterManaged;

    /**
     * @return Can be set to `true` if compute cluster
     * membership will be managed through the `compute_cluster` resource rather
     * than the`host` resource. Conflicts with: `cluster`.
     * 
     */
    public Optional<Output<Boolean>> clusterManaged() {
        return Optional.ofNullable(this.clusterManaged);
    }

    /**
     * If set to false then the host will be disconnected.
     * Default is `false`.
     * 
     */
    @Import(name="connected")
    private @Nullable Output<Boolean> connected;

    /**
     * @return If set to false then the host will be disconnected.
     * Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> connected() {
        return Optional.ofNullable(this.connected);
    }

    /**
     * A map of custom attribute IDs and string
     * values to apply to the resource. Please refer to the
     * `vsphere_custom_attributes` resource for more information on applying
     * tags to resources.
     * 
     * &gt; **NOTE:** Custom attributes are not supported on direct ESXi host
     * connections and require vCenter Server.
     * 
     * [docs-host-thumbprint-data-source]: /docs/providers/vsphere/d/host_thumbprint.html
     * 
     */
    @Import(name="customAttributes")
    private @Nullable Output<Map<String,String>> customAttributes;

    /**
     * @return A map of custom attribute IDs and string
     * values to apply to the resource. Please refer to the
     * `vsphere_custom_attributes` resource for more information on applying
     * tags to resources.
     * 
     * &gt; **NOTE:** Custom attributes are not supported on direct ESXi host
     * connections and require vCenter Server.
     * 
     * [docs-host-thumbprint-data-source]: /docs/providers/vsphere/d/host_thumbprint.html
     * 
     */
    public Optional<Output<Map<String,String>>> customAttributes() {
        return Optional.ofNullable(this.customAttributes);
    }

    /**
     * The ID of the datacenter this host should
     * be added to. This should not be set if `cluster` is set.
     * 
     */
    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    /**
     * @return The ID of the datacenter this host should
     * be added to. This should not be set if `cluster` is set.
     * 
     */
    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    /**
     * If set to `true` then it will force the host to be added,
     * even if the host is already connected to a different vCenter Server instance.
     * Default is `false`.
     * 
     */
    @Import(name="force")
    private @Nullable Output<Boolean> force;

    /**
     * @return If set to `true` then it will force the host to be added,
     * even if the host is already connected to a different vCenter Server instance.
     * Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * FQDN or IP address of the host to be added.
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return FQDN or IP address of the host to be added.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * The license key that will be applied to the host.
     * The license key is expected to be present in vSphere.
     * 
     */
    @Import(name="license")
    private @Nullable Output<String> license;

    /**
     * @return The license key that will be applied to the host.
     * The license key is expected to be present in vSphere.
     * 
     */
    public Optional<Output<String>> license() {
        return Optional.ofNullable(this.license);
    }

    /**
     * Set the lockdown state of the host. Valid options are
     * `disabled`, `normal`, and `strict`. Default is `disabled`.
     * 
     */
    @Import(name="lockdown")
    private @Nullable Output<String> lockdown;

    /**
     * @return Set the lockdown state of the host. Valid options are
     * `disabled`, `normal`, and `strict`. Default is `disabled`.
     * 
     */
    public Optional<Output<String>> lockdown() {
        return Optional.ofNullable(this.lockdown);
    }

    /**
     * Set the management state of the host.
     * Default is `false`.
     * 
     */
    @Import(name="maintenance")
    private @Nullable Output<Boolean> maintenance;

    /**
     * @return Set the management state of the host.
     * Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> maintenance() {
        return Optional.ofNullable(this.maintenance);
    }

    /**
     * Password that will be used by vSphere to authenticate
     * to the host.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return Password that will be used by vSphere to authenticate
     * to the host.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * Set Services on host, the settings to be set are based on service being set as part of import.
     * 
     */
    @Import(name="services")
    private @Nullable Output<List<HostServiceArgs>> services;

    /**
     * @return Set Services on host, the settings to be set are based on service being set as part of import.
     * 
     */
    public Optional<Output<List<HostServiceArgs>>> services() {
        return Optional.ofNullable(this.services);
    }

    /**
     * The IDs of any tags to attach to this resource. Please
     * refer to the `vsphere.Tag` resource for more information on applying
     * tags to resources.
     * 
     * &gt; **NOTE:** Tagging support is not supported on direct ESXi host
     * connections and require vCenter Server.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The IDs of any tags to attach to this resource. Please
     * refer to the `vsphere.Tag` resource for more information on applying
     * tags to resources.
     * 
     * &gt; **NOTE:** Tagging support is not supported on direct ESXi host
     * connections and require vCenter Server.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Host&#39;s certificate SHA-1 thumbprint. If not set the
     * CA that signed the host&#39;s certificate should be trusted. If the CA is not
     * trusted and no thumbprint is set then the operation will fail. See data source
     * [`vsphere.getHostThumbprint`][docs-host-thumbprint-data-source].
     * 
     */
    @Import(name="thumbprint")
    private @Nullable Output<String> thumbprint;

    /**
     * @return Host&#39;s certificate SHA-1 thumbprint. If not set the
     * CA that signed the host&#39;s certificate should be trusted. If the CA is not
     * trusted and no thumbprint is set then the operation will fail. See data source
     * [`vsphere.getHostThumbprint`][docs-host-thumbprint-data-source].
     * 
     */
    public Optional<Output<String>> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    /**
     * Username that will be used by vSphere to authenticate
     * to the host.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return Username that will be used by vSphere to authenticate
     * to the host.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private HostArgs() {}

    private HostArgs(HostArgs $) {
        this.cluster = $.cluster;
        this.clusterManaged = $.clusterManaged;
        this.connected = $.connected;
        this.customAttributes = $.customAttributes;
        this.datacenter = $.datacenter;
        this.force = $.force;
        this.hostname = $.hostname;
        this.license = $.license;
        this.lockdown = $.lockdown;
        this.maintenance = $.maintenance;
        this.password = $.password;
        this.services = $.services;
        this.tags = $.tags;
        this.thumbprint = $.thumbprint;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostArgs $;

        public Builder() {
            $ = new HostArgs();
        }

        public Builder(HostArgs defaults) {
            $ = new HostArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cluster The ID of the Compute Cluster this host should
         * be added to. This should not be set if `datacenter` is set. Conflicts with:
         * `cluster_managed`.
         * 
         * @return builder
         * 
         */
        public Builder cluster(@Nullable Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster The ID of the Compute Cluster this host should
         * be added to. This should not be set if `datacenter` is set. Conflicts with:
         * `cluster_managed`.
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param clusterManaged Can be set to `true` if compute cluster
         * membership will be managed through the `compute_cluster` resource rather
         * than the`host` resource. Conflicts with: `cluster`.
         * 
         * @return builder
         * 
         */
        public Builder clusterManaged(@Nullable Output<Boolean> clusterManaged) {
            $.clusterManaged = clusterManaged;
            return this;
        }

        /**
         * @param clusterManaged Can be set to `true` if compute cluster
         * membership will be managed through the `compute_cluster` resource rather
         * than the`host` resource. Conflicts with: `cluster`.
         * 
         * @return builder
         * 
         */
        public Builder clusterManaged(Boolean clusterManaged) {
            return clusterManaged(Output.of(clusterManaged));
        }

        /**
         * @param connected If set to false then the host will be disconnected.
         * Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder connected(@Nullable Output<Boolean> connected) {
            $.connected = connected;
            return this;
        }

        /**
         * @param connected If set to false then the host will be disconnected.
         * Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder connected(Boolean connected) {
            return connected(Output.of(connected));
        }

        /**
         * @param customAttributes A map of custom attribute IDs and string
         * values to apply to the resource. Please refer to the
         * `vsphere_custom_attributes` resource for more information on applying
         * tags to resources.
         * 
         * &gt; **NOTE:** Custom attributes are not supported on direct ESXi host
         * connections and require vCenter Server.
         * 
         * [docs-host-thumbprint-data-source]: /docs/providers/vsphere/d/host_thumbprint.html
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(@Nullable Output<Map<String,String>> customAttributes) {
            $.customAttributes = customAttributes;
            return this;
        }

        /**
         * @param customAttributes A map of custom attribute IDs and string
         * values to apply to the resource. Please refer to the
         * `vsphere_custom_attributes` resource for more information on applying
         * tags to resources.
         * 
         * &gt; **NOTE:** Custom attributes are not supported on direct ESXi host
         * connections and require vCenter Server.
         * 
         * [docs-host-thumbprint-data-source]: /docs/providers/vsphere/d/host_thumbprint.html
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(Map<String,String> customAttributes) {
            return customAttributes(Output.of(customAttributes));
        }

        /**
         * @param datacenter The ID of the datacenter this host should
         * be added to. This should not be set if `cluster` is set.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        /**
         * @param datacenter The ID of the datacenter this host should
         * be added to. This should not be set if `cluster` is set.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        /**
         * @param force If set to `true` then it will force the host to be added,
         * even if the host is already connected to a different vCenter Server instance.
         * Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder force(@Nullable Output<Boolean> force) {
            $.force = force;
            return this;
        }

        /**
         * @param force If set to `true` then it will force the host to be added,
         * even if the host is already connected to a different vCenter Server instance.
         * Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder force(Boolean force) {
            return force(Output.of(force));
        }

        /**
         * @param hostname FQDN or IP address of the host to be added.
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname FQDN or IP address of the host to be added.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param license The license key that will be applied to the host.
         * The license key is expected to be present in vSphere.
         * 
         * @return builder
         * 
         */
        public Builder license(@Nullable Output<String> license) {
            $.license = license;
            return this;
        }

        /**
         * @param license The license key that will be applied to the host.
         * The license key is expected to be present in vSphere.
         * 
         * @return builder
         * 
         */
        public Builder license(String license) {
            return license(Output.of(license));
        }

        /**
         * @param lockdown Set the lockdown state of the host. Valid options are
         * `disabled`, `normal`, and `strict`. Default is `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder lockdown(@Nullable Output<String> lockdown) {
            $.lockdown = lockdown;
            return this;
        }

        /**
         * @param lockdown Set the lockdown state of the host. Valid options are
         * `disabled`, `normal`, and `strict`. Default is `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder lockdown(String lockdown) {
            return lockdown(Output.of(lockdown));
        }

        /**
         * @param maintenance Set the management state of the host.
         * Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder maintenance(@Nullable Output<Boolean> maintenance) {
            $.maintenance = maintenance;
            return this;
        }

        /**
         * @param maintenance Set the management state of the host.
         * Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder maintenance(Boolean maintenance) {
            return maintenance(Output.of(maintenance));
        }

        /**
         * @param password Password that will be used by vSphere to authenticate
         * to the host.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password that will be used by vSphere to authenticate
         * to the host.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param services Set Services on host, the settings to be set are based on service being set as part of import.
         * 
         * @return builder
         * 
         */
        public Builder services(@Nullable Output<List<HostServiceArgs>> services) {
            $.services = services;
            return this;
        }

        /**
         * @param services Set Services on host, the settings to be set are based on service being set as part of import.
         * 
         * @return builder
         * 
         */
        public Builder services(List<HostServiceArgs> services) {
            return services(Output.of(services));
        }

        /**
         * @param services Set Services on host, the settings to be set are based on service being set as part of import.
         * 
         * @return builder
         * 
         */
        public Builder services(HostServiceArgs... services) {
            return services(List.of(services));
        }

        /**
         * @param tags The IDs of any tags to attach to this resource. Please
         * refer to the `vsphere.Tag` resource for more information on applying
         * tags to resources.
         * 
         * &gt; **NOTE:** Tagging support is not supported on direct ESXi host
         * connections and require vCenter Server.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The IDs of any tags to attach to this resource. Please
         * refer to the `vsphere.Tag` resource for more information on applying
         * tags to resources.
         * 
         * &gt; **NOTE:** Tagging support is not supported on direct ESXi host
         * connections and require vCenter Server.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The IDs of any tags to attach to this resource. Please
         * refer to the `vsphere.Tag` resource for more information on applying
         * tags to resources.
         * 
         * &gt; **NOTE:** Tagging support is not supported on direct ESXi host
         * connections and require vCenter Server.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param thumbprint Host&#39;s certificate SHA-1 thumbprint. If not set the
         * CA that signed the host&#39;s certificate should be trusted. If the CA is not
         * trusted and no thumbprint is set then the operation will fail. See data source
         * [`vsphere.getHostThumbprint`][docs-host-thumbprint-data-source].
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(@Nullable Output<String> thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        /**
         * @param thumbprint Host&#39;s certificate SHA-1 thumbprint. If not set the
         * CA that signed the host&#39;s certificate should be trusted. If the CA is not
         * trusted and no thumbprint is set then the operation will fail. See data source
         * [`vsphere.getHostThumbprint`][docs-host-thumbprint-data-source].
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(String thumbprint) {
            return thumbprint(Output.of(thumbprint));
        }

        /**
         * @param username Username that will be used by vSphere to authenticate
         * to the host.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username that will be used by vSphere to authenticate
         * to the host.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public HostArgs build() {
            if ($.hostname == null) {
                throw new MissingRequiredPropertyException("HostArgs", "hostname");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("HostArgs", "password");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("HostArgs", "username");
            }
            return $;
        }
    }

}
