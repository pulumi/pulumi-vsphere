// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OfflineSoftwareDepotComponentArgs extends com.pulumi.resources.ResourceArgs {

    public static final OfflineSoftwareDepotComponentArgs Empty = new OfflineSoftwareDepotComponentArgs();

    /**
     * The name of the component. Useful for easier identification.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The name of the component. Useful for easier identification.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The identifier of the component.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The identifier of the component.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The list of available versions of the component.
     * 
     */
    @Import(name="versions")
    private @Nullable Output<List<String>> versions;

    /**
     * @return The list of available versions of the component.
     * 
     */
    public Optional<Output<List<String>>> versions() {
        return Optional.ofNullable(this.versions);
    }

    private OfflineSoftwareDepotComponentArgs() {}

    private OfflineSoftwareDepotComponentArgs(OfflineSoftwareDepotComponentArgs $) {
        this.displayName = $.displayName;
        this.key = $.key;
        this.versions = $.versions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OfflineSoftwareDepotComponentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OfflineSoftwareDepotComponentArgs $;

        public Builder() {
            $ = new OfflineSoftwareDepotComponentArgs();
        }

        public Builder(OfflineSoftwareDepotComponentArgs defaults) {
            $ = new OfflineSoftwareDepotComponentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The name of the component. Useful for easier identification.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the component. Useful for easier identification.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param key The identifier of the component.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The identifier of the component.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param versions The list of available versions of the component.
         * 
         * @return builder
         * 
         */
        public Builder versions(@Nullable Output<List<String>> versions) {
            $.versions = versions;
            return this;
        }

        /**
         * @param versions The list of available versions of the component.
         * 
         * @return builder
         * 
         */
        public Builder versions(List<String> versions) {
            return versions(Output.of(versions));
        }

        /**
         * @param versions The list of available versions of the component.
         * 
         * @return builder
         * 
         */
        public Builder versions(String... versions) {
            return versions(List.of(versions));
        }

        public OfflineSoftwareDepotComponentArgs build() {
            return $;
        }
    }

}
