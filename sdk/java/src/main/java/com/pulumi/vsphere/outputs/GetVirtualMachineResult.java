// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.vsphere.outputs.GetVirtualMachineDisk;
import com.pulumi.vsphere.outputs.GetVirtualMachineNetworkInterface;
import com.pulumi.vsphere.outputs.GetVirtualMachineVapp;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualMachineResult {
    /**
     * @return The alternate guest name of the virtual machine when
     * `guest_id` is a non-specific operating system, like `otherGuest` or `otherGuest64`.
     * 
     */
    private @Nullable String alternateGuestName;
    /**
     * @return The user-provided description of this virtual machine.
     * 
     */
    private String annotation;
    private @Nullable Integer bootDelay;
    private @Nullable Integer bootRetryDelay;
    private @Nullable Boolean bootRetryEnabled;
    private String changeVersion;
    private @Nullable Boolean cpuHotAddEnabled;
    private @Nullable Boolean cpuHotRemoveEnabled;
    private @Nullable Integer cpuLimit;
    private @Nullable Boolean cpuPerformanceCountersEnabled;
    private @Nullable Integer cpuReservation;
    private Integer cpuShareCount;
    private @Nullable String cpuShareLevel;
    private @Nullable String datacenterId;
    /**
     * @return Whenever possible, this is the first IPv4 address that is reachable through
     * the default gateway configured on the machine, then the first reachable IPv6
     * address, and then the first general discovered address if neither exist. If
     * VMware Tools is not running on the virtual machine, or if the VM is powered
     * off, this value will be blank.
     * 
     */
    private String defaultIpAddress;
    /**
     * @return Information about each of the disks on this virtual machine or
     * template. These are sorted by bus and unit number so that they can be applied
     * to a `vsphere.VirtualMachine` resource in the order the resource expects
     * while cloning. This is useful for discovering certain disk settings while
     * performing a linked clone, as all settings that are output by this data
     * source must be the same on the destination virtual machine as the source.
     * Only the first number of controllers defined by `scsi_controller_scan_count`
     * are scanned for disks. The sub-attributes are:
     * 
     */
    private List<GetVirtualMachineDisk> disks;
    private @Nullable Boolean efiSecureBootEnabled;
    private @Nullable Boolean enableDiskUuid;
    private @Nullable Boolean enableLogging;
    private @Nullable String eptRviMode;
    private @Nullable Map<String,String> extraConfig;
    private @Nullable Boolean extraConfigRebootRequired;
    /**
     * @return The firmware type for this virtual machine. Can be `bios` or `efi`.
     * 
     */
    private @Nullable String firmware;
    /**
     * @return The guest ID of the virtual machine or template.
     * 
     */
    private String guestId;
    /**
     * @return A list of IP addresses as reported by VMware Tools.
     * 
     */
    private List<String> guestIpAddresses;
    /**
     * @return The hardware version number on this virtual machine.
     * 
     */
    private Integer hardwareVersion;
    private @Nullable String hvMode;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Integer ideControllerScanCount;
    private @Nullable String latencySensitivity;
    /**
     * @return The size of the virtual machine&#39;s memory, in MB.
     * 
     */
    private @Nullable Integer memory;
    private @Nullable Boolean memoryHotAddEnabled;
    private @Nullable Integer memoryLimit;
    private @Nullable Integer memoryReservation;
    private Integer memoryShareCount;
    private @Nullable String memoryShareLevel;
    private String moid;
    private @Nullable String name;
    private @Nullable Boolean nestedHvEnabled;
    /**
     * @return The network interface types for each network
     * interface found on the virtual machine, in device bus order. Will be one of
     * `e1000`, `e1000e`, `pcnet32`, `sriov`, `vmxnet2`, `vmxnet3vrdma`, or `vmxnet3`.
     * 
     */
    private List<String> networkInterfaceTypes;
    /**
     * @return Information about each of the network interfaces on this
     * virtual machine or template. These are sorted by device bus order so that they
     * can be applied to a `vsphere.VirtualMachine` resource in the order the resource
     * expects while cloning. This is useful for discovering certain network interface
     * settings while performing a linked clone, as all settings that are output by this
     * data source must be the same on the destination virtual machine as the source.
     * The sub-attributes are:
     * 
     */
    private List<GetVirtualMachineNetworkInterface> networkInterfaces;
    /**
     * @return The number of cores per socket for this virtual machine.
     * 
     */
    private @Nullable Integer numCoresPerSocket;
    /**
     * @return The total number of virtual processor cores assigned to this
     * virtual machine.
     * 
     */
    private @Nullable Integer numCpus;
    private @Nullable String replaceTrigger;
    private @Nullable Boolean runToolsScriptsAfterPowerOn;
    private @Nullable Boolean runToolsScriptsAfterResume;
    private @Nullable Boolean runToolsScriptsBeforeGuestReboot;
    private @Nullable Boolean runToolsScriptsBeforeGuestShutdown;
    private @Nullable Boolean runToolsScriptsBeforeGuestStandby;
    private @Nullable Integer sataControllerScanCount;
    /**
     * @return Mode for sharing the SCSI bus. The modes are
     * physicalSharing, virtualSharing, and noSharing. Only the first number of
     * controllers defined by `scsi_controller_scan_count` are scanned.
     * 
     */
    private String scsiBusSharing;
    private @Nullable Integer scsiControllerScanCount;
    /**
     * @return The common type of all SCSI controllers on this virtual machine.
     * Will be one of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic
     * SAS), `pvscsi` (VMware Paravirtual), `buslogic` (BusLogic), or `mixed` when
     * there are multiple controller types. Only the first number of controllers
     * defined by `scsi_controller_scan_count` are scanned.
     * 
     */
    private String scsiType;
    private String storagePolicyId;
    private @Nullable String swapPlacementPolicy;
    private @Nullable Boolean syncTimeWithHost;
    private @Nullable Boolean syncTimeWithHostPeriodically;
    private @Nullable String toolsUpgradePolicy;
    private String uuid;
    private @Nullable GetVirtualMachineVapp vapp;
    private List<String> vappTransports;
    private @Nullable Boolean vbsEnabled;
    private @Nullable Boolean vvtdEnabled;

    private GetVirtualMachineResult() {}
    /**
     * @return The alternate guest name of the virtual machine when
     * `guest_id` is a non-specific operating system, like `otherGuest` or `otherGuest64`.
     * 
     */
    public Optional<String> alternateGuestName() {
        return Optional.ofNullable(this.alternateGuestName);
    }
    /**
     * @return The user-provided description of this virtual machine.
     * 
     */
    public String annotation() {
        return this.annotation;
    }
    public Optional<Integer> bootDelay() {
        return Optional.ofNullable(this.bootDelay);
    }
    public Optional<Integer> bootRetryDelay() {
        return Optional.ofNullable(this.bootRetryDelay);
    }
    public Optional<Boolean> bootRetryEnabled() {
        return Optional.ofNullable(this.bootRetryEnabled);
    }
    public String changeVersion() {
        return this.changeVersion;
    }
    public Optional<Boolean> cpuHotAddEnabled() {
        return Optional.ofNullable(this.cpuHotAddEnabled);
    }
    public Optional<Boolean> cpuHotRemoveEnabled() {
        return Optional.ofNullable(this.cpuHotRemoveEnabled);
    }
    public Optional<Integer> cpuLimit() {
        return Optional.ofNullable(this.cpuLimit);
    }
    public Optional<Boolean> cpuPerformanceCountersEnabled() {
        return Optional.ofNullable(this.cpuPerformanceCountersEnabled);
    }
    public Optional<Integer> cpuReservation() {
        return Optional.ofNullable(this.cpuReservation);
    }
    public Integer cpuShareCount() {
        return this.cpuShareCount;
    }
    public Optional<String> cpuShareLevel() {
        return Optional.ofNullable(this.cpuShareLevel);
    }
    public Optional<String> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }
    /**
     * @return Whenever possible, this is the first IPv4 address that is reachable through
     * the default gateway configured on the machine, then the first reachable IPv6
     * address, and then the first general discovered address if neither exist. If
     * VMware Tools is not running on the virtual machine, or if the VM is powered
     * off, this value will be blank.
     * 
     */
    public String defaultIpAddress() {
        return this.defaultIpAddress;
    }
    /**
     * @return Information about each of the disks on this virtual machine or
     * template. These are sorted by bus and unit number so that they can be applied
     * to a `vsphere.VirtualMachine` resource in the order the resource expects
     * while cloning. This is useful for discovering certain disk settings while
     * performing a linked clone, as all settings that are output by this data
     * source must be the same on the destination virtual machine as the source.
     * Only the first number of controllers defined by `scsi_controller_scan_count`
     * are scanned for disks. The sub-attributes are:
     * 
     */
    public List<GetVirtualMachineDisk> disks() {
        return this.disks;
    }
    public Optional<Boolean> efiSecureBootEnabled() {
        return Optional.ofNullable(this.efiSecureBootEnabled);
    }
    public Optional<Boolean> enableDiskUuid() {
        return Optional.ofNullable(this.enableDiskUuid);
    }
    public Optional<Boolean> enableLogging() {
        return Optional.ofNullable(this.enableLogging);
    }
    public Optional<String> eptRviMode() {
        return Optional.ofNullable(this.eptRviMode);
    }
    public Map<String,String> extraConfig() {
        return this.extraConfig == null ? Map.of() : this.extraConfig;
    }
    public Optional<Boolean> extraConfigRebootRequired() {
        return Optional.ofNullable(this.extraConfigRebootRequired);
    }
    /**
     * @return The firmware type for this virtual machine. Can be `bios` or `efi`.
     * 
     */
    public Optional<String> firmware() {
        return Optional.ofNullable(this.firmware);
    }
    /**
     * @return The guest ID of the virtual machine or template.
     * 
     */
    public String guestId() {
        return this.guestId;
    }
    /**
     * @return A list of IP addresses as reported by VMware Tools.
     * 
     */
    public List<String> guestIpAddresses() {
        return this.guestIpAddresses;
    }
    /**
     * @return The hardware version number on this virtual machine.
     * 
     */
    public Integer hardwareVersion() {
        return this.hardwareVersion;
    }
    public Optional<String> hvMode() {
        return Optional.ofNullable(this.hvMode);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Integer> ideControllerScanCount() {
        return Optional.ofNullable(this.ideControllerScanCount);
    }
    public Optional<String> latencySensitivity() {
        return Optional.ofNullable(this.latencySensitivity);
    }
    /**
     * @return The size of the virtual machine&#39;s memory, in MB.
     * 
     */
    public Optional<Integer> memory() {
        return Optional.ofNullable(this.memory);
    }
    public Optional<Boolean> memoryHotAddEnabled() {
        return Optional.ofNullable(this.memoryHotAddEnabled);
    }
    public Optional<Integer> memoryLimit() {
        return Optional.ofNullable(this.memoryLimit);
    }
    public Optional<Integer> memoryReservation() {
        return Optional.ofNullable(this.memoryReservation);
    }
    public Integer memoryShareCount() {
        return this.memoryShareCount;
    }
    public Optional<String> memoryShareLevel() {
        return Optional.ofNullable(this.memoryShareLevel);
    }
    public String moid() {
        return this.moid;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<Boolean> nestedHvEnabled() {
        return Optional.ofNullable(this.nestedHvEnabled);
    }
    /**
     * @return The network interface types for each network
     * interface found on the virtual machine, in device bus order. Will be one of
     * `e1000`, `e1000e`, `pcnet32`, `sriov`, `vmxnet2`, `vmxnet3vrdma`, or `vmxnet3`.
     * 
     */
    public List<String> networkInterfaceTypes() {
        return this.networkInterfaceTypes;
    }
    /**
     * @return Information about each of the network interfaces on this
     * virtual machine or template. These are sorted by device bus order so that they
     * can be applied to a `vsphere.VirtualMachine` resource in the order the resource
     * expects while cloning. This is useful for discovering certain network interface
     * settings while performing a linked clone, as all settings that are output by this
     * data source must be the same on the destination virtual machine as the source.
     * The sub-attributes are:
     * 
     */
    public List<GetVirtualMachineNetworkInterface> networkInterfaces() {
        return this.networkInterfaces;
    }
    /**
     * @return The number of cores per socket for this virtual machine.
     * 
     */
    public Optional<Integer> numCoresPerSocket() {
        return Optional.ofNullable(this.numCoresPerSocket);
    }
    /**
     * @return The total number of virtual processor cores assigned to this
     * virtual machine.
     * 
     */
    public Optional<Integer> numCpus() {
        return Optional.ofNullable(this.numCpus);
    }
    public Optional<String> replaceTrigger() {
        return Optional.ofNullable(this.replaceTrigger);
    }
    public Optional<Boolean> runToolsScriptsAfterPowerOn() {
        return Optional.ofNullable(this.runToolsScriptsAfterPowerOn);
    }
    public Optional<Boolean> runToolsScriptsAfterResume() {
        return Optional.ofNullable(this.runToolsScriptsAfterResume);
    }
    public Optional<Boolean> runToolsScriptsBeforeGuestReboot() {
        return Optional.ofNullable(this.runToolsScriptsBeforeGuestReboot);
    }
    public Optional<Boolean> runToolsScriptsBeforeGuestShutdown() {
        return Optional.ofNullable(this.runToolsScriptsBeforeGuestShutdown);
    }
    public Optional<Boolean> runToolsScriptsBeforeGuestStandby() {
        return Optional.ofNullable(this.runToolsScriptsBeforeGuestStandby);
    }
    public Optional<Integer> sataControllerScanCount() {
        return Optional.ofNullable(this.sataControllerScanCount);
    }
    /**
     * @return Mode for sharing the SCSI bus. The modes are
     * physicalSharing, virtualSharing, and noSharing. Only the first number of
     * controllers defined by `scsi_controller_scan_count` are scanned.
     * 
     */
    public String scsiBusSharing() {
        return this.scsiBusSharing;
    }
    public Optional<Integer> scsiControllerScanCount() {
        return Optional.ofNullable(this.scsiControllerScanCount);
    }
    /**
     * @return The common type of all SCSI controllers on this virtual machine.
     * Will be one of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic
     * SAS), `pvscsi` (VMware Paravirtual), `buslogic` (BusLogic), or `mixed` when
     * there are multiple controller types. Only the first number of controllers
     * defined by `scsi_controller_scan_count` are scanned.
     * 
     */
    public String scsiType() {
        return this.scsiType;
    }
    public String storagePolicyId() {
        return this.storagePolicyId;
    }
    public Optional<String> swapPlacementPolicy() {
        return Optional.ofNullable(this.swapPlacementPolicy);
    }
    public Optional<Boolean> syncTimeWithHost() {
        return Optional.ofNullable(this.syncTimeWithHost);
    }
    public Optional<Boolean> syncTimeWithHostPeriodically() {
        return Optional.ofNullable(this.syncTimeWithHostPeriodically);
    }
    public Optional<String> toolsUpgradePolicy() {
        return Optional.ofNullable(this.toolsUpgradePolicy);
    }
    public String uuid() {
        return this.uuid;
    }
    public Optional<GetVirtualMachineVapp> vapp() {
        return Optional.ofNullable(this.vapp);
    }
    public List<String> vappTransports() {
        return this.vappTransports;
    }
    public Optional<Boolean> vbsEnabled() {
        return Optional.ofNullable(this.vbsEnabled);
    }
    public Optional<Boolean> vvtdEnabled() {
        return Optional.ofNullable(this.vvtdEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualMachineResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String alternateGuestName;
        private String annotation;
        private @Nullable Integer bootDelay;
        private @Nullable Integer bootRetryDelay;
        private @Nullable Boolean bootRetryEnabled;
        private String changeVersion;
        private @Nullable Boolean cpuHotAddEnabled;
        private @Nullable Boolean cpuHotRemoveEnabled;
        private @Nullable Integer cpuLimit;
        private @Nullable Boolean cpuPerformanceCountersEnabled;
        private @Nullable Integer cpuReservation;
        private Integer cpuShareCount;
        private @Nullable String cpuShareLevel;
        private @Nullable String datacenterId;
        private String defaultIpAddress;
        private List<GetVirtualMachineDisk> disks;
        private @Nullable Boolean efiSecureBootEnabled;
        private @Nullable Boolean enableDiskUuid;
        private @Nullable Boolean enableLogging;
        private @Nullable String eptRviMode;
        private @Nullable Map<String,String> extraConfig;
        private @Nullable Boolean extraConfigRebootRequired;
        private @Nullable String firmware;
        private String guestId;
        private List<String> guestIpAddresses;
        private Integer hardwareVersion;
        private @Nullable String hvMode;
        private String id;
        private @Nullable Integer ideControllerScanCount;
        private @Nullable String latencySensitivity;
        private @Nullable Integer memory;
        private @Nullable Boolean memoryHotAddEnabled;
        private @Nullable Integer memoryLimit;
        private @Nullable Integer memoryReservation;
        private Integer memoryShareCount;
        private @Nullable String memoryShareLevel;
        private String moid;
        private @Nullable String name;
        private @Nullable Boolean nestedHvEnabled;
        private List<String> networkInterfaceTypes;
        private List<GetVirtualMachineNetworkInterface> networkInterfaces;
        private @Nullable Integer numCoresPerSocket;
        private @Nullable Integer numCpus;
        private @Nullable String replaceTrigger;
        private @Nullable Boolean runToolsScriptsAfterPowerOn;
        private @Nullable Boolean runToolsScriptsAfterResume;
        private @Nullable Boolean runToolsScriptsBeforeGuestReboot;
        private @Nullable Boolean runToolsScriptsBeforeGuestShutdown;
        private @Nullable Boolean runToolsScriptsBeforeGuestStandby;
        private @Nullable Integer sataControllerScanCount;
        private String scsiBusSharing;
        private @Nullable Integer scsiControllerScanCount;
        private String scsiType;
        private String storagePolicyId;
        private @Nullable String swapPlacementPolicy;
        private @Nullable Boolean syncTimeWithHost;
        private @Nullable Boolean syncTimeWithHostPeriodically;
        private @Nullable String toolsUpgradePolicy;
        private String uuid;
        private @Nullable GetVirtualMachineVapp vapp;
        private List<String> vappTransports;
        private @Nullable Boolean vbsEnabled;
        private @Nullable Boolean vvtdEnabled;
        public Builder() {}
        public Builder(GetVirtualMachineResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternateGuestName = defaults.alternateGuestName;
    	      this.annotation = defaults.annotation;
    	      this.bootDelay = defaults.bootDelay;
    	      this.bootRetryDelay = defaults.bootRetryDelay;
    	      this.bootRetryEnabled = defaults.bootRetryEnabled;
    	      this.changeVersion = defaults.changeVersion;
    	      this.cpuHotAddEnabled = defaults.cpuHotAddEnabled;
    	      this.cpuHotRemoveEnabled = defaults.cpuHotRemoveEnabled;
    	      this.cpuLimit = defaults.cpuLimit;
    	      this.cpuPerformanceCountersEnabled = defaults.cpuPerformanceCountersEnabled;
    	      this.cpuReservation = defaults.cpuReservation;
    	      this.cpuShareCount = defaults.cpuShareCount;
    	      this.cpuShareLevel = defaults.cpuShareLevel;
    	      this.datacenterId = defaults.datacenterId;
    	      this.defaultIpAddress = defaults.defaultIpAddress;
    	      this.disks = defaults.disks;
    	      this.efiSecureBootEnabled = defaults.efiSecureBootEnabled;
    	      this.enableDiskUuid = defaults.enableDiskUuid;
    	      this.enableLogging = defaults.enableLogging;
    	      this.eptRviMode = defaults.eptRviMode;
    	      this.extraConfig = defaults.extraConfig;
    	      this.extraConfigRebootRequired = defaults.extraConfigRebootRequired;
    	      this.firmware = defaults.firmware;
    	      this.guestId = defaults.guestId;
    	      this.guestIpAddresses = defaults.guestIpAddresses;
    	      this.hardwareVersion = defaults.hardwareVersion;
    	      this.hvMode = defaults.hvMode;
    	      this.id = defaults.id;
    	      this.ideControllerScanCount = defaults.ideControllerScanCount;
    	      this.latencySensitivity = defaults.latencySensitivity;
    	      this.memory = defaults.memory;
    	      this.memoryHotAddEnabled = defaults.memoryHotAddEnabled;
    	      this.memoryLimit = defaults.memoryLimit;
    	      this.memoryReservation = defaults.memoryReservation;
    	      this.memoryShareCount = defaults.memoryShareCount;
    	      this.memoryShareLevel = defaults.memoryShareLevel;
    	      this.moid = defaults.moid;
    	      this.name = defaults.name;
    	      this.nestedHvEnabled = defaults.nestedHvEnabled;
    	      this.networkInterfaceTypes = defaults.networkInterfaceTypes;
    	      this.networkInterfaces = defaults.networkInterfaces;
    	      this.numCoresPerSocket = defaults.numCoresPerSocket;
    	      this.numCpus = defaults.numCpus;
    	      this.replaceTrigger = defaults.replaceTrigger;
    	      this.runToolsScriptsAfterPowerOn = defaults.runToolsScriptsAfterPowerOn;
    	      this.runToolsScriptsAfterResume = defaults.runToolsScriptsAfterResume;
    	      this.runToolsScriptsBeforeGuestReboot = defaults.runToolsScriptsBeforeGuestReboot;
    	      this.runToolsScriptsBeforeGuestShutdown = defaults.runToolsScriptsBeforeGuestShutdown;
    	      this.runToolsScriptsBeforeGuestStandby = defaults.runToolsScriptsBeforeGuestStandby;
    	      this.sataControllerScanCount = defaults.sataControllerScanCount;
    	      this.scsiBusSharing = defaults.scsiBusSharing;
    	      this.scsiControllerScanCount = defaults.scsiControllerScanCount;
    	      this.scsiType = defaults.scsiType;
    	      this.storagePolicyId = defaults.storagePolicyId;
    	      this.swapPlacementPolicy = defaults.swapPlacementPolicy;
    	      this.syncTimeWithHost = defaults.syncTimeWithHost;
    	      this.syncTimeWithHostPeriodically = defaults.syncTimeWithHostPeriodically;
    	      this.toolsUpgradePolicy = defaults.toolsUpgradePolicy;
    	      this.uuid = defaults.uuid;
    	      this.vapp = defaults.vapp;
    	      this.vappTransports = defaults.vappTransports;
    	      this.vbsEnabled = defaults.vbsEnabled;
    	      this.vvtdEnabled = defaults.vvtdEnabled;
        }

        @CustomType.Setter
        public Builder alternateGuestName(@Nullable String alternateGuestName) {
            this.alternateGuestName = alternateGuestName;
            return this;
        }
        @CustomType.Setter
        public Builder annotation(String annotation) {
            this.annotation = Objects.requireNonNull(annotation);
            return this;
        }
        @CustomType.Setter
        public Builder bootDelay(@Nullable Integer bootDelay) {
            this.bootDelay = bootDelay;
            return this;
        }
        @CustomType.Setter
        public Builder bootRetryDelay(@Nullable Integer bootRetryDelay) {
            this.bootRetryDelay = bootRetryDelay;
            return this;
        }
        @CustomType.Setter
        public Builder bootRetryEnabled(@Nullable Boolean bootRetryEnabled) {
            this.bootRetryEnabled = bootRetryEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder changeVersion(String changeVersion) {
            this.changeVersion = Objects.requireNonNull(changeVersion);
            return this;
        }
        @CustomType.Setter
        public Builder cpuHotAddEnabled(@Nullable Boolean cpuHotAddEnabled) {
            this.cpuHotAddEnabled = cpuHotAddEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder cpuHotRemoveEnabled(@Nullable Boolean cpuHotRemoveEnabled) {
            this.cpuHotRemoveEnabled = cpuHotRemoveEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder cpuLimit(@Nullable Integer cpuLimit) {
            this.cpuLimit = cpuLimit;
            return this;
        }
        @CustomType.Setter
        public Builder cpuPerformanceCountersEnabled(@Nullable Boolean cpuPerformanceCountersEnabled) {
            this.cpuPerformanceCountersEnabled = cpuPerformanceCountersEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder cpuReservation(@Nullable Integer cpuReservation) {
            this.cpuReservation = cpuReservation;
            return this;
        }
        @CustomType.Setter
        public Builder cpuShareCount(Integer cpuShareCount) {
            this.cpuShareCount = Objects.requireNonNull(cpuShareCount);
            return this;
        }
        @CustomType.Setter
        public Builder cpuShareLevel(@Nullable String cpuShareLevel) {
            this.cpuShareLevel = cpuShareLevel;
            return this;
        }
        @CustomType.Setter
        public Builder datacenterId(@Nullable String datacenterId) {
            this.datacenterId = datacenterId;
            return this;
        }
        @CustomType.Setter
        public Builder defaultIpAddress(String defaultIpAddress) {
            this.defaultIpAddress = Objects.requireNonNull(defaultIpAddress);
            return this;
        }
        @CustomType.Setter
        public Builder disks(List<GetVirtualMachineDisk> disks) {
            this.disks = Objects.requireNonNull(disks);
            return this;
        }
        public Builder disks(GetVirtualMachineDisk... disks) {
            return disks(List.of(disks));
        }
        @CustomType.Setter
        public Builder efiSecureBootEnabled(@Nullable Boolean efiSecureBootEnabled) {
            this.efiSecureBootEnabled = efiSecureBootEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder enableDiskUuid(@Nullable Boolean enableDiskUuid) {
            this.enableDiskUuid = enableDiskUuid;
            return this;
        }
        @CustomType.Setter
        public Builder enableLogging(@Nullable Boolean enableLogging) {
            this.enableLogging = enableLogging;
            return this;
        }
        @CustomType.Setter
        public Builder eptRviMode(@Nullable String eptRviMode) {
            this.eptRviMode = eptRviMode;
            return this;
        }
        @CustomType.Setter
        public Builder extraConfig(@Nullable Map<String,String> extraConfig) {
            this.extraConfig = extraConfig;
            return this;
        }
        @CustomType.Setter
        public Builder extraConfigRebootRequired(@Nullable Boolean extraConfigRebootRequired) {
            this.extraConfigRebootRequired = extraConfigRebootRequired;
            return this;
        }
        @CustomType.Setter
        public Builder firmware(@Nullable String firmware) {
            this.firmware = firmware;
            return this;
        }
        @CustomType.Setter
        public Builder guestId(String guestId) {
            this.guestId = Objects.requireNonNull(guestId);
            return this;
        }
        @CustomType.Setter
        public Builder guestIpAddresses(List<String> guestIpAddresses) {
            this.guestIpAddresses = Objects.requireNonNull(guestIpAddresses);
            return this;
        }
        public Builder guestIpAddresses(String... guestIpAddresses) {
            return guestIpAddresses(List.of(guestIpAddresses));
        }
        @CustomType.Setter
        public Builder hardwareVersion(Integer hardwareVersion) {
            this.hardwareVersion = Objects.requireNonNull(hardwareVersion);
            return this;
        }
        @CustomType.Setter
        public Builder hvMode(@Nullable String hvMode) {
            this.hvMode = hvMode;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ideControllerScanCount(@Nullable Integer ideControllerScanCount) {
            this.ideControllerScanCount = ideControllerScanCount;
            return this;
        }
        @CustomType.Setter
        public Builder latencySensitivity(@Nullable String latencySensitivity) {
            this.latencySensitivity = latencySensitivity;
            return this;
        }
        @CustomType.Setter
        public Builder memory(@Nullable Integer memory) {
            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder memoryHotAddEnabled(@Nullable Boolean memoryHotAddEnabled) {
            this.memoryHotAddEnabled = memoryHotAddEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder memoryLimit(@Nullable Integer memoryLimit) {
            this.memoryLimit = memoryLimit;
            return this;
        }
        @CustomType.Setter
        public Builder memoryReservation(@Nullable Integer memoryReservation) {
            this.memoryReservation = memoryReservation;
            return this;
        }
        @CustomType.Setter
        public Builder memoryShareCount(Integer memoryShareCount) {
            this.memoryShareCount = Objects.requireNonNull(memoryShareCount);
            return this;
        }
        @CustomType.Setter
        public Builder memoryShareLevel(@Nullable String memoryShareLevel) {
            this.memoryShareLevel = memoryShareLevel;
            return this;
        }
        @CustomType.Setter
        public Builder moid(String moid) {
            this.moid = Objects.requireNonNull(moid);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nestedHvEnabled(@Nullable Boolean nestedHvEnabled) {
            this.nestedHvEnabled = nestedHvEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder networkInterfaceTypes(List<String> networkInterfaceTypes) {
            this.networkInterfaceTypes = Objects.requireNonNull(networkInterfaceTypes);
            return this;
        }
        public Builder networkInterfaceTypes(String... networkInterfaceTypes) {
            return networkInterfaceTypes(List.of(networkInterfaceTypes));
        }
        @CustomType.Setter
        public Builder networkInterfaces(List<GetVirtualMachineNetworkInterface> networkInterfaces) {
            this.networkInterfaces = Objects.requireNonNull(networkInterfaces);
            return this;
        }
        public Builder networkInterfaces(GetVirtualMachineNetworkInterface... networkInterfaces) {
            return networkInterfaces(List.of(networkInterfaces));
        }
        @CustomType.Setter
        public Builder numCoresPerSocket(@Nullable Integer numCoresPerSocket) {
            this.numCoresPerSocket = numCoresPerSocket;
            return this;
        }
        @CustomType.Setter
        public Builder numCpus(@Nullable Integer numCpus) {
            this.numCpus = numCpus;
            return this;
        }
        @CustomType.Setter
        public Builder replaceTrigger(@Nullable String replaceTrigger) {
            this.replaceTrigger = replaceTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder runToolsScriptsAfterPowerOn(@Nullable Boolean runToolsScriptsAfterPowerOn) {
            this.runToolsScriptsAfterPowerOn = runToolsScriptsAfterPowerOn;
            return this;
        }
        @CustomType.Setter
        public Builder runToolsScriptsAfterResume(@Nullable Boolean runToolsScriptsAfterResume) {
            this.runToolsScriptsAfterResume = runToolsScriptsAfterResume;
            return this;
        }
        @CustomType.Setter
        public Builder runToolsScriptsBeforeGuestReboot(@Nullable Boolean runToolsScriptsBeforeGuestReboot) {
            this.runToolsScriptsBeforeGuestReboot = runToolsScriptsBeforeGuestReboot;
            return this;
        }
        @CustomType.Setter
        public Builder runToolsScriptsBeforeGuestShutdown(@Nullable Boolean runToolsScriptsBeforeGuestShutdown) {
            this.runToolsScriptsBeforeGuestShutdown = runToolsScriptsBeforeGuestShutdown;
            return this;
        }
        @CustomType.Setter
        public Builder runToolsScriptsBeforeGuestStandby(@Nullable Boolean runToolsScriptsBeforeGuestStandby) {
            this.runToolsScriptsBeforeGuestStandby = runToolsScriptsBeforeGuestStandby;
            return this;
        }
        @CustomType.Setter
        public Builder sataControllerScanCount(@Nullable Integer sataControllerScanCount) {
            this.sataControllerScanCount = sataControllerScanCount;
            return this;
        }
        @CustomType.Setter
        public Builder scsiBusSharing(String scsiBusSharing) {
            this.scsiBusSharing = Objects.requireNonNull(scsiBusSharing);
            return this;
        }
        @CustomType.Setter
        public Builder scsiControllerScanCount(@Nullable Integer scsiControllerScanCount) {
            this.scsiControllerScanCount = scsiControllerScanCount;
            return this;
        }
        @CustomType.Setter
        public Builder scsiType(String scsiType) {
            this.scsiType = Objects.requireNonNull(scsiType);
            return this;
        }
        @CustomType.Setter
        public Builder storagePolicyId(String storagePolicyId) {
            this.storagePolicyId = Objects.requireNonNull(storagePolicyId);
            return this;
        }
        @CustomType.Setter
        public Builder swapPlacementPolicy(@Nullable String swapPlacementPolicy) {
            this.swapPlacementPolicy = swapPlacementPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder syncTimeWithHost(@Nullable Boolean syncTimeWithHost) {
            this.syncTimeWithHost = syncTimeWithHost;
            return this;
        }
        @CustomType.Setter
        public Builder syncTimeWithHostPeriodically(@Nullable Boolean syncTimeWithHostPeriodically) {
            this.syncTimeWithHostPeriodically = syncTimeWithHostPeriodically;
            return this;
        }
        @CustomType.Setter
        public Builder toolsUpgradePolicy(@Nullable String toolsUpgradePolicy) {
            this.toolsUpgradePolicy = toolsUpgradePolicy;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            this.uuid = Objects.requireNonNull(uuid);
            return this;
        }
        @CustomType.Setter
        public Builder vapp(@Nullable GetVirtualMachineVapp vapp) {
            this.vapp = vapp;
            return this;
        }
        @CustomType.Setter
        public Builder vappTransports(List<String> vappTransports) {
            this.vappTransports = Objects.requireNonNull(vappTransports);
            return this;
        }
        public Builder vappTransports(String... vappTransports) {
            return vappTransports(List.of(vappTransports));
        }
        @CustomType.Setter
        public Builder vbsEnabled(@Nullable Boolean vbsEnabled) {
            this.vbsEnabled = vbsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder vvtdEnabled(@Nullable Boolean vvtdEnabled) {
            this.vvtdEnabled = vvtdEnabled;
            return this;
        }
        public GetVirtualMachineResult build() {
            final var _resultValue = new GetVirtualMachineResult();
            _resultValue.alternateGuestName = alternateGuestName;
            _resultValue.annotation = annotation;
            _resultValue.bootDelay = bootDelay;
            _resultValue.bootRetryDelay = bootRetryDelay;
            _resultValue.bootRetryEnabled = bootRetryEnabled;
            _resultValue.changeVersion = changeVersion;
            _resultValue.cpuHotAddEnabled = cpuHotAddEnabled;
            _resultValue.cpuHotRemoveEnabled = cpuHotRemoveEnabled;
            _resultValue.cpuLimit = cpuLimit;
            _resultValue.cpuPerformanceCountersEnabled = cpuPerformanceCountersEnabled;
            _resultValue.cpuReservation = cpuReservation;
            _resultValue.cpuShareCount = cpuShareCount;
            _resultValue.cpuShareLevel = cpuShareLevel;
            _resultValue.datacenterId = datacenterId;
            _resultValue.defaultIpAddress = defaultIpAddress;
            _resultValue.disks = disks;
            _resultValue.efiSecureBootEnabled = efiSecureBootEnabled;
            _resultValue.enableDiskUuid = enableDiskUuid;
            _resultValue.enableLogging = enableLogging;
            _resultValue.eptRviMode = eptRviMode;
            _resultValue.extraConfig = extraConfig;
            _resultValue.extraConfigRebootRequired = extraConfigRebootRequired;
            _resultValue.firmware = firmware;
            _resultValue.guestId = guestId;
            _resultValue.guestIpAddresses = guestIpAddresses;
            _resultValue.hardwareVersion = hardwareVersion;
            _resultValue.hvMode = hvMode;
            _resultValue.id = id;
            _resultValue.ideControllerScanCount = ideControllerScanCount;
            _resultValue.latencySensitivity = latencySensitivity;
            _resultValue.memory = memory;
            _resultValue.memoryHotAddEnabled = memoryHotAddEnabled;
            _resultValue.memoryLimit = memoryLimit;
            _resultValue.memoryReservation = memoryReservation;
            _resultValue.memoryShareCount = memoryShareCount;
            _resultValue.memoryShareLevel = memoryShareLevel;
            _resultValue.moid = moid;
            _resultValue.name = name;
            _resultValue.nestedHvEnabled = nestedHvEnabled;
            _resultValue.networkInterfaceTypes = networkInterfaceTypes;
            _resultValue.networkInterfaces = networkInterfaces;
            _resultValue.numCoresPerSocket = numCoresPerSocket;
            _resultValue.numCpus = numCpus;
            _resultValue.replaceTrigger = replaceTrigger;
            _resultValue.runToolsScriptsAfterPowerOn = runToolsScriptsAfterPowerOn;
            _resultValue.runToolsScriptsAfterResume = runToolsScriptsAfterResume;
            _resultValue.runToolsScriptsBeforeGuestReboot = runToolsScriptsBeforeGuestReboot;
            _resultValue.runToolsScriptsBeforeGuestShutdown = runToolsScriptsBeforeGuestShutdown;
            _resultValue.runToolsScriptsBeforeGuestStandby = runToolsScriptsBeforeGuestStandby;
            _resultValue.sataControllerScanCount = sataControllerScanCount;
            _resultValue.scsiBusSharing = scsiBusSharing;
            _resultValue.scsiControllerScanCount = scsiControllerScanCount;
            _resultValue.scsiType = scsiType;
            _resultValue.storagePolicyId = storagePolicyId;
            _resultValue.swapPlacementPolicy = swapPlacementPolicy;
            _resultValue.syncTimeWithHost = syncTimeWithHost;
            _resultValue.syncTimeWithHostPeriodically = syncTimeWithHostPeriodically;
            _resultValue.toolsUpgradePolicy = toolsUpgradePolicy;
            _resultValue.uuid = uuid;
            _resultValue.vapp = vapp;
            _resultValue.vappTransports = vappTransports;
            _resultValue.vbsEnabled = vbsEnabled;
            _resultValue.vvtdEnabled = vvtdEnabled;
            return _resultValue;
        }
    }
}
