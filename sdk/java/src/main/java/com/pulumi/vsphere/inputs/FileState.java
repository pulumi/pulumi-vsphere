// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FileState extends com.pulumi.resources.ResourceArgs {

    public static final FileState Empty = new FileState();

    /**
     * Specifies whether to create the parent directories of the destination file if they do not exist.
     * 
     */
    @Import(name="createDirectories")
    private @Nullable Output<Boolean> createDirectories;

    /**
     * @return Specifies whether to create the parent directories of the destination file if they do not exist.
     * 
     */
    public Optional<Output<Boolean>> createDirectories() {
        return Optional.ofNullable(this.createDirectories);
    }

    /**
     * The name of a datacenter to which the file will be
     * uploaded.
     * 
     */
    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    /**
     * @return The name of a datacenter to which the file will be
     * uploaded.
     * 
     */
    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    /**
     * The name of the datastore to which to upload the
     * file.
     * 
     */
    @Import(name="datastore")
    private @Nullable Output<String> datastore;

    /**
     * @return The name of the datastore to which to upload the
     * file.
     * 
     */
    public Optional<Output<String>> datastore() {
        return Optional.ofNullable(this.datastore);
    }

    /**
     * The path to where the file should be uploaded
     * or copied to on the destination datastore.
     * 
     */
    @Import(name="destinationFile")
    private @Nullable Output<String> destinationFile;

    /**
     * @return The path to where the file should be uploaded
     * or copied to on the destination datastore.
     * 
     */
    public Optional<Output<String>> destinationFile() {
        return Optional.ofNullable(this.destinationFile);
    }

    /**
     * The name of a datacenter from which the file
     * will be copied. Forces a new resource if changed.
     * 
     */
    @Import(name="sourceDatacenter")
    private @Nullable Output<String> sourceDatacenter;

    /**
     * @return The name of a datacenter from which the file
     * will be copied. Forces a new resource if changed.
     * 
     */
    public Optional<Output<String>> sourceDatacenter() {
        return Optional.ofNullable(this.sourceDatacenter);
    }

    /**
     * The name of the datastore from which file will
     * be copied. Forces a new resource if changed.
     * 
     */
    @Import(name="sourceDatastore")
    private @Nullable Output<String> sourceDatastore;

    /**
     * @return The name of the datastore from which file will
     * be copied. Forces a new resource if changed.
     * 
     */
    public Optional<Output<String>> sourceDatastore() {
        return Optional.ofNullable(this.sourceDatastore);
    }

    /**
     * The path to the file being uploaded from or copied.
     * Forces a new resource if changed.
     * 
     */
    @Import(name="sourceFile")
    private @Nullable Output<String> sourceFile;

    /**
     * @return The path to the file being uploaded from or copied.
     * Forces a new resource if changed.
     * 
     */
    public Optional<Output<String>> sourceFile() {
        return Optional.ofNullable(this.sourceFile);
    }

    private FileState() {}

    private FileState(FileState $) {
        this.createDirectories = $.createDirectories;
        this.datacenter = $.datacenter;
        this.datastore = $.datastore;
        this.destinationFile = $.destinationFile;
        this.sourceDatacenter = $.sourceDatacenter;
        this.sourceDatastore = $.sourceDatastore;
        this.sourceFile = $.sourceFile;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileState $;

        public Builder() {
            $ = new FileState();
        }

        public Builder(FileState defaults) {
            $ = new FileState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createDirectories Specifies whether to create the parent directories of the destination file if they do not exist.
         * 
         * @return builder
         * 
         */
        public Builder createDirectories(@Nullable Output<Boolean> createDirectories) {
            $.createDirectories = createDirectories;
            return this;
        }

        /**
         * @param createDirectories Specifies whether to create the parent directories of the destination file if they do not exist.
         * 
         * @return builder
         * 
         */
        public Builder createDirectories(Boolean createDirectories) {
            return createDirectories(Output.of(createDirectories));
        }

        /**
         * @param datacenter The name of a datacenter to which the file will be
         * uploaded.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        /**
         * @param datacenter The name of a datacenter to which the file will be
         * uploaded.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        /**
         * @param datastore The name of the datastore to which to upload the
         * file.
         * 
         * @return builder
         * 
         */
        public Builder datastore(@Nullable Output<String> datastore) {
            $.datastore = datastore;
            return this;
        }

        /**
         * @param datastore The name of the datastore to which to upload the
         * file.
         * 
         * @return builder
         * 
         */
        public Builder datastore(String datastore) {
            return datastore(Output.of(datastore));
        }

        /**
         * @param destinationFile The path to where the file should be uploaded
         * or copied to on the destination datastore.
         * 
         * @return builder
         * 
         */
        public Builder destinationFile(@Nullable Output<String> destinationFile) {
            $.destinationFile = destinationFile;
            return this;
        }

        /**
         * @param destinationFile The path to where the file should be uploaded
         * or copied to on the destination datastore.
         * 
         * @return builder
         * 
         */
        public Builder destinationFile(String destinationFile) {
            return destinationFile(Output.of(destinationFile));
        }

        /**
         * @param sourceDatacenter The name of a datacenter from which the file
         * will be copied. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatacenter(@Nullable Output<String> sourceDatacenter) {
            $.sourceDatacenter = sourceDatacenter;
            return this;
        }

        /**
         * @param sourceDatacenter The name of a datacenter from which the file
         * will be copied. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatacenter(String sourceDatacenter) {
            return sourceDatacenter(Output.of(sourceDatacenter));
        }

        /**
         * @param sourceDatastore The name of the datastore from which file will
         * be copied. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatastore(@Nullable Output<String> sourceDatastore) {
            $.sourceDatastore = sourceDatastore;
            return this;
        }

        /**
         * @param sourceDatastore The name of the datastore from which file will
         * be copied. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatastore(String sourceDatastore) {
            return sourceDatastore(Output.of(sourceDatastore));
        }

        /**
         * @param sourceFile The path to the file being uploaded from or copied.
         * Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder sourceFile(@Nullable Output<String> sourceFile) {
            $.sourceFile = sourceFile;
            return this;
        }

        /**
         * @param sourceFile The path to the file being uploaded from or copied.
         * Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder sourceFile(String sourceFile) {
            return sourceFile(Output.of(sourceFile));
        }

        public FileState build() {
            return $;
        }
    }

}
