// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ComputeClusterVsanDiskGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final ComputeClusterVsanDiskGroupArgs Empty = new ComputeClusterVsanDiskGroupArgs();

    /**
     * The canonical name of the disk to use for vSAN cache.
     * 
     */
    @Import(name="cache")
    private @Nullable Output<String> cache;

    /**
     * @return The canonical name of the disk to use for vSAN cache.
     * 
     */
    public Optional<Output<String>> cache() {
        return Optional.ofNullable(this.cache);
    }

    /**
     * An array of disk canonical names for vSAN storage.
     * 
     * &gt; **NOTE:** You must disable vSphere HA before you enable vSAN on the cluster.
     * You can enable or re-enable vSphere HA after vSAN is configured.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vsphere.ComputeCluster;
     * import com.pulumi.vsphere.ComputeClusterArgs;
     * import com.pulumi.vsphere.inputs.ComputeClusterVsanDiskGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var computeCluster = new ComputeCluster(&#34;computeCluster&#34;, ComputeClusterArgs.builder()        
     *             .datacenterId(data.vsphere_datacenter().datacenter().id())
     *             .hostSystemIds(data.vsphere_host().host().stream().map(element -&gt; element.id()).collect(toList()))
     *             .drsEnabled(true)
     *             .drsAutomationLevel(&#34;fullyAutomated&#34;)
     *             .haEnabled(false)
     *             .vsanEnabled(true)
     *             .vsanDedupEnabled(true)
     *             .vsanCompressionEnabled(true)
     *             .vsanPerformanceEnabled(true)
     *             .vsanVerboseModeEnabled(true)
     *             .vsanNetworkDiagnosticModeEnabled(true)
     *             .vsanUnmapEnabled(true)
     *             .vsanDitEncryptionEnabled(true)
     *             .vsanDitRekeyInterval(1800)
     *             .vsanDiskGroups(ComputeClusterVsanDiskGroupArgs.builder()
     *                 .cache(data.vsphere_vmfs_disks().cache_disks()[0])
     *                 .storages(data.vsphere_vmfs_disks().storage_disks())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    @Import(name="storages")
    private @Nullable Output<List<String>> storages;

    /**
     * @return An array of disk canonical names for vSAN storage.
     * 
     * &gt; **NOTE:** You must disable vSphere HA before you enable vSAN on the cluster.
     * You can enable or re-enable vSphere HA after vSAN is configured.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vsphere.ComputeCluster;
     * import com.pulumi.vsphere.ComputeClusterArgs;
     * import com.pulumi.vsphere.inputs.ComputeClusterVsanDiskGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var computeCluster = new ComputeCluster(&#34;computeCluster&#34;, ComputeClusterArgs.builder()        
     *             .datacenterId(data.vsphere_datacenter().datacenter().id())
     *             .hostSystemIds(data.vsphere_host().host().stream().map(element -&gt; element.id()).collect(toList()))
     *             .drsEnabled(true)
     *             .drsAutomationLevel(&#34;fullyAutomated&#34;)
     *             .haEnabled(false)
     *             .vsanEnabled(true)
     *             .vsanDedupEnabled(true)
     *             .vsanCompressionEnabled(true)
     *             .vsanPerformanceEnabled(true)
     *             .vsanVerboseModeEnabled(true)
     *             .vsanNetworkDiagnosticModeEnabled(true)
     *             .vsanUnmapEnabled(true)
     *             .vsanDitEncryptionEnabled(true)
     *             .vsanDitRekeyInterval(1800)
     *             .vsanDiskGroups(ComputeClusterVsanDiskGroupArgs.builder()
     *                 .cache(data.vsphere_vmfs_disks().cache_disks()[0])
     *                 .storages(data.vsphere_vmfs_disks().storage_disks())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public Optional<Output<List<String>>> storages() {
        return Optional.ofNullable(this.storages);
    }

    private ComputeClusterVsanDiskGroupArgs() {}

    private ComputeClusterVsanDiskGroupArgs(ComputeClusterVsanDiskGroupArgs $) {
        this.cache = $.cache;
        this.storages = $.storages;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComputeClusterVsanDiskGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComputeClusterVsanDiskGroupArgs $;

        public Builder() {
            $ = new ComputeClusterVsanDiskGroupArgs();
        }

        public Builder(ComputeClusterVsanDiskGroupArgs defaults) {
            $ = new ComputeClusterVsanDiskGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cache The canonical name of the disk to use for vSAN cache.
         * 
         * @return builder
         * 
         */
        public Builder cache(@Nullable Output<String> cache) {
            $.cache = cache;
            return this;
        }

        /**
         * @param cache The canonical name of the disk to use for vSAN cache.
         * 
         * @return builder
         * 
         */
        public Builder cache(String cache) {
            return cache(Output.of(cache));
        }

        /**
         * @param storages An array of disk canonical names for vSAN storage.
         * 
         * &gt; **NOTE:** You must disable vSphere HA before you enable vSAN on the cluster.
         * You can enable or re-enable vSphere HA after vSAN is configured.
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import com.pulumi.vsphere.ComputeCluster;
         * import com.pulumi.vsphere.ComputeClusterArgs;
         * import com.pulumi.vsphere.inputs.ComputeClusterVsanDiskGroupArgs;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *         var computeCluster = new ComputeCluster(&#34;computeCluster&#34;, ComputeClusterArgs.builder()        
         *             .datacenterId(data.vsphere_datacenter().datacenter().id())
         *             .hostSystemIds(data.vsphere_host().host().stream().map(element -&gt; element.id()).collect(toList()))
         *             .drsEnabled(true)
         *             .drsAutomationLevel(&#34;fullyAutomated&#34;)
         *             .haEnabled(false)
         *             .vsanEnabled(true)
         *             .vsanDedupEnabled(true)
         *             .vsanCompressionEnabled(true)
         *             .vsanPerformanceEnabled(true)
         *             .vsanVerboseModeEnabled(true)
         *             .vsanNetworkDiagnosticModeEnabled(true)
         *             .vsanUnmapEnabled(true)
         *             .vsanDitEncryptionEnabled(true)
         *             .vsanDitRekeyInterval(1800)
         *             .vsanDiskGroups(ComputeClusterVsanDiskGroupArgs.builder()
         *                 .cache(data.vsphere_vmfs_disks().cache_disks()[0])
         *                 .storages(data.vsphere_vmfs_disks().storage_disks())
         *                 .build())
         *             .build());
         * 
         *     }
         * }
         * ```
         * 
         * @return builder
         * 
         */
        public Builder storages(@Nullable Output<List<String>> storages) {
            $.storages = storages;
            return this;
        }

        /**
         * @param storages An array of disk canonical names for vSAN storage.
         * 
         * &gt; **NOTE:** You must disable vSphere HA before you enable vSAN on the cluster.
         * You can enable or re-enable vSphere HA after vSAN is configured.
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import com.pulumi.vsphere.ComputeCluster;
         * import com.pulumi.vsphere.ComputeClusterArgs;
         * import com.pulumi.vsphere.inputs.ComputeClusterVsanDiskGroupArgs;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *         var computeCluster = new ComputeCluster(&#34;computeCluster&#34;, ComputeClusterArgs.builder()        
         *             .datacenterId(data.vsphere_datacenter().datacenter().id())
         *             .hostSystemIds(data.vsphere_host().host().stream().map(element -&gt; element.id()).collect(toList()))
         *             .drsEnabled(true)
         *             .drsAutomationLevel(&#34;fullyAutomated&#34;)
         *             .haEnabled(false)
         *             .vsanEnabled(true)
         *             .vsanDedupEnabled(true)
         *             .vsanCompressionEnabled(true)
         *             .vsanPerformanceEnabled(true)
         *             .vsanVerboseModeEnabled(true)
         *             .vsanNetworkDiagnosticModeEnabled(true)
         *             .vsanUnmapEnabled(true)
         *             .vsanDitEncryptionEnabled(true)
         *             .vsanDitRekeyInterval(1800)
         *             .vsanDiskGroups(ComputeClusterVsanDiskGroupArgs.builder()
         *                 .cache(data.vsphere_vmfs_disks().cache_disks()[0])
         *                 .storages(data.vsphere_vmfs_disks().storage_disks())
         *                 .build())
         *             .build());
         * 
         *     }
         * }
         * ```
         * 
         * @return builder
         * 
         */
        public Builder storages(List<String> storages) {
            return storages(Output.of(storages));
        }

        /**
         * @param storages An array of disk canonical names for vSAN storage.
         * 
         * &gt; **NOTE:** You must disable vSphere HA before you enable vSAN on the cluster.
         * You can enable or re-enable vSphere HA after vSAN is configured.
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import com.pulumi.vsphere.ComputeCluster;
         * import com.pulumi.vsphere.ComputeClusterArgs;
         * import com.pulumi.vsphere.inputs.ComputeClusterVsanDiskGroupArgs;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *         var computeCluster = new ComputeCluster(&#34;computeCluster&#34;, ComputeClusterArgs.builder()        
         *             .datacenterId(data.vsphere_datacenter().datacenter().id())
         *             .hostSystemIds(data.vsphere_host().host().stream().map(element -&gt; element.id()).collect(toList()))
         *             .drsEnabled(true)
         *             .drsAutomationLevel(&#34;fullyAutomated&#34;)
         *             .haEnabled(false)
         *             .vsanEnabled(true)
         *             .vsanDedupEnabled(true)
         *             .vsanCompressionEnabled(true)
         *             .vsanPerformanceEnabled(true)
         *             .vsanVerboseModeEnabled(true)
         *             .vsanNetworkDiagnosticModeEnabled(true)
         *             .vsanUnmapEnabled(true)
         *             .vsanDitEncryptionEnabled(true)
         *             .vsanDitRekeyInterval(1800)
         *             .vsanDiskGroups(ComputeClusterVsanDiskGroupArgs.builder()
         *                 .cache(data.vsphere_vmfs_disks().cache_disks()[0])
         *                 .storages(data.vsphere_vmfs_disks().storage_disks())
         *                 .build())
         *             .build());
         * 
         *     }
         * }
         * ```
         * 
         * @return builder
         * 
         */
        public Builder storages(String... storages) {
            return storages(List.of(storages));
        }

        public ComputeClusterVsanDiskGroupArgs build() {
            return $;
        }
    }

}
