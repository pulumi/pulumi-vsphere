// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.vsphere.inputs.GetNetworkFilterArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNetworkArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNetworkArgs Empty = new GetNetworkArgs();

    /**
     * The managed object reference ID
     * of the datacenter the network is located in. This can be omitted if the
     * search path used in `name` is an absolute path. For default datacenters,
     * use the `id` attribute from an empty `vsphere.Datacenter` data source.
     * 
     */
    @Import(name="datacenterId")
    private @Nullable Output<String> datacenterId;

    /**
     * @return The managed object reference ID
     * of the datacenter the network is located in. This can be omitted if the
     * search path used in `name` is an absolute path. For default datacenters,
     * use the `id` attribute from an empty `vsphere.Datacenter` data source.
     * 
     */
    public Optional<Output<String>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    /**
     * For distributed port group type
     * network objects, the ID of the distributed virtual switch for which the port
     * group belongs. It is useful to differentiate port groups with same name using
     * the distributed virtual switch ID.
     * 
     */
    @Import(name="distributedVirtualSwitchUuid")
    private @Nullable Output<String> distributedVirtualSwitchUuid;

    /**
     * @return For distributed port group type
     * network objects, the ID of the distributed virtual switch for which the port
     * group belongs. It is useful to differentiate port groups with same name using
     * the distributed virtual switch ID.
     * 
     */
    public Optional<Output<String>> distributedVirtualSwitchUuid() {
        return Optional.ofNullable(this.distributedVirtualSwitchUuid);
    }

    /**
     * Apply a filter for the discovered network.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<GetNetworkFilterArgs>> filters;

    /**
     * @return Apply a filter for the discovered network.
     * 
     */
    public Optional<Output<List<GetNetworkFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The name of the network. This can be a name or path.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the network. This can be a name or path.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The interval in milliseconds to retry the read operation if `retryTimeout` is set. Default: 500.
     * 
     */
    @Import(name="retryInterval")
    private @Nullable Output<Integer> retryInterval;

    /**
     * @return The interval in milliseconds to retry the read operation if `retryTimeout` is set. Default: 500.
     * 
     */
    public Optional<Output<Integer>> retryInterval() {
        return Optional.ofNullable(this.retryInterval);
    }

    /**
     * The timeout duration in seconds for the data source to retry read operations.
     * 
     */
    @Import(name="retryTimeout")
    private @Nullable Output<Integer> retryTimeout;

    /**
     * @return The timeout duration in seconds for the data source to retry read operations.
     * 
     */
    public Optional<Output<Integer>> retryTimeout() {
        return Optional.ofNullable(this.retryTimeout);
    }

    /**
     * Select a VPC scope for retrieval of VPC subnets.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return Select a VPC scope for retrieval of VPC subnets.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private GetNetworkArgs() {}

    private GetNetworkArgs(GetNetworkArgs $) {
        this.datacenterId = $.datacenterId;
        this.distributedVirtualSwitchUuid = $.distributedVirtualSwitchUuid;
        this.filters = $.filters;
        this.name = $.name;
        this.retryInterval = $.retryInterval;
        this.retryTimeout = $.retryTimeout;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNetworkArgs $;

        public Builder() {
            $ = new GetNetworkArgs();
        }

        public Builder(GetNetworkArgs defaults) {
            $ = new GetNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId The managed object reference ID
         * of the datacenter the network is located in. This can be omitted if the
         * search path used in `name` is an absolute path. For default datacenters,
         * use the `id` attribute from an empty `vsphere.Datacenter` data source.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(@Nullable Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId The managed object reference ID
         * of the datacenter the network is located in. This can be omitted if the
         * search path used in `name` is an absolute path. For default datacenters,
         * use the `id` attribute from an empty `vsphere.Datacenter` data source.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param distributedVirtualSwitchUuid For distributed port group type
         * network objects, the ID of the distributed virtual switch for which the port
         * group belongs. It is useful to differentiate port groups with same name using
         * the distributed virtual switch ID.
         * 
         * @return builder
         * 
         */
        public Builder distributedVirtualSwitchUuid(@Nullable Output<String> distributedVirtualSwitchUuid) {
            $.distributedVirtualSwitchUuid = distributedVirtualSwitchUuid;
            return this;
        }

        /**
         * @param distributedVirtualSwitchUuid For distributed port group type
         * network objects, the ID of the distributed virtual switch for which the port
         * group belongs. It is useful to differentiate port groups with same name using
         * the distributed virtual switch ID.
         * 
         * @return builder
         * 
         */
        public Builder distributedVirtualSwitchUuid(String distributedVirtualSwitchUuid) {
            return distributedVirtualSwitchUuid(Output.of(distributedVirtualSwitchUuid));
        }

        /**
         * @param filters Apply a filter for the discovered network.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<GetNetworkFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Apply a filter for the discovered network.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<GetNetworkFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters Apply a filter for the discovered network.
         * 
         * @return builder
         * 
         */
        public Builder filters(GetNetworkFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name The name of the network. This can be a name or path.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the network. This can be a name or path.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param retryInterval The interval in milliseconds to retry the read operation if `retryTimeout` is set. Default: 500.
         * 
         * @return builder
         * 
         */
        public Builder retryInterval(@Nullable Output<Integer> retryInterval) {
            $.retryInterval = retryInterval;
            return this;
        }

        /**
         * @param retryInterval The interval in milliseconds to retry the read operation if `retryTimeout` is set. Default: 500.
         * 
         * @return builder
         * 
         */
        public Builder retryInterval(Integer retryInterval) {
            return retryInterval(Output.of(retryInterval));
        }

        /**
         * @param retryTimeout The timeout duration in seconds for the data source to retry read operations.
         * 
         * @return builder
         * 
         */
        public Builder retryTimeout(@Nullable Output<Integer> retryTimeout) {
            $.retryTimeout = retryTimeout;
            return this;
        }

        /**
         * @param retryTimeout The timeout duration in seconds for the data source to retry read operations.
         * 
         * @return builder
         * 
         */
        public Builder retryTimeout(Integer retryTimeout) {
            return retryTimeout(Output.of(retryTimeout));
        }

        /**
         * @param vpcId Select a VPC scope for retrieval of VPC subnets.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId Select a VPC scope for retrieval of VPC subnets.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public GetNetworkArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetNetworkArgs", "name");
            }
            return $;
        }
    }

}
