// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.vsphere.inputs.SupervisorEgressCidrArgs;
import com.pulumi.vsphere.inputs.SupervisorIngressCidrArgs;
import com.pulumi.vsphere.inputs.SupervisorManagementNetworkArgs;
import com.pulumi.vsphere.inputs.SupervisorNamespaceArgs;
import com.pulumi.vsphere.inputs.SupervisorPodCidrArgs;
import com.pulumi.vsphere.inputs.SupervisorServiceCidrArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SupervisorArgs extends com.pulumi.resources.ResourceArgs {

    public static final SupervisorArgs Empty = new SupervisorArgs();

    /**
     * The identifier of the compute cluster.
     * 
     */
    @Import(name="cluster", required=true)
    private Output<String> cluster;

    /**
     * @return The identifier of the compute cluster.
     * 
     */
    public Output<String> cluster() {
        return this.cluster;
    }

    /**
     * The identifier of the subscribed content library.
     * 
     */
    @Import(name="contentLibrary", required=true)
    private Output<String> contentLibrary;

    /**
     * @return The identifier of the subscribed content library.
     * 
     */
    public Output<String> contentLibrary() {
        return this.contentLibrary;
    }

    /**
     * The UUID of the distributed switch.
     * 
     */
    @Import(name="dvsUuid", required=true)
    private Output<String> dvsUuid;

    /**
     * @return The UUID of the distributed switch.
     * 
     */
    public Output<String> dvsUuid() {
        return this.dvsUuid;
    }

    /**
     * The identifier of the NSX Edge Cluster.
     * 
     */
    @Import(name="edgeCluster", required=true)
    private Output<String> edgeCluster;

    /**
     * @return The identifier of the NSX Edge Cluster.
     * 
     */
    public Output<String> edgeCluster() {
        return this.edgeCluster;
    }

    /**
     * CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.
     * 
     */
    @Import(name="egressCidrs", required=true)
    private Output<List<SupervisorEgressCidrArgs>> egressCidrs;

    /**
     * @return CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.
     * 
     */
    public Output<List<SupervisorEgressCidrArgs>> egressCidrs() {
        return this.egressCidrs;
    }

    /**
     * CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.
     * 
     */
    @Import(name="ingressCidrs", required=true)
    private Output<List<SupervisorIngressCidrArgs>> ingressCidrs;

    /**
     * @return CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.
     * 
     */
    public Output<List<SupervisorIngressCidrArgs>> ingressCidrs() {
        return this.ingressCidrs;
    }

    /**
     * The list of addresses of the primary DNS servers.
     * 
     */
    @Import(name="mainDns", required=true)
    private Output<List<String>> mainDns;

    /**
     * @return The list of addresses of the primary DNS servers.
     * 
     */
    public Output<List<String>> mainDns() {
        return this.mainDns;
    }

    /**
     * The list of addresses of the primary NTP servers.
     * 
     */
    @Import(name="mainNtps", required=true)
    private Output<List<String>> mainNtps;

    /**
     * @return The list of addresses of the primary NTP servers.
     * 
     */
    public Output<List<String>> mainNtps() {
        return this.mainNtps;
    }

    /**
     * The configuration for the management network which the control plane VMs will be connected to.
     * * * `network` - ID of the network. (e.g. a distributed port group).
     * * * `starting_address` - Starting address of the management network range.
     * * * `subnet_mask` - Subnet mask.
     * * * `gateway` - Gateway IP address.
     * * * `address_count` - Number of addresses to allocate. Starts from `starting_address`
     * 
     */
    @Import(name="managementNetwork", required=true)
    private Output<SupervisorManagementNetworkArgs> managementNetwork;

    /**
     * @return The configuration for the management network which the control plane VMs will be connected to.
     * * * `network` - ID of the network. (e.g. a distributed port group).
     * * * `starting_address` - Starting address of the management network range.
     * * * `subnet_mask` - Subnet mask.
     * * * `gateway` - Gateway IP address.
     * * * `address_count` - Number of addresses to allocate. Starts from `starting_address`
     * 
     */
    public Output<SupervisorManagementNetworkArgs> managementNetwork() {
        return this.managementNetwork;
    }

    /**
     * The list of namespaces to create in the Supervisor cluster
     * 
     */
    @Import(name="namespaces")
    private @Nullable Output<List<SupervisorNamespaceArgs>> namespaces;

    /**
     * @return The list of namespaces to create in the Supervisor cluster
     * 
     */
    public Optional<Output<List<SupervisorNamespaceArgs>>> namespaces() {
        return Optional.ofNullable(this.namespaces);
    }

    /**
     * CIDR blocks from which Kubernetes allocates pod IP addresses. Minimum subnet size is 23.
     * 
     */
    @Import(name="podCidrs", required=true)
    private Output<List<SupervisorPodCidrArgs>> podCidrs;

    /**
     * @return CIDR blocks from which Kubernetes allocates pod IP addresses. Minimum subnet size is 23.
     * 
     */
    public Output<List<SupervisorPodCidrArgs>> podCidrs() {
        return this.podCidrs;
    }

    /**
     * List of DNS search domains.
     * 
     */
    @Import(name="searchDomains", required=true)
    private Output<String> searchDomains;

    /**
     * @return List of DNS search domains.
     * 
     */
    public Output<String> searchDomains() {
        return this.searchDomains;
    }

    /**
     * CIDR block from which Kubernetes allocates service cluster IP addresses.
     * 
     */
    @Import(name="serviceCidr", required=true)
    private Output<SupervisorServiceCidrArgs> serviceCidr;

    /**
     * @return CIDR block from which Kubernetes allocates service cluster IP addresses.
     * 
     */
    public Output<SupervisorServiceCidrArgs> serviceCidr() {
        return this.serviceCidr;
    }

    /**
     * The size of the Kubernetes API server.
     * 
     */
    @Import(name="sizingHint", required=true)
    private Output<String> sizingHint;

    /**
     * @return The size of the Kubernetes API server.
     * 
     */
    public Output<String> sizingHint() {
        return this.sizingHint;
    }

    /**
     * The name of the storage policy.
     * 
     */
    @Import(name="storagePolicy", required=true)
    private Output<String> storagePolicy;

    /**
     * @return The name of the storage policy.
     * 
     */
    public Output<String> storagePolicy() {
        return this.storagePolicy;
    }

    /**
     * The list of addresses of the DNS servers to use for the worker nodes.
     * 
     */
    @Import(name="workerDns", required=true)
    private Output<List<String>> workerDns;

    /**
     * @return The list of addresses of the DNS servers to use for the worker nodes.
     * 
     */
    public Output<List<String>> workerDns() {
        return this.workerDns;
    }

    /**
     * The list of addresses of the NTP servers to use for the worker nodes.
     * 
     */
    @Import(name="workerNtps", required=true)
    private Output<List<String>> workerNtps;

    /**
     * @return The list of addresses of the NTP servers to use for the worker nodes.
     * 
     */
    public Output<List<String>> workerNtps() {
        return this.workerNtps;
    }

    private SupervisorArgs() {}

    private SupervisorArgs(SupervisorArgs $) {
        this.cluster = $.cluster;
        this.contentLibrary = $.contentLibrary;
        this.dvsUuid = $.dvsUuid;
        this.edgeCluster = $.edgeCluster;
        this.egressCidrs = $.egressCidrs;
        this.ingressCidrs = $.ingressCidrs;
        this.mainDns = $.mainDns;
        this.mainNtps = $.mainNtps;
        this.managementNetwork = $.managementNetwork;
        this.namespaces = $.namespaces;
        this.podCidrs = $.podCidrs;
        this.searchDomains = $.searchDomains;
        this.serviceCidr = $.serviceCidr;
        this.sizingHint = $.sizingHint;
        this.storagePolicy = $.storagePolicy;
        this.workerDns = $.workerDns;
        this.workerNtps = $.workerNtps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SupervisorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SupervisorArgs $;

        public Builder() {
            $ = new SupervisorArgs();
        }

        public Builder(SupervisorArgs defaults) {
            $ = new SupervisorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cluster The identifier of the compute cluster.
         * 
         * @return builder
         * 
         */
        public Builder cluster(Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster The identifier of the compute cluster.
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param contentLibrary The identifier of the subscribed content library.
         * 
         * @return builder
         * 
         */
        public Builder contentLibrary(Output<String> contentLibrary) {
            $.contentLibrary = contentLibrary;
            return this;
        }

        /**
         * @param contentLibrary The identifier of the subscribed content library.
         * 
         * @return builder
         * 
         */
        public Builder contentLibrary(String contentLibrary) {
            return contentLibrary(Output.of(contentLibrary));
        }

        /**
         * @param dvsUuid The UUID of the distributed switch.
         * 
         * @return builder
         * 
         */
        public Builder dvsUuid(Output<String> dvsUuid) {
            $.dvsUuid = dvsUuid;
            return this;
        }

        /**
         * @param dvsUuid The UUID of the distributed switch.
         * 
         * @return builder
         * 
         */
        public Builder dvsUuid(String dvsUuid) {
            return dvsUuid(Output.of(dvsUuid));
        }

        /**
         * @param edgeCluster The identifier of the NSX Edge Cluster.
         * 
         * @return builder
         * 
         */
        public Builder edgeCluster(Output<String> edgeCluster) {
            $.edgeCluster = edgeCluster;
            return this;
        }

        /**
         * @param edgeCluster The identifier of the NSX Edge Cluster.
         * 
         * @return builder
         * 
         */
        public Builder edgeCluster(String edgeCluster) {
            return edgeCluster(Output.of(edgeCluster));
        }

        /**
         * @param egressCidrs CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.
         * 
         * @return builder
         * 
         */
        public Builder egressCidrs(Output<List<SupervisorEgressCidrArgs>> egressCidrs) {
            $.egressCidrs = egressCidrs;
            return this;
        }

        /**
         * @param egressCidrs CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.
         * 
         * @return builder
         * 
         */
        public Builder egressCidrs(List<SupervisorEgressCidrArgs> egressCidrs) {
            return egressCidrs(Output.of(egressCidrs));
        }

        /**
         * @param egressCidrs CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.
         * 
         * @return builder
         * 
         */
        public Builder egressCidrs(SupervisorEgressCidrArgs... egressCidrs) {
            return egressCidrs(List.of(egressCidrs));
        }

        /**
         * @param ingressCidrs CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.
         * 
         * @return builder
         * 
         */
        public Builder ingressCidrs(Output<List<SupervisorIngressCidrArgs>> ingressCidrs) {
            $.ingressCidrs = ingressCidrs;
            return this;
        }

        /**
         * @param ingressCidrs CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.
         * 
         * @return builder
         * 
         */
        public Builder ingressCidrs(List<SupervisorIngressCidrArgs> ingressCidrs) {
            return ingressCidrs(Output.of(ingressCidrs));
        }

        /**
         * @param ingressCidrs CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.
         * 
         * @return builder
         * 
         */
        public Builder ingressCidrs(SupervisorIngressCidrArgs... ingressCidrs) {
            return ingressCidrs(List.of(ingressCidrs));
        }

        /**
         * @param mainDns The list of addresses of the primary DNS servers.
         * 
         * @return builder
         * 
         */
        public Builder mainDns(Output<List<String>> mainDns) {
            $.mainDns = mainDns;
            return this;
        }

        /**
         * @param mainDns The list of addresses of the primary DNS servers.
         * 
         * @return builder
         * 
         */
        public Builder mainDns(List<String> mainDns) {
            return mainDns(Output.of(mainDns));
        }

        /**
         * @param mainDns The list of addresses of the primary DNS servers.
         * 
         * @return builder
         * 
         */
        public Builder mainDns(String... mainDns) {
            return mainDns(List.of(mainDns));
        }

        /**
         * @param mainNtps The list of addresses of the primary NTP servers.
         * 
         * @return builder
         * 
         */
        public Builder mainNtps(Output<List<String>> mainNtps) {
            $.mainNtps = mainNtps;
            return this;
        }

        /**
         * @param mainNtps The list of addresses of the primary NTP servers.
         * 
         * @return builder
         * 
         */
        public Builder mainNtps(List<String> mainNtps) {
            return mainNtps(Output.of(mainNtps));
        }

        /**
         * @param mainNtps The list of addresses of the primary NTP servers.
         * 
         * @return builder
         * 
         */
        public Builder mainNtps(String... mainNtps) {
            return mainNtps(List.of(mainNtps));
        }

        /**
         * @param managementNetwork The configuration for the management network which the control plane VMs will be connected to.
         * * * `network` - ID of the network. (e.g. a distributed port group).
         * * * `starting_address` - Starting address of the management network range.
         * * * `subnet_mask` - Subnet mask.
         * * * `gateway` - Gateway IP address.
         * * * `address_count` - Number of addresses to allocate. Starts from `starting_address`
         * 
         * @return builder
         * 
         */
        public Builder managementNetwork(Output<SupervisorManagementNetworkArgs> managementNetwork) {
            $.managementNetwork = managementNetwork;
            return this;
        }

        /**
         * @param managementNetwork The configuration for the management network which the control plane VMs will be connected to.
         * * * `network` - ID of the network. (e.g. a distributed port group).
         * * * `starting_address` - Starting address of the management network range.
         * * * `subnet_mask` - Subnet mask.
         * * * `gateway` - Gateway IP address.
         * * * `address_count` - Number of addresses to allocate. Starts from `starting_address`
         * 
         * @return builder
         * 
         */
        public Builder managementNetwork(SupervisorManagementNetworkArgs managementNetwork) {
            return managementNetwork(Output.of(managementNetwork));
        }

        /**
         * @param namespaces The list of namespaces to create in the Supervisor cluster
         * 
         * @return builder
         * 
         */
        public Builder namespaces(@Nullable Output<List<SupervisorNamespaceArgs>> namespaces) {
            $.namespaces = namespaces;
            return this;
        }

        /**
         * @param namespaces The list of namespaces to create in the Supervisor cluster
         * 
         * @return builder
         * 
         */
        public Builder namespaces(List<SupervisorNamespaceArgs> namespaces) {
            return namespaces(Output.of(namespaces));
        }

        /**
         * @param namespaces The list of namespaces to create in the Supervisor cluster
         * 
         * @return builder
         * 
         */
        public Builder namespaces(SupervisorNamespaceArgs... namespaces) {
            return namespaces(List.of(namespaces));
        }

        /**
         * @param podCidrs CIDR blocks from which Kubernetes allocates pod IP addresses. Minimum subnet size is 23.
         * 
         * @return builder
         * 
         */
        public Builder podCidrs(Output<List<SupervisorPodCidrArgs>> podCidrs) {
            $.podCidrs = podCidrs;
            return this;
        }

        /**
         * @param podCidrs CIDR blocks from which Kubernetes allocates pod IP addresses. Minimum subnet size is 23.
         * 
         * @return builder
         * 
         */
        public Builder podCidrs(List<SupervisorPodCidrArgs> podCidrs) {
            return podCidrs(Output.of(podCidrs));
        }

        /**
         * @param podCidrs CIDR blocks from which Kubernetes allocates pod IP addresses. Minimum subnet size is 23.
         * 
         * @return builder
         * 
         */
        public Builder podCidrs(SupervisorPodCidrArgs... podCidrs) {
            return podCidrs(List.of(podCidrs));
        }

        /**
         * @param searchDomains List of DNS search domains.
         * 
         * @return builder
         * 
         */
        public Builder searchDomains(Output<String> searchDomains) {
            $.searchDomains = searchDomains;
            return this;
        }

        /**
         * @param searchDomains List of DNS search domains.
         * 
         * @return builder
         * 
         */
        public Builder searchDomains(String searchDomains) {
            return searchDomains(Output.of(searchDomains));
        }

        /**
         * @param serviceCidr CIDR block from which Kubernetes allocates service cluster IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder serviceCidr(Output<SupervisorServiceCidrArgs> serviceCidr) {
            $.serviceCidr = serviceCidr;
            return this;
        }

        /**
         * @param serviceCidr CIDR block from which Kubernetes allocates service cluster IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder serviceCidr(SupervisorServiceCidrArgs serviceCidr) {
            return serviceCidr(Output.of(serviceCidr));
        }

        /**
         * @param sizingHint The size of the Kubernetes API server.
         * 
         * @return builder
         * 
         */
        public Builder sizingHint(Output<String> sizingHint) {
            $.sizingHint = sizingHint;
            return this;
        }

        /**
         * @param sizingHint The size of the Kubernetes API server.
         * 
         * @return builder
         * 
         */
        public Builder sizingHint(String sizingHint) {
            return sizingHint(Output.of(sizingHint));
        }

        /**
         * @param storagePolicy The name of the storage policy.
         * 
         * @return builder
         * 
         */
        public Builder storagePolicy(Output<String> storagePolicy) {
            $.storagePolicy = storagePolicy;
            return this;
        }

        /**
         * @param storagePolicy The name of the storage policy.
         * 
         * @return builder
         * 
         */
        public Builder storagePolicy(String storagePolicy) {
            return storagePolicy(Output.of(storagePolicy));
        }

        /**
         * @param workerDns The list of addresses of the DNS servers to use for the worker nodes.
         * 
         * @return builder
         * 
         */
        public Builder workerDns(Output<List<String>> workerDns) {
            $.workerDns = workerDns;
            return this;
        }

        /**
         * @param workerDns The list of addresses of the DNS servers to use for the worker nodes.
         * 
         * @return builder
         * 
         */
        public Builder workerDns(List<String> workerDns) {
            return workerDns(Output.of(workerDns));
        }

        /**
         * @param workerDns The list of addresses of the DNS servers to use for the worker nodes.
         * 
         * @return builder
         * 
         */
        public Builder workerDns(String... workerDns) {
            return workerDns(List.of(workerDns));
        }

        /**
         * @param workerNtps The list of addresses of the NTP servers to use for the worker nodes.
         * 
         * @return builder
         * 
         */
        public Builder workerNtps(Output<List<String>> workerNtps) {
            $.workerNtps = workerNtps;
            return this;
        }

        /**
         * @param workerNtps The list of addresses of the NTP servers to use for the worker nodes.
         * 
         * @return builder
         * 
         */
        public Builder workerNtps(List<String> workerNtps) {
            return workerNtps(Output.of(workerNtps));
        }

        /**
         * @param workerNtps The list of addresses of the NTP servers to use for the worker nodes.
         * 
         * @return builder
         * 
         */
        public Builder workerNtps(String... workerNtps) {
            return workerNtps(List.of(workerNtps));
        }

        public SupervisorArgs build() {
            if ($.cluster == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "cluster");
            }
            if ($.contentLibrary == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "contentLibrary");
            }
            if ($.dvsUuid == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "dvsUuid");
            }
            if ($.edgeCluster == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "edgeCluster");
            }
            if ($.egressCidrs == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "egressCidrs");
            }
            if ($.ingressCidrs == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "ingressCidrs");
            }
            if ($.mainDns == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "mainDns");
            }
            if ($.mainNtps == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "mainNtps");
            }
            if ($.managementNetwork == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "managementNetwork");
            }
            if ($.podCidrs == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "podCidrs");
            }
            if ($.searchDomains == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "searchDomains");
            }
            if ($.serviceCidr == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "serviceCidr");
            }
            if ($.sizingHint == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "sizingHint");
            }
            if ($.storagePolicy == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "storagePolicy");
            }
            if ($.workerDns == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "workerDns");
            }
            if ($.workerNtps == null) {
                throw new MissingRequiredPropertyException("SupervisorArgs", "workerNtps");
            }
            return $;
        }
    }

}
