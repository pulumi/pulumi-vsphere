// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualMachineDisk {
    /**
     * @return If this is true, the disk is attached instead of created. Implies keep_on_remove.
     * 
     */
    private @Nullable Boolean attach;
    /**
     * @return The type of controller the disk should be connected to. Must be &#39;scsi&#39;, &#39;sata&#39;, &#39;nvme&#39;, or &#39;ide&#39;.
     * 
     */
    private @Nullable String controllerType;
    /**
     * @return The datastore ID for this virtual disk, if different than the virtual machine.
     * 
     */
    private @Nullable String datastoreId;
    /**
     * @return The internally-computed address of this device, such as scsi:0:1, denoting scsi bus #0 and device unit 1.
     * 
     */
    private @Nullable String deviceAddress;
    /**
     * @return The mode of this this virtual disk for purposes of writes and snapshotting. Can be one of append, independent_nonpersistent, independent_persistent, nonpersistent, persistent, or undoable.
     * 
     */
    private @Nullable String diskMode;
    /**
     * @return The sharing mode of this virtual disk. Can be one of sharingMultiWriter or sharingNone.
     * 
     */
    private @Nullable String diskSharing;
    /**
     * @return The virtual disk file zeroing policy when thinProvision is not true. The default is false, which lazily-zeros the disk, speeding up thick-provisioned disk creation time.
     * 
     */
    private @Nullable Boolean eagerlyScrub;
    /**
     * @return The upper limit of IOPS that this disk can use.
     * 
     */
    private @Nullable Integer ioLimit;
    /**
     * @return The I/O guarantee that this disk has, in IOPS.
     * 
     */
    private @Nullable Integer ioReservation;
    /**
     * @return The share count for this disk when the share level is custom.
     * 
     */
    private @Nullable Integer ioShareCount;
    /**
     * @return The share allocation level for this disk. Can be one of low, normal, high, or custom.
     * 
     */
    private @Nullable String ioShareLevel;
    /**
     * @return Set to true to keep the underlying VMDK file when removing this virtual disk from configuration.
     * 
     */
    private @Nullable Boolean keepOnRemove;
    /**
     * @return The ID of the device within the virtual machine.
     * 
     */
    private @Nullable Integer key;
    /**
     * @return A unique label for this disk.
     * 
     */
    private String label;
    /**
     * @return The full path of the virtual disk. This can only be provided if attach is set to true, otherwise it is a read-only value.
     * 
     */
    private @Nullable String path;
    /**
     * @return The size of the disk, in GB.
     * 
     */
    private @Nullable Integer size;
    /**
     * @return The ID of the storage policy to assign to the virtual disk in VM.
     * 
     */
    private @Nullable String storagePolicyId;
    /**
     * @return If true, this disk is thin provisioned, with space for the file being allocated on an as-needed basis.
     * 
     */
    private @Nullable Boolean thinProvisioned;
    /**
     * @return The unique device number for this disk. This number determines where on the SCSI bus this device will be attached.
     * 
     */
    private @Nullable Integer unitNumber;
    /**
     * @return The UUID of the virtual machine. Also exposed as the `id` of the resource.
     * 
     */
    private @Nullable String uuid;
    /**
     * @return If true, writes for this disk are sent directly to the filesystem immediately instead of being buffered.
     * 
     */
    private @Nullable Boolean writeThrough;

    private VirtualMachineDisk() {}
    /**
     * @return If this is true, the disk is attached instead of created. Implies keep_on_remove.
     * 
     */
    public Optional<Boolean> attach() {
        return Optional.ofNullable(this.attach);
    }
    /**
     * @return The type of controller the disk should be connected to. Must be &#39;scsi&#39;, &#39;sata&#39;, &#39;nvme&#39;, or &#39;ide&#39;.
     * 
     */
    public Optional<String> controllerType() {
        return Optional.ofNullable(this.controllerType);
    }
    /**
     * @return The datastore ID for this virtual disk, if different than the virtual machine.
     * 
     */
    public Optional<String> datastoreId() {
        return Optional.ofNullable(this.datastoreId);
    }
    /**
     * @return The internally-computed address of this device, such as scsi:0:1, denoting scsi bus #0 and device unit 1.
     * 
     */
    public Optional<String> deviceAddress() {
        return Optional.ofNullable(this.deviceAddress);
    }
    /**
     * @return The mode of this this virtual disk for purposes of writes and snapshotting. Can be one of append, independent_nonpersistent, independent_persistent, nonpersistent, persistent, or undoable.
     * 
     */
    public Optional<String> diskMode() {
        return Optional.ofNullable(this.diskMode);
    }
    /**
     * @return The sharing mode of this virtual disk. Can be one of sharingMultiWriter or sharingNone.
     * 
     */
    public Optional<String> diskSharing() {
        return Optional.ofNullable(this.diskSharing);
    }
    /**
     * @return The virtual disk file zeroing policy when thinProvision is not true. The default is false, which lazily-zeros the disk, speeding up thick-provisioned disk creation time.
     * 
     */
    public Optional<Boolean> eagerlyScrub() {
        return Optional.ofNullable(this.eagerlyScrub);
    }
    /**
     * @return The upper limit of IOPS that this disk can use.
     * 
     */
    public Optional<Integer> ioLimit() {
        return Optional.ofNullable(this.ioLimit);
    }
    /**
     * @return The I/O guarantee that this disk has, in IOPS.
     * 
     */
    public Optional<Integer> ioReservation() {
        return Optional.ofNullable(this.ioReservation);
    }
    /**
     * @return The share count for this disk when the share level is custom.
     * 
     */
    public Optional<Integer> ioShareCount() {
        return Optional.ofNullable(this.ioShareCount);
    }
    /**
     * @return The share allocation level for this disk. Can be one of low, normal, high, or custom.
     * 
     */
    public Optional<String> ioShareLevel() {
        return Optional.ofNullable(this.ioShareLevel);
    }
    /**
     * @return Set to true to keep the underlying VMDK file when removing this virtual disk from configuration.
     * 
     */
    public Optional<Boolean> keepOnRemove() {
        return Optional.ofNullable(this.keepOnRemove);
    }
    /**
     * @return The ID of the device within the virtual machine.
     * 
     */
    public Optional<Integer> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return A unique label for this disk.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return The full path of the virtual disk. This can only be provided if attach is set to true, otherwise it is a read-only value.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return The size of the disk, in GB.
     * 
     */
    public Optional<Integer> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return The ID of the storage policy to assign to the virtual disk in VM.
     * 
     */
    public Optional<String> storagePolicyId() {
        return Optional.ofNullable(this.storagePolicyId);
    }
    /**
     * @return If true, this disk is thin provisioned, with space for the file being allocated on an as-needed basis.
     * 
     */
    public Optional<Boolean> thinProvisioned() {
        return Optional.ofNullable(this.thinProvisioned);
    }
    /**
     * @return The unique device number for this disk. This number determines where on the SCSI bus this device will be attached.
     * 
     */
    public Optional<Integer> unitNumber() {
        return Optional.ofNullable(this.unitNumber);
    }
    /**
     * @return The UUID of the virtual machine. Also exposed as the `id` of the resource.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }
    /**
     * @return If true, writes for this disk are sent directly to the filesystem immediately instead of being buffered.
     * 
     */
    public Optional<Boolean> writeThrough() {
        return Optional.ofNullable(this.writeThrough);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean attach;
        private @Nullable String controllerType;
        private @Nullable String datastoreId;
        private @Nullable String deviceAddress;
        private @Nullable String diskMode;
        private @Nullable String diskSharing;
        private @Nullable Boolean eagerlyScrub;
        private @Nullable Integer ioLimit;
        private @Nullable Integer ioReservation;
        private @Nullable Integer ioShareCount;
        private @Nullable String ioShareLevel;
        private @Nullable Boolean keepOnRemove;
        private @Nullable Integer key;
        private String label;
        private @Nullable String path;
        private @Nullable Integer size;
        private @Nullable String storagePolicyId;
        private @Nullable Boolean thinProvisioned;
        private @Nullable Integer unitNumber;
        private @Nullable String uuid;
        private @Nullable Boolean writeThrough;
        public Builder() {}
        public Builder(VirtualMachineDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attach = defaults.attach;
    	      this.controllerType = defaults.controllerType;
    	      this.datastoreId = defaults.datastoreId;
    	      this.deviceAddress = defaults.deviceAddress;
    	      this.diskMode = defaults.diskMode;
    	      this.diskSharing = defaults.diskSharing;
    	      this.eagerlyScrub = defaults.eagerlyScrub;
    	      this.ioLimit = defaults.ioLimit;
    	      this.ioReservation = defaults.ioReservation;
    	      this.ioShareCount = defaults.ioShareCount;
    	      this.ioShareLevel = defaults.ioShareLevel;
    	      this.keepOnRemove = defaults.keepOnRemove;
    	      this.key = defaults.key;
    	      this.label = defaults.label;
    	      this.path = defaults.path;
    	      this.size = defaults.size;
    	      this.storagePolicyId = defaults.storagePolicyId;
    	      this.thinProvisioned = defaults.thinProvisioned;
    	      this.unitNumber = defaults.unitNumber;
    	      this.uuid = defaults.uuid;
    	      this.writeThrough = defaults.writeThrough;
        }

        @CustomType.Setter
        public Builder attach(@Nullable Boolean attach) {

            this.attach = attach;
            return this;
        }
        @CustomType.Setter
        public Builder controllerType(@Nullable String controllerType) {

            this.controllerType = controllerType;
            return this;
        }
        @CustomType.Setter
        public Builder datastoreId(@Nullable String datastoreId) {

            this.datastoreId = datastoreId;
            return this;
        }
        @CustomType.Setter
        public Builder deviceAddress(@Nullable String deviceAddress) {

            this.deviceAddress = deviceAddress;
            return this;
        }
        @CustomType.Setter
        public Builder diskMode(@Nullable String diskMode) {

            this.diskMode = diskMode;
            return this;
        }
        @CustomType.Setter
        public Builder diskSharing(@Nullable String diskSharing) {

            this.diskSharing = diskSharing;
            return this;
        }
        @CustomType.Setter
        public Builder eagerlyScrub(@Nullable Boolean eagerlyScrub) {

            this.eagerlyScrub = eagerlyScrub;
            return this;
        }
        @CustomType.Setter
        public Builder ioLimit(@Nullable Integer ioLimit) {

            this.ioLimit = ioLimit;
            return this;
        }
        @CustomType.Setter
        public Builder ioReservation(@Nullable Integer ioReservation) {

            this.ioReservation = ioReservation;
            return this;
        }
        @CustomType.Setter
        public Builder ioShareCount(@Nullable Integer ioShareCount) {

            this.ioShareCount = ioShareCount;
            return this;
        }
        @CustomType.Setter
        public Builder ioShareLevel(@Nullable String ioShareLevel) {

            this.ioShareLevel = ioShareLevel;
            return this;
        }
        @CustomType.Setter
        public Builder keepOnRemove(@Nullable Boolean keepOnRemove) {

            this.keepOnRemove = keepOnRemove;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable Integer key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            if (label == null) {
              throw new MissingRequiredPropertyException("VirtualMachineDisk", "label");
            }
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable Integer size) {

            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder storagePolicyId(@Nullable String storagePolicyId) {

            this.storagePolicyId = storagePolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder thinProvisioned(@Nullable Boolean thinProvisioned) {

            this.thinProvisioned = thinProvisioned;
            return this;
        }
        @CustomType.Setter
        public Builder unitNumber(@Nullable Integer unitNumber) {

            this.unitNumber = unitNumber;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder writeThrough(@Nullable Boolean writeThrough) {

            this.writeThrough = writeThrough;
            return this;
        }
        public VirtualMachineDisk build() {
            final var _resultValue = new VirtualMachineDisk();
            _resultValue.attach = attach;
            _resultValue.controllerType = controllerType;
            _resultValue.datastoreId = datastoreId;
            _resultValue.deviceAddress = deviceAddress;
            _resultValue.diskMode = diskMode;
            _resultValue.diskSharing = diskSharing;
            _resultValue.eagerlyScrub = eagerlyScrub;
            _resultValue.ioLimit = ioLimit;
            _resultValue.ioReservation = ioReservation;
            _resultValue.ioShareCount = ioShareCount;
            _resultValue.ioShareLevel = ioShareLevel;
            _resultValue.keepOnRemove = keepOnRemove;
            _resultValue.key = key;
            _resultValue.label = label;
            _resultValue.path = path;
            _resultValue.size = size;
            _resultValue.storagePolicyId = storagePolicyId;
            _resultValue.thinProvisioned = thinProvisioned;
            _resultValue.unitNumber = unitNumber;
            _resultValue.uuid = uuid;
            _resultValue.writeThrough = writeThrough;
            return _resultValue;
        }
    }
}
