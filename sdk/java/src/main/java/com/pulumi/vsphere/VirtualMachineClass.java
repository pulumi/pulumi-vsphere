// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.VirtualMachineClassArgs;
import com.pulumi.vsphere.inputs.VirtualMachineClassState;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a resource for configuring a Virtual Machine class.
 * 
 * ## Example Usage
 * 
 * ### S
 * 
 * ### Create a Basic Class
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VirtualMachineClass;
 * import com.pulumi.vsphere.VirtualMachineClassArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var basicClass = new VirtualMachineClass("basicClass", VirtualMachineClassArgs.builder()
 *             .name("basic-class")
 *             .cpus(4)
 *             .memory(4096)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Create a Class with a vGPU
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VirtualMachineClass;
 * import com.pulumi.vsphere.VirtualMachineClassArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var vgpClass = new VirtualMachineClass("vgpClass", VirtualMachineClassArgs.builder()
 *             .name("vgpu-class")
 *             .cpus(4)
 *             .memory(4096)
 *             .memoryReservation(100)
 *             .vgpuDevices("vgpu1")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="vsphere:index/virtualMachineClass:VirtualMachineClass")
public class VirtualMachineClass extends com.pulumi.resources.CustomResource {
    /**
     * The percentage of the available CPU capacity which will be reserved.
     * 
     */
    @Export(name="cpuReservation", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> cpuReservation;

    /**
     * @return The percentage of the available CPU capacity which will be reserved.
     * 
     */
    public Output<Optional<Integer>> cpuReservation() {
        return Codegen.optional(this.cpuReservation);
    }
    /**
     * The number of CPUs.
     * 
     */
    @Export(name="cpus", refs={Integer.class}, tree="[0]")
    private Output<Integer> cpus;

    /**
     * @return The number of CPUs.
     * 
     */
    public Output<Integer> cpus() {
        return this.cpus;
    }
    /**
     * The amount of memory in MB.
     * 
     */
    @Export(name="memory", refs={Integer.class}, tree="[0]")
    private Output<Integer> memory;

    /**
     * @return The amount of memory in MB.
     * 
     */
    public Output<Integer> memory() {
        return this.memory;
    }
    /**
     * The percentage of memory reservation.
     * 
     */
    @Export(name="memoryReservation", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> memoryReservation;

    /**
     * @return The percentage of memory reservation.
     * 
     */
    public Output<Optional<Integer>> memoryReservation() {
        return Codegen.optional(this.memoryReservation);
    }
    /**
     * The name for the class.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name for the class.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The identifiers of the vGPU devices for the class. If this is set memory reservation needs to be 100.
     * 
     */
    @Export(name="vgpuDevices", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> vgpuDevices;

    /**
     * @return The identifiers of the vGPU devices for the class. If this is set memory reservation needs to be 100.
     * 
     */
    public Output<Optional<List<String>>> vgpuDevices() {
        return Codegen.optional(this.vgpuDevices);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VirtualMachineClass(java.lang.String name) {
        this(name, VirtualMachineClassArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VirtualMachineClass(java.lang.String name, VirtualMachineClassArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VirtualMachineClass(java.lang.String name, VirtualMachineClassArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/virtualMachineClass:VirtualMachineClass", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private VirtualMachineClass(java.lang.String name, Output<java.lang.String> id, @Nullable VirtualMachineClassState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/virtualMachineClass:VirtualMachineClass", name, state, makeResourceOptions(options, id), false);
    }

    private static VirtualMachineClassArgs makeArgs(VirtualMachineClassArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? VirtualMachineClassArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VirtualMachineClass get(java.lang.String name, Output<java.lang.String> id, @Nullable VirtualMachineClassState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VirtualMachineClass(name, id, state, options);
    }
}
