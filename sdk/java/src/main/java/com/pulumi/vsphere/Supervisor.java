// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.SupervisorArgs;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.inputs.SupervisorState;
import com.pulumi.vsphere.outputs.SupervisorEgressCidr;
import com.pulumi.vsphere.outputs.SupervisorIngressCidr;
import com.pulumi.vsphere.outputs.SupervisorManagementNetwork;
import com.pulumi.vsphere.outputs.SupervisorNamespace;
import com.pulumi.vsphere.outputs.SupervisorPodCidr;
import com.pulumi.vsphere.outputs.SupervisorServiceCidr;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a resource for configuring Workload Management.
 * 
 * ## Example Usage
 * 
 * ### S
 * 
 * **Enable Workload Management on a compute cluster**
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VirtualMachineClass;
 * import com.pulumi.vsphere.VirtualMachineClassArgs;
 * import com.pulumi.vsphere.Supervisor;
 * import com.pulumi.vsphere.SupervisorArgs;
 * import com.pulumi.vsphere.inputs.SupervisorManagementNetworkArgs;
 * import com.pulumi.vsphere.inputs.SupervisorIngressCidrArgs;
 * import com.pulumi.vsphere.inputs.SupervisorEgressCidrArgs;
 * import com.pulumi.vsphere.inputs.SupervisorPodCidrArgs;
 * import com.pulumi.vsphere.inputs.SupervisorServiceCidrArgs;
 * import com.pulumi.vsphere.inputs.SupervisorNamespaceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var vmClass = new VirtualMachineClass("vmClass", VirtualMachineClassArgs.builder()
 *             .name("custom-class")
 *             .cpus(4)
 *             .memory(4096)
 *             .build());
 * 
 *         var supervisor = new Supervisor("supervisor", SupervisorArgs.builder()
 *             .cluster("<compute_cluster_id>")
 *             .storagePolicy("<storage_policy_name>")
 *             .contentLibrary("<content_library_id>")
 *             .mainDns("10.0.0.250")
 *             .workerDns("10.0.0.250")
 *             .edgeCluster("<edge_cluster_id>")
 *             .dvsUuid("<distributed_switch_uuid>")
 *             .sizingHint("MEDIUM")
 *             .managementNetwork(SupervisorManagementNetworkArgs.builder()
 *                 .network("<portgroup_id>")
 *                 .subnetMask("255.255.255.0")
 *                 .startingAddress("10.0.0.150")
 *                 .gateway("10.0.0.250")
 *                 .addressCount(5)
 *                 .build())
 *             .ingressCidrs(SupervisorIngressCidrArgs.builder()
 *                 .address("10.10.10.0")
 *                 .prefix(24)
 *                 .build())
 *             .egressCidrs(SupervisorEgressCidrArgs.builder()
 *                 .address("10.10.11.0")
 *                 .prefix(24)
 *                 .build())
 *             .podCidrs(SupervisorPodCidrArgs.builder()
 *                 .address("10.244.10.0")
 *                 .prefix(23)
 *                 .build())
 *             .serviceCidr(SupervisorServiceCidrArgs.builder()
 *                 .address("10.10.12.0")
 *                 .prefix(24)
 *                 .build())
 *             .searchDomains("vsphere.local")
 *             .namespaces(SupervisorNamespaceArgs.builder()
 *                 .name("custom-namespace")
 *                 .contentLibraries()
 *                 .vmClasses(vmClass.id())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="vsphere:index/supervisor:Supervisor")
public class Supervisor extends com.pulumi.resources.CustomResource {
    /**
     * The identifier of the compute cluster.
     * 
     */
    @Export(name="cluster", refs={String.class}, tree="[0]")
    private Output<String> cluster;

    /**
     * @return The identifier of the compute cluster.
     * 
     */
    public Output<String> cluster() {
        return this.cluster;
    }
    /**
     * The identifier of the subscribed content library.
     * 
     */
    @Export(name="contentLibrary", refs={String.class}, tree="[0]")
    private Output<String> contentLibrary;

    /**
     * @return The identifier of the subscribed content library.
     * 
     */
    public Output<String> contentLibrary() {
        return this.contentLibrary;
    }
    /**
     * The UUID of the distributed switch.
     * 
     */
    @Export(name="dvsUuid", refs={String.class}, tree="[0]")
    private Output<String> dvsUuid;

    /**
     * @return The UUID of the distributed switch.
     * 
     */
    public Output<String> dvsUuid() {
        return this.dvsUuid;
    }
    /**
     * The identifier of the NSX Edge Cluster.
     * 
     */
    @Export(name="edgeCluster", refs={String.class}, tree="[0]")
    private Output<String> edgeCluster;

    /**
     * @return The identifier of the NSX Edge Cluster.
     * 
     */
    public Output<String> edgeCluster() {
        return this.edgeCluster;
    }
    /**
     * CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.
     * 
     */
    @Export(name="egressCidrs", refs={List.class,SupervisorEgressCidr.class}, tree="[0,1]")
    private Output<List<SupervisorEgressCidr>> egressCidrs;

    /**
     * @return CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.
     * 
     */
    public Output<List<SupervisorEgressCidr>> egressCidrs() {
        return this.egressCidrs;
    }
    /**
     * CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.
     * 
     */
    @Export(name="ingressCidrs", refs={List.class,SupervisorIngressCidr.class}, tree="[0,1]")
    private Output<List<SupervisorIngressCidr>> ingressCidrs;

    /**
     * @return CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.
     * 
     */
    public Output<List<SupervisorIngressCidr>> ingressCidrs() {
        return this.ingressCidrs;
    }
    /**
     * The list of addresses of the primary DNS servers.
     * 
     */
    @Export(name="mainDns", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> mainDns;

    /**
     * @return The list of addresses of the primary DNS servers.
     * 
     */
    public Output<List<String>> mainDns() {
        return this.mainDns;
    }
    /**
     * The list of addresses of the primary NTP servers.
     * 
     */
    @Export(name="mainNtps", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> mainNtps;

    /**
     * @return The list of addresses of the primary NTP servers.
     * 
     */
    public Output<List<String>> mainNtps() {
        return this.mainNtps;
    }
    /**
     * The configuration for the management network which the control plane VMs will be connected to.
     * * * `network` - ID of the network. (e.g. a distributed port group).
     * * * `starting_address` - Starting address of the management network range.
     * * * `subnet_mask` - Subnet mask.
     * * * `gateway` - Gateway IP address.
     * * * `address_count` - Number of addresses to allocate. Starts from `starting_address`
     * 
     */
    @Export(name="managementNetwork", refs={SupervisorManagementNetwork.class}, tree="[0]")
    private Output<SupervisorManagementNetwork> managementNetwork;

    /**
     * @return The configuration for the management network which the control plane VMs will be connected to.
     * * * `network` - ID of the network. (e.g. a distributed port group).
     * * * `starting_address` - Starting address of the management network range.
     * * * `subnet_mask` - Subnet mask.
     * * * `gateway` - Gateway IP address.
     * * * `address_count` - Number of addresses to allocate. Starts from `starting_address`
     * 
     */
    public Output<SupervisorManagementNetwork> managementNetwork() {
        return this.managementNetwork;
    }
    /**
     * The list of namespaces to create in the Supervisor cluster
     * 
     */
    @Export(name="namespaces", refs={List.class,SupervisorNamespace.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SupervisorNamespace>> namespaces;

    /**
     * @return The list of namespaces to create in the Supervisor cluster
     * 
     */
    public Output<Optional<List<SupervisorNamespace>>> namespaces() {
        return Codegen.optional(this.namespaces);
    }
    /**
     * CIDR blocks from which Kubernetes allocates pod IP addresses. Minimum subnet size is 23.
     * 
     */
    @Export(name="podCidrs", refs={List.class,SupervisorPodCidr.class}, tree="[0,1]")
    private Output<List<SupervisorPodCidr>> podCidrs;

    /**
     * @return CIDR blocks from which Kubernetes allocates pod IP addresses. Minimum subnet size is 23.
     * 
     */
    public Output<List<SupervisorPodCidr>> podCidrs() {
        return this.podCidrs;
    }
    /**
     * List of DNS search domains.
     * 
     */
    @Export(name="searchDomains", refs={String.class}, tree="[0]")
    private Output<String> searchDomains;

    /**
     * @return List of DNS search domains.
     * 
     */
    public Output<String> searchDomains() {
        return this.searchDomains;
    }
    /**
     * CIDR block from which Kubernetes allocates service cluster IP addresses.
     * 
     */
    @Export(name="serviceCidr", refs={SupervisorServiceCidr.class}, tree="[0]")
    private Output<SupervisorServiceCidr> serviceCidr;

    /**
     * @return CIDR block from which Kubernetes allocates service cluster IP addresses.
     * 
     */
    public Output<SupervisorServiceCidr> serviceCidr() {
        return this.serviceCidr;
    }
    /**
     * The size of the Kubernetes API server.
     * 
     */
    @Export(name="sizingHint", refs={String.class}, tree="[0]")
    private Output<String> sizingHint;

    /**
     * @return The size of the Kubernetes API server.
     * 
     */
    public Output<String> sizingHint() {
        return this.sizingHint;
    }
    /**
     * The name of the storage policy.
     * 
     */
    @Export(name="storagePolicy", refs={String.class}, tree="[0]")
    private Output<String> storagePolicy;

    /**
     * @return The name of the storage policy.
     * 
     */
    public Output<String> storagePolicy() {
        return this.storagePolicy;
    }
    /**
     * The list of addresses of the DNS servers to use for the worker nodes.
     * 
     */
    @Export(name="workerDns", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> workerDns;

    /**
     * @return The list of addresses of the DNS servers to use for the worker nodes.
     * 
     */
    public Output<List<String>> workerDns() {
        return this.workerDns;
    }
    /**
     * The list of addresses of the NTP servers to use for the worker nodes.
     * 
     */
    @Export(name="workerNtps", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> workerNtps;

    /**
     * @return The list of addresses of the NTP servers to use for the worker nodes.
     * 
     */
    public Output<List<String>> workerNtps() {
        return this.workerNtps;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Supervisor(java.lang.String name) {
        this(name, SupervisorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Supervisor(java.lang.String name, SupervisorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Supervisor(java.lang.String name, SupervisorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/supervisor:Supervisor", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Supervisor(java.lang.String name, Output<java.lang.String> id, @Nullable SupervisorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/supervisor:Supervisor", name, state, makeResourceOptions(options, id), false);
    }

    private static SupervisorArgs makeArgs(SupervisorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SupervisorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Supervisor get(java.lang.String name, Output<java.lang.String> id, @Nullable SupervisorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Supervisor(name, id, state, options);
    }
}
