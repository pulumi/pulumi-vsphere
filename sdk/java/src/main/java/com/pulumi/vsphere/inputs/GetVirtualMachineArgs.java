// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.vsphere.inputs.GetVirtualMachineVappArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVirtualMachineArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVirtualMachineArgs Empty = new GetVirtualMachineArgs();

    /**
     * The alternate guest name of the virtual machine when
     * `guest_id` is a non-specific operating system, like `otherGuest` or `otherGuest64`.
     * 
     */
    @Import(name="alternateGuestName")
    private @Nullable Output<String> alternateGuestName;

    /**
     * @return The alternate guest name of the virtual machine when
     * `guest_id` is a non-specific operating system, like `otherGuest` or `otherGuest64`.
     * 
     */
    public Optional<Output<String>> alternateGuestName() {
        return Optional.ofNullable(this.alternateGuestName);
    }

    /**
     * The user-provided description of this virtual machine.
     * 
     */
    @Import(name="annotation")
    private @Nullable Output<String> annotation;

    /**
     * @return The user-provided description of this virtual machine.
     * 
     */
    public Optional<Output<String>> annotation() {
        return Optional.ofNullable(this.annotation);
    }

    @Import(name="bootDelay")
    private @Nullable Output<Integer> bootDelay;

    public Optional<Output<Integer>> bootDelay() {
        return Optional.ofNullable(this.bootDelay);
    }

    @Import(name="bootRetryDelay")
    private @Nullable Output<Integer> bootRetryDelay;

    public Optional<Output<Integer>> bootRetryDelay() {
        return Optional.ofNullable(this.bootRetryDelay);
    }

    @Import(name="bootRetryEnabled")
    private @Nullable Output<Boolean> bootRetryEnabled;

    public Optional<Output<Boolean>> bootRetryEnabled() {
        return Optional.ofNullable(this.bootRetryEnabled);
    }

    @Import(name="cpuHotAddEnabled")
    private @Nullable Output<Boolean> cpuHotAddEnabled;

    public Optional<Output<Boolean>> cpuHotAddEnabled() {
        return Optional.ofNullable(this.cpuHotAddEnabled);
    }

    @Import(name="cpuHotRemoveEnabled")
    private @Nullable Output<Boolean> cpuHotRemoveEnabled;

    public Optional<Output<Boolean>> cpuHotRemoveEnabled() {
        return Optional.ofNullable(this.cpuHotRemoveEnabled);
    }

    @Import(name="cpuLimit")
    private @Nullable Output<Integer> cpuLimit;

    public Optional<Output<Integer>> cpuLimit() {
        return Optional.ofNullable(this.cpuLimit);
    }

    @Import(name="cpuPerformanceCountersEnabled")
    private @Nullable Output<Boolean> cpuPerformanceCountersEnabled;

    public Optional<Output<Boolean>> cpuPerformanceCountersEnabled() {
        return Optional.ofNullable(this.cpuPerformanceCountersEnabled);
    }

    @Import(name="cpuReservation")
    private @Nullable Output<Integer> cpuReservation;

    public Optional<Output<Integer>> cpuReservation() {
        return Optional.ofNullable(this.cpuReservation);
    }

    @Import(name="cpuShareCount")
    private @Nullable Output<Integer> cpuShareCount;

    public Optional<Output<Integer>> cpuShareCount() {
        return Optional.ofNullable(this.cpuShareCount);
    }

    @Import(name="cpuShareLevel")
    private @Nullable Output<String> cpuShareLevel;

    public Optional<Output<String>> cpuShareLevel() {
        return Optional.ofNullable(this.cpuShareLevel);
    }

    /**
     * The managed object reference
     * ID of the datacenter the virtual machine is located in.
     * This can be omitted if the search path used in `name` is an absolute path.
     * For default datacenters, use the `id` attribute from an empty
     * `vsphere.Datacenter` data source.
     * 
     */
    @Import(name="datacenterId")
    private @Nullable Output<String> datacenterId;

    /**
     * @return The managed object reference
     * ID of the datacenter the virtual machine is located in.
     * This can be omitted if the search path used in `name` is an absolute path.
     * For default datacenters, use the `id` attribute from an empty
     * `vsphere.Datacenter` data source.
     * 
     */
    public Optional<Output<String>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    @Import(name="efiSecureBootEnabled")
    private @Nullable Output<Boolean> efiSecureBootEnabled;

    public Optional<Output<Boolean>> efiSecureBootEnabled() {
        return Optional.ofNullable(this.efiSecureBootEnabled);
    }

    @Import(name="enableDiskUuid")
    private @Nullable Output<Boolean> enableDiskUuid;

    public Optional<Output<Boolean>> enableDiskUuid() {
        return Optional.ofNullable(this.enableDiskUuid);
    }

    @Import(name="enableLogging")
    private @Nullable Output<Boolean> enableLogging;

    public Optional<Output<Boolean>> enableLogging() {
        return Optional.ofNullable(this.enableLogging);
    }

    @Import(name="eptRviMode")
    private @Nullable Output<String> eptRviMode;

    public Optional<Output<String>> eptRviMode() {
        return Optional.ofNullable(this.eptRviMode);
    }

    @Import(name="extraConfig")
    private @Nullable Output<Map<String,String>> extraConfig;

    public Optional<Output<Map<String,String>>> extraConfig() {
        return Optional.ofNullable(this.extraConfig);
    }

    @Import(name="extraConfigRebootRequired")
    private @Nullable Output<Boolean> extraConfigRebootRequired;

    public Optional<Output<Boolean>> extraConfigRebootRequired() {
        return Optional.ofNullable(this.extraConfigRebootRequired);
    }

    /**
     * The firmware type for this virtual machine. Can be `bios` or `efi`.
     * 
     */
    @Import(name="firmware")
    private @Nullable Output<String> firmware;

    /**
     * @return The firmware type for this virtual machine. Can be `bios` or `efi`.
     * 
     */
    public Optional<Output<String>> firmware() {
        return Optional.ofNullable(this.firmware);
    }

    /**
     * The guest ID of the virtual machine or template.
     * 
     */
    @Import(name="guestId")
    private @Nullable Output<String> guestId;

    /**
     * @return The guest ID of the virtual machine or template.
     * 
     */
    public Optional<Output<String>> guestId() {
        return Optional.ofNullable(this.guestId);
    }

    /**
     * The hardware version number on this virtual machine.
     * 
     */
    @Import(name="hardwareVersion")
    private @Nullable Output<Integer> hardwareVersion;

    /**
     * @return The hardware version number on this virtual machine.
     * 
     */
    public Optional<Output<Integer>> hardwareVersion() {
        return Optional.ofNullable(this.hardwareVersion);
    }

    @Import(name="hvMode")
    private @Nullable Output<String> hvMode;

    public Optional<Output<String>> hvMode() {
        return Optional.ofNullable(this.hvMode);
    }

    @Import(name="ideControllerScanCount")
    private @Nullable Output<Integer> ideControllerScanCount;

    public Optional<Output<Integer>> ideControllerScanCount() {
        return Optional.ofNullable(this.ideControllerScanCount);
    }

    @Import(name="latencySensitivity")
    private @Nullable Output<String> latencySensitivity;

    public Optional<Output<String>> latencySensitivity() {
        return Optional.ofNullable(this.latencySensitivity);
    }

    /**
     * The size of the virtual machine&#39;s memory, in MB.
     * 
     */
    @Import(name="memory")
    private @Nullable Output<Integer> memory;

    /**
     * @return The size of the virtual machine&#39;s memory, in MB.
     * 
     */
    public Optional<Output<Integer>> memory() {
        return Optional.ofNullable(this.memory);
    }

    @Import(name="memoryHotAddEnabled")
    private @Nullable Output<Boolean> memoryHotAddEnabled;

    public Optional<Output<Boolean>> memoryHotAddEnabled() {
        return Optional.ofNullable(this.memoryHotAddEnabled);
    }

    @Import(name="memoryLimit")
    private @Nullable Output<Integer> memoryLimit;

    public Optional<Output<Integer>> memoryLimit() {
        return Optional.ofNullable(this.memoryLimit);
    }

    @Import(name="memoryReservation")
    private @Nullable Output<Integer> memoryReservation;

    public Optional<Output<Integer>> memoryReservation() {
        return Optional.ofNullable(this.memoryReservation);
    }

    @Import(name="memoryShareCount")
    private @Nullable Output<Integer> memoryShareCount;

    public Optional<Output<Integer>> memoryShareCount() {
        return Optional.ofNullable(this.memoryShareCount);
    }

    @Import(name="memoryShareLevel")
    private @Nullable Output<String> memoryShareLevel;

    public Optional<Output<String>> memoryShareLevel() {
        return Optional.ofNullable(this.memoryShareLevel);
    }

    @Import(name="moid")
    private @Nullable Output<String> moid;

    public Optional<Output<String>> moid() {
        return Optional.ofNullable(this.moid);
    }

    /**
     * The name of the virtual machine. This can be a name or
     * the full path relative to the datacenter. This is required if a UUID lookup
     * is not performed.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the virtual machine. This can be a name or
     * the full path relative to the datacenter. This is required if a UUID lookup
     * is not performed.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="nestedHvEnabled")
    private @Nullable Output<Boolean> nestedHvEnabled;

    public Optional<Output<Boolean>> nestedHvEnabled() {
        return Optional.ofNullable(this.nestedHvEnabled);
    }

    /**
     * The number of cores per socket for this virtual machine.
     * 
     */
    @Import(name="numCoresPerSocket")
    private @Nullable Output<Integer> numCoresPerSocket;

    /**
     * @return The number of cores per socket for this virtual machine.
     * 
     */
    public Optional<Output<Integer>> numCoresPerSocket() {
        return Optional.ofNullable(this.numCoresPerSocket);
    }

    /**
     * The total number of virtual processor cores assigned to this
     * virtual machine.
     * 
     */
    @Import(name="numCpus")
    private @Nullable Output<Integer> numCpus;

    /**
     * @return The total number of virtual processor cores assigned to this
     * virtual machine.
     * 
     */
    public Optional<Output<Integer>> numCpus() {
        return Optional.ofNullable(this.numCpus);
    }

    @Import(name="replaceTrigger")
    private @Nullable Output<String> replaceTrigger;

    public Optional<Output<String>> replaceTrigger() {
        return Optional.ofNullable(this.replaceTrigger);
    }

    @Import(name="runToolsScriptsAfterPowerOn")
    private @Nullable Output<Boolean> runToolsScriptsAfterPowerOn;

    public Optional<Output<Boolean>> runToolsScriptsAfterPowerOn() {
        return Optional.ofNullable(this.runToolsScriptsAfterPowerOn);
    }

    @Import(name="runToolsScriptsAfterResume")
    private @Nullable Output<Boolean> runToolsScriptsAfterResume;

    public Optional<Output<Boolean>> runToolsScriptsAfterResume() {
        return Optional.ofNullable(this.runToolsScriptsAfterResume);
    }

    @Import(name="runToolsScriptsBeforeGuestReboot")
    private @Nullable Output<Boolean> runToolsScriptsBeforeGuestReboot;

    public Optional<Output<Boolean>> runToolsScriptsBeforeGuestReboot() {
        return Optional.ofNullable(this.runToolsScriptsBeforeGuestReboot);
    }

    @Import(name="runToolsScriptsBeforeGuestShutdown")
    private @Nullable Output<Boolean> runToolsScriptsBeforeGuestShutdown;

    public Optional<Output<Boolean>> runToolsScriptsBeforeGuestShutdown() {
        return Optional.ofNullable(this.runToolsScriptsBeforeGuestShutdown);
    }

    @Import(name="runToolsScriptsBeforeGuestStandby")
    private @Nullable Output<Boolean> runToolsScriptsBeforeGuestStandby;

    public Optional<Output<Boolean>> runToolsScriptsBeforeGuestStandby() {
        return Optional.ofNullable(this.runToolsScriptsBeforeGuestStandby);
    }

    @Import(name="sataControllerScanCount")
    private @Nullable Output<Integer> sataControllerScanCount;

    public Optional<Output<Integer>> sataControllerScanCount() {
        return Optional.ofNullable(this.sataControllerScanCount);
    }

    /**
     * The number of SCSI controllers to
     * scan for disk attributes and controller types on. Default: `1`.
     * 
     * &gt; **NOTE:** For best results, ensure that all the disks on any templates you
     * use with this data source reside on the primary controller, and leave this
     * value at the default. See the `vsphere.VirtualMachine`
     * resource documentation for the significance of this setting, specifically the
     * additional requirements and notes for cloning section.
     * 
     */
    @Import(name="scsiControllerScanCount")
    private @Nullable Output<Integer> scsiControllerScanCount;

    /**
     * @return The number of SCSI controllers to
     * scan for disk attributes and controller types on. Default: `1`.
     * 
     * &gt; **NOTE:** For best results, ensure that all the disks on any templates you
     * use with this data source reside on the primary controller, and leave this
     * value at the default. See the `vsphere.VirtualMachine`
     * resource documentation for the significance of this setting, specifically the
     * additional requirements and notes for cloning section.
     * 
     */
    public Optional<Output<Integer>> scsiControllerScanCount() {
        return Optional.ofNullable(this.scsiControllerScanCount);
    }

    @Import(name="storagePolicyId")
    private @Nullable Output<String> storagePolicyId;

    public Optional<Output<String>> storagePolicyId() {
        return Optional.ofNullable(this.storagePolicyId);
    }

    @Import(name="swapPlacementPolicy")
    private @Nullable Output<String> swapPlacementPolicy;

    public Optional<Output<String>> swapPlacementPolicy() {
        return Optional.ofNullable(this.swapPlacementPolicy);
    }

    @Import(name="syncTimeWithHost")
    private @Nullable Output<Boolean> syncTimeWithHost;

    public Optional<Output<Boolean>> syncTimeWithHost() {
        return Optional.ofNullable(this.syncTimeWithHost);
    }

    @Import(name="syncTimeWithHostPeriodically")
    private @Nullable Output<Boolean> syncTimeWithHostPeriodically;

    public Optional<Output<Boolean>> syncTimeWithHostPeriodically() {
        return Optional.ofNullable(this.syncTimeWithHostPeriodically);
    }

    @Import(name="toolsUpgradePolicy")
    private @Nullable Output<String> toolsUpgradePolicy;

    public Optional<Output<String>> toolsUpgradePolicy() {
        return Optional.ofNullable(this.toolsUpgradePolicy);
    }

    /**
     * Specify this field for a UUID lookup, `name` and `datacenter_id`
     * are not required if this is specified.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Specify this field for a UUID lookup, `name` and `datacenter_id`
     * are not required if this is specified.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    @Import(name="vapp")
    private @Nullable Output<GetVirtualMachineVappArgs> vapp;

    public Optional<Output<GetVirtualMachineVappArgs>> vapp() {
        return Optional.ofNullable(this.vapp);
    }

    @Import(name="vbsEnabled")
    private @Nullable Output<Boolean> vbsEnabled;

    public Optional<Output<Boolean>> vbsEnabled() {
        return Optional.ofNullable(this.vbsEnabled);
    }

    @Import(name="vvtdEnabled")
    private @Nullable Output<Boolean> vvtdEnabled;

    public Optional<Output<Boolean>> vvtdEnabled() {
        return Optional.ofNullable(this.vvtdEnabled);
    }

    private GetVirtualMachineArgs() {}

    private GetVirtualMachineArgs(GetVirtualMachineArgs $) {
        this.alternateGuestName = $.alternateGuestName;
        this.annotation = $.annotation;
        this.bootDelay = $.bootDelay;
        this.bootRetryDelay = $.bootRetryDelay;
        this.bootRetryEnabled = $.bootRetryEnabled;
        this.cpuHotAddEnabled = $.cpuHotAddEnabled;
        this.cpuHotRemoveEnabled = $.cpuHotRemoveEnabled;
        this.cpuLimit = $.cpuLimit;
        this.cpuPerformanceCountersEnabled = $.cpuPerformanceCountersEnabled;
        this.cpuReservation = $.cpuReservation;
        this.cpuShareCount = $.cpuShareCount;
        this.cpuShareLevel = $.cpuShareLevel;
        this.datacenterId = $.datacenterId;
        this.efiSecureBootEnabled = $.efiSecureBootEnabled;
        this.enableDiskUuid = $.enableDiskUuid;
        this.enableLogging = $.enableLogging;
        this.eptRviMode = $.eptRviMode;
        this.extraConfig = $.extraConfig;
        this.extraConfigRebootRequired = $.extraConfigRebootRequired;
        this.firmware = $.firmware;
        this.guestId = $.guestId;
        this.hardwareVersion = $.hardwareVersion;
        this.hvMode = $.hvMode;
        this.ideControllerScanCount = $.ideControllerScanCount;
        this.latencySensitivity = $.latencySensitivity;
        this.memory = $.memory;
        this.memoryHotAddEnabled = $.memoryHotAddEnabled;
        this.memoryLimit = $.memoryLimit;
        this.memoryReservation = $.memoryReservation;
        this.memoryShareCount = $.memoryShareCount;
        this.memoryShareLevel = $.memoryShareLevel;
        this.moid = $.moid;
        this.name = $.name;
        this.nestedHvEnabled = $.nestedHvEnabled;
        this.numCoresPerSocket = $.numCoresPerSocket;
        this.numCpus = $.numCpus;
        this.replaceTrigger = $.replaceTrigger;
        this.runToolsScriptsAfterPowerOn = $.runToolsScriptsAfterPowerOn;
        this.runToolsScriptsAfterResume = $.runToolsScriptsAfterResume;
        this.runToolsScriptsBeforeGuestReboot = $.runToolsScriptsBeforeGuestReboot;
        this.runToolsScriptsBeforeGuestShutdown = $.runToolsScriptsBeforeGuestShutdown;
        this.runToolsScriptsBeforeGuestStandby = $.runToolsScriptsBeforeGuestStandby;
        this.sataControllerScanCount = $.sataControllerScanCount;
        this.scsiControllerScanCount = $.scsiControllerScanCount;
        this.storagePolicyId = $.storagePolicyId;
        this.swapPlacementPolicy = $.swapPlacementPolicy;
        this.syncTimeWithHost = $.syncTimeWithHost;
        this.syncTimeWithHostPeriodically = $.syncTimeWithHostPeriodically;
        this.toolsUpgradePolicy = $.toolsUpgradePolicy;
        this.uuid = $.uuid;
        this.vapp = $.vapp;
        this.vbsEnabled = $.vbsEnabled;
        this.vvtdEnabled = $.vvtdEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVirtualMachineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVirtualMachineArgs $;

        public Builder() {
            $ = new GetVirtualMachineArgs();
        }

        public Builder(GetVirtualMachineArgs defaults) {
            $ = new GetVirtualMachineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alternateGuestName The alternate guest name of the virtual machine when
         * `guest_id` is a non-specific operating system, like `otherGuest` or `otherGuest64`.
         * 
         * @return builder
         * 
         */
        public Builder alternateGuestName(@Nullable Output<String> alternateGuestName) {
            $.alternateGuestName = alternateGuestName;
            return this;
        }

        /**
         * @param alternateGuestName The alternate guest name of the virtual machine when
         * `guest_id` is a non-specific operating system, like `otherGuest` or `otherGuest64`.
         * 
         * @return builder
         * 
         */
        public Builder alternateGuestName(String alternateGuestName) {
            return alternateGuestName(Output.of(alternateGuestName));
        }

        /**
         * @param annotation The user-provided description of this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder annotation(@Nullable Output<String> annotation) {
            $.annotation = annotation;
            return this;
        }

        /**
         * @param annotation The user-provided description of this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder annotation(String annotation) {
            return annotation(Output.of(annotation));
        }

        public Builder bootDelay(@Nullable Output<Integer> bootDelay) {
            $.bootDelay = bootDelay;
            return this;
        }

        public Builder bootDelay(Integer bootDelay) {
            return bootDelay(Output.of(bootDelay));
        }

        public Builder bootRetryDelay(@Nullable Output<Integer> bootRetryDelay) {
            $.bootRetryDelay = bootRetryDelay;
            return this;
        }

        public Builder bootRetryDelay(Integer bootRetryDelay) {
            return bootRetryDelay(Output.of(bootRetryDelay));
        }

        public Builder bootRetryEnabled(@Nullable Output<Boolean> bootRetryEnabled) {
            $.bootRetryEnabled = bootRetryEnabled;
            return this;
        }

        public Builder bootRetryEnabled(Boolean bootRetryEnabled) {
            return bootRetryEnabled(Output.of(bootRetryEnabled));
        }

        public Builder cpuHotAddEnabled(@Nullable Output<Boolean> cpuHotAddEnabled) {
            $.cpuHotAddEnabled = cpuHotAddEnabled;
            return this;
        }

        public Builder cpuHotAddEnabled(Boolean cpuHotAddEnabled) {
            return cpuHotAddEnabled(Output.of(cpuHotAddEnabled));
        }

        public Builder cpuHotRemoveEnabled(@Nullable Output<Boolean> cpuHotRemoveEnabled) {
            $.cpuHotRemoveEnabled = cpuHotRemoveEnabled;
            return this;
        }

        public Builder cpuHotRemoveEnabled(Boolean cpuHotRemoveEnabled) {
            return cpuHotRemoveEnabled(Output.of(cpuHotRemoveEnabled));
        }

        public Builder cpuLimit(@Nullable Output<Integer> cpuLimit) {
            $.cpuLimit = cpuLimit;
            return this;
        }

        public Builder cpuLimit(Integer cpuLimit) {
            return cpuLimit(Output.of(cpuLimit));
        }

        public Builder cpuPerformanceCountersEnabled(@Nullable Output<Boolean> cpuPerformanceCountersEnabled) {
            $.cpuPerformanceCountersEnabled = cpuPerformanceCountersEnabled;
            return this;
        }

        public Builder cpuPerformanceCountersEnabled(Boolean cpuPerformanceCountersEnabled) {
            return cpuPerformanceCountersEnabled(Output.of(cpuPerformanceCountersEnabled));
        }

        public Builder cpuReservation(@Nullable Output<Integer> cpuReservation) {
            $.cpuReservation = cpuReservation;
            return this;
        }

        public Builder cpuReservation(Integer cpuReservation) {
            return cpuReservation(Output.of(cpuReservation));
        }

        public Builder cpuShareCount(@Nullable Output<Integer> cpuShareCount) {
            $.cpuShareCount = cpuShareCount;
            return this;
        }

        public Builder cpuShareCount(Integer cpuShareCount) {
            return cpuShareCount(Output.of(cpuShareCount));
        }

        public Builder cpuShareLevel(@Nullable Output<String> cpuShareLevel) {
            $.cpuShareLevel = cpuShareLevel;
            return this;
        }

        public Builder cpuShareLevel(String cpuShareLevel) {
            return cpuShareLevel(Output.of(cpuShareLevel));
        }

        /**
         * @param datacenterId The managed object reference
         * ID of the datacenter the virtual machine is located in.
         * This can be omitted if the search path used in `name` is an absolute path.
         * For default datacenters, use the `id` attribute from an empty
         * `vsphere.Datacenter` data source.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(@Nullable Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId The managed object reference
         * ID of the datacenter the virtual machine is located in.
         * This can be omitted if the search path used in `name` is an absolute path.
         * For default datacenters, use the `id` attribute from an empty
         * `vsphere.Datacenter` data source.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        public Builder efiSecureBootEnabled(@Nullable Output<Boolean> efiSecureBootEnabled) {
            $.efiSecureBootEnabled = efiSecureBootEnabled;
            return this;
        }

        public Builder efiSecureBootEnabled(Boolean efiSecureBootEnabled) {
            return efiSecureBootEnabled(Output.of(efiSecureBootEnabled));
        }

        public Builder enableDiskUuid(@Nullable Output<Boolean> enableDiskUuid) {
            $.enableDiskUuid = enableDiskUuid;
            return this;
        }

        public Builder enableDiskUuid(Boolean enableDiskUuid) {
            return enableDiskUuid(Output.of(enableDiskUuid));
        }

        public Builder enableLogging(@Nullable Output<Boolean> enableLogging) {
            $.enableLogging = enableLogging;
            return this;
        }

        public Builder enableLogging(Boolean enableLogging) {
            return enableLogging(Output.of(enableLogging));
        }

        public Builder eptRviMode(@Nullable Output<String> eptRviMode) {
            $.eptRviMode = eptRviMode;
            return this;
        }

        public Builder eptRviMode(String eptRviMode) {
            return eptRviMode(Output.of(eptRviMode));
        }

        public Builder extraConfig(@Nullable Output<Map<String,String>> extraConfig) {
            $.extraConfig = extraConfig;
            return this;
        }

        public Builder extraConfig(Map<String,String> extraConfig) {
            return extraConfig(Output.of(extraConfig));
        }

        public Builder extraConfigRebootRequired(@Nullable Output<Boolean> extraConfigRebootRequired) {
            $.extraConfigRebootRequired = extraConfigRebootRequired;
            return this;
        }

        public Builder extraConfigRebootRequired(Boolean extraConfigRebootRequired) {
            return extraConfigRebootRequired(Output.of(extraConfigRebootRequired));
        }

        /**
         * @param firmware The firmware type for this virtual machine. Can be `bios` or `efi`.
         * 
         * @return builder
         * 
         */
        public Builder firmware(@Nullable Output<String> firmware) {
            $.firmware = firmware;
            return this;
        }

        /**
         * @param firmware The firmware type for this virtual machine. Can be `bios` or `efi`.
         * 
         * @return builder
         * 
         */
        public Builder firmware(String firmware) {
            return firmware(Output.of(firmware));
        }

        /**
         * @param guestId The guest ID of the virtual machine or template.
         * 
         * @return builder
         * 
         */
        public Builder guestId(@Nullable Output<String> guestId) {
            $.guestId = guestId;
            return this;
        }

        /**
         * @param guestId The guest ID of the virtual machine or template.
         * 
         * @return builder
         * 
         */
        public Builder guestId(String guestId) {
            return guestId(Output.of(guestId));
        }

        /**
         * @param hardwareVersion The hardware version number on this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder hardwareVersion(@Nullable Output<Integer> hardwareVersion) {
            $.hardwareVersion = hardwareVersion;
            return this;
        }

        /**
         * @param hardwareVersion The hardware version number on this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder hardwareVersion(Integer hardwareVersion) {
            return hardwareVersion(Output.of(hardwareVersion));
        }

        public Builder hvMode(@Nullable Output<String> hvMode) {
            $.hvMode = hvMode;
            return this;
        }

        public Builder hvMode(String hvMode) {
            return hvMode(Output.of(hvMode));
        }

        public Builder ideControllerScanCount(@Nullable Output<Integer> ideControllerScanCount) {
            $.ideControllerScanCount = ideControllerScanCount;
            return this;
        }

        public Builder ideControllerScanCount(Integer ideControllerScanCount) {
            return ideControllerScanCount(Output.of(ideControllerScanCount));
        }

        public Builder latencySensitivity(@Nullable Output<String> latencySensitivity) {
            $.latencySensitivity = latencySensitivity;
            return this;
        }

        public Builder latencySensitivity(String latencySensitivity) {
            return latencySensitivity(Output.of(latencySensitivity));
        }

        /**
         * @param memory The size of the virtual machine&#39;s memory, in MB.
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<Integer> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The size of the virtual machine&#39;s memory, in MB.
         * 
         * @return builder
         * 
         */
        public Builder memory(Integer memory) {
            return memory(Output.of(memory));
        }

        public Builder memoryHotAddEnabled(@Nullable Output<Boolean> memoryHotAddEnabled) {
            $.memoryHotAddEnabled = memoryHotAddEnabled;
            return this;
        }

        public Builder memoryHotAddEnabled(Boolean memoryHotAddEnabled) {
            return memoryHotAddEnabled(Output.of(memoryHotAddEnabled));
        }

        public Builder memoryLimit(@Nullable Output<Integer> memoryLimit) {
            $.memoryLimit = memoryLimit;
            return this;
        }

        public Builder memoryLimit(Integer memoryLimit) {
            return memoryLimit(Output.of(memoryLimit));
        }

        public Builder memoryReservation(@Nullable Output<Integer> memoryReservation) {
            $.memoryReservation = memoryReservation;
            return this;
        }

        public Builder memoryReservation(Integer memoryReservation) {
            return memoryReservation(Output.of(memoryReservation));
        }

        public Builder memoryShareCount(@Nullable Output<Integer> memoryShareCount) {
            $.memoryShareCount = memoryShareCount;
            return this;
        }

        public Builder memoryShareCount(Integer memoryShareCount) {
            return memoryShareCount(Output.of(memoryShareCount));
        }

        public Builder memoryShareLevel(@Nullable Output<String> memoryShareLevel) {
            $.memoryShareLevel = memoryShareLevel;
            return this;
        }

        public Builder memoryShareLevel(String memoryShareLevel) {
            return memoryShareLevel(Output.of(memoryShareLevel));
        }

        public Builder moid(@Nullable Output<String> moid) {
            $.moid = moid;
            return this;
        }

        public Builder moid(String moid) {
            return moid(Output.of(moid));
        }

        /**
         * @param name The name of the virtual machine. This can be a name or
         * the full path relative to the datacenter. This is required if a UUID lookup
         * is not performed.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the virtual machine. This can be a name or
         * the full path relative to the datacenter. This is required if a UUID lookup
         * is not performed.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder nestedHvEnabled(@Nullable Output<Boolean> nestedHvEnabled) {
            $.nestedHvEnabled = nestedHvEnabled;
            return this;
        }

        public Builder nestedHvEnabled(Boolean nestedHvEnabled) {
            return nestedHvEnabled(Output.of(nestedHvEnabled));
        }

        /**
         * @param numCoresPerSocket The number of cores per socket for this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder numCoresPerSocket(@Nullable Output<Integer> numCoresPerSocket) {
            $.numCoresPerSocket = numCoresPerSocket;
            return this;
        }

        /**
         * @param numCoresPerSocket The number of cores per socket for this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder numCoresPerSocket(Integer numCoresPerSocket) {
            return numCoresPerSocket(Output.of(numCoresPerSocket));
        }

        /**
         * @param numCpus The total number of virtual processor cores assigned to this
         * virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder numCpus(@Nullable Output<Integer> numCpus) {
            $.numCpus = numCpus;
            return this;
        }

        /**
         * @param numCpus The total number of virtual processor cores assigned to this
         * virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder numCpus(Integer numCpus) {
            return numCpus(Output.of(numCpus));
        }

        public Builder replaceTrigger(@Nullable Output<String> replaceTrigger) {
            $.replaceTrigger = replaceTrigger;
            return this;
        }

        public Builder replaceTrigger(String replaceTrigger) {
            return replaceTrigger(Output.of(replaceTrigger));
        }

        public Builder runToolsScriptsAfterPowerOn(@Nullable Output<Boolean> runToolsScriptsAfterPowerOn) {
            $.runToolsScriptsAfterPowerOn = runToolsScriptsAfterPowerOn;
            return this;
        }

        public Builder runToolsScriptsAfterPowerOn(Boolean runToolsScriptsAfterPowerOn) {
            return runToolsScriptsAfterPowerOn(Output.of(runToolsScriptsAfterPowerOn));
        }

        public Builder runToolsScriptsAfterResume(@Nullable Output<Boolean> runToolsScriptsAfterResume) {
            $.runToolsScriptsAfterResume = runToolsScriptsAfterResume;
            return this;
        }

        public Builder runToolsScriptsAfterResume(Boolean runToolsScriptsAfterResume) {
            return runToolsScriptsAfterResume(Output.of(runToolsScriptsAfterResume));
        }

        public Builder runToolsScriptsBeforeGuestReboot(@Nullable Output<Boolean> runToolsScriptsBeforeGuestReboot) {
            $.runToolsScriptsBeforeGuestReboot = runToolsScriptsBeforeGuestReboot;
            return this;
        }

        public Builder runToolsScriptsBeforeGuestReboot(Boolean runToolsScriptsBeforeGuestReboot) {
            return runToolsScriptsBeforeGuestReboot(Output.of(runToolsScriptsBeforeGuestReboot));
        }

        public Builder runToolsScriptsBeforeGuestShutdown(@Nullable Output<Boolean> runToolsScriptsBeforeGuestShutdown) {
            $.runToolsScriptsBeforeGuestShutdown = runToolsScriptsBeforeGuestShutdown;
            return this;
        }

        public Builder runToolsScriptsBeforeGuestShutdown(Boolean runToolsScriptsBeforeGuestShutdown) {
            return runToolsScriptsBeforeGuestShutdown(Output.of(runToolsScriptsBeforeGuestShutdown));
        }

        public Builder runToolsScriptsBeforeGuestStandby(@Nullable Output<Boolean> runToolsScriptsBeforeGuestStandby) {
            $.runToolsScriptsBeforeGuestStandby = runToolsScriptsBeforeGuestStandby;
            return this;
        }

        public Builder runToolsScriptsBeforeGuestStandby(Boolean runToolsScriptsBeforeGuestStandby) {
            return runToolsScriptsBeforeGuestStandby(Output.of(runToolsScriptsBeforeGuestStandby));
        }

        public Builder sataControllerScanCount(@Nullable Output<Integer> sataControllerScanCount) {
            $.sataControllerScanCount = sataControllerScanCount;
            return this;
        }

        public Builder sataControllerScanCount(Integer sataControllerScanCount) {
            return sataControllerScanCount(Output.of(sataControllerScanCount));
        }

        /**
         * @param scsiControllerScanCount The number of SCSI controllers to
         * scan for disk attributes and controller types on. Default: `1`.
         * 
         * &gt; **NOTE:** For best results, ensure that all the disks on any templates you
         * use with this data source reside on the primary controller, and leave this
         * value at the default. See the `vsphere.VirtualMachine`
         * resource documentation for the significance of this setting, specifically the
         * additional requirements and notes for cloning section.
         * 
         * @return builder
         * 
         */
        public Builder scsiControllerScanCount(@Nullable Output<Integer> scsiControllerScanCount) {
            $.scsiControllerScanCount = scsiControllerScanCount;
            return this;
        }

        /**
         * @param scsiControllerScanCount The number of SCSI controllers to
         * scan for disk attributes and controller types on. Default: `1`.
         * 
         * &gt; **NOTE:** For best results, ensure that all the disks on any templates you
         * use with this data source reside on the primary controller, and leave this
         * value at the default. See the `vsphere.VirtualMachine`
         * resource documentation for the significance of this setting, specifically the
         * additional requirements and notes for cloning section.
         * 
         * @return builder
         * 
         */
        public Builder scsiControllerScanCount(Integer scsiControllerScanCount) {
            return scsiControllerScanCount(Output.of(scsiControllerScanCount));
        }

        public Builder storagePolicyId(@Nullable Output<String> storagePolicyId) {
            $.storagePolicyId = storagePolicyId;
            return this;
        }

        public Builder storagePolicyId(String storagePolicyId) {
            return storagePolicyId(Output.of(storagePolicyId));
        }

        public Builder swapPlacementPolicy(@Nullable Output<String> swapPlacementPolicy) {
            $.swapPlacementPolicy = swapPlacementPolicy;
            return this;
        }

        public Builder swapPlacementPolicy(String swapPlacementPolicy) {
            return swapPlacementPolicy(Output.of(swapPlacementPolicy));
        }

        public Builder syncTimeWithHost(@Nullable Output<Boolean> syncTimeWithHost) {
            $.syncTimeWithHost = syncTimeWithHost;
            return this;
        }

        public Builder syncTimeWithHost(Boolean syncTimeWithHost) {
            return syncTimeWithHost(Output.of(syncTimeWithHost));
        }

        public Builder syncTimeWithHostPeriodically(@Nullable Output<Boolean> syncTimeWithHostPeriodically) {
            $.syncTimeWithHostPeriodically = syncTimeWithHostPeriodically;
            return this;
        }

        public Builder syncTimeWithHostPeriodically(Boolean syncTimeWithHostPeriodically) {
            return syncTimeWithHostPeriodically(Output.of(syncTimeWithHostPeriodically));
        }

        public Builder toolsUpgradePolicy(@Nullable Output<String> toolsUpgradePolicy) {
            $.toolsUpgradePolicy = toolsUpgradePolicy;
            return this;
        }

        public Builder toolsUpgradePolicy(String toolsUpgradePolicy) {
            return toolsUpgradePolicy(Output.of(toolsUpgradePolicy));
        }

        /**
         * @param uuid Specify this field for a UUID lookup, `name` and `datacenter_id`
         * are not required if this is specified.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Specify this field for a UUID lookup, `name` and `datacenter_id`
         * are not required if this is specified.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public Builder vapp(@Nullable Output<GetVirtualMachineVappArgs> vapp) {
            $.vapp = vapp;
            return this;
        }

        public Builder vapp(GetVirtualMachineVappArgs vapp) {
            return vapp(Output.of(vapp));
        }

        public Builder vbsEnabled(@Nullable Output<Boolean> vbsEnabled) {
            $.vbsEnabled = vbsEnabled;
            return this;
        }

        public Builder vbsEnabled(Boolean vbsEnabled) {
            return vbsEnabled(Output.of(vbsEnabled));
        }

        public Builder vvtdEnabled(@Nullable Output<Boolean> vvtdEnabled) {
            $.vvtdEnabled = vvtdEnabled;
            return this;
        }

        public Builder vvtdEnabled(Boolean vvtdEnabled) {
            return vvtdEnabled(Output.of(vvtdEnabled));
        }

        public GetVirtualMachineArgs build() {
            return $;
        }
    }

}
