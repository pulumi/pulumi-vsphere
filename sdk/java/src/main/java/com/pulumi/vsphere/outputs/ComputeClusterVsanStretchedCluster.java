// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ComputeClusterVsanStretchedCluster {
    /**
     * @return The managed object IDs of the hosts to put in the first fault domain.
     * 
     */
    private List<String> preferredFaultDomainHostIds;
    /**
     * @return The name of first fault domain. Default is `Preferred`.
     * 
     */
    private @Nullable String preferredFaultDomainName;
    /**
     * @return The managed object IDs of the hosts to put in the second fault domain.
     * 
     */
    private List<String> secondaryFaultDomainHostIds;
    /**
     * @return The name of second fault domain. Default is `Secondary`.
     * 
     * &gt; **NOTE:** You must disable vSphere HA before you enable vSAN on the cluster.
     * You can enable or re-enable vSphere HA after vSAN is configured.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vsphere.ComputeCluster;
     * import com.pulumi.vsphere.ComputeClusterArgs;
     * import com.pulumi.vsphere.inputs.ComputeClusterVsanDiskGroupArgs;
     * import com.pulumi.vsphere.inputs.ComputeClusterVsanFaultDomainArgs;
     * import com.pulumi.vsphere.inputs.ComputeClusterVsanStretchedClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var computeCluster = new ComputeCluster(&#34;computeCluster&#34;, ComputeClusterArgs.builder()        
     *             .name(&#34;terraform-compute-cluster-test&#34;)
     *             .datacenterId(datacenter.id())
     *             .hostSystemIds(host.stream().map(element -&gt; element.id()).collect(toList()))
     *             .drsEnabled(true)
     *             .drsAutomationLevel(&#34;fullyAutomated&#34;)
     *             .haEnabled(false)
     *             .vsanEnabled(true)
     *             .vsanEsaEnabled(true)
     *             .vsanDedupEnabled(true)
     *             .vsanCompressionEnabled(true)
     *             .vsanPerformanceEnabled(true)
     *             .vsanVerboseModeEnabled(true)
     *             .vsanNetworkDiagnosticModeEnabled(true)
     *             .vsanUnmapEnabled(true)
     *             .vsanDitEncryptionEnabled(true)
     *             .vsanDitRekeyInterval(1800)
     *             .vsanDiskGroups(ComputeClusterVsanDiskGroupArgs.builder()
     *                 .cache(cacheDisks[0])
     *                 .storages(storageDisks)
     *                 .build())
     *             .vsanFaultDomains(ComputeClusterVsanFaultDomainArgs.builder()
     *                 .faultDomains(                
     *                     ComputeClusterVsanFaultDomainFaultDomainArgs.builder()
     *                         .name(&#34;fd1&#34;)
     *                         .hostIds(faultdomain1Hosts.stream().map(element -&gt; element.id()).collect(toList()))
     *                         .build(),
     *                     ComputeClusterVsanFaultDomainFaultDomainArgs.builder()
     *                         .name(&#34;fd2&#34;)
     *                         .hostIds(faultdomain2Hosts.stream().map(element -&gt; element.id()).collect(toList()))
     *                         .build())
     *                 .build())
     *             .vsanStretchedCluster(ComputeClusterVsanStretchedClusterArgs.builder()
     *                 .preferredFaultDomainHostIds(preferredFaultDomainHost.stream().map(element -&gt; element.id()).collect(toList()))
     *                 .secondaryFaultDomainHostIds(secondaryFaultDomainHost.stream().map(element -&gt; element.id()).collect(toList()))
     *                 .witnessNode(witnessHost.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    private @Nullable String secondaryFaultDomainName;
    /**
     * @return The managed object IDs of the host selected as witness node when enable stretched cluster.
     * 
     */
    private String witnessNode;

    private ComputeClusterVsanStretchedCluster() {}
    /**
     * @return The managed object IDs of the hosts to put in the first fault domain.
     * 
     */
    public List<String> preferredFaultDomainHostIds() {
        return this.preferredFaultDomainHostIds;
    }
    /**
     * @return The name of first fault domain. Default is `Preferred`.
     * 
     */
    public Optional<String> preferredFaultDomainName() {
        return Optional.ofNullable(this.preferredFaultDomainName);
    }
    /**
     * @return The managed object IDs of the hosts to put in the second fault domain.
     * 
     */
    public List<String> secondaryFaultDomainHostIds() {
        return this.secondaryFaultDomainHostIds;
    }
    /**
     * @return The name of second fault domain. Default is `Secondary`.
     * 
     * &gt; **NOTE:** You must disable vSphere HA before you enable vSAN on the cluster.
     * You can enable or re-enable vSphere HA after vSAN is configured.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vsphere.ComputeCluster;
     * import com.pulumi.vsphere.ComputeClusterArgs;
     * import com.pulumi.vsphere.inputs.ComputeClusterVsanDiskGroupArgs;
     * import com.pulumi.vsphere.inputs.ComputeClusterVsanFaultDomainArgs;
     * import com.pulumi.vsphere.inputs.ComputeClusterVsanStretchedClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var computeCluster = new ComputeCluster(&#34;computeCluster&#34;, ComputeClusterArgs.builder()        
     *             .name(&#34;terraform-compute-cluster-test&#34;)
     *             .datacenterId(datacenter.id())
     *             .hostSystemIds(host.stream().map(element -&gt; element.id()).collect(toList()))
     *             .drsEnabled(true)
     *             .drsAutomationLevel(&#34;fullyAutomated&#34;)
     *             .haEnabled(false)
     *             .vsanEnabled(true)
     *             .vsanEsaEnabled(true)
     *             .vsanDedupEnabled(true)
     *             .vsanCompressionEnabled(true)
     *             .vsanPerformanceEnabled(true)
     *             .vsanVerboseModeEnabled(true)
     *             .vsanNetworkDiagnosticModeEnabled(true)
     *             .vsanUnmapEnabled(true)
     *             .vsanDitEncryptionEnabled(true)
     *             .vsanDitRekeyInterval(1800)
     *             .vsanDiskGroups(ComputeClusterVsanDiskGroupArgs.builder()
     *                 .cache(cacheDisks[0])
     *                 .storages(storageDisks)
     *                 .build())
     *             .vsanFaultDomains(ComputeClusterVsanFaultDomainArgs.builder()
     *                 .faultDomains(                
     *                     ComputeClusterVsanFaultDomainFaultDomainArgs.builder()
     *                         .name(&#34;fd1&#34;)
     *                         .hostIds(faultdomain1Hosts.stream().map(element -&gt; element.id()).collect(toList()))
     *                         .build(),
     *                     ComputeClusterVsanFaultDomainFaultDomainArgs.builder()
     *                         .name(&#34;fd2&#34;)
     *                         .hostIds(faultdomain2Hosts.stream().map(element -&gt; element.id()).collect(toList()))
     *                         .build())
     *                 .build())
     *             .vsanStretchedCluster(ComputeClusterVsanStretchedClusterArgs.builder()
     *                 .preferredFaultDomainHostIds(preferredFaultDomainHost.stream().map(element -&gt; element.id()).collect(toList()))
     *                 .secondaryFaultDomainHostIds(secondaryFaultDomainHost.stream().map(element -&gt; element.id()).collect(toList()))
     *                 .witnessNode(witnessHost.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public Optional<String> secondaryFaultDomainName() {
        return Optional.ofNullable(this.secondaryFaultDomainName);
    }
    /**
     * @return The managed object IDs of the host selected as witness node when enable stretched cluster.
     * 
     */
    public String witnessNode() {
        return this.witnessNode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ComputeClusterVsanStretchedCluster defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> preferredFaultDomainHostIds;
        private @Nullable String preferredFaultDomainName;
        private List<String> secondaryFaultDomainHostIds;
        private @Nullable String secondaryFaultDomainName;
        private String witnessNode;
        public Builder() {}
        public Builder(ComputeClusterVsanStretchedCluster defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.preferredFaultDomainHostIds = defaults.preferredFaultDomainHostIds;
    	      this.preferredFaultDomainName = defaults.preferredFaultDomainName;
    	      this.secondaryFaultDomainHostIds = defaults.secondaryFaultDomainHostIds;
    	      this.secondaryFaultDomainName = defaults.secondaryFaultDomainName;
    	      this.witnessNode = defaults.witnessNode;
        }

        @CustomType.Setter
        public Builder preferredFaultDomainHostIds(List<String> preferredFaultDomainHostIds) {
            if (preferredFaultDomainHostIds == null) {
              throw new MissingRequiredPropertyException("ComputeClusterVsanStretchedCluster", "preferredFaultDomainHostIds");
            }
            this.preferredFaultDomainHostIds = preferredFaultDomainHostIds;
            return this;
        }
        public Builder preferredFaultDomainHostIds(String... preferredFaultDomainHostIds) {
            return preferredFaultDomainHostIds(List.of(preferredFaultDomainHostIds));
        }
        @CustomType.Setter
        public Builder preferredFaultDomainName(@Nullable String preferredFaultDomainName) {

            this.preferredFaultDomainName = preferredFaultDomainName;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryFaultDomainHostIds(List<String> secondaryFaultDomainHostIds) {
            if (secondaryFaultDomainHostIds == null) {
              throw new MissingRequiredPropertyException("ComputeClusterVsanStretchedCluster", "secondaryFaultDomainHostIds");
            }
            this.secondaryFaultDomainHostIds = secondaryFaultDomainHostIds;
            return this;
        }
        public Builder secondaryFaultDomainHostIds(String... secondaryFaultDomainHostIds) {
            return secondaryFaultDomainHostIds(List.of(secondaryFaultDomainHostIds));
        }
        @CustomType.Setter
        public Builder secondaryFaultDomainName(@Nullable String secondaryFaultDomainName) {

            this.secondaryFaultDomainName = secondaryFaultDomainName;
            return this;
        }
        @CustomType.Setter
        public Builder witnessNode(String witnessNode) {
            if (witnessNode == null) {
              throw new MissingRequiredPropertyException("ComputeClusterVsanStretchedCluster", "witnessNode");
            }
            this.witnessNode = witnessNode;
            return this;
        }
        public ComputeClusterVsanStretchedCluster build() {
            final var _resultValue = new ComputeClusterVsanStretchedCluster();
            _resultValue.preferredFaultDomainHostIds = preferredFaultDomainHostIds;
            _resultValue.preferredFaultDomainName = preferredFaultDomainName;
            _resultValue.secondaryFaultDomainHostIds = secondaryFaultDomainHostIds;
            _resultValue.secondaryFaultDomainName = secondaryFaultDomainName;
            _resultValue.witnessNode = witnessNode;
            return _resultValue;
        }
    }
}
