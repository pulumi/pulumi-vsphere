// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContentLibraryPublicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContentLibraryPublicationArgs Empty = new ContentLibraryPublicationArgs();

    /**
     * Authentication method to connect ro a published content library. Must be `NONE` or `BASIC`.
     * 
     */
    @Import(name="authenticationMethod")
    private @Nullable Output<String> authenticationMethod;

    /**
     * @return Authentication method to connect ro a published content library. Must be `NONE` or `BASIC`.
     * 
     */
    public Optional<Output<String>> authenticationMethod() {
        return Optional.ofNullable(this.authenticationMethod);
    }

    /**
     * Password used for authentication.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password used for authentication.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The URL of the published content library.
     * 
     */
    @Import(name="publishUrl")
    private @Nullable Output<String> publishUrl;

    /**
     * @return The URL of the published content library.
     * 
     */
    public Optional<Output<String>> publishUrl() {
        return Optional.ofNullable(this.publishUrl);
    }

    /**
     * Publish the content library. Default `false`.
     * 
     */
    @Import(name="published")
    private @Nullable Output<Boolean> published;

    /**
     * @return Publish the content library. Default `false`.
     * 
     */
    public Optional<Output<Boolean>> published() {
        return Optional.ofNullable(this.published);
    }

    /**
     * Username used for authentication.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Username used for authentication.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ContentLibraryPublicationArgs() {}

    private ContentLibraryPublicationArgs(ContentLibraryPublicationArgs $) {
        this.authenticationMethod = $.authenticationMethod;
        this.password = $.password;
        this.publishUrl = $.publishUrl;
        this.published = $.published;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContentLibraryPublicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContentLibraryPublicationArgs $;

        public Builder() {
            $ = new ContentLibraryPublicationArgs();
        }

        public Builder(ContentLibraryPublicationArgs defaults) {
            $ = new ContentLibraryPublicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationMethod Authentication method to connect ro a published content library. Must be `NONE` or `BASIC`.
         * 
         * @return builder
         * 
         */
        public Builder authenticationMethod(@Nullable Output<String> authenticationMethod) {
            $.authenticationMethod = authenticationMethod;
            return this;
        }

        /**
         * @param authenticationMethod Authentication method to connect ro a published content library. Must be `NONE` or `BASIC`.
         * 
         * @return builder
         * 
         */
        public Builder authenticationMethod(String authenticationMethod) {
            return authenticationMethod(Output.of(authenticationMethod));
        }

        /**
         * @param password Password used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param publishUrl The URL of the published content library.
         * 
         * @return builder
         * 
         */
        public Builder publishUrl(@Nullable Output<String> publishUrl) {
            $.publishUrl = publishUrl;
            return this;
        }

        /**
         * @param publishUrl The URL of the published content library.
         * 
         * @return builder
         * 
         */
        public Builder publishUrl(String publishUrl) {
            return publishUrl(Output.of(publishUrl));
        }

        /**
         * @param published Publish the content library. Default `false`.
         * 
         * @return builder
         * 
         */
        public Builder published(@Nullable Output<Boolean> published) {
            $.published = published;
            return this;
        }

        /**
         * @param published Publish the content library. Default `false`.
         * 
         * @return builder
         * 
         */
        public Builder published(Boolean published) {
            return published(Output.of(published));
        }

        /**
         * @param username Username used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ContentLibraryPublicationArgs build() {
            return $;
        }
    }

}
