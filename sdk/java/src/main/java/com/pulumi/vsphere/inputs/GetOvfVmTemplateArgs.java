// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetOvfVmTemplateArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetOvfVmTemplateArgs Empty = new GetOvfVmTemplateArgs();

    /**
     * Allow unverified SSL certificates
     * when deploying OVF/OVA from a URL.
     * 
     */
    @Import(name="allowUnverifiedSslCert")
    private @Nullable Output<Boolean> allowUnverifiedSslCert;

    /**
     * @return Allow unverified SSL certificates
     * when deploying OVF/OVA from a URL.
     * 
     */
    public Optional<Output<Boolean>> allowUnverifiedSslCert() {
        return Optional.ofNullable(this.allowUnverifiedSslCert);
    }

    /**
     * The ID of the virtual machine&#39;s datastore. The
     * virtual machine configuration is placed here, along with any virtual disks
     * that are created without datastores.
     * 
     */
    @Import(name="datastoreId")
    private @Nullable Output<String> datastoreId;

    /**
     * @return The ID of the virtual machine&#39;s datastore. The
     * virtual machine configuration is placed here, along with any virtual disks
     * that are created without datastores.
     * 
     */
    public Optional<Output<String>> datastoreId() {
        return Optional.ofNullable(this.datastoreId);
    }

    /**
     * The key of the chosen deployment option. If
     * empty, the default option is chosen.
     * 
     */
    @Import(name="deploymentOption")
    private @Nullable Output<String> deploymentOption;

    /**
     * @return The key of the chosen deployment option. If
     * empty, the default option is chosen.
     * 
     */
    public Optional<Output<String>> deploymentOption() {
        return Optional.ofNullable(this.deploymentOption);
    }

    /**
     * The disk provisioning type. If set, all the
     * disks in the deployed OVA/OVF will have the same specified disk type. Can be
     * one of `thin`, `flat`, `thick` or `sameAsSource`.
     * 
     */
    @Import(name="diskProvisioning")
    private @Nullable Output<String> diskProvisioning;

    /**
     * @return The disk provisioning type. If set, all the
     * disks in the deployed OVA/OVF will have the same specified disk type. Can be
     * one of `thin`, `flat`, `thick` or `sameAsSource`.
     * 
     */
    public Optional<Output<String>> diskProvisioning() {
        return Optional.ofNullable(this.diskProvisioning);
    }

    /**
     * Allow properties with
     * `ovf:userConfigurable=false` to be set.
     * 
     */
    @Import(name="enableHiddenProperties")
    private @Nullable Output<Boolean> enableHiddenProperties;

    /**
     * @return Allow properties with
     * `ovf:userConfigurable=false` to be set.
     * 
     */
    public Optional<Output<Boolean>> enableHiddenProperties() {
        return Optional.ofNullable(this.enableHiddenProperties);
    }

    /**
     * The name of the folder in which to place the virtual
     * machine.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return The name of the folder in which to place the virtual
     * machine.
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * The ID of the ESXi host system to deploy the
     * virtual machine.
     * 
     */
    @Import(name="hostSystemId", required=true)
    private Output<String> hostSystemId;

    /**
     * @return The ID of the ESXi host system to deploy the
     * virtual machine.
     * 
     */
    public Output<String> hostSystemId() {
        return this.hostSystemId;
    }

    /**
     * The IP allocation policy.
     * 
     */
    @Import(name="ipAllocationPolicy")
    private @Nullable Output<String> ipAllocationPolicy;

    /**
     * @return The IP allocation policy.
     * 
     */
    public Optional<Output<String>> ipAllocationPolicy() {
        return Optional.ofNullable(this.ipAllocationPolicy);
    }

    /**
     * The IP protocol.
     * 
     */
    @Import(name="ipProtocol")
    private @Nullable Output<String> ipProtocol;

    /**
     * @return The IP protocol.
     * 
     */
    public Optional<Output<String>> ipProtocol() {
        return Optional.ofNullable(this.ipProtocol);
    }

    /**
     * The absolute path to the OVF/OVA file on the
     * local system. When deploying from an OVF, ensure all necessary files such as
     * the `.vmdk` files are present in the same directory as the OVF.
     * 
     */
    @Import(name="localOvfPath")
    private @Nullable Output<String> localOvfPath;

    /**
     * @return The absolute path to the OVF/OVA file on the
     * local system. When deploying from an OVF, ensure all necessary files such as
     * the `.vmdk` files are present in the same directory as the OVF.
     * 
     */
    public Optional<Output<String>> localOvfPath() {
        return Optional.ofNullable(this.localOvfPath);
    }

    /**
     * Name of the virtual machine to create.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the virtual machine to create.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The mapping of name of network identifiers
     * from the OVF descriptor to network UUID in the environment.
     * 
     */
    @Import(name="ovfNetworkMap")
    private @Nullable Output<Map<String,String>> ovfNetworkMap;

    /**
     * @return The mapping of name of network identifiers
     * from the OVF descriptor to network UUID in the environment.
     * 
     */
    public Optional<Output<Map<String,String>>> ovfNetworkMap() {
        return Optional.ofNullable(this.ovfNetworkMap);
    }

    /**
     * URL of the remote OVF/OVA file to be deployed.
     * 
     * &gt; **NOTE:** Either `local_ovf_path` or `remote_ovf_url` is required, both can
     * not be empty.
     * 
     */
    @Import(name="remoteOvfUrl")
    private @Nullable Output<String> remoteOvfUrl;

    /**
     * @return URL of the remote OVF/OVA file to be deployed.
     * 
     * &gt; **NOTE:** Either `local_ovf_path` or `remote_ovf_url` is required, both can
     * not be empty.
     * 
     */
    public Optional<Output<String>> remoteOvfUrl() {
        return Optional.ofNullable(this.remoteOvfUrl);
    }

    /**
     * The ID of a resource pool in which to place
     * the virtual machine.
     * 
     */
    @Import(name="resourcePoolId", required=true)
    private Output<String> resourcePoolId;

    /**
     * @return The ID of a resource pool in which to place
     * the virtual machine.
     * 
     */
    public Output<String> resourcePoolId() {
        return this.resourcePoolId;
    }

    private GetOvfVmTemplateArgs() {}

    private GetOvfVmTemplateArgs(GetOvfVmTemplateArgs $) {
        this.allowUnverifiedSslCert = $.allowUnverifiedSslCert;
        this.datastoreId = $.datastoreId;
        this.deploymentOption = $.deploymentOption;
        this.diskProvisioning = $.diskProvisioning;
        this.enableHiddenProperties = $.enableHiddenProperties;
        this.folder = $.folder;
        this.hostSystemId = $.hostSystemId;
        this.ipAllocationPolicy = $.ipAllocationPolicy;
        this.ipProtocol = $.ipProtocol;
        this.localOvfPath = $.localOvfPath;
        this.name = $.name;
        this.ovfNetworkMap = $.ovfNetworkMap;
        this.remoteOvfUrl = $.remoteOvfUrl;
        this.resourcePoolId = $.resourcePoolId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOvfVmTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOvfVmTemplateArgs $;

        public Builder() {
            $ = new GetOvfVmTemplateArgs();
        }

        public Builder(GetOvfVmTemplateArgs defaults) {
            $ = new GetOvfVmTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowUnverifiedSslCert Allow unverified SSL certificates
         * when deploying OVF/OVA from a URL.
         * 
         * @return builder
         * 
         */
        public Builder allowUnverifiedSslCert(@Nullable Output<Boolean> allowUnverifiedSslCert) {
            $.allowUnverifiedSslCert = allowUnverifiedSslCert;
            return this;
        }

        /**
         * @param allowUnverifiedSslCert Allow unverified SSL certificates
         * when deploying OVF/OVA from a URL.
         * 
         * @return builder
         * 
         */
        public Builder allowUnverifiedSslCert(Boolean allowUnverifiedSslCert) {
            return allowUnverifiedSslCert(Output.of(allowUnverifiedSslCert));
        }

        /**
         * @param datastoreId The ID of the virtual machine&#39;s datastore. The
         * virtual machine configuration is placed here, along with any virtual disks
         * that are created without datastores.
         * 
         * @return builder
         * 
         */
        public Builder datastoreId(@Nullable Output<String> datastoreId) {
            $.datastoreId = datastoreId;
            return this;
        }

        /**
         * @param datastoreId The ID of the virtual machine&#39;s datastore. The
         * virtual machine configuration is placed here, along with any virtual disks
         * that are created without datastores.
         * 
         * @return builder
         * 
         */
        public Builder datastoreId(String datastoreId) {
            return datastoreId(Output.of(datastoreId));
        }

        /**
         * @param deploymentOption The key of the chosen deployment option. If
         * empty, the default option is chosen.
         * 
         * @return builder
         * 
         */
        public Builder deploymentOption(@Nullable Output<String> deploymentOption) {
            $.deploymentOption = deploymentOption;
            return this;
        }

        /**
         * @param deploymentOption The key of the chosen deployment option. If
         * empty, the default option is chosen.
         * 
         * @return builder
         * 
         */
        public Builder deploymentOption(String deploymentOption) {
            return deploymentOption(Output.of(deploymentOption));
        }

        /**
         * @param diskProvisioning The disk provisioning type. If set, all the
         * disks in the deployed OVA/OVF will have the same specified disk type. Can be
         * one of `thin`, `flat`, `thick` or `sameAsSource`.
         * 
         * @return builder
         * 
         */
        public Builder diskProvisioning(@Nullable Output<String> diskProvisioning) {
            $.diskProvisioning = diskProvisioning;
            return this;
        }

        /**
         * @param diskProvisioning The disk provisioning type. If set, all the
         * disks in the deployed OVA/OVF will have the same specified disk type. Can be
         * one of `thin`, `flat`, `thick` or `sameAsSource`.
         * 
         * @return builder
         * 
         */
        public Builder diskProvisioning(String diskProvisioning) {
            return diskProvisioning(Output.of(diskProvisioning));
        }

        /**
         * @param enableHiddenProperties Allow properties with
         * `ovf:userConfigurable=false` to be set.
         * 
         * @return builder
         * 
         */
        public Builder enableHiddenProperties(@Nullable Output<Boolean> enableHiddenProperties) {
            $.enableHiddenProperties = enableHiddenProperties;
            return this;
        }

        /**
         * @param enableHiddenProperties Allow properties with
         * `ovf:userConfigurable=false` to be set.
         * 
         * @return builder
         * 
         */
        public Builder enableHiddenProperties(Boolean enableHiddenProperties) {
            return enableHiddenProperties(Output.of(enableHiddenProperties));
        }

        /**
         * @param folder The name of the folder in which to place the virtual
         * machine.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The name of the folder in which to place the virtual
         * machine.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param hostSystemId The ID of the ESXi host system to deploy the
         * virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder hostSystemId(Output<String> hostSystemId) {
            $.hostSystemId = hostSystemId;
            return this;
        }

        /**
         * @param hostSystemId The ID of the ESXi host system to deploy the
         * virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder hostSystemId(String hostSystemId) {
            return hostSystemId(Output.of(hostSystemId));
        }

        /**
         * @param ipAllocationPolicy The IP allocation policy.
         * 
         * @return builder
         * 
         */
        public Builder ipAllocationPolicy(@Nullable Output<String> ipAllocationPolicy) {
            $.ipAllocationPolicy = ipAllocationPolicy;
            return this;
        }

        /**
         * @param ipAllocationPolicy The IP allocation policy.
         * 
         * @return builder
         * 
         */
        public Builder ipAllocationPolicy(String ipAllocationPolicy) {
            return ipAllocationPolicy(Output.of(ipAllocationPolicy));
        }

        /**
         * @param ipProtocol The IP protocol.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(@Nullable Output<String> ipProtocol) {
            $.ipProtocol = ipProtocol;
            return this;
        }

        /**
         * @param ipProtocol The IP protocol.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(String ipProtocol) {
            return ipProtocol(Output.of(ipProtocol));
        }

        /**
         * @param localOvfPath The absolute path to the OVF/OVA file on the
         * local system. When deploying from an OVF, ensure all necessary files such as
         * the `.vmdk` files are present in the same directory as the OVF.
         * 
         * @return builder
         * 
         */
        public Builder localOvfPath(@Nullable Output<String> localOvfPath) {
            $.localOvfPath = localOvfPath;
            return this;
        }

        /**
         * @param localOvfPath The absolute path to the OVF/OVA file on the
         * local system. When deploying from an OVF, ensure all necessary files such as
         * the `.vmdk` files are present in the same directory as the OVF.
         * 
         * @return builder
         * 
         */
        public Builder localOvfPath(String localOvfPath) {
            return localOvfPath(Output.of(localOvfPath));
        }

        /**
         * @param name Name of the virtual machine to create.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the virtual machine to create.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ovfNetworkMap The mapping of name of network identifiers
         * from the OVF descriptor to network UUID in the environment.
         * 
         * @return builder
         * 
         */
        public Builder ovfNetworkMap(@Nullable Output<Map<String,String>> ovfNetworkMap) {
            $.ovfNetworkMap = ovfNetworkMap;
            return this;
        }

        /**
         * @param ovfNetworkMap The mapping of name of network identifiers
         * from the OVF descriptor to network UUID in the environment.
         * 
         * @return builder
         * 
         */
        public Builder ovfNetworkMap(Map<String,String> ovfNetworkMap) {
            return ovfNetworkMap(Output.of(ovfNetworkMap));
        }

        /**
         * @param remoteOvfUrl URL of the remote OVF/OVA file to be deployed.
         * 
         * &gt; **NOTE:** Either `local_ovf_path` or `remote_ovf_url` is required, both can
         * not be empty.
         * 
         * @return builder
         * 
         */
        public Builder remoteOvfUrl(@Nullable Output<String> remoteOvfUrl) {
            $.remoteOvfUrl = remoteOvfUrl;
            return this;
        }

        /**
         * @param remoteOvfUrl URL of the remote OVF/OVA file to be deployed.
         * 
         * &gt; **NOTE:** Either `local_ovf_path` or `remote_ovf_url` is required, both can
         * not be empty.
         * 
         * @return builder
         * 
         */
        public Builder remoteOvfUrl(String remoteOvfUrl) {
            return remoteOvfUrl(Output.of(remoteOvfUrl));
        }

        /**
         * @param resourcePoolId The ID of a resource pool in which to place
         * the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder resourcePoolId(Output<String> resourcePoolId) {
            $.resourcePoolId = resourcePoolId;
            return this;
        }

        /**
         * @param resourcePoolId The ID of a resource pool in which to place
         * the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder resourcePoolId(String resourcePoolId) {
            return resourcePoolId(Output.of(resourcePoolId));
        }

        public GetOvfVmTemplateArgs build() {
            if ($.hostSystemId == null) {
                throw new MissingRequiredPropertyException("GetOvfVmTemplateArgs", "hostSystemId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetOvfVmTemplateArgs", "name");
            }
            if ($.resourcePoolId == null) {
                throw new MissingRequiredPropertyException("GetOvfVmTemplateArgs", "resourcePoolId");
            }
            return $;
        }
    }

}
