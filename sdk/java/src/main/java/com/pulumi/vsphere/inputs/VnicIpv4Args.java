// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VnicIpv4Args extends com.pulumi.resources.ResourceArgs {

    public static final VnicIpv4Args Empty = new VnicIpv4Args();

    /**
     * Use DHCP to configure the interface&#39;s IPv4 stack.
     * 
     */
    @Import(name="dhcp")
    private @Nullable Output<Boolean> dhcp;

    /**
     * @return Use DHCP to configure the interface&#39;s IPv4 stack.
     * 
     */
    public Optional<Output<Boolean>> dhcp() {
        return Optional.ofNullable(this.dhcp);
    }

    /**
     * IP address of the default gateway, if DHCP is not set.
     * 
     */
    @Import(name="gw")
    private @Nullable Output<String> gw;

    /**
     * @return IP address of the default gateway, if DHCP is not set.
     * 
     */
    public Optional<Output<String>> gw() {
        return Optional.ofNullable(this.gw);
    }

    /**
     * Address of the interface, if DHCP is not set.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return Address of the interface, if DHCP is not set.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * Netmask of the interface, if DHCP is not set.
     * 
     */
    @Import(name="netmask")
    private @Nullable Output<String> netmask;

    /**
     * @return Netmask of the interface, if DHCP is not set.
     * 
     */
    public Optional<Output<String>> netmask() {
        return Optional.ofNullable(this.netmask);
    }

    private VnicIpv4Args() {}

    private VnicIpv4Args(VnicIpv4Args $) {
        this.dhcp = $.dhcp;
        this.gw = $.gw;
        this.ip = $.ip;
        this.netmask = $.netmask;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VnicIpv4Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VnicIpv4Args $;

        public Builder() {
            $ = new VnicIpv4Args();
        }

        public Builder(VnicIpv4Args defaults) {
            $ = new VnicIpv4Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param dhcp Use DHCP to configure the interface&#39;s IPv4 stack.
         * 
         * @return builder
         * 
         */
        public Builder dhcp(@Nullable Output<Boolean> dhcp) {
            $.dhcp = dhcp;
            return this;
        }

        /**
         * @param dhcp Use DHCP to configure the interface&#39;s IPv4 stack.
         * 
         * @return builder
         * 
         */
        public Builder dhcp(Boolean dhcp) {
            return dhcp(Output.of(dhcp));
        }

        /**
         * @param gw IP address of the default gateway, if DHCP is not set.
         * 
         * @return builder
         * 
         */
        public Builder gw(@Nullable Output<String> gw) {
            $.gw = gw;
            return this;
        }

        /**
         * @param gw IP address of the default gateway, if DHCP is not set.
         * 
         * @return builder
         * 
         */
        public Builder gw(String gw) {
            return gw(Output.of(gw));
        }

        /**
         * @param ip Address of the interface, if DHCP is not set.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip Address of the interface, if DHCP is not set.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param netmask Netmask of the interface, if DHCP is not set.
         * 
         * @return builder
         * 
         */
        public Builder netmask(@Nullable Output<String> netmask) {
            $.netmask = netmask;
            return this;
        }

        /**
         * @param netmask Netmask of the interface, if DHCP is not set.
         * 
         * @return builder
         * 
         */
        public Builder netmask(String netmask) {
            return netmask(Output.of(netmask));
        }

        public VnicIpv4Args build() {
            return $;
        }
    }

}
