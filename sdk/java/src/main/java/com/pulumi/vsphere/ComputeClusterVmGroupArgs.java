// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ComputeClusterVmGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final ComputeClusterVmGroupArgs Empty = new ComputeClusterVmGroupArgs();

    /**
     * The managed object reference
     * ID of the cluster to put the group in.  Forces a new
     * resource if changed.
     * 
     */
    @Import(name="computeClusterId", required=true)
    private Output<String> computeClusterId;

    /**
     * @return The managed object reference
     * ID of the cluster to put the group in.  Forces a new
     * resource if changed.
     * 
     */
    public Output<String> computeClusterId() {
        return this.computeClusterId;
    }

    /**
     * The name of the VM group. This must be unique in the
     * cluster. Forces a new resource if changed.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the VM group. This must be unique in the
     * cluster. Forces a new resource if changed.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The UUIDs of the virtual machines in this
     * group.
     * 
     * &gt; **NOTE:** The namespace for cluster names on this resource (defined by the
     * `name` argument) is shared with the
     * `vsphere.ComputeClusterHostGroup`
     * resource. Make sure your names are unique across both resources.
     * 
     */
    @Import(name="virtualMachineIds")
    private @Nullable Output<List<String>> virtualMachineIds;

    /**
     * @return The UUIDs of the virtual machines in this
     * group.
     * 
     * &gt; **NOTE:** The namespace for cluster names on this resource (defined by the
     * `name` argument) is shared with the
     * `vsphere.ComputeClusterHostGroup`
     * resource. Make sure your names are unique across both resources.
     * 
     */
    public Optional<Output<List<String>>> virtualMachineIds() {
        return Optional.ofNullable(this.virtualMachineIds);
    }

    private ComputeClusterVmGroupArgs() {}

    private ComputeClusterVmGroupArgs(ComputeClusterVmGroupArgs $) {
        this.computeClusterId = $.computeClusterId;
        this.name = $.name;
        this.virtualMachineIds = $.virtualMachineIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComputeClusterVmGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComputeClusterVmGroupArgs $;

        public Builder() {
            $ = new ComputeClusterVmGroupArgs();
        }

        public Builder(ComputeClusterVmGroupArgs defaults) {
            $ = new ComputeClusterVmGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param computeClusterId The managed object reference
         * ID of the cluster to put the group in.  Forces a new
         * resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder computeClusterId(Output<String> computeClusterId) {
            $.computeClusterId = computeClusterId;
            return this;
        }

        /**
         * @param computeClusterId The managed object reference
         * ID of the cluster to put the group in.  Forces a new
         * resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder computeClusterId(String computeClusterId) {
            return computeClusterId(Output.of(computeClusterId));
        }

        /**
         * @param name The name of the VM group. This must be unique in the
         * cluster. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the VM group. This must be unique in the
         * cluster. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param virtualMachineIds The UUIDs of the virtual machines in this
         * group.
         * 
         * &gt; **NOTE:** The namespace for cluster names on this resource (defined by the
         * `name` argument) is shared with the
         * `vsphere.ComputeClusterHostGroup`
         * resource. Make sure your names are unique across both resources.
         * 
         * @return builder
         * 
         */
        public Builder virtualMachineIds(@Nullable Output<List<String>> virtualMachineIds) {
            $.virtualMachineIds = virtualMachineIds;
            return this;
        }

        /**
         * @param virtualMachineIds The UUIDs of the virtual machines in this
         * group.
         * 
         * &gt; **NOTE:** The namespace for cluster names on this resource (defined by the
         * `name` argument) is shared with the
         * `vsphere.ComputeClusterHostGroup`
         * resource. Make sure your names are unique across both resources.
         * 
         * @return builder
         * 
         */
        public Builder virtualMachineIds(List<String> virtualMachineIds) {
            return virtualMachineIds(Output.of(virtualMachineIds));
        }

        /**
         * @param virtualMachineIds The UUIDs of the virtual machines in this
         * group.
         * 
         * &gt; **NOTE:** The namespace for cluster names on this resource (defined by the
         * `name` argument) is shared with the
         * `vsphere.ComputeClusterHostGroup`
         * resource. Make sure your names are unique across both resources.
         * 
         * @return builder
         * 
         */
        public Builder virtualMachineIds(String... virtualMachineIds) {
            return virtualMachineIds(List.of(virtualMachineIds));
        }

        public ComputeClusterVmGroupArgs build() {
            $.computeClusterId = Objects.requireNonNull($.computeClusterId, "expected parameter 'computeClusterId' to be non-null");
            return $;
        }
    }

}
