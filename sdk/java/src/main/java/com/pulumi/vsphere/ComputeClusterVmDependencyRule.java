// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.ComputeClusterVmDependencyRuleArgs;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.inputs.ComputeClusterVmDependencyRuleState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule")
public class ComputeClusterVmDependencyRule extends com.pulumi.resources.CustomResource {
    /**
     * The managed object reference
     * ID of the cluster to put the group in.  Forces a new
     * resource if changed.
     * 
     */
    @Export(name="computeClusterId", type=String.class, parameters={})
    private Output<String> computeClusterId;

    /**
     * @return The managed object reference
     * ID of the cluster to put the group in.  Forces a new
     * resource if changed.
     * 
     */
    public Output<String> computeClusterId() {
        return this.computeClusterId;
    }
    /**
     * The name of the VM group that this
     * rule depends on. The VMs defined in the group specified by
     * `vm_group_name` will not be started until the VMs in this
     * group are started.
     * 
     */
    @Export(name="dependencyVmGroupName", type=String.class, parameters={})
    private Output<String> dependencyVmGroupName;

    /**
     * @return The name of the VM group that this
     * rule depends on. The VMs defined in the group specified by
     * `vm_group_name` will not be started until the VMs in this
     * group are started.
     * 
     */
    public Output<String> dependencyVmGroupName() {
        return this.dependencyVmGroupName;
    }
    /**
     * Enable this rule in the cluster. Default: `true`.
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Enable this rule in the cluster. Default: `true`.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * When this value is `true`, prevents any virtual
     * machine operations that may violate this rule. Default: `false`.
     * 
     * &gt; **NOTE:** The namespace for rule names on this resource (defined by the
     * `name` argument) is shared with all rules in the cluster - consider
     * this when naming your rules.
     * 
     */
    @Export(name="mandatory", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> mandatory;

    /**
     * @return When this value is `true`, prevents any virtual
     * machine operations that may violate this rule. Default: `false`.
     * 
     * &gt; **NOTE:** The namespace for rule names on this resource (defined by the
     * `name` argument) is shared with all rules in the cluster - consider
     * this when naming your rules.
     * 
     */
    public Output<Optional<Boolean>> mandatory() {
        return Codegen.optional(this.mandatory);
    }
    /**
     * The name of the rule. This must be unique in the
     * cluster.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the rule. This must be unique in the
     * cluster.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The name of the VM group that is the subject of
     * this rule. The VMs defined in this group will not be started until the VMs in
     * the group specified by
     * `dependency_vm_group_name` are started.
     * 
     */
    @Export(name="vmGroupName", type=String.class, parameters={})
    private Output<String> vmGroupName;

    /**
     * @return The name of the VM group that is the subject of
     * this rule. The VMs defined in this group will not be started until the VMs in
     * the group specified by
     * `dependency_vm_group_name` are started.
     * 
     */
    public Output<String> vmGroupName() {
        return this.vmGroupName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ComputeClusterVmDependencyRule(String name) {
        this(name, ComputeClusterVmDependencyRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ComputeClusterVmDependencyRule(String name, ComputeClusterVmDependencyRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ComputeClusterVmDependencyRule(String name, ComputeClusterVmDependencyRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule", name, args == null ? ComputeClusterVmDependencyRuleArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ComputeClusterVmDependencyRule(String name, Output<String> id, @Nullable ComputeClusterVmDependencyRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ComputeClusterVmDependencyRule get(String name, Output<String> id, @Nullable ComputeClusterVmDependencyRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ComputeClusterVmDependencyRule(name, id, state, options);
    }
}
