// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.ComputeClusterVmDependencyRuleArgs;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.inputs.ComputeClusterVmDependencyRuleState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `vsphere.ComputeClusterVmDependencyRule` resource can be used to manage
 * VM dependency rules in a cluster, either created by the
 * `vsphere.ComputeCluster` resource or looked up
 * by the `vsphere.ComputeCluster` data source.
 * 
 * A virtual machine dependency rule applies to vSphere HA, and allows
 * user-defined startup orders for virtual machines in the case of host failure.
 * Virtual machines are supplied via groups, which can be managed via the
 * `vsphere.ComputeClusterVmGroup`
 * resource.
 * 
 * &gt; **NOTE:** This resource requires vCenter and is not available on direct ESXi
 * connections.
 * 
 * ## Example Usage
 * 
 * The example below creates two virtual machine in a cluster using the
 * `vsphere.VirtualMachine` resource in a cluster
 * looked up by the `vsphere.ComputeCluster`
 * data source. It then creates a group with this virtual machine. Two groups are created, each with one of the created VMs. Finally, a rule is created to ensure that `vm1` starts before `vm2`.
 * 
 * &gt; Note how `dependency_vm_group_name` and
 * `vm_group_name` are sourced off of the `name` attributes from
 * the `vsphere.ComputeClusterVmGroup`
 * resource. This is to ensure that the rule is not created before the groups
 * exist, which may not possibly happen in the event that the names came from a
 * &#34;static&#34; source such as a variable.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VsphereFunctions;
 * import com.pulumi.vsphere.inputs.GetDatacenterArgs;
 * import com.pulumi.vsphere.inputs.GetDatastoreArgs;
 * import com.pulumi.vsphere.inputs.GetComputeClusterArgs;
 * import com.pulumi.vsphere.inputs.GetNetworkArgs;
 * import com.pulumi.vsphere.VirtualMachine;
 * import com.pulumi.vsphere.VirtualMachineArgs;
 * import com.pulumi.vsphere.inputs.VirtualMachineNetworkInterfaceArgs;
 * import com.pulumi.vsphere.inputs.VirtualMachineDiskArgs;
 * import com.pulumi.vsphere.ComputeClusterVmGroup;
 * import com.pulumi.vsphere.ComputeClusterVmGroupArgs;
 * import com.pulumi.vsphere.ComputeClusterVmDependencyRule;
 * import com.pulumi.vsphere.ComputeClusterVmDependencyRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var datacenter = VsphereFunctions.getDatacenter(GetDatacenterArgs.builder()
 *             .name("dc-01")
 *             .build());
 * 
 *         final var datastore = VsphereFunctions.getDatastore(GetDatastoreArgs.builder()
 *             .name("datastore1")
 *             .datacenterId(datacenter.id())
 *             .build());
 * 
 *         final var cluster = VsphereFunctions.getComputeCluster(GetComputeClusterArgs.builder()
 *             .name("cluster-01")
 *             .datacenterId(datacenter.id())
 *             .build());
 * 
 *         final var network = VsphereFunctions.getNetwork(GetNetworkArgs.builder()
 *             .name("network1")
 *             .datacenterId(datacenter.id())
 *             .build());
 * 
 *         var vm1 = new VirtualMachine("vm1", VirtualMachineArgs.builder()
 *             .name("test1")
 *             .resourcePoolId(cluster.resourcePoolId())
 *             .datastoreId(datastore.id())
 *             .numCpus(2)
 *             .memory(2048)
 *             .guestId("otherLinux64Guest")
 *             .networkInterfaces(VirtualMachineNetworkInterfaceArgs.builder()
 *                 .networkId(network.id())
 *                 .build())
 *             .disks(VirtualMachineDiskArgs.builder()
 *                 .label("disk0")
 *                 .size(20)
 *                 .build())
 *             .build());
 * 
 *         var vm2 = new VirtualMachine("vm2", VirtualMachineArgs.builder()
 *             .name("test2")
 *             .resourcePoolId(cluster.resourcePoolId())
 *             .datastoreId(datastore.id())
 *             .numCpus(2)
 *             .memory(2048)
 *             .guestId("otherLinux64Guest")
 *             .networkInterfaces(VirtualMachineNetworkInterfaceArgs.builder()
 *                 .networkId(network.id())
 *                 .build())
 *             .disks(VirtualMachineDiskArgs.builder()
 *                 .label("disk0")
 *                 .size(20)
 *                 .build())
 *             .build());
 * 
 *         var clusterVmGroup1 = new ComputeClusterVmGroup("clusterVmGroup1", ComputeClusterVmGroupArgs.builder()
 *             .name("test-cluster-vm-group1")
 *             .computeClusterId(cluster.id())
 *             .virtualMachineIds(vm1.id())
 *             .build());
 * 
 *         var clusterVmGroup2 = new ComputeClusterVmGroup("clusterVmGroup2", ComputeClusterVmGroupArgs.builder()
 *             .name("test-cluster-vm-group2")
 *             .computeClusterId(cluster.id())
 *             .virtualMachineIds(vm2.id())
 *             .build());
 * 
 *         var clusterVmDependencyRule = new ComputeClusterVmDependencyRule("clusterVmDependencyRule", ComputeClusterVmDependencyRuleArgs.builder()
 *             .computeClusterId(cluster.id())
 *             .name("test-cluster-vm-dependency-rule")
 *             .dependencyVmGroupName(clusterVmGroup1.name())
 *             .vmGroupName(clusterVmGroup2.name())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * An existing rule can be imported into this resource by supplying
 * 
 * both the path to the cluster, and the name the rule. If the name or cluster is
 * 
 * not found, or if the rule is of a different type, an error will be returned. An
 * 
 * example is below:
 * 
 * ```sh
 * $ pulumi import vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule cluster_vm_dependency_rule \
 * ```
 * 
 *   &#39;{&#34;compute_cluster_path&#34;: &#34;/dc1/host/cluster1&#34;, \
 * 
 *   &#34;name&#34;: &#34;pulumi-test-cluster-vm-dependency-rule&#34;}&#39;
 * 
 */
@ResourceType(type="vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule")
public class ComputeClusterVmDependencyRule extends com.pulumi.resources.CustomResource {
    /**
     * The managed object reference
     * ID of the cluster to put the group in.  Forces a new
     * resource if changed.
     * 
     */
    @Export(name="computeClusterId", refs={String.class}, tree="[0]")
    private Output<String> computeClusterId;

    /**
     * @return The managed object reference
     * ID of the cluster to put the group in.  Forces a new
     * resource if changed.
     * 
     */
    public Output<String> computeClusterId() {
        return this.computeClusterId;
    }
    /**
     * The name of the VM group that this
     * rule depends on. The VMs defined in the group specified by
     * `vm_group_name` will not be started until the VMs in this
     * group are started.
     * 
     */
    @Export(name="dependencyVmGroupName", refs={String.class}, tree="[0]")
    private Output<String> dependencyVmGroupName;

    /**
     * @return The name of the VM group that this
     * rule depends on. The VMs defined in the group specified by
     * `vm_group_name` will not be started until the VMs in this
     * group are started.
     * 
     */
    public Output<String> dependencyVmGroupName() {
        return this.dependencyVmGroupName;
    }
    /**
     * Enable this rule in the cluster. Default: `true`.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Enable this rule in the cluster. Default: `true`.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * When this value is `true`, prevents any virtual
     * machine operations that may violate this rule. Default: `false`.
     * 
     * &gt; **NOTE:** The namespace for rule names on this resource (defined by the
     * `name` argument) is shared with all rules in the cluster - consider
     * this when naming your rules.
     * 
     */
    @Export(name="mandatory", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> mandatory;

    /**
     * @return When this value is `true`, prevents any virtual
     * machine operations that may violate this rule. Default: `false`.
     * 
     * &gt; **NOTE:** The namespace for rule names on this resource (defined by the
     * `name` argument) is shared with all rules in the cluster - consider
     * this when naming your rules.
     * 
     */
    public Output<Optional<Boolean>> mandatory() {
        return Codegen.optional(this.mandatory);
    }
    /**
     * The name of the rule. This must be unique in the
     * cluster.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the rule. This must be unique in the
     * cluster.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The name of the VM group that is the subject of
     * this rule. The VMs defined in this group will not be started until the VMs in
     * the group specified by
     * `dependency_vm_group_name` are started.
     * 
     */
    @Export(name="vmGroupName", refs={String.class}, tree="[0]")
    private Output<String> vmGroupName;

    /**
     * @return The name of the VM group that is the subject of
     * this rule. The VMs defined in this group will not be started until the VMs in
     * the group specified by
     * `dependency_vm_group_name` are started.
     * 
     */
    public Output<String> vmGroupName() {
        return this.vmGroupName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ComputeClusterVmDependencyRule(java.lang.String name) {
        this(name, ComputeClusterVmDependencyRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ComputeClusterVmDependencyRule(java.lang.String name, ComputeClusterVmDependencyRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ComputeClusterVmDependencyRule(java.lang.String name, ComputeClusterVmDependencyRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ComputeClusterVmDependencyRule(java.lang.String name, Output<java.lang.String> id, @Nullable ComputeClusterVmDependencyRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule", name, state, makeResourceOptions(options, id), false);
    }

    private static ComputeClusterVmDependencyRuleArgs makeArgs(ComputeClusterVmDependencyRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ComputeClusterVmDependencyRuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ComputeClusterVmDependencyRule get(java.lang.String name, Output<java.lang.String> id, @Nullable ComputeClusterVmDependencyRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ComputeClusterVmDependencyRule(name, id, state, options);
    }
}
