// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NasDatastoreState extends com.pulumi.resources.ResourceArgs {

    public static final NasDatastoreState Empty = new NasDatastoreState();

    /**
     * Access mode for the mount point. Can be one of
     * `readOnly` or `readWrite`. Note that `readWrite` does not necessarily mean
     * that the datastore will be read-write depending on the permissions of the
     * actual share. Default: `readWrite`. Forces a new resource if changed.
     * 
     */
    @Import(name="accessMode")
    private @Nullable Output<String> accessMode;

    /**
     * @return Access mode for the mount point. Can be one of
     * `readOnly` or `readWrite`. Note that `readWrite` does not necessarily mean
     * that the datastore will be read-write depending on the permissions of the
     * actual share. Default: `readWrite`. Forces a new resource if changed.
     * 
     */
    public Optional<Output<String>> accessMode() {
        return Optional.ofNullable(this.accessMode);
    }

    /**
     * The connectivity status of the datastore. If this is `false`,
     * some other computed attributes may be out of date.
     * 
     */
    @Import(name="accessible")
    private @Nullable Output<Boolean> accessible;

    /**
     * @return The connectivity status of the datastore. If this is `false`,
     * some other computed attributes may be out of date.
     * 
     */
    public Optional<Output<Boolean>> accessible() {
        return Optional.ofNullable(this.accessible);
    }

    /**
     * Maximum capacity of the datastore, in megabytes.
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<Integer> capacity;

    /**
     * @return Maximum capacity of the datastore, in megabytes.
     * 
     */
    public Optional<Output<Integer>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * Map of custom attribute ids to attribute
     * value strings to set on datasource resource.
     * 
     * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi connections
     * and require vCenter.
     * 
     */
    @Import(name="customAttributes")
    private @Nullable Output<Map<String,String>> customAttributes;

    /**
     * @return Map of custom attribute ids to attribute
     * value strings to set on datasource resource.
     * 
     * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi connections
     * and require vCenter.
     * 
     */
    public Optional<Output<Map<String,String>>> customAttributes() {
        return Optional.ofNullable(this.customAttributes);
    }

    /**
     * The managed object
     * ID of a datastore cluster to put this datastore in.
     * Conflicts with `folder`.
     * 
     */
    @Import(name="datastoreClusterId")
    private @Nullable Output<String> datastoreClusterId;

    /**
     * @return The managed object
     * ID of a datastore cluster to put this datastore in.
     * Conflicts with `folder`.
     * 
     */
    public Optional<Output<String>> datastoreClusterId() {
        return Optional.ofNullable(this.datastoreClusterId);
    }

    /**
     * The relative path to a folder to put this datastore in.
     * This is a path relative to the datacenter you are deploying the datastore to.
     * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
     * The provider will place a datastore named `test` in a datastore folder
     * located at `/dc1/datastore/foo/bar`, with the final inventory path being
     * `/dc1/datastore/foo/bar/test`. Conflicts with
     * `datastoreClusterId`.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return The relative path to a folder to put this datastore in.
     * This is a path relative to the datacenter you are deploying the datastore to.
     * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
     * The provider will place a datastore named `test` in a datastore folder
     * located at `/dc1/datastore/foo/bar`, with the final inventory path being
     * `/dc1/datastore/foo/bar/test`. Conflicts with
     * `datastoreClusterId`.
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * Available space of this datastore, in megabytes.
     * 
     */
    @Import(name="freeSpace")
    private @Nullable Output<Integer> freeSpace;

    /**
     * @return Available space of this datastore, in megabytes.
     * 
     */
    public Optional<Output<Integer>> freeSpace() {
        return Optional.ofNullable(this.freeSpace);
    }

    /**
     * The managed object IDs of
     * the hosts to mount the datastore on.
     * 
     */
    @Import(name="hostSystemIds")
    private @Nullable Output<List<String>> hostSystemIds;

    /**
     * @return The managed object IDs of
     * the hosts to mount the datastore on.
     * 
     */
    public Optional<Output<List<String>>> hostSystemIds() {
        return Optional.ofNullable(this.hostSystemIds);
    }

    /**
     * The current maintenance mode state of the datastore.
     * 
     */
    @Import(name="maintenanceMode")
    private @Nullable Output<String> maintenanceMode;

    /**
     * @return The current maintenance mode state of the datastore.
     * 
     */
    public Optional<Output<String>> maintenanceMode() {
        return Optional.ofNullable(this.maintenanceMode);
    }

    /**
     * If `true`, more than one host in the datacenter has
     * been configured with access to the datastore.
     * 
     */
    @Import(name="multipleHostAccess")
    private @Nullable Output<Boolean> multipleHostAccess;

    /**
     * @return If `true`, more than one host in the datacenter has
     * been configured with access to the datastore.
     * 
     */
    public Optional<Output<Boolean>> multipleHostAccess() {
        return Optional.ofNullable(this.multipleHostAccess);
    }

    /**
     * The name of the datastore. Forces a new resource if
     * changed.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the datastore. Forces a new resource if
     * changed.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Indicates that this NAS volume is a protocol endpoint.
     * This field is only populated if the host supports virtual datastores.
     * 
     */
    @Import(name="protocolEndpoint")
    private @Nullable Output<Boolean> protocolEndpoint;

    /**
     * @return Indicates that this NAS volume is a protocol endpoint.
     * This field is only populated if the host supports virtual datastores.
     * 
     */
    public Optional<Output<Boolean>> protocolEndpoint() {
        return Optional.ofNullable(this.protocolEndpoint);
    }

    /**
     * The hostnames or IP addresses of the remote
     * servers. Only one element should be present for NFS v3 but multiple
     * can be present for NFS v4.1. Forces a new resource if changed.
     * 
     */
    @Import(name="remoteHosts")
    private @Nullable Output<List<String>> remoteHosts;

    /**
     * @return The hostnames or IP addresses of the remote
     * servers. Only one element should be present for NFS v3 but multiple
     * can be present for NFS v4.1. Forces a new resource if changed.
     * 
     */
    public Optional<Output<List<String>>> remoteHosts() {
        return Optional.ofNullable(this.remoteHosts);
    }

    /**
     * The remote path of the mount point. Forces a new
     * resource if changed.
     * 
     */
    @Import(name="remotePath")
    private @Nullable Output<String> remotePath;

    /**
     * @return The remote path of the mount point. Forces a new
     * resource if changed.
     * 
     */
    public Optional<Output<String>> remotePath() {
        return Optional.ofNullable(this.remotePath);
    }

    /**
     * The security type to use when using NFS v4.1.
     * Can be one of `AUTH_SYS`, `SEC_KRB5`, or `SEC_KRB5I`. Forces a new resource
     * if changed.
     * 
     */
    @Import(name="securityType")
    private @Nullable Output<String> securityType;

    /**
     * @return The security type to use when using NFS v4.1.
     * Can be one of `AUTH_SYS`, `SEC_KRB5`, or `SEC_KRB5I`. Forces a new resource
     * if changed.
     * 
     */
    public Optional<Output<String>> securityType() {
        return Optional.ofNullable(this.securityType);
    }

    /**
     * The IDs of any tags to attach to this resource.
     * 
     * &gt; **NOTE:** Tagging support is unsupported on direct ESXi connections and
     * requires vCenter 6.0 or higher.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The IDs of any tags to attach to this resource.
     * 
     * &gt; **NOTE:** Tagging support is unsupported on direct ESXi connections and
     * requires vCenter 6.0 or higher.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The type of NAS volume. Can be one of `NFS` (to denote
     * v3) or `NFS41` (to denote NFS v4.1). Default: `NFS`. Forces a new resource if
     * changed.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of NAS volume. Can be one of `NFS` (to denote
     * v3) or `NFS41` (to denote NFS v4.1). Default: `NFS`. Forces a new resource if
     * changed.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Total additional storage space, in megabytes,
     * potentially used by all virtual machines on this datastore.
     * 
     */
    @Import(name="uncommittedSpace")
    private @Nullable Output<Integer> uncommittedSpace;

    /**
     * @return Total additional storage space, in megabytes,
     * potentially used by all virtual machines on this datastore.
     * 
     */
    public Optional<Output<Integer>> uncommittedSpace() {
        return Optional.ofNullable(this.uncommittedSpace);
    }

    /**
     * The unique locator for the datastore.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The unique locator for the datastore.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private NasDatastoreState() {}

    private NasDatastoreState(NasDatastoreState $) {
        this.accessMode = $.accessMode;
        this.accessible = $.accessible;
        this.capacity = $.capacity;
        this.customAttributes = $.customAttributes;
        this.datastoreClusterId = $.datastoreClusterId;
        this.folder = $.folder;
        this.freeSpace = $.freeSpace;
        this.hostSystemIds = $.hostSystemIds;
        this.maintenanceMode = $.maintenanceMode;
        this.multipleHostAccess = $.multipleHostAccess;
        this.name = $.name;
        this.protocolEndpoint = $.protocolEndpoint;
        this.remoteHosts = $.remoteHosts;
        this.remotePath = $.remotePath;
        this.securityType = $.securityType;
        this.tags = $.tags;
        this.type = $.type;
        this.uncommittedSpace = $.uncommittedSpace;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NasDatastoreState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NasDatastoreState $;

        public Builder() {
            $ = new NasDatastoreState();
        }

        public Builder(NasDatastoreState defaults) {
            $ = new NasDatastoreState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessMode Access mode for the mount point. Can be one of
         * `readOnly` or `readWrite`. Note that `readWrite` does not necessarily mean
         * that the datastore will be read-write depending on the permissions of the
         * actual share. Default: `readWrite`. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder accessMode(@Nullable Output<String> accessMode) {
            $.accessMode = accessMode;
            return this;
        }

        /**
         * @param accessMode Access mode for the mount point. Can be one of
         * `readOnly` or `readWrite`. Note that `readWrite` does not necessarily mean
         * that the datastore will be read-write depending on the permissions of the
         * actual share. Default: `readWrite`. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder accessMode(String accessMode) {
            return accessMode(Output.of(accessMode));
        }

        /**
         * @param accessible The connectivity status of the datastore. If this is `false`,
         * some other computed attributes may be out of date.
         * 
         * @return builder
         * 
         */
        public Builder accessible(@Nullable Output<Boolean> accessible) {
            $.accessible = accessible;
            return this;
        }

        /**
         * @param accessible The connectivity status of the datastore. If this is `false`,
         * some other computed attributes may be out of date.
         * 
         * @return builder
         * 
         */
        public Builder accessible(Boolean accessible) {
            return accessible(Output.of(accessible));
        }

        /**
         * @param capacity Maximum capacity of the datastore, in megabytes.
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<Integer> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity Maximum capacity of the datastore, in megabytes.
         * 
         * @return builder
         * 
         */
        public Builder capacity(Integer capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param customAttributes Map of custom attribute ids to attribute
         * value strings to set on datasource resource.
         * 
         * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi connections
         * and require vCenter.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(@Nullable Output<Map<String,String>> customAttributes) {
            $.customAttributes = customAttributes;
            return this;
        }

        /**
         * @param customAttributes Map of custom attribute ids to attribute
         * value strings to set on datasource resource.
         * 
         * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi connections
         * and require vCenter.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(Map<String,String> customAttributes) {
            return customAttributes(Output.of(customAttributes));
        }

        /**
         * @param datastoreClusterId The managed object
         * ID of a datastore cluster to put this datastore in.
         * Conflicts with `folder`.
         * 
         * @return builder
         * 
         */
        public Builder datastoreClusterId(@Nullable Output<String> datastoreClusterId) {
            $.datastoreClusterId = datastoreClusterId;
            return this;
        }

        /**
         * @param datastoreClusterId The managed object
         * ID of a datastore cluster to put this datastore in.
         * Conflicts with `folder`.
         * 
         * @return builder
         * 
         */
        public Builder datastoreClusterId(String datastoreClusterId) {
            return datastoreClusterId(Output.of(datastoreClusterId));
        }

        /**
         * @param folder The relative path to a folder to put this datastore in.
         * This is a path relative to the datacenter you are deploying the datastore to.
         * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
         * The provider will place a datastore named `test` in a datastore folder
         * located at `/dc1/datastore/foo/bar`, with the final inventory path being
         * `/dc1/datastore/foo/bar/test`. Conflicts with
         * `datastoreClusterId`.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The relative path to a folder to put this datastore in.
         * This is a path relative to the datacenter you are deploying the datastore to.
         * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
         * The provider will place a datastore named `test` in a datastore folder
         * located at `/dc1/datastore/foo/bar`, with the final inventory path being
         * `/dc1/datastore/foo/bar/test`. Conflicts with
         * `datastoreClusterId`.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param freeSpace Available space of this datastore, in megabytes.
         * 
         * @return builder
         * 
         */
        public Builder freeSpace(@Nullable Output<Integer> freeSpace) {
            $.freeSpace = freeSpace;
            return this;
        }

        /**
         * @param freeSpace Available space of this datastore, in megabytes.
         * 
         * @return builder
         * 
         */
        public Builder freeSpace(Integer freeSpace) {
            return freeSpace(Output.of(freeSpace));
        }

        /**
         * @param hostSystemIds The managed object IDs of
         * the hosts to mount the datastore on.
         * 
         * @return builder
         * 
         */
        public Builder hostSystemIds(@Nullable Output<List<String>> hostSystemIds) {
            $.hostSystemIds = hostSystemIds;
            return this;
        }

        /**
         * @param hostSystemIds The managed object IDs of
         * the hosts to mount the datastore on.
         * 
         * @return builder
         * 
         */
        public Builder hostSystemIds(List<String> hostSystemIds) {
            return hostSystemIds(Output.of(hostSystemIds));
        }

        /**
         * @param hostSystemIds The managed object IDs of
         * the hosts to mount the datastore on.
         * 
         * @return builder
         * 
         */
        public Builder hostSystemIds(String... hostSystemIds) {
            return hostSystemIds(List.of(hostSystemIds));
        }

        /**
         * @param maintenanceMode The current maintenance mode state of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceMode(@Nullable Output<String> maintenanceMode) {
            $.maintenanceMode = maintenanceMode;
            return this;
        }

        /**
         * @param maintenanceMode The current maintenance mode state of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceMode(String maintenanceMode) {
            return maintenanceMode(Output.of(maintenanceMode));
        }

        /**
         * @param multipleHostAccess If `true`, more than one host in the datacenter has
         * been configured with access to the datastore.
         * 
         * @return builder
         * 
         */
        public Builder multipleHostAccess(@Nullable Output<Boolean> multipleHostAccess) {
            $.multipleHostAccess = multipleHostAccess;
            return this;
        }

        /**
         * @param multipleHostAccess If `true`, more than one host in the datacenter has
         * been configured with access to the datastore.
         * 
         * @return builder
         * 
         */
        public Builder multipleHostAccess(Boolean multipleHostAccess) {
            return multipleHostAccess(Output.of(multipleHostAccess));
        }

        /**
         * @param name The name of the datastore. Forces a new resource if
         * changed.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the datastore. Forces a new resource if
         * changed.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param protocolEndpoint Indicates that this NAS volume is a protocol endpoint.
         * This field is only populated if the host supports virtual datastores.
         * 
         * @return builder
         * 
         */
        public Builder protocolEndpoint(@Nullable Output<Boolean> protocolEndpoint) {
            $.protocolEndpoint = protocolEndpoint;
            return this;
        }

        /**
         * @param protocolEndpoint Indicates that this NAS volume is a protocol endpoint.
         * This field is only populated if the host supports virtual datastores.
         * 
         * @return builder
         * 
         */
        public Builder protocolEndpoint(Boolean protocolEndpoint) {
            return protocolEndpoint(Output.of(protocolEndpoint));
        }

        /**
         * @param remoteHosts The hostnames or IP addresses of the remote
         * servers. Only one element should be present for NFS v3 but multiple
         * can be present for NFS v4.1. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder remoteHosts(@Nullable Output<List<String>> remoteHosts) {
            $.remoteHosts = remoteHosts;
            return this;
        }

        /**
         * @param remoteHosts The hostnames or IP addresses of the remote
         * servers. Only one element should be present for NFS v3 but multiple
         * can be present for NFS v4.1. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder remoteHosts(List<String> remoteHosts) {
            return remoteHosts(Output.of(remoteHosts));
        }

        /**
         * @param remoteHosts The hostnames or IP addresses of the remote
         * servers. Only one element should be present for NFS v3 but multiple
         * can be present for NFS v4.1. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder remoteHosts(String... remoteHosts) {
            return remoteHosts(List.of(remoteHosts));
        }

        /**
         * @param remotePath The remote path of the mount point. Forces a new
         * resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder remotePath(@Nullable Output<String> remotePath) {
            $.remotePath = remotePath;
            return this;
        }

        /**
         * @param remotePath The remote path of the mount point. Forces a new
         * resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder remotePath(String remotePath) {
            return remotePath(Output.of(remotePath));
        }

        /**
         * @param securityType The security type to use when using NFS v4.1.
         * Can be one of `AUTH_SYS`, `SEC_KRB5`, or `SEC_KRB5I`. Forces a new resource
         * if changed.
         * 
         * @return builder
         * 
         */
        public Builder securityType(@Nullable Output<String> securityType) {
            $.securityType = securityType;
            return this;
        }

        /**
         * @param securityType The security type to use when using NFS v4.1.
         * Can be one of `AUTH_SYS`, `SEC_KRB5`, or `SEC_KRB5I`. Forces a new resource
         * if changed.
         * 
         * @return builder
         * 
         */
        public Builder securityType(String securityType) {
            return securityType(Output.of(securityType));
        }

        /**
         * @param tags The IDs of any tags to attach to this resource.
         * 
         * &gt; **NOTE:** Tagging support is unsupported on direct ESXi connections and
         * requires vCenter 6.0 or higher.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The IDs of any tags to attach to this resource.
         * 
         * &gt; **NOTE:** Tagging support is unsupported on direct ESXi connections and
         * requires vCenter 6.0 or higher.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The IDs of any tags to attach to this resource.
         * 
         * &gt; **NOTE:** Tagging support is unsupported on direct ESXi connections and
         * requires vCenter 6.0 or higher.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type The type of NAS volume. Can be one of `NFS` (to denote
         * v3) or `NFS41` (to denote NFS v4.1). Default: `NFS`. Forces a new resource if
         * changed.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of NAS volume. Can be one of `NFS` (to denote
         * v3) or `NFS41` (to denote NFS v4.1). Default: `NFS`. Forces a new resource if
         * changed.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uncommittedSpace Total additional storage space, in megabytes,
         * potentially used by all virtual machines on this datastore.
         * 
         * @return builder
         * 
         */
        public Builder uncommittedSpace(@Nullable Output<Integer> uncommittedSpace) {
            $.uncommittedSpace = uncommittedSpace;
            return this;
        }

        /**
         * @param uncommittedSpace Total additional storage space, in megabytes,
         * potentially used by all virtual machines on this datastore.
         * 
         * @return builder
         * 
         */
        public Builder uncommittedSpace(Integer uncommittedSpace) {
            return uncommittedSpace(Output.of(uncommittedSpace));
        }

        /**
         * @param url The unique locator for the datastore.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The unique locator for the datastore.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public NasDatastoreState build() {
            return $;
        }
    }

}
