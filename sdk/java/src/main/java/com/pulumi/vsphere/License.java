// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.LicenseArgs;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.inputs.LicenseState;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a VMware vSphere license resource. This can be used to add and remove license keys.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.License;
 * import com.pulumi.vsphere.LicenseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var licenseKey = new License("licenseKey", LicenseArgs.builder()
 *             .licenseKey("00000-00000-00000-00000-00000")
 *             .labels(Map.of("VpxClientLicenseLabel", "example"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="vsphere:index/license:License")
public class License extends com.pulumi.resources.CustomResource {
    /**
     * The product edition of the license key.
     * 
     */
    @Export(name="editionKey", refs={String.class}, tree="[0]")
    private Output<String> editionKey;

    /**
     * @return The product edition of the license key.
     * 
     */
    public Output<String> editionKey() {
        return this.editionKey;
    }
    /**
     * A map of labels to be applied to the license key.
     * 
     * &gt; **NOTE:** Labels are not allowed for unmanaged ESX hosts.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return A map of labels to be applied to the license key.
     * 
     * &gt; **NOTE:** Labels are not allowed for unmanaged ESX hosts.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The license key value.
     * 
     */
    @Export(name="licenseKey", refs={String.class}, tree="[0]")
    private Output<String> licenseKey;

    /**
     * @return The license key value.
     * 
     */
    public Output<String> licenseKey() {
        return this.licenseKey;
    }
    /**
     * The display name for the license key.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The display name for the license key.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The total number of units contained in the license key.
     * 
     */
    @Export(name="total", refs={Integer.class}, tree="[0]")
    private Output<Integer> total;

    /**
     * @return The total number of units contained in the license key.
     * 
     */
    public Output<Integer> total() {
        return this.total;
    }
    /**
     * The number of units assigned to this license key.
     * 
     */
    @Export(name="used", refs={Integer.class}, tree="[0]")
    private Output<Integer> used;

    /**
     * @return The number of units assigned to this license key.
     * 
     */
    public Output<Integer> used() {
        return this.used;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public License(java.lang.String name) {
        this(name, LicenseArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public License(java.lang.String name, LicenseArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public License(java.lang.String name, LicenseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/license:License", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private License(java.lang.String name, Output<java.lang.String> id, @Nullable LicenseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/license:License", name, state, makeResourceOptions(options, id), false);
    }

    private static LicenseArgs makeArgs(LicenseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LicenseArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static License get(java.lang.String name, Output<java.lang.String> id, @Nullable LicenseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new License(name, id, state, options);
    }
}
