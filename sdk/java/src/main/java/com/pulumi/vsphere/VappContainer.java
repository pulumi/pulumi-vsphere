// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.VappContainerArgs;
import com.pulumi.vsphere.inputs.VappContainerState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `vsphere.VappContainer` resource can be used to create and manage
 * vApps.
 * 
 * For more information on vSphere vApps, see the VMware vSphere [product documentation][ref-vsphere-vapp].
 * 
 * [ref-vsphere-vapp]: https://techdocs.broadcom.com/us/en/vmware-cis/vsphere/vsphere/8-0/vsphere-virtual-machine-administration-guide-8-0/managing-multi-tiered-applications-with-vsphere-vapp-in-the-vsphere-web-clientvsphere-vm-admin.html
 * 
 * ## Basic Example
 * 
 * The example below sets up a vSphere vApp container in a compute cluster which uses
 * the default settings for CPU and memory reservations, shares, and limits. The compute cluster
 * needs to already exist in vSphere.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VsphereFunctions;
 * import com.pulumi.vsphere.inputs.GetDatacenterArgs;
 * import com.pulumi.vsphere.inputs.GetComputeClusterArgs;
 * import com.pulumi.vsphere.VappContainer;
 * import com.pulumi.vsphere.VappContainerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var datacenter = VsphereFunctions.getDatacenter(GetDatacenterArgs.builder()
 *             .name("dc-01")
 *             .build());
 * 
 *         final var computeCluster = VsphereFunctions.getComputeCluster(GetComputeClusterArgs.builder()
 *             .name("cluster-01")
 *             .datacenterId(datacenter.id())
 *             .build());
 * 
 *         var vappContainer = new VappContainer("vappContainer", VappContainerArgs.builder()
 *             .name("vapp-01")
 *             .parentResourcePoolId(computeCluster.resourcePoolId())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Example with a Virtual Machine
 * 
 * The example below builds off the basic example, but includes a virtual machine
 * in the new vApp container. To accomplish this, the `resourcePoolId` of the
 * virtual machine is set to the `id` of the vApp container.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VsphereFunctions;
 * import com.pulumi.vsphere.inputs.GetDatacenterArgs;
 * import com.pulumi.vsphere.inputs.GetComputeClusterArgs;
 * import com.pulumi.vsphere.inputs.GetDatastoreArgs;
 * import com.pulumi.vsphere.inputs.GetNetworkArgs;
 * import com.pulumi.vsphere.VappContainer;
 * import com.pulumi.vsphere.VappContainerArgs;
 * import com.pulumi.vsphere.VirtualMachine;
 * import com.pulumi.vsphere.VirtualMachineArgs;
 * import com.pulumi.vsphere.inputs.VirtualMachineNetworkInterfaceArgs;
 * import com.pulumi.vsphere.inputs.VirtualMachineDiskArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var datacenter = VsphereFunctions.getDatacenter(GetDatacenterArgs.builder()
 *             .name("dc-01")
 *             .build());
 * 
 *         final var computeCluster = VsphereFunctions.getComputeCluster(GetComputeClusterArgs.builder()
 *             .name("cluster-01")
 *             .datacenterId(datacenter.id())
 *             .build());
 * 
 *         final var datastore = VsphereFunctions.getDatastore(GetDatastoreArgs.builder()
 *             .name("datastore-01")
 *             .datacenterId(datacenter.id())
 *             .build());
 * 
 *         final var network = VsphereFunctions.getNetwork(GetNetworkArgs.builder()
 *             .name("VM Network")
 *             .datacenterId(datacenter.id())
 *             .build());
 * 
 *         var vappContainer = new VappContainer("vappContainer", VappContainerArgs.builder()
 *             .name("vapp-01")
 *             .parentResourcePoolId(computeCluster.resourcePoolId())
 *             .build());
 * 
 *         var vm = new VirtualMachine("vm", VirtualMachineArgs.builder()
 *             .name("foo")
 *             .resourcePoolId(vappContainerVsphereVappContainer.id())
 *             .datastoreId(datastore.id())
 *             .numCpus(1)
 *             .memory(1024)
 *             .guestId("ubuntu64Guest")
 *             .networkInterfaces(VirtualMachineNetworkInterfaceArgs.builder()
 *                 .networkId(network.id())
 *                 .build())
 *             .disks(VirtualMachineDiskArgs.builder()
 *                 .label("disk0")
 *                 .size(20)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * An existing vApp container can be imported into this resource via
 * 
 * the path to the vApp container, using the following command:
 * 
 * [docs-import]: https://developer.hashicorp.com/terraform/cli/import
 * 
 * Example:
 * 
 * ```sh
 * $ pulumi import vsphere:index/vappContainer:VappContainer vapp_container /dc-01/host/cluster-01/Resources/resource-pool-01/vapp-01
 * ```
 * 
 * The example above would import the vApp container named `vapp-01` that is
 * 
 * located in the resource pool `resource-pool-01` that is part of the host cluster
 * 
 * `cluster-01` in the `dc-01` datacenter.
 * 
 */
@ResourceType(type="vsphere:index/vappContainer:VappContainer")
public class VappContainer extends com.pulumi.resources.CustomResource {
    /**
     * Determines if the reservation on a vApp
     * container can grow beyond the specified value if the parent resource pool has
     * unreserved resources. Default: `true`
     * 
     */
    @Export(name="cpuExpandable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> cpuExpandable;

    /**
     * @return Determines if the reservation on a vApp
     * container can grow beyond the specified value if the parent resource pool has
     * unreserved resources. Default: `true`
     * 
     */
    public Output<Optional<Boolean>> cpuExpandable() {
        return Codegen.optional(this.cpuExpandable);
    }
    /**
     * The CPU utilization of a vApp container will not
     * exceed this limit, even if there are available resources. Set to `-1` for
     * unlimited.
     * Default: `-1`
     * 
     */
    @Export(name="cpuLimit", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> cpuLimit;

    /**
     * @return The CPU utilization of a vApp container will not
     * exceed this limit, even if there are available resources. Set to `-1` for
     * unlimited.
     * Default: `-1`
     * 
     */
    public Output<Optional<Integer>> cpuLimit() {
        return Codegen.optional(this.cpuLimit);
    }
    /**
     * Amount of CPU (MHz) that is guaranteed
     * available to the vApp container. Default: `0`
     * 
     */
    @Export(name="cpuReservation", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> cpuReservation;

    /**
     * @return Amount of CPU (MHz) that is guaranteed
     * available to the vApp container. Default: `0`
     * 
     */
    public Output<Optional<Integer>> cpuReservation() {
        return Codegen.optional(this.cpuReservation);
    }
    /**
     * The CPU allocation level. The level is a
     * simplified view of shares. Levels map to a pre-determined set of numeric
     * values for shares. Can be one of `low`, `normal`, `high`, or `custom`. When
     * `low`, `normal`, or `high` are specified values in `cpuShares` will be
     * ignored.  Default: `normal`
     * 
     */
    @Export(name="cpuShareLevel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cpuShareLevel;

    /**
     * @return The CPU allocation level. The level is a
     * simplified view of shares. Levels map to a pre-determined set of numeric
     * values for shares. Can be one of `low`, `normal`, `high`, or `custom`. When
     * `low`, `normal`, or `high` are specified values in `cpuShares` will be
     * ignored.  Default: `normal`
     * 
     */
    public Output<Optional<String>> cpuShareLevel() {
        return Codegen.optional(this.cpuShareLevel);
    }
    /**
     * The number of shares allocated for CPU. Used to
     * determine resource allocation in case of resource contention. If this is set,
     * `cpuShareLevel` must be `custom`.
     * 
     */
    @Export(name="cpuShares", refs={Integer.class}, tree="[0]")
    private Output<Integer> cpuShares;

    /**
     * @return The number of shares allocated for CPU. Used to
     * determine resource allocation in case of resource contention. If this is set,
     * `cpuShareLevel` must be `custom`.
     * 
     */
    public Output<Integer> cpuShares() {
        return this.cpuShares;
    }
    /**
     * A list of custom attributes to set on this resource.
     * 
     */
    @Export(name="customAttributes", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> customAttributes;

    /**
     * @return A list of custom attributes to set on this resource.
     * 
     */
    public Output<Optional<Map<String,String>>> customAttributes() {
        return Codegen.optional(this.customAttributes);
    }
    /**
     * Determines if the reservation on a vApp
     * container can grow beyond the specified value if the parent resource pool has
     * unreserved resources. Default: `true`
     * 
     */
    @Export(name="memoryExpandable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> memoryExpandable;

    /**
     * @return Determines if the reservation on a vApp
     * container can grow beyond the specified value if the parent resource pool has
     * unreserved resources. Default: `true`
     * 
     */
    public Output<Optional<Boolean>> memoryExpandable() {
        return Codegen.optional(this.memoryExpandable);
    }
    /**
     * The CPU utilization of a vApp container will not
     * exceed this limit, even if there are available resources. Set to `-1` for
     * unlimited. Default: `-1`
     * 
     */
    @Export(name="memoryLimit", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> memoryLimit;

    /**
     * @return The CPU utilization of a vApp container will not
     * exceed this limit, even if there are available resources. Set to `-1` for
     * unlimited. Default: `-1`
     * 
     */
    public Output<Optional<Integer>> memoryLimit() {
        return Codegen.optional(this.memoryLimit);
    }
    /**
     * Amount of CPU (MHz) that is guaranteed
     * available to the vApp container. Default: `0`
     * 
     */
    @Export(name="memoryReservation", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> memoryReservation;

    /**
     * @return Amount of CPU (MHz) that is guaranteed
     * available to the vApp container. Default: `0`
     * 
     */
    public Output<Optional<Integer>> memoryReservation() {
        return Codegen.optional(this.memoryReservation);
    }
    /**
     * The CPU allocation level. The level is a
     * simplified view of shares. Levels map to a pre-determined set of numeric
     * values for shares. Can be one of `low`, `normal`, `high`, or `custom`. When
     * `low`, `normal`, or `high` are specified values in `memoryShares` will be
     * ignored.  Default: `normal`
     * 
     */
    @Export(name="memoryShareLevel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> memoryShareLevel;

    /**
     * @return The CPU allocation level. The level is a
     * simplified view of shares. Levels map to a pre-determined set of numeric
     * values for shares. Can be one of `low`, `normal`, `high`, or `custom`. When
     * `low`, `normal`, or `high` are specified values in `memoryShares` will be
     * ignored.  Default: `normal`
     * 
     */
    public Output<Optional<String>> memoryShareLevel() {
        return Codegen.optional(this.memoryShareLevel);
    }
    /**
     * The number of shares allocated for CPU. Used to
     * determine resource allocation in case of resource contention. If this is set,
     * `memoryShareLevel` must be `custom`.
     * 
     */
    @Export(name="memoryShares", refs={Integer.class}, tree="[0]")
    private Output<Integer> memoryShares;

    /**
     * @return The number of shares allocated for CPU. Used to
     * determine resource allocation in case of resource contention. If this is set,
     * `memoryShareLevel` must be `custom`.
     * 
     */
    public Output<Integer> memoryShares() {
        return this.memoryShares;
    }
    /**
     * The name of the vApp container.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the vApp container.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The managed object ID of
     * the vApp container&#39;s parent folder.
     * 
     */
    @Export(name="parentFolderId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> parentFolderId;

    /**
     * @return The managed object ID of
     * the vApp container&#39;s parent folder.
     * 
     */
    public Output<Optional<String>> parentFolderId() {
        return Codegen.optional(this.parentFolderId);
    }
    /**
     * The managed object ID
     * of the parent resource pool. This can be the root resource pool for a cluster
     * or standalone host, or a resource pool itself. When moving a vApp container
     * from one parent resource pool to another, both must share a common root
     * resource pool or the move will fail.
     * 
     */
    @Export(name="parentResourcePoolId", refs={String.class}, tree="[0]")
    private Output<String> parentResourcePoolId;

    /**
     * @return The managed object ID
     * of the parent resource pool. This can be the root resource pool for a cluster
     * or standalone host, or a resource pool itself. When moving a vApp container
     * from one parent resource pool to another, both must share a common root
     * resource pool or the move will fail.
     * 
     */
    public Output<String> parentResourcePoolId() {
        return this.parentResourcePoolId;
    }
    /**
     * The IDs of any tags to attach to this resource.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return The IDs of any tags to attach to this resource.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VappContainer(java.lang.String name) {
        this(name, VappContainerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VappContainer(java.lang.String name, VappContainerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VappContainer(java.lang.String name, VappContainerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/vappContainer:VappContainer", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private VappContainer(java.lang.String name, Output<java.lang.String> id, @Nullable VappContainerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/vappContainer:VappContainer", name, state, makeResourceOptions(options, id), false);
    }

    private static VappContainerArgs makeArgs(VappContainerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? VappContainerArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VappContainer get(java.lang.String name, Output<java.lang.String> id, @Nullable VappContainerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VappContainer(name, id, state, options);
    }
}
