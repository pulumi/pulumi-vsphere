// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.inputs.GetComputeClusterArgs;
import com.pulumi.vsphere.inputs.GetComputeClusterHostGroupArgs;
import com.pulumi.vsphere.inputs.GetComputeClusterHostGroupPlainArgs;
import com.pulumi.vsphere.inputs.GetComputeClusterPlainArgs;
import com.pulumi.vsphere.inputs.GetContentLibraryArgs;
import com.pulumi.vsphere.inputs.GetContentLibraryItemArgs;
import com.pulumi.vsphere.inputs.GetContentLibraryItemPlainArgs;
import com.pulumi.vsphere.inputs.GetContentLibraryPlainArgs;
import com.pulumi.vsphere.inputs.GetCustomAttributeArgs;
import com.pulumi.vsphere.inputs.GetCustomAttributePlainArgs;
import com.pulumi.vsphere.inputs.GetDatacenterArgs;
import com.pulumi.vsphere.inputs.GetDatacenterPlainArgs;
import com.pulumi.vsphere.inputs.GetDatastoreArgs;
import com.pulumi.vsphere.inputs.GetDatastoreClusterArgs;
import com.pulumi.vsphere.inputs.GetDatastoreClusterPlainArgs;
import com.pulumi.vsphere.inputs.GetDatastorePlainArgs;
import com.pulumi.vsphere.inputs.GetDistributedVirtualSwitchArgs;
import com.pulumi.vsphere.inputs.GetDistributedVirtualSwitchPlainArgs;
import com.pulumi.vsphere.inputs.GetDynamicArgs;
import com.pulumi.vsphere.inputs.GetDynamicPlainArgs;
import com.pulumi.vsphere.inputs.GetFolderArgs;
import com.pulumi.vsphere.inputs.GetFolderPlainArgs;
import com.pulumi.vsphere.inputs.GetHostArgs;
import com.pulumi.vsphere.inputs.GetHostPciDeviceArgs;
import com.pulumi.vsphere.inputs.GetHostPciDevicePlainArgs;
import com.pulumi.vsphere.inputs.GetHostPlainArgs;
import com.pulumi.vsphere.inputs.GetHostThumbprintArgs;
import com.pulumi.vsphere.inputs.GetHostThumbprintPlainArgs;
import com.pulumi.vsphere.inputs.GetLicenseArgs;
import com.pulumi.vsphere.inputs.GetLicensePlainArgs;
import com.pulumi.vsphere.inputs.GetNetworkArgs;
import com.pulumi.vsphere.inputs.GetNetworkPlainArgs;
import com.pulumi.vsphere.inputs.GetOvfVmTemplateArgs;
import com.pulumi.vsphere.inputs.GetOvfVmTemplatePlainArgs;
import com.pulumi.vsphere.inputs.GetPolicyArgs;
import com.pulumi.vsphere.inputs.GetPolicyPlainArgs;
import com.pulumi.vsphere.inputs.GetResourcePoolArgs;
import com.pulumi.vsphere.inputs.GetResourcePoolPlainArgs;
import com.pulumi.vsphere.inputs.GetRoleArgs;
import com.pulumi.vsphere.inputs.GetRolePlainArgs;
import com.pulumi.vsphere.inputs.GetTagArgs;
import com.pulumi.vsphere.inputs.GetTagCategoryArgs;
import com.pulumi.vsphere.inputs.GetTagCategoryPlainArgs;
import com.pulumi.vsphere.inputs.GetTagPlainArgs;
import com.pulumi.vsphere.inputs.GetVappContainerArgs;
import com.pulumi.vsphere.inputs.GetVappContainerPlainArgs;
import com.pulumi.vsphere.inputs.GetVirtualMachineArgs;
import com.pulumi.vsphere.inputs.GetVirtualMachinePlainArgs;
import com.pulumi.vsphere.inputs.GetVmfsDisksArgs;
import com.pulumi.vsphere.inputs.GetVmfsDisksPlainArgs;
import com.pulumi.vsphere.outputs.GetComputeClusterHostGroupResult;
import com.pulumi.vsphere.outputs.GetComputeClusterResult;
import com.pulumi.vsphere.outputs.GetContentLibraryItemResult;
import com.pulumi.vsphere.outputs.GetContentLibraryResult;
import com.pulumi.vsphere.outputs.GetCustomAttributeResult;
import com.pulumi.vsphere.outputs.GetDatacenterResult;
import com.pulumi.vsphere.outputs.GetDatastoreClusterResult;
import com.pulumi.vsphere.outputs.GetDatastoreResult;
import com.pulumi.vsphere.outputs.GetDistributedVirtualSwitchResult;
import com.pulumi.vsphere.outputs.GetDynamicResult;
import com.pulumi.vsphere.outputs.GetFolderResult;
import com.pulumi.vsphere.outputs.GetHostPciDeviceResult;
import com.pulumi.vsphere.outputs.GetHostResult;
import com.pulumi.vsphere.outputs.GetHostThumbprintResult;
import com.pulumi.vsphere.outputs.GetLicenseResult;
import com.pulumi.vsphere.outputs.GetNetworkResult;
import com.pulumi.vsphere.outputs.GetOvfVmTemplateResult;
import com.pulumi.vsphere.outputs.GetPolicyResult;
import com.pulumi.vsphere.outputs.GetResourcePoolResult;
import com.pulumi.vsphere.outputs.GetRoleResult;
import com.pulumi.vsphere.outputs.GetTagCategoryResult;
import com.pulumi.vsphere.outputs.GetTagResult;
import com.pulumi.vsphere.outputs.GetVappContainerResult;
import com.pulumi.vsphere.outputs.GetVirtualMachineResult;
import com.pulumi.vsphere.outputs.GetVmfsDisksResult;
import java.util.concurrent.CompletableFuture;

public final class VsphereFunctions {
    /**
     * The `vsphere.ComputeCluster` data source can be used to discover the ID of a
     * cluster in vSphere. This is useful to fetch the ID of a cluster that you want
     * to use for virtual machine placement via the `vsphere.VirtualMachine` resource, allowing to specify the cluster&#39;s root resource pool directly versus
     * using the alias available through the `vsphere.ResourcePool`
     * data source.
     * 
     * &gt; You may also wish to see the `vsphere.ComputeCluster`
     *  resource for more information about clusters and how to managed the resource
     *  in this provider.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetComputeClusterResult> getComputeCluster(GetComputeClusterArgs args) {
        return getComputeCluster(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.ComputeCluster` data source can be used to discover the ID of a
     * cluster in vSphere. This is useful to fetch the ID of a cluster that you want
     * to use for virtual machine placement via the `vsphere.VirtualMachine` resource, allowing to specify the cluster&#39;s root resource pool directly versus
     * using the alias available through the `vsphere.ResourcePool`
     * data source.
     * 
     * &gt; You may also wish to see the `vsphere.ComputeCluster`
     *  resource for more information about clusters and how to managed the resource
     *  in this provider.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetComputeClusterResult> getComputeClusterPlain(GetComputeClusterPlainArgs args) {
        return getComputeClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.ComputeCluster` data source can be used to discover the ID of a
     * cluster in vSphere. This is useful to fetch the ID of a cluster that you want
     * to use for virtual machine placement via the `vsphere.VirtualMachine` resource, allowing to specify the cluster&#39;s root resource pool directly versus
     * using the alias available through the `vsphere.ResourcePool`
     * data source.
     * 
     * &gt; You may also wish to see the `vsphere.ComputeCluster`
     *  resource for more information about clusters and how to managed the resource
     *  in this provider.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetComputeClusterResult> getComputeCluster(GetComputeClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getComputeCluster:getComputeCluster", TypeShape.of(GetComputeClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.ComputeCluster` data source can be used to discover the ID of a
     * cluster in vSphere. This is useful to fetch the ID of a cluster that you want
     * to use for virtual machine placement via the `vsphere.VirtualMachine` resource, allowing to specify the cluster&#39;s root resource pool directly versus
     * using the alias available through the `vsphere.ResourcePool`
     * data source.
     * 
     * &gt; You may also wish to see the `vsphere.ComputeCluster`
     *  resource for more information about clusters and how to managed the resource
     *  in this provider.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetComputeClusterResult> getComputeClusterPlain(GetComputeClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getComputeCluster:getComputeCluster", TypeShape.of(GetComputeClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.ComputeClusterHostGroup` data source can be used to discover
     * the IDs ESXi hosts in a host group and return host group attributes to other
     * resources.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetComputeClusterHostGroupResult> getComputeClusterHostGroup(GetComputeClusterHostGroupArgs args) {
        return getComputeClusterHostGroup(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.ComputeClusterHostGroup` data source can be used to discover
     * the IDs ESXi hosts in a host group and return host group attributes to other
     * resources.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetComputeClusterHostGroupResult> getComputeClusterHostGroupPlain(GetComputeClusterHostGroupPlainArgs args) {
        return getComputeClusterHostGroupPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.ComputeClusterHostGroup` data source can be used to discover
     * the IDs ESXi hosts in a host group and return host group attributes to other
     * resources.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetComputeClusterHostGroupResult> getComputeClusterHostGroup(GetComputeClusterHostGroupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getComputeClusterHostGroup:getComputeClusterHostGroup", TypeShape.of(GetComputeClusterHostGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.ComputeClusterHostGroup` data source can be used to discover
     * the IDs ESXi hosts in a host group and return host group attributes to other
     * resources.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetComputeClusterHostGroupResult> getComputeClusterHostGroupPlain(GetComputeClusterHostGroupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getComputeClusterHostGroup:getComputeClusterHostGroup", TypeShape.of(GetComputeClusterHostGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.ContentLibrary` data source can be used to discover the ID of a content library.
     * 
     * &gt; **NOTE:** This resource requires vCenter Server and is not available on direct ESXi host connections.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetContentLibraryResult> getContentLibrary(GetContentLibraryArgs args) {
        return getContentLibrary(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.ContentLibrary` data source can be used to discover the ID of a content library.
     * 
     * &gt; **NOTE:** This resource requires vCenter Server and is not available on direct ESXi host connections.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetContentLibraryResult> getContentLibraryPlain(GetContentLibraryPlainArgs args) {
        return getContentLibraryPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.ContentLibrary` data source can be used to discover the ID of a content library.
     * 
     * &gt; **NOTE:** This resource requires vCenter Server and is not available on direct ESXi host connections.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetContentLibraryResult> getContentLibrary(GetContentLibraryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getContentLibrary:getContentLibrary", TypeShape.of(GetContentLibraryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.ContentLibrary` data source can be used to discover the ID of a content library.
     * 
     * &gt; **NOTE:** This resource requires vCenter Server and is not available on direct ESXi host connections.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetContentLibraryResult> getContentLibraryPlain(GetContentLibraryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getContentLibrary:getContentLibrary", TypeShape.of(GetContentLibraryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.ContentLibraryItem` data source can be used to discover the ID
     * of a content library item.
     * 
     * &gt; **NOTE:** This resource requires vCenter Server and is not available on
     * direct ESXi host connections.
     * 
     */
    public static Output<GetContentLibraryItemResult> getContentLibraryItem(GetContentLibraryItemArgs args) {
        return getContentLibraryItem(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.ContentLibraryItem` data source can be used to discover the ID
     * of a content library item.
     * 
     * &gt; **NOTE:** This resource requires vCenter Server and is not available on
     * direct ESXi host connections.
     * 
     */
    public static CompletableFuture<GetContentLibraryItemResult> getContentLibraryItemPlain(GetContentLibraryItemPlainArgs args) {
        return getContentLibraryItemPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.ContentLibraryItem` data source can be used to discover the ID
     * of a content library item.
     * 
     * &gt; **NOTE:** This resource requires vCenter Server and is not available on
     * direct ESXi host connections.
     * 
     */
    public static Output<GetContentLibraryItemResult> getContentLibraryItem(GetContentLibraryItemArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getContentLibraryItem:getContentLibraryItem", TypeShape.of(GetContentLibraryItemResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.ContentLibraryItem` data source can be used to discover the ID
     * of a content library item.
     * 
     * &gt; **NOTE:** This resource requires vCenter Server and is not available on
     * direct ESXi host connections.
     * 
     */
    public static CompletableFuture<GetContentLibraryItemResult> getContentLibraryItemPlain(GetContentLibraryItemPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getContentLibraryItem:getContentLibraryItem", TypeShape.of(GetContentLibraryItemResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.CustomAttribute` data source can be used to reference custom
     * attributes that are not managed by this provider. Its attributes are exactly the
     * same as the `vsphere.CustomAttribute` resource,
     * and, like importing, the data source takes a name argument for the search. The
     * `id` and other attributes are then populated with the data found by the search.
     * 
     * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi host connections
     * and require vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetCustomAttributeResult> getCustomAttribute(GetCustomAttributeArgs args) {
        return getCustomAttribute(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.CustomAttribute` data source can be used to reference custom
     * attributes that are not managed by this provider. Its attributes are exactly the
     * same as the `vsphere.CustomAttribute` resource,
     * and, like importing, the data source takes a name argument for the search. The
     * `id` and other attributes are then populated with the data found by the search.
     * 
     * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi host connections
     * and require vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetCustomAttributeResult> getCustomAttributePlain(GetCustomAttributePlainArgs args) {
        return getCustomAttributePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.CustomAttribute` data source can be used to reference custom
     * attributes that are not managed by this provider. Its attributes are exactly the
     * same as the `vsphere.CustomAttribute` resource,
     * and, like importing, the data source takes a name argument for the search. The
     * `id` and other attributes are then populated with the data found by the search.
     * 
     * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi host connections
     * and require vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetCustomAttributeResult> getCustomAttribute(GetCustomAttributeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getCustomAttribute:getCustomAttribute", TypeShape.of(GetCustomAttributeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.CustomAttribute` data source can be used to reference custom
     * attributes that are not managed by this provider. Its attributes are exactly the
     * same as the `vsphere.CustomAttribute` resource,
     * and, like importing, the data source takes a name argument for the search. The
     * `id` and other attributes are then populated with the data found by the search.
     * 
     * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi host connections
     * and require vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetCustomAttributeResult> getCustomAttributePlain(GetCustomAttributePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getCustomAttribute:getCustomAttribute", TypeShape.of(GetCustomAttributeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.Datacenter` data source can be used to discover the ID of a
     * vSphere datacenter object. This can then be used with resources or data sources
     * that require a datacenter, such as the `vsphere.Host`
     * data source.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDatacenterResult> getDatacenter() {
        return getDatacenter(GetDatacenterArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.Datacenter` data source can be used to discover the ID of a
     * vSphere datacenter object. This can then be used with resources or data sources
     * that require a datacenter, such as the `vsphere.Host`
     * data source.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDatacenterResult> getDatacenterPlain() {
        return getDatacenterPlain(GetDatacenterPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.Datacenter` data source can be used to discover the ID of a
     * vSphere datacenter object. This can then be used with resources or data sources
     * that require a datacenter, such as the `vsphere.Host`
     * data source.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDatacenterResult> getDatacenter(GetDatacenterArgs args) {
        return getDatacenter(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.Datacenter` data source can be used to discover the ID of a
     * vSphere datacenter object. This can then be used with resources or data sources
     * that require a datacenter, such as the `vsphere.Host`
     * data source.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDatacenterResult> getDatacenterPlain(GetDatacenterPlainArgs args) {
        return getDatacenterPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.Datacenter` data source can be used to discover the ID of a
     * vSphere datacenter object. This can then be used with resources or data sources
     * that require a datacenter, such as the `vsphere.Host`
     * data source.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDatacenterResult> getDatacenter(GetDatacenterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getDatacenter:getDatacenter", TypeShape.of(GetDatacenterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.Datacenter` data source can be used to discover the ID of a
     * vSphere datacenter object. This can then be used with resources or data sources
     * that require a datacenter, such as the `vsphere.Host`
     * data source.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDatacenterResult> getDatacenterPlain(GetDatacenterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getDatacenter:getDatacenter", TypeShape.of(GetDatacenterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.getDatastore` data source can be used to discover the ID of a
     * vSphere datastore object. This can then be used with resources or data sources
     * that require a datastore. For example, to create virtual machines in using the
     * `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDatastoreResult> getDatastore(GetDatastoreArgs args) {
        return getDatastore(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.getDatastore` data source can be used to discover the ID of a
     * vSphere datastore object. This can then be used with resources or data sources
     * that require a datastore. For example, to create virtual machines in using the
     * `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDatastoreResult> getDatastorePlain(GetDatastorePlainArgs args) {
        return getDatastorePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.getDatastore` data source can be used to discover the ID of a
     * vSphere datastore object. This can then be used with resources or data sources
     * that require a datastore. For example, to create virtual machines in using the
     * `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDatastoreResult> getDatastore(GetDatastoreArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getDatastore:getDatastore", TypeShape.of(GetDatastoreResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.getDatastore` data source can be used to discover the ID of a
     * vSphere datastore object. This can then be used with resources or data sources
     * that require a datastore. For example, to create virtual machines in using the
     * `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDatastoreResult> getDatastorePlain(GetDatastorePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getDatastore:getDatastore", TypeShape.of(GetDatastoreResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.DatastoreCluster` data source can be used to discover the ID of a
     * vSphere datastore cluster object. This can then be used with resources or data sources
     * that require a datastore. For example, to assign datastores using the
     * `vsphere.NasDatastore` or `vsphere.VmfsDatastore` resources, or to create virtual machines in using the `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDatastoreClusterResult> getDatastoreCluster(GetDatastoreClusterArgs args) {
        return getDatastoreCluster(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.DatastoreCluster` data source can be used to discover the ID of a
     * vSphere datastore cluster object. This can then be used with resources or data sources
     * that require a datastore. For example, to assign datastores using the
     * `vsphere.NasDatastore` or `vsphere.VmfsDatastore` resources, or to create virtual machines in using the `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDatastoreClusterResult> getDatastoreClusterPlain(GetDatastoreClusterPlainArgs args) {
        return getDatastoreClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.DatastoreCluster` data source can be used to discover the ID of a
     * vSphere datastore cluster object. This can then be used with resources or data sources
     * that require a datastore. For example, to assign datastores using the
     * `vsphere.NasDatastore` or `vsphere.VmfsDatastore` resources, or to create virtual machines in using the `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDatastoreClusterResult> getDatastoreCluster(GetDatastoreClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getDatastoreCluster:getDatastoreCluster", TypeShape.of(GetDatastoreClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.DatastoreCluster` data source can be used to discover the ID of a
     * vSphere datastore cluster object. This can then be used with resources or data sources
     * that require a datastore. For example, to assign datastores using the
     * `vsphere.NasDatastore` or `vsphere.VmfsDatastore` resources, or to create virtual machines in using the `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDatastoreClusterResult> getDatastoreClusterPlain(GetDatastoreClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getDatastoreCluster:getDatastoreCluster", TypeShape.of(GetDatastoreClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.DistributedVirtualSwitch` data source can be used to discover
     * the ID and uplink data of a of a vSphere distributed switch (VDS). This
     * can then be used with resources or data sources that require a VDS, such as the
     * `vsphere.DistributedPortGroup` resource, for which
     * an example is shown below.
     * 
     * &gt; **NOTE:** This data source requires vCenter Server and is not available on
     * direct ESXi host connections.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDistributedVirtualSwitchResult> getDistributedVirtualSwitch(GetDistributedVirtualSwitchArgs args) {
        return getDistributedVirtualSwitch(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.DistributedVirtualSwitch` data source can be used to discover
     * the ID and uplink data of a of a vSphere distributed switch (VDS). This
     * can then be used with resources or data sources that require a VDS, such as the
     * `vsphere.DistributedPortGroup` resource, for which
     * an example is shown below.
     * 
     * &gt; **NOTE:** This data source requires vCenter Server and is not available on
     * direct ESXi host connections.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDistributedVirtualSwitchResult> getDistributedVirtualSwitchPlain(GetDistributedVirtualSwitchPlainArgs args) {
        return getDistributedVirtualSwitchPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.DistributedVirtualSwitch` data source can be used to discover
     * the ID and uplink data of a of a vSphere distributed switch (VDS). This
     * can then be used with resources or data sources that require a VDS, such as the
     * `vsphere.DistributedPortGroup` resource, for which
     * an example is shown below.
     * 
     * &gt; **NOTE:** This data source requires vCenter Server and is not available on
     * direct ESXi host connections.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDistributedVirtualSwitchResult> getDistributedVirtualSwitch(GetDistributedVirtualSwitchArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getDistributedVirtualSwitch:getDistributedVirtualSwitch", TypeShape.of(GetDistributedVirtualSwitchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.DistributedVirtualSwitch` data source can be used to discover
     * the ID and uplink data of a of a vSphere distributed switch (VDS). This
     * can then be used with resources or data sources that require a VDS, such as the
     * `vsphere.DistributedPortGroup` resource, for which
     * an example is shown below.
     * 
     * &gt; **NOTE:** This data source requires vCenter Server and is not available on
     * direct ESXi host connections.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDistributedVirtualSwitchResult> getDistributedVirtualSwitchPlain(GetDistributedVirtualSwitchPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getDistributedVirtualSwitch:getDistributedVirtualSwitch", TypeShape.of(GetDistributedVirtualSwitchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * [docs-about-morefs]: /docs/providers/vsphere/index.html#use-of-managed-object-references-by-the-vsphere-provider
     * 
     * The `vsphere.getDynamic` data source can be used to get the [managed object reference ID][docs-about-morefs]
     * of any tagged managed object in vCenter Server by providing a list of tag IDs
     * and an optional regular expression to filter objects by name.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDynamicResult> getDynamic(GetDynamicArgs args) {
        return getDynamic(args, InvokeOptions.Empty);
    }
    /**
     * [docs-about-morefs]: /docs/providers/vsphere/index.html#use-of-managed-object-references-by-the-vsphere-provider
     * 
     * The `vsphere.getDynamic` data source can be used to get the [managed object reference ID][docs-about-morefs]
     * of any tagged managed object in vCenter Server by providing a list of tag IDs
     * and an optional regular expression to filter objects by name.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDynamicResult> getDynamicPlain(GetDynamicPlainArgs args) {
        return getDynamicPlain(args, InvokeOptions.Empty);
    }
    /**
     * [docs-about-morefs]: /docs/providers/vsphere/index.html#use-of-managed-object-references-by-the-vsphere-provider
     * 
     * The `vsphere.getDynamic` data source can be used to get the [managed object reference ID][docs-about-morefs]
     * of any tagged managed object in vCenter Server by providing a list of tag IDs
     * and an optional regular expression to filter objects by name.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDynamicResult> getDynamic(GetDynamicArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getDynamic:getDynamic", TypeShape.of(GetDynamicResult.class), args, Utilities.withVersion(options));
    }
    /**
     * [docs-about-morefs]: /docs/providers/vsphere/index.html#use-of-managed-object-references-by-the-vsphere-provider
     * 
     * The `vsphere.getDynamic` data source can be used to get the [managed object reference ID][docs-about-morefs]
     * of any tagged managed object in vCenter Server by providing a list of tag IDs
     * and an optional regular expression to filter objects by name.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDynamicResult> getDynamicPlain(GetDynamicPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getDynamic:getDynamic", TypeShape.of(GetDynamicResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.Folder` data source can be used to get the general attributes of a
     * vSphere inventory folder. Paths are absolute and include must include the
     * datacenter.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetFolderResult> getFolder(GetFolderArgs args) {
        return getFolder(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.Folder` data source can be used to get the general attributes of a
     * vSphere inventory folder. Paths are absolute and include must include the
     * datacenter.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetFolderResult> getFolderPlain(GetFolderPlainArgs args) {
        return getFolderPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.Folder` data source can be used to get the general attributes of a
     * vSphere inventory folder. Paths are absolute and include must include the
     * datacenter.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetFolderResult> getFolder(GetFolderArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getFolder:getFolder", TypeShape.of(GetFolderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.Folder` data source can be used to get the general attributes of a
     * vSphere inventory folder. Paths are absolute and include must include the
     * datacenter.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetFolderResult> getFolderPlain(GetFolderPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getFolder:getFolder", TypeShape.of(GetFolderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.Host` data source can be used to discover the ID of an ESXi host.
     * This can then be used with resources or data sources that require an ESX
     * host&#39;s managed object reference ID.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetHostResult> getHost(GetHostArgs args) {
        return getHost(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.Host` data source can be used to discover the ID of an ESXi host.
     * This can then be used with resources or data sources that require an ESX
     * host&#39;s managed object reference ID.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetHostResult> getHostPlain(GetHostPlainArgs args) {
        return getHostPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.Host` data source can be used to discover the ID of an ESXi host.
     * This can then be used with resources or data sources that require an ESX
     * host&#39;s managed object reference ID.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetHostResult> getHost(GetHostArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getHost:getHost", TypeShape.of(GetHostResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.Host` data source can be used to discover the ID of an ESXi host.
     * This can then be used with resources or data sources that require an ESX
     * host&#39;s managed object reference ID.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetHostResult> getHostPlain(GetHostPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getHost:getHost", TypeShape.of(GetHostResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.getHostPciDevice` data source can be used to discover the device ID
     * of a vSphere host&#39;s PCI device. This can then be used with
     * `vsphere.VirtualMachine`&#39;s `pci_device_id`.
     * 
     * ## Example Usage
     * ### With Name Regular Expression
     * 
     */
    public static Output<GetHostPciDeviceResult> getHostPciDevice(GetHostPciDeviceArgs args) {
        return getHostPciDevice(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.getHostPciDevice` data source can be used to discover the device ID
     * of a vSphere host&#39;s PCI device. This can then be used with
     * `vsphere.VirtualMachine`&#39;s `pci_device_id`.
     * 
     * ## Example Usage
     * ### With Name Regular Expression
     * 
     */
    public static CompletableFuture<GetHostPciDeviceResult> getHostPciDevicePlain(GetHostPciDevicePlainArgs args) {
        return getHostPciDevicePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.getHostPciDevice` data source can be used to discover the device ID
     * of a vSphere host&#39;s PCI device. This can then be used with
     * `vsphere.VirtualMachine`&#39;s `pci_device_id`.
     * 
     * ## Example Usage
     * ### With Name Regular Expression
     * 
     */
    public static Output<GetHostPciDeviceResult> getHostPciDevice(GetHostPciDeviceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getHostPciDevice:getHostPciDevice", TypeShape.of(GetHostPciDeviceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.getHostPciDevice` data source can be used to discover the device ID
     * of a vSphere host&#39;s PCI device. This can then be used with
     * `vsphere.VirtualMachine`&#39;s `pci_device_id`.
     * 
     * ## Example Usage
     * ### With Name Regular Expression
     * 
     */
    public static CompletableFuture<GetHostPciDeviceResult> getHostPciDevicePlain(GetHostPciDevicePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getHostPciDevice:getHostPciDevice", TypeShape.of(GetHostPciDeviceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere_thumbprint` data source can be used to discover the host
     * thumbprint of an ESXi host. This can be used when adding the `vsphere.Host`
     * resource. If the ESXi host is using a certificate chain, the first one returned
     * will be used to generate the thumbprint.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetHostThumbprintResult> getHostThumbprint(GetHostThumbprintArgs args) {
        return getHostThumbprint(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere_thumbprint` data source can be used to discover the host
     * thumbprint of an ESXi host. This can be used when adding the `vsphere.Host`
     * resource. If the ESXi host is using a certificate chain, the first one returned
     * will be used to generate the thumbprint.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetHostThumbprintResult> getHostThumbprintPlain(GetHostThumbprintPlainArgs args) {
        return getHostThumbprintPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere_thumbprint` data source can be used to discover the host
     * thumbprint of an ESXi host. This can be used when adding the `vsphere.Host`
     * resource. If the ESXi host is using a certificate chain, the first one returned
     * will be used to generate the thumbprint.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetHostThumbprintResult> getHostThumbprint(GetHostThumbprintArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getHostThumbprint:getHostThumbprint", TypeShape.of(GetHostThumbprintResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere_thumbprint` data source can be used to discover the host
     * thumbprint of an ESXi host. This can be used when adding the `vsphere.Host`
     * resource. If the ESXi host is using a certificate chain, the first one returned
     * will be used to generate the thumbprint.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetHostThumbprintResult> getHostThumbprintPlain(GetHostThumbprintPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getHostThumbprint:getHostThumbprint", TypeShape.of(GetHostThumbprintResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.License` data source can be used to get the general attributes of
     * a license keys from a vCenter Server instance.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetLicenseResult> getLicense(GetLicenseArgs args) {
        return getLicense(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.License` data source can be used to get the general attributes of
     * a license keys from a vCenter Server instance.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetLicenseResult> getLicensePlain(GetLicensePlainArgs args) {
        return getLicensePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.License` data source can be used to get the general attributes of
     * a license keys from a vCenter Server instance.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetLicenseResult> getLicense(GetLicenseArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getLicense:getLicense", TypeShape.of(GetLicenseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.License` data source can be used to get the general attributes of
     * a license keys from a vCenter Server instance.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetLicenseResult> getLicensePlain(GetLicensePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getLicense:getLicense", TypeShape.of(GetLicenseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.getNetwork` data source can be used to discover the ID of a network
     * in vSphere. This can be any network that can be used as the backing for a
     * network interface for `vsphere.VirtualMachine` or any other vSphere resource
     * that requires a network. This includes standard (host-based) port groups,
     * distributed port groups, or opaque networks such as those managed by NSX.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetNetworkResult> getNetwork(GetNetworkArgs args) {
        return getNetwork(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.getNetwork` data source can be used to discover the ID of a network
     * in vSphere. This can be any network that can be used as the backing for a
     * network interface for `vsphere.VirtualMachine` or any other vSphere resource
     * that requires a network. This includes standard (host-based) port groups,
     * distributed port groups, or opaque networks such as those managed by NSX.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetNetworkResult> getNetworkPlain(GetNetworkPlainArgs args) {
        return getNetworkPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.getNetwork` data source can be used to discover the ID of a network
     * in vSphere. This can be any network that can be used as the backing for a
     * network interface for `vsphere.VirtualMachine` or any other vSphere resource
     * that requires a network. This includes standard (host-based) port groups,
     * distributed port groups, or opaque networks such as those managed by NSX.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetNetworkResult> getNetwork(GetNetworkArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getNetwork:getNetwork", TypeShape.of(GetNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.getNetwork` data source can be used to discover the ID of a network
     * in vSphere. This can be any network that can be used as the backing for a
     * network interface for `vsphere.VirtualMachine` or any other vSphere resource
     * that requires a network. This includes standard (host-based) port groups,
     * distributed port groups, or opaque networks such as those managed by NSX.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetNetworkResult> getNetworkPlain(GetNetworkPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getNetwork:getNetwork", TypeShape.of(GetNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.getOvfVmTemplate` data source can be used to submit an OVF to
     * vSphere and extract its hardware settings in a form that can be then used as
     * inputs for a `vsphere.VirtualMachine` resource.
     * 
     * ## Remote OVF/OVA Source
     * 
     * data &#34;vsphere_ovf_vm_template&#34; &#34;ovfRemote&#34; {
     *   name              = &#34;Nested-ESXi-7.0-Terraform-Deploy-1&#34;
     *   disk_provisioning = &#34;thin&#34;
     *   resource_pool_id  = data.vsphere_resource_pool.default.id
     *   datastore_id      = data.vsphere_datastore.datastore.id
     *   host_system_id    = data.vsphere_host.host.id
     *   remote_ovf_url    = &#34;https://download3.vmware.com/software/vmw-tools/nested-esxi/Nested_ESXi7.0u3_Appliance_Template_v1.ova&#34;
     *   ovf_network_map = {
     *     &#34;VM Network&#34; : data.vsphere_network.network.id
     *   }
     * }
     * 
     * ## Local OVF/OVA Source
     * 
     * data &#34;vsphere_ovf_vm_template&#34; &#34;ovfLocal&#34; {
     *   name              = &#34;Nested-ESXi-7.0-Terraform-Deploy-2&#34;
     *   disk_provisioning = &#34;thin&#34;
     *   resource_pool_id  = data.vsphere_resource_pool.default.id
     *   datastore_id      = data.vsphere_datastore.datastore.id
     *   host_system_id    = data.vsphere_host.host.id
     *   local_ovf_path    = &#34;/Volume/Storage/OVA/Nested_ESXi7.0u3_Appliance_Template_v1.ova&#34;
     *   ovf_network_map = {
     *     &#34;VM Network&#34; : data.vsphere_network.network.id
     *   }
     * }
     * 
     * ## Deployment of VM from Remote OVF
     * 
     * resource &#34;vsphere_virtual_machine&#34; &#34;vmFromRemoteOvf&#34; {
     *   name                 = &#34;Nested-ESXi-7.0-Terraform-Deploy-1&#34;
     *   datacenter_id        = data.vsphere_datacenter.datacenter.id
     *   datastore_id         = data.vsphere_datastore.datastore.id
     *   host_system_id       = data.vsphere_host.host.id
     *   resource_pool_id     = data.vsphere_resource_pool.default.id
     *   num_cpus             = data.vsphere_ovf_vm_template.ovfRemote.num_cpus
     *   num_cores_per_socket = data.vsphere_ovf_vm_template.ovfRemote.num_cores_per_socket
     *   memory               = data.vsphere_ovf_vm_template.ovfRemote.memory
     *   guest_id             = data.vsphere_ovf_vm_template.ovfRemote.guest_id
     *   firmware             = data.vsphere_ovf_vm_template.ovfRemote.firmware
     *   scsi_type            = data.vsphere_ovf_vm_template.ovfRemote.scsi_type
     *   nested_hv_enabled    = data.vsphere_ovf_vm_template.ovfRemote.nested_hv_enabled
     *   dynamic &#34;network_interface&#34; {
     *     for_each = data.vsphere_ovf_vm_template.ovfRemote.ovf_network_map
     *     content {
     *       network_id = network_interface.value
     *     }
     *   }
     *   wait_for_guest_net_timeout = 0
     *   wait_for_guest_ip_timeout  = 0
     * 
     *   ovf_deploy {
     *     allow_unverified_ssl_cert = false
     *     remote_ovf_url            = data.vsphere_ovf_vm_template.ovfRemote.remote_ovf_url
     *     disk_provisioning         = data.vsphere_ovf_vm_template.ovfRemote.disk_provisioning
     *     ovf_network_map           = data.vsphere_ovf_vm_template.ovfRemote.ovf_network_map
     *   }
     * 
     *   vapp {
     *     properties = {
     *       &#34;guestinfo.hostname&#34;  = &#34;nested-esxi-01.example.com&#34;,
     *       &#34;guestinfo.ipaddress&#34; = &#34;172.16.11.101&#34;,
     *       &#34;guestinfo.netmask&#34;   = &#34;255.255.255.0&#34;,
     *       &#34;guestinfo.gateway&#34;   = &#34;172.16.11.1&#34;,
     *       &#34;guestinfo.dns&#34;       = &#34;172.16.11.4&#34;,
     *       &#34;guestinfo.domain&#34;    = &#34;example.com&#34;,
     *       &#34;guestinfo.ntp&#34;       = &#34;ntp.example.com&#34;,
     *       &#34;guestinfo.password&#34;  = &#34;VMware1!&#34;,
     *       &#34;guestinfo.ssh&#34;       = &#34;True&#34;
     *     }
     *   }
     * 
     *   lifecycle {
     *     ignore_changes = [
     *       annotation,
     *       disk[0].io_share_count,
     *       disk[1].io_share_count,
     *       disk[2].io_share_count,
     *       vapp[0].properties,
     *     ]
     *   }
     * }
     * 
     */
    public static Output<GetOvfVmTemplateResult> getOvfVmTemplate(GetOvfVmTemplateArgs args) {
        return getOvfVmTemplate(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.getOvfVmTemplate` data source can be used to submit an OVF to
     * vSphere and extract its hardware settings in a form that can be then used as
     * inputs for a `vsphere.VirtualMachine` resource.
     * 
     * ## Remote OVF/OVA Source
     * 
     * data &#34;vsphere_ovf_vm_template&#34; &#34;ovfRemote&#34; {
     *   name              = &#34;Nested-ESXi-7.0-Terraform-Deploy-1&#34;
     *   disk_provisioning = &#34;thin&#34;
     *   resource_pool_id  = data.vsphere_resource_pool.default.id
     *   datastore_id      = data.vsphere_datastore.datastore.id
     *   host_system_id    = data.vsphere_host.host.id
     *   remote_ovf_url    = &#34;https://download3.vmware.com/software/vmw-tools/nested-esxi/Nested_ESXi7.0u3_Appliance_Template_v1.ova&#34;
     *   ovf_network_map = {
     *     &#34;VM Network&#34; : data.vsphere_network.network.id
     *   }
     * }
     * 
     * ## Local OVF/OVA Source
     * 
     * data &#34;vsphere_ovf_vm_template&#34; &#34;ovfLocal&#34; {
     *   name              = &#34;Nested-ESXi-7.0-Terraform-Deploy-2&#34;
     *   disk_provisioning = &#34;thin&#34;
     *   resource_pool_id  = data.vsphere_resource_pool.default.id
     *   datastore_id      = data.vsphere_datastore.datastore.id
     *   host_system_id    = data.vsphere_host.host.id
     *   local_ovf_path    = &#34;/Volume/Storage/OVA/Nested_ESXi7.0u3_Appliance_Template_v1.ova&#34;
     *   ovf_network_map = {
     *     &#34;VM Network&#34; : data.vsphere_network.network.id
     *   }
     * }
     * 
     * ## Deployment of VM from Remote OVF
     * 
     * resource &#34;vsphere_virtual_machine&#34; &#34;vmFromRemoteOvf&#34; {
     *   name                 = &#34;Nested-ESXi-7.0-Terraform-Deploy-1&#34;
     *   datacenter_id        = data.vsphere_datacenter.datacenter.id
     *   datastore_id         = data.vsphere_datastore.datastore.id
     *   host_system_id       = data.vsphere_host.host.id
     *   resource_pool_id     = data.vsphere_resource_pool.default.id
     *   num_cpus             = data.vsphere_ovf_vm_template.ovfRemote.num_cpus
     *   num_cores_per_socket = data.vsphere_ovf_vm_template.ovfRemote.num_cores_per_socket
     *   memory               = data.vsphere_ovf_vm_template.ovfRemote.memory
     *   guest_id             = data.vsphere_ovf_vm_template.ovfRemote.guest_id
     *   firmware             = data.vsphere_ovf_vm_template.ovfRemote.firmware
     *   scsi_type            = data.vsphere_ovf_vm_template.ovfRemote.scsi_type
     *   nested_hv_enabled    = data.vsphere_ovf_vm_template.ovfRemote.nested_hv_enabled
     *   dynamic &#34;network_interface&#34; {
     *     for_each = data.vsphere_ovf_vm_template.ovfRemote.ovf_network_map
     *     content {
     *       network_id = network_interface.value
     *     }
     *   }
     *   wait_for_guest_net_timeout = 0
     *   wait_for_guest_ip_timeout  = 0
     * 
     *   ovf_deploy {
     *     allow_unverified_ssl_cert = false
     *     remote_ovf_url            = data.vsphere_ovf_vm_template.ovfRemote.remote_ovf_url
     *     disk_provisioning         = data.vsphere_ovf_vm_template.ovfRemote.disk_provisioning
     *     ovf_network_map           = data.vsphere_ovf_vm_template.ovfRemote.ovf_network_map
     *   }
     * 
     *   vapp {
     *     properties = {
     *       &#34;guestinfo.hostname&#34;  = &#34;nested-esxi-01.example.com&#34;,
     *       &#34;guestinfo.ipaddress&#34; = &#34;172.16.11.101&#34;,
     *       &#34;guestinfo.netmask&#34;   = &#34;255.255.255.0&#34;,
     *       &#34;guestinfo.gateway&#34;   = &#34;172.16.11.1&#34;,
     *       &#34;guestinfo.dns&#34;       = &#34;172.16.11.4&#34;,
     *       &#34;guestinfo.domain&#34;    = &#34;example.com&#34;,
     *       &#34;guestinfo.ntp&#34;       = &#34;ntp.example.com&#34;,
     *       &#34;guestinfo.password&#34;  = &#34;VMware1!&#34;,
     *       &#34;guestinfo.ssh&#34;       = &#34;True&#34;
     *     }
     *   }
     * 
     *   lifecycle {
     *     ignore_changes = [
     *       annotation,
     *       disk[0].io_share_count,
     *       disk[1].io_share_count,
     *       disk[2].io_share_count,
     *       vapp[0].properties,
     *     ]
     *   }
     * }
     * 
     */
    public static CompletableFuture<GetOvfVmTemplateResult> getOvfVmTemplatePlain(GetOvfVmTemplatePlainArgs args) {
        return getOvfVmTemplatePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.getOvfVmTemplate` data source can be used to submit an OVF to
     * vSphere and extract its hardware settings in a form that can be then used as
     * inputs for a `vsphere.VirtualMachine` resource.
     * 
     * ## Remote OVF/OVA Source
     * 
     * data &#34;vsphere_ovf_vm_template&#34; &#34;ovfRemote&#34; {
     *   name              = &#34;Nested-ESXi-7.0-Terraform-Deploy-1&#34;
     *   disk_provisioning = &#34;thin&#34;
     *   resource_pool_id  = data.vsphere_resource_pool.default.id
     *   datastore_id      = data.vsphere_datastore.datastore.id
     *   host_system_id    = data.vsphere_host.host.id
     *   remote_ovf_url    = &#34;https://download3.vmware.com/software/vmw-tools/nested-esxi/Nested_ESXi7.0u3_Appliance_Template_v1.ova&#34;
     *   ovf_network_map = {
     *     &#34;VM Network&#34; : data.vsphere_network.network.id
     *   }
     * }
     * 
     * ## Local OVF/OVA Source
     * 
     * data &#34;vsphere_ovf_vm_template&#34; &#34;ovfLocal&#34; {
     *   name              = &#34;Nested-ESXi-7.0-Terraform-Deploy-2&#34;
     *   disk_provisioning = &#34;thin&#34;
     *   resource_pool_id  = data.vsphere_resource_pool.default.id
     *   datastore_id      = data.vsphere_datastore.datastore.id
     *   host_system_id    = data.vsphere_host.host.id
     *   local_ovf_path    = &#34;/Volume/Storage/OVA/Nested_ESXi7.0u3_Appliance_Template_v1.ova&#34;
     *   ovf_network_map = {
     *     &#34;VM Network&#34; : data.vsphere_network.network.id
     *   }
     * }
     * 
     * ## Deployment of VM from Remote OVF
     * 
     * resource &#34;vsphere_virtual_machine&#34; &#34;vmFromRemoteOvf&#34; {
     *   name                 = &#34;Nested-ESXi-7.0-Terraform-Deploy-1&#34;
     *   datacenter_id        = data.vsphere_datacenter.datacenter.id
     *   datastore_id         = data.vsphere_datastore.datastore.id
     *   host_system_id       = data.vsphere_host.host.id
     *   resource_pool_id     = data.vsphere_resource_pool.default.id
     *   num_cpus             = data.vsphere_ovf_vm_template.ovfRemote.num_cpus
     *   num_cores_per_socket = data.vsphere_ovf_vm_template.ovfRemote.num_cores_per_socket
     *   memory               = data.vsphere_ovf_vm_template.ovfRemote.memory
     *   guest_id             = data.vsphere_ovf_vm_template.ovfRemote.guest_id
     *   firmware             = data.vsphere_ovf_vm_template.ovfRemote.firmware
     *   scsi_type            = data.vsphere_ovf_vm_template.ovfRemote.scsi_type
     *   nested_hv_enabled    = data.vsphere_ovf_vm_template.ovfRemote.nested_hv_enabled
     *   dynamic &#34;network_interface&#34; {
     *     for_each = data.vsphere_ovf_vm_template.ovfRemote.ovf_network_map
     *     content {
     *       network_id = network_interface.value
     *     }
     *   }
     *   wait_for_guest_net_timeout = 0
     *   wait_for_guest_ip_timeout  = 0
     * 
     *   ovf_deploy {
     *     allow_unverified_ssl_cert = false
     *     remote_ovf_url            = data.vsphere_ovf_vm_template.ovfRemote.remote_ovf_url
     *     disk_provisioning         = data.vsphere_ovf_vm_template.ovfRemote.disk_provisioning
     *     ovf_network_map           = data.vsphere_ovf_vm_template.ovfRemote.ovf_network_map
     *   }
     * 
     *   vapp {
     *     properties = {
     *       &#34;guestinfo.hostname&#34;  = &#34;nested-esxi-01.example.com&#34;,
     *       &#34;guestinfo.ipaddress&#34; = &#34;172.16.11.101&#34;,
     *       &#34;guestinfo.netmask&#34;   = &#34;255.255.255.0&#34;,
     *       &#34;guestinfo.gateway&#34;   = &#34;172.16.11.1&#34;,
     *       &#34;guestinfo.dns&#34;       = &#34;172.16.11.4&#34;,
     *       &#34;guestinfo.domain&#34;    = &#34;example.com&#34;,
     *       &#34;guestinfo.ntp&#34;       = &#34;ntp.example.com&#34;,
     *       &#34;guestinfo.password&#34;  = &#34;VMware1!&#34;,
     *       &#34;guestinfo.ssh&#34;       = &#34;True&#34;
     *     }
     *   }
     * 
     *   lifecycle {
     *     ignore_changes = [
     *       annotation,
     *       disk[0].io_share_count,
     *       disk[1].io_share_count,
     *       disk[2].io_share_count,
     *       vapp[0].properties,
     *     ]
     *   }
     * }
     * 
     */
    public static Output<GetOvfVmTemplateResult> getOvfVmTemplate(GetOvfVmTemplateArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getOvfVmTemplate:getOvfVmTemplate", TypeShape.of(GetOvfVmTemplateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.getOvfVmTemplate` data source can be used to submit an OVF to
     * vSphere and extract its hardware settings in a form that can be then used as
     * inputs for a `vsphere.VirtualMachine` resource.
     * 
     * ## Remote OVF/OVA Source
     * 
     * data &#34;vsphere_ovf_vm_template&#34; &#34;ovfRemote&#34; {
     *   name              = &#34;Nested-ESXi-7.0-Terraform-Deploy-1&#34;
     *   disk_provisioning = &#34;thin&#34;
     *   resource_pool_id  = data.vsphere_resource_pool.default.id
     *   datastore_id      = data.vsphere_datastore.datastore.id
     *   host_system_id    = data.vsphere_host.host.id
     *   remote_ovf_url    = &#34;https://download3.vmware.com/software/vmw-tools/nested-esxi/Nested_ESXi7.0u3_Appliance_Template_v1.ova&#34;
     *   ovf_network_map = {
     *     &#34;VM Network&#34; : data.vsphere_network.network.id
     *   }
     * }
     * 
     * ## Local OVF/OVA Source
     * 
     * data &#34;vsphere_ovf_vm_template&#34; &#34;ovfLocal&#34; {
     *   name              = &#34;Nested-ESXi-7.0-Terraform-Deploy-2&#34;
     *   disk_provisioning = &#34;thin&#34;
     *   resource_pool_id  = data.vsphere_resource_pool.default.id
     *   datastore_id      = data.vsphere_datastore.datastore.id
     *   host_system_id    = data.vsphere_host.host.id
     *   local_ovf_path    = &#34;/Volume/Storage/OVA/Nested_ESXi7.0u3_Appliance_Template_v1.ova&#34;
     *   ovf_network_map = {
     *     &#34;VM Network&#34; : data.vsphere_network.network.id
     *   }
     * }
     * 
     * ## Deployment of VM from Remote OVF
     * 
     * resource &#34;vsphere_virtual_machine&#34; &#34;vmFromRemoteOvf&#34; {
     *   name                 = &#34;Nested-ESXi-7.0-Terraform-Deploy-1&#34;
     *   datacenter_id        = data.vsphere_datacenter.datacenter.id
     *   datastore_id         = data.vsphere_datastore.datastore.id
     *   host_system_id       = data.vsphere_host.host.id
     *   resource_pool_id     = data.vsphere_resource_pool.default.id
     *   num_cpus             = data.vsphere_ovf_vm_template.ovfRemote.num_cpus
     *   num_cores_per_socket = data.vsphere_ovf_vm_template.ovfRemote.num_cores_per_socket
     *   memory               = data.vsphere_ovf_vm_template.ovfRemote.memory
     *   guest_id             = data.vsphere_ovf_vm_template.ovfRemote.guest_id
     *   firmware             = data.vsphere_ovf_vm_template.ovfRemote.firmware
     *   scsi_type            = data.vsphere_ovf_vm_template.ovfRemote.scsi_type
     *   nested_hv_enabled    = data.vsphere_ovf_vm_template.ovfRemote.nested_hv_enabled
     *   dynamic &#34;network_interface&#34; {
     *     for_each = data.vsphere_ovf_vm_template.ovfRemote.ovf_network_map
     *     content {
     *       network_id = network_interface.value
     *     }
     *   }
     *   wait_for_guest_net_timeout = 0
     *   wait_for_guest_ip_timeout  = 0
     * 
     *   ovf_deploy {
     *     allow_unverified_ssl_cert = false
     *     remote_ovf_url            = data.vsphere_ovf_vm_template.ovfRemote.remote_ovf_url
     *     disk_provisioning         = data.vsphere_ovf_vm_template.ovfRemote.disk_provisioning
     *     ovf_network_map           = data.vsphere_ovf_vm_template.ovfRemote.ovf_network_map
     *   }
     * 
     *   vapp {
     *     properties = {
     *       &#34;guestinfo.hostname&#34;  = &#34;nested-esxi-01.example.com&#34;,
     *       &#34;guestinfo.ipaddress&#34; = &#34;172.16.11.101&#34;,
     *       &#34;guestinfo.netmask&#34;   = &#34;255.255.255.0&#34;,
     *       &#34;guestinfo.gateway&#34;   = &#34;172.16.11.1&#34;,
     *       &#34;guestinfo.dns&#34;       = &#34;172.16.11.4&#34;,
     *       &#34;guestinfo.domain&#34;    = &#34;example.com&#34;,
     *       &#34;guestinfo.ntp&#34;       = &#34;ntp.example.com&#34;,
     *       &#34;guestinfo.password&#34;  = &#34;VMware1!&#34;,
     *       &#34;guestinfo.ssh&#34;       = &#34;True&#34;
     *     }
     *   }
     * 
     *   lifecycle {
     *     ignore_changes = [
     *       annotation,
     *       disk[0].io_share_count,
     *       disk[1].io_share_count,
     *       disk[2].io_share_count,
     *       vapp[0].properties,
     *     ]
     *   }
     * }
     * 
     */
    public static CompletableFuture<GetOvfVmTemplateResult> getOvfVmTemplatePlain(GetOvfVmTemplatePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getOvfVmTemplate:getOvfVmTemplate", TypeShape.of(GetOvfVmTemplateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.getPolicy` data source can be used to discover the UUID of a
     * storage policy. This can then be used with other resources or data sources that
     * use a storage policy.
     * 
     * &gt; **NOTE:** Storage policies are not supported on direct ESXi hosts and
     * requires vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetPolicyResult> getPolicy(GetPolicyArgs args) {
        return getPolicy(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.getPolicy` data source can be used to discover the UUID of a
     * storage policy. This can then be used with other resources or data sources that
     * use a storage policy.
     * 
     * &gt; **NOTE:** Storage policies are not supported on direct ESXi hosts and
     * requires vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetPolicyResult> getPolicyPlain(GetPolicyPlainArgs args) {
        return getPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.getPolicy` data source can be used to discover the UUID of a
     * storage policy. This can then be used with other resources or data sources that
     * use a storage policy.
     * 
     * &gt; **NOTE:** Storage policies are not supported on direct ESXi hosts and
     * requires vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetPolicyResult> getPolicy(GetPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getPolicy:getPolicy", TypeShape.of(GetPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.getPolicy` data source can be used to discover the UUID of a
     * storage policy. This can then be used with other resources or data sources that
     * use a storage policy.
     * 
     * &gt; **NOTE:** Storage policies are not supported on direct ESXi hosts and
     * requires vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetPolicyResult> getPolicyPlain(GetPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getPolicy:getPolicy", TypeShape.of(GetPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.ResourcePool` data source can be used to discover the ID of a
     * resource pool in vSphere. This is useful to return the ID of a resource pool
     * that you want to use to create virtual machines in using the
     * `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetResourcePoolResult> getResourcePool() {
        return getResourcePool(GetResourcePoolArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.ResourcePool` data source can be used to discover the ID of a
     * resource pool in vSphere. This is useful to return the ID of a resource pool
     * that you want to use to create virtual machines in using the
     * `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetResourcePoolResult> getResourcePoolPlain() {
        return getResourcePoolPlain(GetResourcePoolPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.ResourcePool` data source can be used to discover the ID of a
     * resource pool in vSphere. This is useful to return the ID of a resource pool
     * that you want to use to create virtual machines in using the
     * `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetResourcePoolResult> getResourcePool(GetResourcePoolArgs args) {
        return getResourcePool(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.ResourcePool` data source can be used to discover the ID of a
     * resource pool in vSphere. This is useful to return the ID of a resource pool
     * that you want to use to create virtual machines in using the
     * `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetResourcePoolResult> getResourcePoolPlain(GetResourcePoolPlainArgs args) {
        return getResourcePoolPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.ResourcePool` data source can be used to discover the ID of a
     * resource pool in vSphere. This is useful to return the ID of a resource pool
     * that you want to use to create virtual machines in using the
     * `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetResourcePoolResult> getResourcePool(GetResourcePoolArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getResourcePool:getResourcePool", TypeShape.of(GetResourcePoolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.ResourcePool` data source can be used to discover the ID of a
     * resource pool in vSphere. This is useful to return the ID of a resource pool
     * that you want to use to create virtual machines in using the
     * `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetResourcePoolResult> getResourcePoolPlain(GetResourcePoolPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getResourcePool:getResourcePool", TypeShape.of(GetResourcePoolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.Role` data source can be used to discover the `id` and privileges associated
     * with a role given its name or display label.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetRoleResult> getRole(GetRoleArgs args) {
        return getRole(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.Role` data source can be used to discover the `id` and privileges associated
     * with a role given its name or display label.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetRoleResult> getRolePlain(GetRolePlainArgs args) {
        return getRolePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.Role` data source can be used to discover the `id` and privileges associated
     * with a role given its name or display label.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetRoleResult> getRole(GetRoleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getRole:getRole", TypeShape.of(GetRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.Role` data source can be used to discover the `id` and privileges associated
     * with a role given its name or display label.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetRoleResult> getRolePlain(GetRolePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getRole:getRole", TypeShape.of(GetRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.Tag` data source can be used to reference tags that are not
     * managed by this provider. Its attributes are exactly the same as the `vsphere.Tag`
     * resource, and, like importing, the data source takes a name and
     * category to search on. The `id` and other attributes are then populated with
     * the data found by the search.
     * 
     * &gt; **NOTE:** Tagging is not supported on direct ESXi hosts connections and
     * requires vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetTagResult> getTag(GetTagArgs args) {
        return getTag(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.Tag` data source can be used to reference tags that are not
     * managed by this provider. Its attributes are exactly the same as the `vsphere.Tag`
     * resource, and, like importing, the data source takes a name and
     * category to search on. The `id` and other attributes are then populated with
     * the data found by the search.
     * 
     * &gt; **NOTE:** Tagging is not supported on direct ESXi hosts connections and
     * requires vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetTagResult> getTagPlain(GetTagPlainArgs args) {
        return getTagPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.Tag` data source can be used to reference tags that are not
     * managed by this provider. Its attributes are exactly the same as the `vsphere.Tag`
     * resource, and, like importing, the data source takes a name and
     * category to search on. The `id` and other attributes are then populated with
     * the data found by the search.
     * 
     * &gt; **NOTE:** Tagging is not supported on direct ESXi hosts connections and
     * requires vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetTagResult> getTag(GetTagArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getTag:getTag", TypeShape.of(GetTagResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.Tag` data source can be used to reference tags that are not
     * managed by this provider. Its attributes are exactly the same as the `vsphere.Tag`
     * resource, and, like importing, the data source takes a name and
     * category to search on. The `id` and other attributes are then populated with
     * the data found by the search.
     * 
     * &gt; **NOTE:** Tagging is not supported on direct ESXi hosts connections and
     * requires vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetTagResult> getTagPlain(GetTagPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getTag:getTag", TypeShape.of(GetTagResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.TagCategory` data source can be used to reference tag categories
     * that are not managed by this provider. Its attributes are the same as the
     * `vsphere.TagCategory` resource, and, like importing,
     * the data source uses a name and category as search criteria. The `id` and other
     * attributes are populated with the data found by the search.
     * 
     * &gt; **NOTE:** Tagging is not supported on direct ESXi hosts connections and
     * requires vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetTagCategoryResult> getTagCategory(GetTagCategoryArgs args) {
        return getTagCategory(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.TagCategory` data source can be used to reference tag categories
     * that are not managed by this provider. Its attributes are the same as the
     * `vsphere.TagCategory` resource, and, like importing,
     * the data source uses a name and category as search criteria. The `id` and other
     * attributes are populated with the data found by the search.
     * 
     * &gt; **NOTE:** Tagging is not supported on direct ESXi hosts connections and
     * requires vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetTagCategoryResult> getTagCategoryPlain(GetTagCategoryPlainArgs args) {
        return getTagCategoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.TagCategory` data source can be used to reference tag categories
     * that are not managed by this provider. Its attributes are the same as the
     * `vsphere.TagCategory` resource, and, like importing,
     * the data source uses a name and category as search criteria. The `id` and other
     * attributes are populated with the data found by the search.
     * 
     * &gt; **NOTE:** Tagging is not supported on direct ESXi hosts connections and
     * requires vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetTagCategoryResult> getTagCategory(GetTagCategoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getTagCategory:getTagCategory", TypeShape.of(GetTagCategoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.TagCategory` data source can be used to reference tag categories
     * that are not managed by this provider. Its attributes are the same as the
     * `vsphere.TagCategory` resource, and, like importing,
     * the data source uses a name and category as search criteria. The `id` and other
     * attributes are populated with the data found by the search.
     * 
     * &gt; **NOTE:** Tagging is not supported on direct ESXi hosts connections and
     * requires vCenter Server.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetTagCategoryResult> getTagCategoryPlain(GetTagCategoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getTagCategory:getTagCategory", TypeShape.of(GetTagCategoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.VappContainer` data source can be used to discover the ID of a
     * vApp container in vSphere. This is useful to return the ID of a vApp container
     * that you want to use to create virtual machines in using the
     * `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetVappContainerResult> getVappContainer(GetVappContainerArgs args) {
        return getVappContainer(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.VappContainer` data source can be used to discover the ID of a
     * vApp container in vSphere. This is useful to return the ID of a vApp container
     * that you want to use to create virtual machines in using the
     * `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetVappContainerResult> getVappContainerPlain(GetVappContainerPlainArgs args) {
        return getVappContainerPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.VappContainer` data source can be used to discover the ID of a
     * vApp container in vSphere. This is useful to return the ID of a vApp container
     * that you want to use to create virtual machines in using the
     * `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetVappContainerResult> getVappContainer(GetVappContainerArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getVappContainer:getVappContainer", TypeShape.of(GetVappContainerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.VappContainer` data source can be used to discover the ID of a
     * vApp container in vSphere. This is useful to return the ID of a vApp container
     * that you want to use to create virtual machines in using the
     * `vsphere.VirtualMachine` resource.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetVappContainerResult> getVappContainerPlain(GetVappContainerPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getVappContainer:getVappContainer", TypeShape.of(GetVappContainerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.VirtualMachine` data source can be used to find the UUID of an
     * existing virtual machine or template. The most common purpose is for finding
     * the UUID of a template to be used as the source for cloning to a new
     * `vsphere.VirtualMachine` resource. It also
     * reads the guest ID so that can be supplied as well.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetVirtualMachineResult> getVirtualMachine() {
        return getVirtualMachine(GetVirtualMachineArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.VirtualMachine` data source can be used to find the UUID of an
     * existing virtual machine or template. The most common purpose is for finding
     * the UUID of a template to be used as the source for cloning to a new
     * `vsphere.VirtualMachine` resource. It also
     * reads the guest ID so that can be supplied as well.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetVirtualMachineResult> getVirtualMachinePlain() {
        return getVirtualMachinePlain(GetVirtualMachinePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.VirtualMachine` data source can be used to find the UUID of an
     * existing virtual machine or template. The most common purpose is for finding
     * the UUID of a template to be used as the source for cloning to a new
     * `vsphere.VirtualMachine` resource. It also
     * reads the guest ID so that can be supplied as well.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetVirtualMachineResult> getVirtualMachine(GetVirtualMachineArgs args) {
        return getVirtualMachine(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.VirtualMachine` data source can be used to find the UUID of an
     * existing virtual machine or template. The most common purpose is for finding
     * the UUID of a template to be used as the source for cloning to a new
     * `vsphere.VirtualMachine` resource. It also
     * reads the guest ID so that can be supplied as well.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetVirtualMachineResult> getVirtualMachinePlain(GetVirtualMachinePlainArgs args) {
        return getVirtualMachinePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.VirtualMachine` data source can be used to find the UUID of an
     * existing virtual machine or template. The most common purpose is for finding
     * the UUID of a template to be used as the source for cloning to a new
     * `vsphere.VirtualMachine` resource. It also
     * reads the guest ID so that can be supplied as well.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetVirtualMachineResult> getVirtualMachine(GetVirtualMachineArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getVirtualMachine:getVirtualMachine", TypeShape.of(GetVirtualMachineResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.VirtualMachine` data source can be used to find the UUID of an
     * existing virtual machine or template. The most common purpose is for finding
     * the UUID of a template to be used as the source for cloning to a new
     * `vsphere.VirtualMachine` resource. It also
     * reads the guest ID so that can be supplied as well.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetVirtualMachineResult> getVirtualMachinePlain(GetVirtualMachinePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getVirtualMachine:getVirtualMachine", TypeShape.of(GetVirtualMachineResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.getVmfsDisks` data source can be used to discover the storage
     * devices available on an ESXi host. This data source can be combined with the
     * `vsphere.VmfsDatastore` resource to create VMFS
     * datastores based off a set of discovered disks.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetVmfsDisksResult> getVmfsDisks(GetVmfsDisksArgs args) {
        return getVmfsDisks(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.getVmfsDisks` data source can be used to discover the storage
     * devices available on an ESXi host. This data source can be combined with the
     * `vsphere.VmfsDatastore` resource to create VMFS
     * datastores based off a set of discovered disks.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetVmfsDisksResult> getVmfsDisksPlain(GetVmfsDisksPlainArgs args) {
        return getVmfsDisksPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `vsphere.getVmfsDisks` data source can be used to discover the storage
     * devices available on an ESXi host. This data source can be combined with the
     * `vsphere.VmfsDatastore` resource to create VMFS
     * datastores based off a set of discovered disks.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetVmfsDisksResult> getVmfsDisks(GetVmfsDisksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vsphere:index/getVmfsDisks:getVmfsDisks", TypeShape.of(GetVmfsDisksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `vsphere.getVmfsDisks` data source can be used to discover the storage
     * devices available on an ESXi host. This data source can be combined with the
     * `vsphere.VmfsDatastore` resource to create VMFS
     * datastores based off a set of discovered disks.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetVmfsDisksResult> getVmfsDisksPlain(GetVmfsDisksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vsphere:index/getVmfsDisks:getVmfsDisks", TypeShape.of(GetVmfsDisksResult.class), args, Utilities.withVersion(options));
    }
}
