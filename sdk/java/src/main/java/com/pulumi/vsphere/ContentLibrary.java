// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.ContentLibraryArgs;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.inputs.ContentLibraryState;
import com.pulumi.vsphere.outputs.ContentLibraryPublication;
import com.pulumi.vsphere.outputs.ContentLibrarySubscription;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `vsphere.ContentLibrary` resource can be used to manage content libraries.
 * 
 * &gt; **NOTE:** This resource requires a vCenter Server instance and is not available on direct ESXi host connections.
 * 
 * ## Example Usage
 * 
 * The following example creates a publishing content library using the datastore named `publisher-datastore` as the storage backing.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VsphereFunctions;
 * import com.pulumi.vsphere.inputs.GetDatacenterArgs;
 * import com.pulumi.vsphere.inputs.GetDatastoreArgs;
 * import com.pulumi.vsphere.ContentLibrary;
 * import com.pulumi.vsphere.ContentLibraryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var datacenterA = VsphereFunctions.getDatacenter(GetDatacenterArgs.builder()
 *             .name("dc-01-a")
 *             .build());
 * 
 *         final var publisherDatastore = VsphereFunctions.getDatastore(GetDatastoreArgs.builder()
 *             .name("publisher-datastore")
 *             .datacenterId(datacenterA.id())
 *             .build());
 * 
 *         var publisherContentLibrary = new ContentLibrary("publisherContentLibrary", ContentLibraryArgs.builder()
 *             .name("Publisher Content Library")
 *             .description("A publishing content library.")
 *             .storageBackings(publisherDatastore.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * The next example creates a subscribed content library using the URL of the publisher content library as the source and the datastore named `subscriber-datastore` as the storage backing.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VsphereFunctions;
 * import com.pulumi.vsphere.inputs.GetDatacenterArgs;
 * import com.pulumi.vsphere.inputs.GetDatastoreArgs;
 * import com.pulumi.vsphere.ContentLibrary;
 * import com.pulumi.vsphere.ContentLibraryArgs;
 * import com.pulumi.vsphere.inputs.ContentLibrarySubscriptionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var datacenterB = VsphereFunctions.getDatacenter(GetDatacenterArgs.builder()
 *             .name("dc-01-b")
 *             .build());
 * 
 *         final var subscriberDatastore = VsphereFunctions.getDatastore(GetDatastoreArgs.builder()
 *             .name("subscriber-datastore")
 *             .datacenterId(datacenterB.id())
 *             .build());
 * 
 *         var subscriberContentLibrary = new ContentLibrary("subscriberContentLibrary", ContentLibraryArgs.builder()
 *             .name("Subscriber Content Library")
 *             .description("A subscribing content library.")
 *             .storageBackings(subscriberDatastore.id())
 *             .subscription(ContentLibrarySubscriptionArgs.builder()
 *                 .subscriptionUrl("https://vc-01-a.example.com:443/cls/vcsp/lib/f42a4b25-844a-44ec-9063-a3a5e9cc88c7/lib.json")
 *                 .automaticSync(true)
 *                 .onDemand(false)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * An existing content library can be imported into this resource by supplying the content library ID. For example:
 * 
 * [docs-import]: https://developer.hashicorp.com/terraform/cli/import
 * 
 * ```sh
 * $ pulumi import vsphere:index/contentLibrary:ContentLibrary vsphere_content_library publisher_content_library f42a4b25-844a-44ec-9063-a3a5e9cc88c7
 * ```
 * 
 */
@ResourceType(type="vsphere:index/contentLibrary:ContentLibrary")
public class ContentLibrary extends com.pulumi.resources.CustomResource {
    /**
     * A description for the content library.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A description for the content library.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The name of the content library.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the content library.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Options to publish a local content library.
     * 
     */
    @Export(name="publication", refs={ContentLibraryPublication.class}, tree="[0]")
    private Output<ContentLibraryPublication> publication;

    /**
     * @return Options to publish a local content library.
     * 
     */
    public Output<ContentLibraryPublication> publication() {
        return this.publication;
    }
    /**
     * The managed object reference ID of the datastore on which to store the content library items.
     * 
     */
    @Export(name="storageBackings", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> storageBackings;

    /**
     * @return The managed object reference ID of the datastore on which to store the content library items.
     * 
     */
    public Output<List<String>> storageBackings() {
        return this.storageBackings;
    }
    /**
     * Options subscribe to a published content library.
     * 
     */
    @Export(name="subscription", refs={ContentLibrarySubscription.class}, tree="[0]")
    private Output</* @Nullable */ ContentLibrarySubscription> subscription;

    /**
     * @return Options subscribe to a published content library.
     * 
     */
    public Output<Optional<ContentLibrarySubscription>> subscription() {
        return Codegen.optional(this.subscription);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ContentLibrary(java.lang.String name) {
        this(name, ContentLibraryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ContentLibrary(java.lang.String name, ContentLibraryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ContentLibrary(java.lang.String name, ContentLibraryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/contentLibrary:ContentLibrary", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ContentLibrary(java.lang.String name, Output<java.lang.String> id, @Nullable ContentLibraryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/contentLibrary:ContentLibrary", name, state, makeResourceOptions(options, id), false);
    }

    private static ContentLibraryArgs makeArgs(ContentLibraryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ContentLibraryArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ContentLibrary get(java.lang.String name, Output<java.lang.String> id, @Nullable ContentLibraryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ContentLibrary(name, id, state, options);
    }
}
