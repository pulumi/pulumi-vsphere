// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.FolderArgs;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.inputs.FolderState;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="vsphere:index/folder:Folder")
public class Folder extends com.pulumi.resources.CustomResource {
    /**
     * Map of custom attribute ids to attribute
     * value strings to set for folder. See [here][docs-setting-custom-attributes]
     * for a reference on how to set values for custom attributes.
     * 
     */
    @Export(name="customAttributes", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> customAttributes;

    /**
     * @return Map of custom attribute ids to attribute
     * value strings to set for folder. See [here][docs-setting-custom-attributes]
     * for a reference on how to set values for custom attributes.
     * 
     */
    public Output<Optional<Map<String,String>>> customAttributes() {
        return Codegen.optional(this.customAttributes);
    }
    /**
     * The ID of the datacenter the folder will be created in.
     * Required for all folder types except for datacenter folders. Forces a new
     * resource if changed.
     * 
     */
    @Export(name="datacenterId", type=String.class, parameters={})
    private Output</* @Nullable */ String> datacenterId;

    /**
     * @return The ID of the datacenter the folder will be created in.
     * Required for all folder types except for datacenter folders. Forces a new
     * resource if changed.
     * 
     */
    public Output<Optional<String>> datacenterId() {
        return Codegen.optional(this.datacenterId);
    }
    /**
     * The path of the folder to be created. This is relative to
     * the root of the type of folder you are creating, and the supplied datacenter.
     * For example, given a default datacenter of `default-dc`, a folder of type
     * `vm` (denoting a virtual machine folder), and a supplied folder of
     * `test-folder`, the resulting path would be
     * `/default-dc/vm/test-folder`.
     * 
     */
    @Export(name="path", type=String.class, parameters={})
    private Output<String> path;

    /**
     * @return The path of the folder to be created. This is relative to
     * the root of the type of folder you are creating, and the supplied datacenter.
     * For example, given a default datacenter of `default-dc`, a folder of type
     * `vm` (denoting a virtual machine folder), and a supplied folder of
     * `test-folder`, the resulting path would be
     * `/default-dc/vm/test-folder`.
     * 
     */
    public Output<String> path() {
        return this.path;
    }
    /**
     * The IDs of any tags to attach to this resource.
     * 
     */
    @Export(name="tags", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return The IDs of any tags to attach to this resource.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The type of folder to create. Allowed options are
     * `datacenter` for datacenter folders, `host` for host and cluster folders,
     * `vm` for virtual machine folders, `datastore` for datastore folders, and
     * `network` for network folders. Forces a new resource if changed.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of folder to create. Allowed options are
     * `datacenter` for datacenter folders, `host` for host and cluster folders,
     * `vm` for virtual machine folders, `datastore` for datastore folders, and
     * `network` for network folders. Forces a new resource if changed.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Folder(String name) {
        this(name, FolderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Folder(String name, FolderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Folder(String name, FolderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/folder:Folder", name, args == null ? FolderArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Folder(String name, Output<String> id, @Nullable FolderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/folder:Folder", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Folder get(String name, Output<String> id, @Nullable FolderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Folder(name, id, state, options);
    }
}
