// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.VmfsDatastoreArgs;
import com.pulumi.vsphere.inputs.VmfsDatastoreState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `vsphere.VmfsDatastore` resource can be used to create and manage VMFS
 * datastores on an ESXi host or a set of hosts. The resource supports using any
 * SCSI device that can generally be used in a datastore, such as local disks, or
 * disks presented to a host or multiple hosts over Fibre Channel or iSCSI.
 * Devices can be specified manually, or discovered using the
 * [`vsphere.getVmfsDisks`][data-source-vmfs-disks] data source.
 * 
 * [data-source-vmfs-disks]: /docs/providers/vsphere/d/vmfs_disks.html
 * 
 * ## Auto-Mounting of Datastores Within vCenter
 * 
 * Note that the current behavior of this resource will auto-mount any created
 * datastores to any other host within vCenter that has access to the same disk.
 * 
 * Example: You want to create a datastore with a iSCSI LUN that is visible on 3
 * hosts in a single vSphere cluster (`esxi1`, `esxi2` and `esxi3`). When you
 * create the datastore on `esxi1`, the datastore will be automatically mounted on
 * `esxi2` and `esxi3`, without the need to configure the resource on either of
 * those two hosts.
 * 
 * Future versions of this resource may allow you to control the hosts that a
 * datastore is mounted to, but currently, this automatic behavior cannot be
 * changed, so keep this in mind when writing your configurations and deploying
 * your disks.
 * 
 * ## Increasing Datastore Size
 * 
 * To increase the size of a datastore, you must add additional disks to the
 * `disks` attribute. Expanding the size of a datastore by increasing the size of
 * an already provisioned disk is currently not supported (but may be in future
 * versions of this resource).
 * 
 * &gt; **NOTE:** You cannot decrease the size of a datastore. If the resource
 * detects disks removed from the configuration, the provider will give an error.
 * 
 * [cmd-taint]: /docs/commands/taint.html
 * 
 * ## Example Usage
 * 
 * ### Addition of local disks on a single host
 * 
 * The following example uses the default datacenter and default host to add a
 * datastore with local disks to a single ESXi server.
 * 
 * &gt; **NOTE:** There are some situations where datastore creation will not work
 * when working through vCenter (usually when trying to create a datastore on a
 * single host with local disks). If you experience trouble creating the datastore
 * you need through vCenter, break the datastore off into a different configuration
 * and deploy it using the ESXi server as the provider endpoint, using a similar
 * configuration to what is below.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VsphereFunctions;
 * import com.pulumi.vsphere.inputs.GetDatacenterArgs;
 * import com.pulumi.vsphere.inputs.GetHostArgs;
 * import com.pulumi.vsphere.VmfsDatastore;
 * import com.pulumi.vsphere.VmfsDatastoreArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var datacenter = VsphereFunctions.getDatacenter(GetDatacenterArgs.builder()
 *             .build());
 * 
 *         final var host = VsphereFunctions.getHost(GetHostArgs.builder()
 *             .datacenterId(datacenter.id())
 *             .build());
 * 
 *         var datastore = new VmfsDatastore("datastore", VmfsDatastoreArgs.builder()
 *             .name("test")
 *             .hostSystemId(esxiHost.id())
 *             .disks(            
 *                 "mpx.vmhba1:C0:T1:L0",
 *                 "mpx.vmhba1:C0:T2:L0",
 *                 "mpx.vmhba1:C0:T2:L0")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Auto-detection of disks via `vsphere.getVmfsDisks`
 * 
 * The following example makes use of the
 * `vsphere.getVmfsDisks` data source to auto-detect
 * exported iSCSI LUNS matching a certain NAA vendor ID (in this case, LUNs
 * exported from a [NetApp][ext-netapp]). These discovered disks are then loaded
 * into `vsphere.VmfsDatastore`. The datastore is also placed in the
 * `datastore-folder` folder afterwards.
 * 
 * [ext-netapp]: https://kb.netapp.com/support/s/article/ka31A0000000rLRQAY/how-to-match-a-lun-s-naa-number-to-its-serial-number?language=en_US
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VsphereFunctions;
 * import com.pulumi.vsphere.inputs.GetDatacenterArgs;
 * import com.pulumi.vsphere.inputs.GetHostArgs;
 * import com.pulumi.vsphere.inputs.GetVmfsDisksArgs;
 * import com.pulumi.vsphere.VmfsDatastore;
 * import com.pulumi.vsphere.VmfsDatastoreArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var datacenter = VsphereFunctions.getDatacenter(GetDatacenterArgs.builder()
 *             .name("dc-01")
 *             .build());
 * 
 *         final var host = VsphereFunctions.getHost(GetHostArgs.builder()
 *             .name("esxi-01.example.com")
 *             .datacenterId(datacenter.id())
 *             .build());
 * 
 *         final var available = VsphereFunctions.getVmfsDisks(GetVmfsDisksArgs.builder()
 *             .hostSystemId(host.id())
 *             .rescan(true)
 *             .filter("naa.60a98000")
 *             .build());
 * 
 *         var datastore = new VmfsDatastore("datastore", VmfsDatastoreArgs.builder()
 *             .name("test")
 *             .hostSystemId(esxiHost.id())
 *             .folder("datastore-folder")
 *             .disks(available.disks())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * An existing VMFS datastore can be imported into this resource
 * 
 * via its managed object ID, via the command below. You also need the host system
 * 
 * ID.
 * 
 * [docs-import]: https://developer.hashicorp.com/terraform/cli/import
 * 
 * ```sh
 * $ pulumi import vsphere:index/vmfsDatastore:VmfsDatastore datastore datastore-123:host-10
 * ```
 * 
 * You need a tool like [`govc`][ext-govc] that can display managed object IDs.
 * 
 * [ext-govc]: https://github.com/vmware/govmomi/tree/master/govc
 * 
 * In the case of govc, you can locate a managed object ID from an inventory path
 * 
 * by doing the following:
 * 
 * $ govc ls -i /dc/datastore/terraform-test
 * 
 * Datastore:datastore-123
 * 
 * To locate host IDs, it might be a good idea to supply the `-l` flag as well so
 * 
 * that you can line up the names with the IDs:
 * 
 * $ govc ls -l -i /dc/host/cluster1
 * 
 * ResourcePool:resgroup-10 /dc/host/cluster1/Resources
 * 
 * HostSystem:host-10 /dc/host/cluster1/esxi1
 * 
 * HostSystem:host-11 /dc/host/cluster1/esxi2
 * 
 * HostSystem:host-12 /dc/host/cluster1/esxi3
 * 
 */
@ResourceType(type="vsphere:index/vmfsDatastore:VmfsDatastore")
public class VmfsDatastore extends com.pulumi.resources.CustomResource {
    /**
     * The connectivity status of the datastore. If this is `false`,
     * some other computed attributes may be out of date.
     * 
     */
    @Export(name="accessible", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> accessible;

    /**
     * @return The connectivity status of the datastore. If this is `false`,
     * some other computed attributes may be out of date.
     * 
     */
    public Output<Boolean> accessible() {
        return this.accessible;
    }
    /**
     * Maximum capacity of the datastore, in megabytes.
     * 
     */
    @Export(name="capacity", refs={Integer.class}, tree="[0]")
    private Output<Integer> capacity;

    /**
     * @return Maximum capacity of the datastore, in megabytes.
     * 
     */
    public Output<Integer> capacity() {
        return this.capacity;
    }
    /**
     * Map of custom attribute ids to attribute
     * value string to set on datastore resource.
     * 
     * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi connections
     * and require vCenter.
     * 
     */
    @Export(name="customAttributes", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> customAttributes;

    /**
     * @return Map of custom attribute ids to attribute
     * value string to set on datastore resource.
     * 
     * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi connections
     * and require vCenter.
     * 
     */
    public Output<Optional<Map<String,String>>> customAttributes() {
        return Codegen.optional(this.customAttributes);
    }
    /**
     * The managed object
     * ID of a datastore cluster to put this datastore in.
     * Conflicts with `folder`.
     * 
     */
    @Export(name="datastoreClusterId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> datastoreClusterId;

    /**
     * @return The managed object
     * ID of a datastore cluster to put this datastore in.
     * Conflicts with `folder`.
     * 
     */
    public Output<Optional<String>> datastoreClusterId() {
        return Codegen.optional(this.datastoreClusterId);
    }
    /**
     * The disks to use with the datastore.
     * 
     */
    @Export(name="disks", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> disks;

    /**
     * @return The disks to use with the datastore.
     * 
     */
    public Output<List<String>> disks() {
        return this.disks;
    }
    /**
     * The relative path to a folder to put this datastore in.
     * This is a path relative to the datacenter you are deploying the datastore to.
     * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
     * The provider will place a datastore named `test` in a datastore folder
     * located at `/dc1/datastore/foo/bar`, with the final inventory path being
     * `/dc1/datastore/foo/bar/test`. Conflicts with
     * `datastoreClusterId`.
     * 
     */
    @Export(name="folder", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> folder;

    /**
     * @return The relative path to a folder to put this datastore in.
     * This is a path relative to the datacenter you are deploying the datastore to.
     * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
     * The provider will place a datastore named `test` in a datastore folder
     * located at `/dc1/datastore/foo/bar`, with the final inventory path being
     * `/dc1/datastore/foo/bar/test`. Conflicts with
     * `datastoreClusterId`.
     * 
     */
    public Output<Optional<String>> folder() {
        return Codegen.optional(this.folder);
    }
    /**
     * Available space of this datastore, in megabytes.
     * 
     */
    @Export(name="freeSpace", refs={Integer.class}, tree="[0]")
    private Output<Integer> freeSpace;

    /**
     * @return Available space of this datastore, in megabytes.
     * 
     */
    public Output<Integer> freeSpace() {
        return this.freeSpace;
    }
    /**
     * The managed object ID of
     * the host to set the datastore up on. Note that this is not necessarily the
     * only host that the datastore will be set up on - see
     * here for more info. Forces a
     * new resource if changed.
     * 
     */
    @Export(name="hostSystemId", refs={String.class}, tree="[0]")
    private Output<String> hostSystemId;

    /**
     * @return The managed object ID of
     * the host to set the datastore up on. Note that this is not necessarily the
     * only host that the datastore will be set up on - see
     * here for more info. Forces a
     * new resource if changed.
     * 
     */
    public Output<String> hostSystemId() {
        return this.hostSystemId;
    }
    /**
     * The current maintenance mode state of the datastore.
     * 
     */
    @Export(name="maintenanceMode", refs={String.class}, tree="[0]")
    private Output<String> maintenanceMode;

    /**
     * @return The current maintenance mode state of the datastore.
     * 
     */
    public Output<String> maintenanceMode() {
        return this.maintenanceMode;
    }
    /**
     * If `true`, more than one host in the datacenter has
     * been configured with access to the datastore.
     * 
     */
    @Export(name="multipleHostAccess", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> multipleHostAccess;

    /**
     * @return If `true`, more than one host in the datacenter has
     * been configured with access to the datastore.
     * 
     */
    public Output<Boolean> multipleHostAccess() {
        return this.multipleHostAccess;
    }
    /**
     * The name of the datastore. Forces a new resource if
     * changed.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the datastore. Forces a new resource if
     * changed.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The IDs of any tags to attach to this resource.
     * 
     * &gt; **NOTE:** Tagging support is unsupported on direct ESXi connections and
     * requires vCenter 6.0 or higher.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return The IDs of any tags to attach to this resource.
     * 
     * &gt; **NOTE:** Tagging support is unsupported on direct ESXi connections and
     * requires vCenter 6.0 or higher.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Total additional storage space, in megabytes,
     * potentially used by all virtual machines on this datastore.
     * 
     */
    @Export(name="uncommittedSpace", refs={Integer.class}, tree="[0]")
    private Output<Integer> uncommittedSpace;

    /**
     * @return Total additional storage space, in megabytes,
     * potentially used by all virtual machines on this datastore.
     * 
     */
    public Output<Integer> uncommittedSpace() {
        return this.uncommittedSpace;
    }
    /**
     * The unique locator for the datastore.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The unique locator for the datastore.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VmfsDatastore(java.lang.String name) {
        this(name, VmfsDatastoreArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VmfsDatastore(java.lang.String name, VmfsDatastoreArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VmfsDatastore(java.lang.String name, VmfsDatastoreArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/vmfsDatastore:VmfsDatastore", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private VmfsDatastore(java.lang.String name, Output<java.lang.String> id, @Nullable VmfsDatastoreState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/vmfsDatastore:VmfsDatastore", name, state, makeResourceOptions(options, id), false);
    }

    private static VmfsDatastoreArgs makeArgs(VmfsDatastoreArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? VmfsDatastoreArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VmfsDatastore get(java.lang.String name, Output<java.lang.String> id, @Nullable VmfsDatastoreState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VmfsDatastore(name, id, state, options);
    }
}
