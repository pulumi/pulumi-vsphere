// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.vsphere.outputs.HostServiceNtpd;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HostService {
    /**
     * @return service has three settings, `enabled` sets service to running or not running, `policy` sets service based on setting of `on` which sets service to &#34;Start and stop with host&#34;, `off` which sets service to &#34;Start and stop manually&#34;, `automatic` which sets service to &#34;Start and stop with port usage&#34;.
     * 
     * &gt; **NOTE:** `services` only supports ntpd service today.
     * 
     */
    private @Nullable HostServiceNtpd ntpd;

    private HostService() {}
    /**
     * @return service has three settings, `enabled` sets service to running or not running, `policy` sets service based on setting of `on` which sets service to &#34;Start and stop with host&#34;, `off` which sets service to &#34;Start and stop manually&#34;, `automatic` which sets service to &#34;Start and stop with port usage&#34;.
     * 
     * &gt; **NOTE:** `services` only supports ntpd service today.
     * 
     */
    public Optional<HostServiceNtpd> ntpd() {
        return Optional.ofNullable(this.ntpd);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HostService defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable HostServiceNtpd ntpd;
        public Builder() {}
        public Builder(HostService defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ntpd = defaults.ntpd;
        }

        @CustomType.Setter
        public Builder ntpd(@Nullable HostServiceNtpd ntpd) {

            this.ntpd = ntpd;
            return this;
        }
        public HostService build() {
            final var _resultValue = new HostService();
            _resultValue.ntpd = ntpd;
            return _resultValue;
        }
    }
}
