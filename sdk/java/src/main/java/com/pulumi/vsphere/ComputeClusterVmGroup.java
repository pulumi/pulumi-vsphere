// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.ComputeClusterVmGroupArgs;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.inputs.ComputeClusterVmGroupState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `vsphere.ComputeClusterVmGroup` resource can be used to manage groups of
 * virtual machines in a cluster, either created by the
 * [`vsphere.ComputeCluster`][tf-vsphere-cluster-resource] resource or looked up
 * by the [`vsphere.ComputeCluster`][tf-vsphere-cluster-data-source] data source.
 * 
 * [tf-vsphere-cluster-resource]: /docs/providers/vsphere/r/compute_cluster.html
 * [tf-vsphere-cluster-data-source]: /docs/providers/vsphere/d/compute_cluster.html
 * 
 * This resource mainly serves as an input to the
 * [`vsphere.ComputeClusterVmDependencyRule`][tf-vsphere-cluster-vm-dependency-rule-resource]
 * and
 * [`vsphere.ComputeClusterVmHostRule`][tf-vsphere-cluster-vm-host-rule-resource]
 * resources. See the individual resource documentation pages for more information.
 * 
 * [tf-vsphere-cluster-vm-dependency-rule-resource]: /docs/providers/vsphere/r/compute_cluster_vm_dependency_rule.html
 * [tf-vsphere-cluster-vm-host-rule-resource]: /docs/providers/vsphere/r/compute_cluster_vm_host_rule.html
 * 
 * &gt; **NOTE:** This resource requires vCenter and is not available on direct ESXi
 * connections.
 * 
 * ## Example Usage
 * 
 * The example below creates two virtual machines in a cluster using the
 * `vsphere.VirtualMachine` resource, creating the
 * virtual machine in the cluster looked up by the
 * `vsphere.ComputeCluster` data source. It
 * then creates a group from these two virtual machines.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VsphereFunctions;
 * import com.pulumi.vsphere.inputs.GetDatacenterArgs;
 * import com.pulumi.vsphere.inputs.GetDatastoreArgs;
 * import com.pulumi.vsphere.inputs.GetComputeClusterArgs;
 * import com.pulumi.vsphere.inputs.GetNetworkArgs;
 * import com.pulumi.vsphere.VirtualMachine;
 * import com.pulumi.vsphere.VirtualMachineArgs;
 * import com.pulumi.vsphere.inputs.VirtualMachineNetworkInterfaceArgs;
 * import com.pulumi.vsphere.inputs.VirtualMachineDiskArgs;
 * import com.pulumi.vsphere.ComputeClusterVmGroup;
 * import com.pulumi.vsphere.ComputeClusterVmGroupArgs;
 * import com.pulumi.codegen.internal.KeyedValue;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var datacenter = VsphereFunctions.getDatacenter(GetDatacenterArgs.builder()
 *             .name("dc-01")
 *             .build());
 * 
 *         final var datastore = VsphereFunctions.getDatastore(GetDatastoreArgs.builder()
 *             .name("datastore1")
 *             .datacenterId(datacenter.applyValue(getDatacenterResult -> getDatacenterResult.id()))
 *             .build());
 * 
 *         final var cluster = VsphereFunctions.getComputeCluster(GetComputeClusterArgs.builder()
 *             .name("cluster-01")
 *             .datacenterId(datacenter.applyValue(getDatacenterResult -> getDatacenterResult.id()))
 *             .build());
 * 
 *         final var network = VsphereFunctions.getNetwork(GetNetworkArgs.builder()
 *             .name("network1")
 *             .datacenterId(datacenter.applyValue(getDatacenterResult -> getDatacenterResult.id()))
 *             .build());
 * 
 *         for (var i = 0; i < 2; i++) {
 *             new VirtualMachine("vm-" + i, VirtualMachineArgs.builder()
 *                 .name(String.format("test-%s", range.value()))
 *                 .resourcePoolId(cluster.applyValue(getComputeClusterResult -> getComputeClusterResult.resourcePoolId()))
 *                 .datastoreId(datastore.applyValue(getDatastoreResult -> getDatastoreResult.id()))
 *                 .numCpus(2)
 *                 .memory(2048)
 *                 .guestId("otherLinux64Guest")
 *                 .networkInterfaces(VirtualMachineNetworkInterfaceArgs.builder()
 *                     .networkId(network.applyValue(getNetworkResult -> getNetworkResult.id()))
 *                     .build())
 *                 .disks(VirtualMachineDiskArgs.builder()
 *                     .label("disk0")
 *                     .size(20)
 *                     .build())
 *                 .build());
 * 
 *         
 * }
 *         var clusterVmGroup = new ComputeClusterVmGroup("clusterVmGroup", ComputeClusterVmGroupArgs.builder()
 *             .name("test-cluster-vm-group")
 *             .computeClusterId(cluster.applyValue(getComputeClusterResult -> getComputeClusterResult.id()))
 *             .virtualMachineIds(vm.stream().map(element -> element.id()).collect(toList()))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * An existing group can be imported into this resource by
 * 
 * supplying both the path to the cluster, and the name of the VM group. If the
 * 
 * name or cluster is not found, or if the group is of a different type, an error
 * 
 * will be returned. An example is below:
 * 
 * ```sh
 * $ pulumi import vsphere:index/computeClusterVmGroup:ComputeClusterVmGroup cluster_vm_group \
 * ```
 * 
 *   &#39;{&#34;compute_cluster_path&#34;: &#34;/dc1/host/cluster1&#34;, \
 * 
 *   &#34;name&#34;: &#34;pulumi-test-cluster-vm-group&#34;}&#39;
 * 
 */
@ResourceType(type="vsphere:index/computeClusterVmGroup:ComputeClusterVmGroup")
public class ComputeClusterVmGroup extends com.pulumi.resources.CustomResource {
    /**
     * The managed object reference
     * ID of the cluster to put the group in.  Forces a new
     * resource if changed.
     * 
     */
    @Export(name="computeClusterId", refs={String.class}, tree="[0]")
    private Output<String> computeClusterId;

    /**
     * @return The managed object reference
     * ID of the cluster to put the group in.  Forces a new
     * resource if changed.
     * 
     */
    public Output<String> computeClusterId() {
        return this.computeClusterId;
    }
    /**
     * The name of the VM group. This must be unique in the
     * cluster. Forces a new resource if changed.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the VM group. This must be unique in the
     * cluster. Forces a new resource if changed.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The UUIDs of the virtual machines in this
     * group.
     * 
     * &gt; **NOTE:** The namespace for cluster names on this resource (defined by the
     * `name` argument) is shared with the
     * `vsphere.ComputeClusterHostGroup`
     * resource. Make sure your names are unique across both resources.
     * 
     * &gt; **NOTE:** To update a existing VM group, you must first import the group with `import` command in
     * import section. When importing a VM group, validate that all virtual machines that
     * need to be in the group are included in the `virtual_machine_ids`; otherwise, any virtual machines
     * that are not in `virtual_machine_ids` the included will be removed from the group.
     * 
     */
    @Export(name="virtualMachineIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> virtualMachineIds;

    /**
     * @return The UUIDs of the virtual machines in this
     * group.
     * 
     * &gt; **NOTE:** The namespace for cluster names on this resource (defined by the
     * `name` argument) is shared with the
     * `vsphere.ComputeClusterHostGroup`
     * resource. Make sure your names are unique across both resources.
     * 
     * &gt; **NOTE:** To update a existing VM group, you must first import the group with `import` command in
     * import section. When importing a VM group, validate that all virtual machines that
     * need to be in the group are included in the `virtual_machine_ids`; otherwise, any virtual machines
     * that are not in `virtual_machine_ids` the included will be removed from the group.
     * 
     */
    public Output<Optional<List<String>>> virtualMachineIds() {
        return Codegen.optional(this.virtualMachineIds);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ComputeClusterVmGroup(java.lang.String name) {
        this(name, ComputeClusterVmGroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ComputeClusterVmGroup(java.lang.String name, ComputeClusterVmGroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ComputeClusterVmGroup(java.lang.String name, ComputeClusterVmGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/computeClusterVmGroup:ComputeClusterVmGroup", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ComputeClusterVmGroup(java.lang.String name, Output<java.lang.String> id, @Nullable ComputeClusterVmGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/computeClusterVmGroup:ComputeClusterVmGroup", name, state, makeResourceOptions(options, id), false);
    }

    private static ComputeClusterVmGroupArgs makeArgs(ComputeClusterVmGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ComputeClusterVmGroupArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ComputeClusterVmGroup get(java.lang.String name, Output<java.lang.String> id, @Nullable ComputeClusterVmGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ComputeClusterVmGroup(name, id, state, options);
    }
}
