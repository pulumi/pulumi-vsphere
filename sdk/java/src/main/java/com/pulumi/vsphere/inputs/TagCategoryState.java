// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagCategoryState extends com.pulumi.resources.ResourceArgs {

    public static final TagCategoryState Empty = new TagCategoryState();

    /**
     * A list object types that this category is
     * valid to be assigned to. For a full list, click
     * here.
     * 
     */
    @Import(name="associableTypes")
    private @Nullable Output<List<String>> associableTypes;

    /**
     * @return A list object types that this category is
     * valid to be assigned to. For a full list, click
     * here.
     * 
     */
    public Optional<Output<List<String>>> associableTypes() {
        return Optional.ofNullable(this.associableTypes);
    }

    /**
     * The number of tags that can be assigned from this
     * category to a single object at once. Can be one of `SINGLE` (object can only
     * be assigned one tag in this category), to `MULTIPLE` (object can be assigned
     * multiple tags in this category). Forces a new resource if changed.
     * 
     */
    @Import(name="cardinality")
    private @Nullable Output<String> cardinality;

    /**
     * @return The number of tags that can be assigned from this
     * category to a single object at once. Can be one of `SINGLE` (object can only
     * be assigned one tag in this category), to `MULTIPLE` (object can be assigned
     * multiple tags in this category). Forces a new resource if changed.
     * 
     */
    public Optional<Output<String>> cardinality() {
        return Optional.ofNullable(this.cardinality);
    }

    /**
     * A description for the category.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the category.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the category.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the category.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private TagCategoryState() {}

    private TagCategoryState(TagCategoryState $) {
        this.associableTypes = $.associableTypes;
        this.cardinality = $.cardinality;
        this.description = $.description;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagCategoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagCategoryState $;

        public Builder() {
            $ = new TagCategoryState();
        }

        public Builder(TagCategoryState defaults) {
            $ = new TagCategoryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param associableTypes A list object types that this category is
         * valid to be assigned to. For a full list, click
         * here.
         * 
         * @return builder
         * 
         */
        public Builder associableTypes(@Nullable Output<List<String>> associableTypes) {
            $.associableTypes = associableTypes;
            return this;
        }

        /**
         * @param associableTypes A list object types that this category is
         * valid to be assigned to. For a full list, click
         * here.
         * 
         * @return builder
         * 
         */
        public Builder associableTypes(List<String> associableTypes) {
            return associableTypes(Output.of(associableTypes));
        }

        /**
         * @param associableTypes A list object types that this category is
         * valid to be assigned to. For a full list, click
         * here.
         * 
         * @return builder
         * 
         */
        public Builder associableTypes(String... associableTypes) {
            return associableTypes(List.of(associableTypes));
        }

        /**
         * @param cardinality The number of tags that can be assigned from this
         * category to a single object at once. Can be one of `SINGLE` (object can only
         * be assigned one tag in this category), to `MULTIPLE` (object can be assigned
         * multiple tags in this category). Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder cardinality(@Nullable Output<String> cardinality) {
            $.cardinality = cardinality;
            return this;
        }

        /**
         * @param cardinality The number of tags that can be assigned from this
         * category to a single object at once. Can be one of `SINGLE` (object can only
         * be assigned one tag in this category), to `MULTIPLE` (object can be assigned
         * multiple tags in this category). Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder cardinality(String cardinality) {
            return cardinality(Output.of(cardinality));
        }

        /**
         * @param description A description for the category.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the category.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the category.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the category.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public TagCategoryState build() {
            return $;
        }
    }

}
