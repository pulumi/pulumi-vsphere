// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.HostArgs;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.inputs.HostState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a VMware vSphere host resource. This represents an ESXi host that
 * can be used either as a member of a cluster or as a standalone host.
 * 
 * ## Example Usage
 * 
 * ### Create a standalone host
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VsphereFunctions;
 * import com.pulumi.vsphere.inputs.GetDatacenterArgs;
 * import com.pulumi.vsphere.inputs.GetHostThumbprintArgs;
 * import com.pulumi.vsphere.Host;
 * import com.pulumi.vsphere.HostArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var datacenter = VsphereFunctions.getDatacenter(GetDatacenterArgs.builder()
 *             .name("dc-01")
 *             .build());
 * 
 *         final var thumbprint = VsphereFunctions.getHostThumbprint(GetHostThumbprintArgs.builder()
 *             .address("esx-01.example.com")
 *             .insecure(true)
 *             .build());
 * 
 *         var esx_01 = new Host("esx-01", HostArgs.builder()
 *             .hostname("esx-01.example.com")
 *             .username("root")
 *             .password("password")
 *             .license("00000-00000-00000-00000-00000")
 *             .thumbprint(thumbprint.applyValue(getHostThumbprintResult -> getHostThumbprintResult.id()))
 *             .datacenter(datacenter.applyValue(getDatacenterResult -> getDatacenterResult.id()))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Create host in a compute cluster
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VsphereFunctions;
 * import com.pulumi.vsphere.inputs.GetDatacenterArgs;
 * import com.pulumi.vsphere.inputs.GetComputeClusterArgs;
 * import com.pulumi.vsphere.inputs.GetHostThumbprintArgs;
 * import com.pulumi.vsphere.Host;
 * import com.pulumi.vsphere.HostArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var datacenter = VsphereFunctions.getDatacenter(GetDatacenterArgs.builder()
 *             .name("dc-01")
 *             .build());
 * 
 *         final var cluster = VsphereFunctions.getComputeCluster(GetComputeClusterArgs.builder()
 *             .name("cluster-01")
 *             .datacenterId(datacenter.applyValue(getDatacenterResult -> getDatacenterResult.id()))
 *             .build());
 * 
 *         final var thumbprint = VsphereFunctions.getHostThumbprint(GetHostThumbprintArgs.builder()
 *             .address("esx-01.example.com")
 *             .insecure(true)
 *             .build());
 * 
 *         var esx_01 = new Host("esx-01", HostArgs.builder()
 *             .hostname("esx-01.example.com")
 *             .username("root")
 *             .password("password")
 *             .license("00000-00000-00000-00000-00000")
 *             .thumbprint(thumbprint.applyValue(getHostThumbprintResult -> getHostThumbprintResult.id()))
 *             .cluster(cluster.applyValue(getComputeClusterResult -> getComputeClusterResult.id()))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Importing
 * 
 * An existing host can be [imported](https://www.terraform.io/docs/import/index.html) into this resource by supplying
 * the host&#39;s ID. An example is below:
 * 
 * The above would import the host with ID `host-123`.
 * 
 */
@ResourceType(type="vsphere:index/host:Host")
public class Host extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the Compute Cluster this host should
     * be added to. This should not be set if `datacenter` is set. Conflicts with:
     * `cluster_managed`.
     * 
     */
    @Export(name="cluster", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cluster;

    /**
     * @return The ID of the Compute Cluster this host should
     * be added to. This should not be set if `datacenter` is set. Conflicts with:
     * `cluster_managed`.
     * 
     */
    public Output<Optional<String>> cluster() {
        return Codegen.optional(this.cluster);
    }
    /**
     * Can be set to `true` if compute cluster
     * membership will be managed through the `compute_cluster` resource rather
     * than the`host` resource. Conflicts with: `cluster`.
     * 
     */
    @Export(name="clusterManaged", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> clusterManaged;

    /**
     * @return Can be set to `true` if compute cluster
     * membership will be managed through the `compute_cluster` resource rather
     * than the`host` resource. Conflicts with: `cluster`.
     * 
     */
    public Output<Optional<Boolean>> clusterManaged() {
        return Codegen.optional(this.clusterManaged);
    }
    /**
     * If set to false then the host will be disconnected.
     * Default is `false`.
     * 
     */
    @Export(name="connected", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> connected;

    /**
     * @return If set to false then the host will be disconnected.
     * Default is `false`.
     * 
     */
    public Output<Optional<Boolean>> connected() {
        return Codegen.optional(this.connected);
    }
    /**
     * A map of custom attribute IDs and string
     * values to apply to the resource. Please refer to the
     * `vsphere_custom_attributes` resource for more information on applying
     * tags to resources.
     * 
     * &gt; **NOTE:** Custom attributes are not supported on direct ESXi host
     * connections and require vCenter Server.
     * 
     */
    @Export(name="customAttributes", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> customAttributes;

    /**
     * @return A map of custom attribute IDs and string
     * values to apply to the resource. Please refer to the
     * `vsphere_custom_attributes` resource for more information on applying
     * tags to resources.
     * 
     * &gt; **NOTE:** Custom attributes are not supported on direct ESXi host
     * connections and require vCenter Server.
     * 
     */
    public Output<Optional<Map<String,String>>> customAttributes() {
        return Codegen.optional(this.customAttributes);
    }
    /**
     * The ID of the datacenter this host should
     * be added to. This should not be set if `cluster` is set.
     * 
     */
    @Export(name="datacenter", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> datacenter;

    /**
     * @return The ID of the datacenter this host should
     * be added to. This should not be set if `cluster` is set.
     * 
     */
    public Output<Optional<String>> datacenter() {
        return Codegen.optional(this.datacenter);
    }
    /**
     * If set to `true` then it will force the host to be added,
     * even if the host is already connected to a different vCenter Server instance.
     * Default is `false`.
     * 
     */
    @Export(name="force", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> force;

    /**
     * @return If set to `true` then it will force the host to be added,
     * even if the host is already connected to a different vCenter Server instance.
     * Default is `false`.
     * 
     */
    public Output<Optional<Boolean>> force() {
        return Codegen.optional(this.force);
    }
    /**
     * FQDN or IP address of the host to be added.
     * 
     */
    @Export(name="hostname", refs={String.class}, tree="[0]")
    private Output<String> hostname;

    /**
     * @return FQDN or IP address of the host to be added.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }
    /**
     * The license key that will be applied to the host.
     * The license key is expected to be present in vSphere.
     * 
     */
    @Export(name="license", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> license;

    /**
     * @return The license key that will be applied to the host.
     * The license key is expected to be present in vSphere.
     * 
     */
    public Output<Optional<String>> license() {
        return Codegen.optional(this.license);
    }
    /**
     * Set the lockdown state of the host. Valid options are
     * `disabled`, `normal`, and `strict`. Default is `disabled`.
     * 
     */
    @Export(name="lockdown", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> lockdown;

    /**
     * @return Set the lockdown state of the host. Valid options are
     * `disabled`, `normal`, and `strict`. Default is `disabled`.
     * 
     */
    public Output<Optional<String>> lockdown() {
        return Codegen.optional(this.lockdown);
    }
    /**
     * Set the management state of the host.
     * Default is `false`.
     * 
     */
    @Export(name="maintenance", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> maintenance;

    /**
     * @return Set the management state of the host.
     * Default is `false`.
     * 
     */
    public Output<Optional<Boolean>> maintenance() {
        return Codegen.optional(this.maintenance);
    }
    /**
     * Password that will be used by vSphere to authenticate
     * to the host.
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output<String> password;

    /**
     * @return Password that will be used by vSphere to authenticate
     * to the host.
     * 
     */
    public Output<String> password() {
        return this.password;
    }
    /**
     * The IDs of any tags to attach to this resource. Please
     * refer to the `vsphere.Tag` resource for more information on applying
     * tags to resources.
     * 
     * &gt; **NOTE:** Tagging support is not supported on direct ESXi host
     * connections and require vCenter Server.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return The IDs of any tags to attach to this resource. Please
     * refer to the `vsphere.Tag` resource for more information on applying
     * tags to resources.
     * 
     * &gt; **NOTE:** Tagging support is not supported on direct ESXi host
     * connections and require vCenter Server.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Host&#39;s certificate SHA-1 thumbprint. If not set the
     * CA that signed the host&#39;s certificate should be trusted. If the CA is not
     * trusted and no thumbprint is set then the operation will fail. See data source
     * [`vsphere.getHostThumbprint`](https://www.terraform.io/docs/providers/vsphere/d/host_thumbprint.html).
     * 
     */
    @Export(name="thumbprint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> thumbprint;

    /**
     * @return Host&#39;s certificate SHA-1 thumbprint. If not set the
     * CA that signed the host&#39;s certificate should be trusted. If the CA is not
     * trusted and no thumbprint is set then the operation will fail. See data source
     * [`vsphere.getHostThumbprint`](https://www.terraform.io/docs/providers/vsphere/d/host_thumbprint.html).
     * 
     */
    public Output<Optional<String>> thumbprint() {
        return Codegen.optional(this.thumbprint);
    }
    /**
     * Username that will be used by vSphere to authenticate
     * to the host.
     * 
     */
    @Export(name="username", refs={String.class}, tree="[0]")
    private Output<String> username;

    /**
     * @return Username that will be used by vSphere to authenticate
     * to the host.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Host(java.lang.String name) {
        this(name, HostArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Host(java.lang.String name, HostArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Host(java.lang.String name, HostArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/host:Host", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Host(java.lang.String name, Output<java.lang.String> id, @Nullable HostState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/host:Host", name, state, makeResourceOptions(options, id), false);
    }

    private static HostArgs makeArgs(HostArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? HostArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "password"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Host get(java.lang.String name, Output<java.lang.String> id, @Nullable HostState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Host(name, id, state, options);
    }
}
