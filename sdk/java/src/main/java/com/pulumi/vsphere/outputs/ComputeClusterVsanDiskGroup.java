// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ComputeClusterVsanDiskGroup {
    /**
     * @return The canonical name of the disk to use for vSAN cache.
     * 
     */
    private @Nullable String cache;
    /**
     * @return An array of disk canonical names for vSAN storage.
     * 
     * &gt; **NOTE:** You must disable vSphere HA before you enable vSAN on the cluster.
     * You can enable or re-enable vSphere HA after vSAN is configured.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vsphere.ComputeCluster;
     * import com.pulumi.vsphere.ComputeClusterArgs;
     * import com.pulumi.vsphere.inputs.ComputeClusterVsanDiskGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var computeCluster = new ComputeCluster(&#34;computeCluster&#34;, ComputeClusterArgs.builder()        
     *             .datacenterId(data.vsphere_datacenter().datacenter().id())
     *             .hostSystemIds(data.vsphere_host().host().stream().map(element -&gt; element.id()).collect(toList()))
     *             .drsEnabled(true)
     *             .drsAutomationLevel(&#34;fullyAutomated&#34;)
     *             .haEnabled(false)
     *             .vsanEnabled(true)
     *             .vsanDedupEnabled(true)
     *             .vsanCompressionEnabled(true)
     *             .vsanPerformanceEnabled(true)
     *             .vsanVerboseModeEnabled(true)
     *             .vsanNetworkDiagnosticModeEnabled(true)
     *             .vsanUnmapEnabled(true)
     *             .vsanDitEncryptionEnabled(true)
     *             .vsanDitRekeyInterval(1800)
     *             .vsanDiskGroups(ComputeClusterVsanDiskGroupArgs.builder()
     *                 .cache(data.vsphere_vmfs_disks().cache_disks()[0])
     *                 .storages(data.vsphere_vmfs_disks().storage_disks())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    private @Nullable List<String> storages;

    private ComputeClusterVsanDiskGroup() {}
    /**
     * @return The canonical name of the disk to use for vSAN cache.
     * 
     */
    public Optional<String> cache() {
        return Optional.ofNullable(this.cache);
    }
    /**
     * @return An array of disk canonical names for vSAN storage.
     * 
     * &gt; **NOTE:** You must disable vSphere HA before you enable vSAN on the cluster.
     * You can enable or re-enable vSphere HA after vSAN is configured.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vsphere.ComputeCluster;
     * import com.pulumi.vsphere.ComputeClusterArgs;
     * import com.pulumi.vsphere.inputs.ComputeClusterVsanDiskGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var computeCluster = new ComputeCluster(&#34;computeCluster&#34;, ComputeClusterArgs.builder()        
     *             .datacenterId(data.vsphere_datacenter().datacenter().id())
     *             .hostSystemIds(data.vsphere_host().host().stream().map(element -&gt; element.id()).collect(toList()))
     *             .drsEnabled(true)
     *             .drsAutomationLevel(&#34;fullyAutomated&#34;)
     *             .haEnabled(false)
     *             .vsanEnabled(true)
     *             .vsanDedupEnabled(true)
     *             .vsanCompressionEnabled(true)
     *             .vsanPerformanceEnabled(true)
     *             .vsanVerboseModeEnabled(true)
     *             .vsanNetworkDiagnosticModeEnabled(true)
     *             .vsanUnmapEnabled(true)
     *             .vsanDitEncryptionEnabled(true)
     *             .vsanDitRekeyInterval(1800)
     *             .vsanDiskGroups(ComputeClusterVsanDiskGroupArgs.builder()
     *                 .cache(data.vsphere_vmfs_disks().cache_disks()[0])
     *                 .storages(data.vsphere_vmfs_disks().storage_disks())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public List<String> storages() {
        return this.storages == null ? List.of() : this.storages;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ComputeClusterVsanDiskGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cache;
        private @Nullable List<String> storages;
        public Builder() {}
        public Builder(ComputeClusterVsanDiskGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cache = defaults.cache;
    	      this.storages = defaults.storages;
        }

        @CustomType.Setter
        public Builder cache(@Nullable String cache) {
            this.cache = cache;
            return this;
        }
        @CustomType.Setter
        public Builder storages(@Nullable List<String> storages) {
            this.storages = storages;
            return this;
        }
        public Builder storages(String... storages) {
            return storages(List.of(storages));
        }
        public ComputeClusterVsanDiskGroup build() {
            final var o = new ComputeClusterVsanDiskGroup();
            o.cache = cache;
            o.storages = storages;
            return o;
        }
    }
}
