// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContentLibraryItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContentLibraryItemArgs Empty = new ContentLibraryItemArgs();

    /**
     * A description for the content library item.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the content library item.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * File to import as the content library item.
     * 
     */
    @Import(name="fileUrl")
    private @Nullable Output<String> fileUrl;

    /**
     * @return File to import as the content library item.
     * 
     */
    public Optional<Output<String>> fileUrl() {
        return Optional.ofNullable(this.fileUrl);
    }

    /**
     * The ID of the content library in which to create the item.
     * 
     */
    @Import(name="libraryId", required=true)
    private Output<String> libraryId;

    /**
     * @return The ID of the content library in which to create the item.
     * 
     */
    public Output<String> libraryId() {
        return this.libraryId;
    }

    /**
     * The name of the item to be created in the content library.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the item to be created in the content library.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Virtual machine UUID to clone to content library.
     * 
     */
    @Import(name="sourceUuid")
    private @Nullable Output<String> sourceUuid;

    /**
     * @return Virtual machine UUID to clone to content library.
     * 
     */
    public Optional<Output<String>> sourceUuid() {
        return Optional.ofNullable(this.sourceUuid);
    }

    /**
     * Type of content library item.
     * One of &#34;ovf&#34;, &#34;iso&#34;, or &#34;vm-template&#34;. Default: `ovf`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of content library item.
     * One of &#34;ovf&#34;, &#34;iso&#34;, or &#34;vm-template&#34;. Default: `ovf`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ContentLibraryItemArgs() {}

    private ContentLibraryItemArgs(ContentLibraryItemArgs $) {
        this.description = $.description;
        this.fileUrl = $.fileUrl;
        this.libraryId = $.libraryId;
        this.name = $.name;
        this.sourceUuid = $.sourceUuid;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContentLibraryItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContentLibraryItemArgs $;

        public Builder() {
            $ = new ContentLibraryItemArgs();
        }

        public Builder(ContentLibraryItemArgs defaults) {
            $ = new ContentLibraryItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description for the content library item.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the content library item.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fileUrl File to import as the content library item.
         * 
         * @return builder
         * 
         */
        public Builder fileUrl(@Nullable Output<String> fileUrl) {
            $.fileUrl = fileUrl;
            return this;
        }

        /**
         * @param fileUrl File to import as the content library item.
         * 
         * @return builder
         * 
         */
        public Builder fileUrl(String fileUrl) {
            return fileUrl(Output.of(fileUrl));
        }

        /**
         * @param libraryId The ID of the content library in which to create the item.
         * 
         * @return builder
         * 
         */
        public Builder libraryId(Output<String> libraryId) {
            $.libraryId = libraryId;
            return this;
        }

        /**
         * @param libraryId The ID of the content library in which to create the item.
         * 
         * @return builder
         * 
         */
        public Builder libraryId(String libraryId) {
            return libraryId(Output.of(libraryId));
        }

        /**
         * @param name The name of the item to be created in the content library.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the item to be created in the content library.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sourceUuid Virtual machine UUID to clone to content library.
         * 
         * @return builder
         * 
         */
        public Builder sourceUuid(@Nullable Output<String> sourceUuid) {
            $.sourceUuid = sourceUuid;
            return this;
        }

        /**
         * @param sourceUuid Virtual machine UUID to clone to content library.
         * 
         * @return builder
         * 
         */
        public Builder sourceUuid(String sourceUuid) {
            return sourceUuid(Output.of(sourceUuid));
        }

        /**
         * @param type Type of content library item.
         * One of &#34;ovf&#34;, &#34;iso&#34;, or &#34;vm-template&#34;. Default: `ovf`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of content library item.
         * One of &#34;ovf&#34;, &#34;iso&#34;, or &#34;vm-template&#34;. Default: `ovf`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ContentLibraryItemArgs build() {
            $.libraryId = Objects.requireNonNull($.libraryId, "expected parameter 'libraryId' to be non-null");
            return $;
        }
    }

}
