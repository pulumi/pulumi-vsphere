// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineCloneCustomizeWindowsOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineCloneCustomizeWindowsOptionsArgs Empty = new VirtualMachineCloneCustomizeWindowsOptionsArgs();

    /**
     * The new administrator password for this virtual machine.
     * 
     */
    @Import(name="adminPassword")
    private @Nullable Output<String> adminPassword;

    /**
     * @return The new administrator password for this virtual machine.
     * 
     */
    public Optional<Output<String>> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }

    /**
     * Specifies whether or not the VM automatically logs on as Administrator.
     * 
     */
    @Import(name="autoLogon")
    private @Nullable Output<Boolean> autoLogon;

    /**
     * @return Specifies whether or not the VM automatically logs on as Administrator.
     * 
     */
    public Optional<Output<Boolean>> autoLogon() {
        return Optional.ofNullable(this.autoLogon);
    }

    /**
     * Specifies how many times the VM should auto-logon the Administrator account when auto_logon is true.
     * 
     */
    @Import(name="autoLogonCount")
    private @Nullable Output<Integer> autoLogonCount;

    /**
     * @return Specifies how many times the VM should auto-logon the Administrator account when auto_logon is true.
     * 
     */
    public Optional<Output<Integer>> autoLogonCount() {
        return Optional.ofNullable(this.autoLogonCount);
    }

    /**
     * The host name for this virtual machine.
     * 
     */
    @Import(name="computerName", required=true)
    private Output<String> computerName;

    /**
     * @return The host name for this virtual machine.
     * 
     */
    public Output<String> computerName() {
        return this.computerName;
    }

    /**
     * The password of the domain administrator used to join this virtual machine to the domain.
     * 
     */
    @Import(name="domainAdminPassword")
    private @Nullable Output<String> domainAdminPassword;

    /**
     * @return The password of the domain administrator used to join this virtual machine to the domain.
     * 
     */
    public Optional<Output<String>> domainAdminPassword() {
        return Optional.ofNullable(this.domainAdminPassword);
    }

    /**
     * The user account of the domain administrator used to join this virtual machine to the domain.
     * 
     */
    @Import(name="domainAdminUser")
    private @Nullable Output<String> domainAdminUser;

    /**
     * @return The user account of the domain administrator used to join this virtual machine to the domain.
     * 
     */
    public Optional<Output<String>> domainAdminUser() {
        return Optional.ofNullable(this.domainAdminUser);
    }

    /**
     * The full name of the user of this virtual machine.
     * 
     */
    @Import(name="fullName")
    private @Nullable Output<String> fullName;

    /**
     * @return The full name of the user of this virtual machine.
     * 
     */
    public Optional<Output<String>> fullName() {
        return Optional.ofNullable(this.fullName);
    }

    /**
     * The domain that the virtual machine should join.
     * 
     */
    @Import(name="joinDomain")
    private @Nullable Output<String> joinDomain;

    /**
     * @return The domain that the virtual machine should join.
     * 
     */
    public Optional<Output<String>> joinDomain() {
        return Optional.ofNullable(this.joinDomain);
    }

    /**
     * The organization name this virtual machine is being installed for.
     * 
     */
    @Import(name="organizationName")
    private @Nullable Output<String> organizationName;

    /**
     * @return The organization name this virtual machine is being installed for.
     * 
     */
    public Optional<Output<String>> organizationName() {
        return Optional.ofNullable(this.organizationName);
    }

    /**
     * The product key for this virtual machine.
     * 
     */
    @Import(name="productKey")
    private @Nullable Output<String> productKey;

    /**
     * @return The product key for this virtual machine.
     * 
     */
    public Optional<Output<String>> productKey() {
        return Optional.ofNullable(this.productKey);
    }

    /**
     * A list of commands to run at first user logon, after guest customization.
     * 
     */
    @Import(name="runOnceCommandLists")
    private @Nullable Output<List<String>> runOnceCommandLists;

    /**
     * @return A list of commands to run at first user logon, after guest customization.
     * 
     */
    public Optional<Output<List<String>>> runOnceCommandLists() {
        return Optional.ofNullable(this.runOnceCommandLists);
    }

    /**
     * The new time zone for the virtual machine. This is a sysprep-dictated timezone code.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<Integer> timeZone;

    /**
     * @return The new time zone for the virtual machine. This is a sysprep-dictated timezone code.
     * 
     */
    public Optional<Output<Integer>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    /**
     * The workgroup for this virtual machine if not joining a domain.
     * 
     */
    @Import(name="workgroup")
    private @Nullable Output<String> workgroup;

    /**
     * @return The workgroup for this virtual machine if not joining a domain.
     * 
     */
    public Optional<Output<String>> workgroup() {
        return Optional.ofNullable(this.workgroup);
    }

    private VirtualMachineCloneCustomizeWindowsOptionsArgs() {}

    private VirtualMachineCloneCustomizeWindowsOptionsArgs(VirtualMachineCloneCustomizeWindowsOptionsArgs $) {
        this.adminPassword = $.adminPassword;
        this.autoLogon = $.autoLogon;
        this.autoLogonCount = $.autoLogonCount;
        this.computerName = $.computerName;
        this.domainAdminPassword = $.domainAdminPassword;
        this.domainAdminUser = $.domainAdminUser;
        this.fullName = $.fullName;
        this.joinDomain = $.joinDomain;
        this.organizationName = $.organizationName;
        this.productKey = $.productKey;
        this.runOnceCommandLists = $.runOnceCommandLists;
        this.timeZone = $.timeZone;
        this.workgroup = $.workgroup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineCloneCustomizeWindowsOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineCloneCustomizeWindowsOptionsArgs $;

        public Builder() {
            $ = new VirtualMachineCloneCustomizeWindowsOptionsArgs();
        }

        public Builder(VirtualMachineCloneCustomizeWindowsOptionsArgs defaults) {
            $ = new VirtualMachineCloneCustomizeWindowsOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminPassword The new administrator password for this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(@Nullable Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        /**
         * @param adminPassword The new administrator password for this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        /**
         * @param autoLogon Specifies whether or not the VM automatically logs on as Administrator.
         * 
         * @return builder
         * 
         */
        public Builder autoLogon(@Nullable Output<Boolean> autoLogon) {
            $.autoLogon = autoLogon;
            return this;
        }

        /**
         * @param autoLogon Specifies whether or not the VM automatically logs on as Administrator.
         * 
         * @return builder
         * 
         */
        public Builder autoLogon(Boolean autoLogon) {
            return autoLogon(Output.of(autoLogon));
        }

        /**
         * @param autoLogonCount Specifies how many times the VM should auto-logon the Administrator account when auto_logon is true.
         * 
         * @return builder
         * 
         */
        public Builder autoLogonCount(@Nullable Output<Integer> autoLogonCount) {
            $.autoLogonCount = autoLogonCount;
            return this;
        }

        /**
         * @param autoLogonCount Specifies how many times the VM should auto-logon the Administrator account when auto_logon is true.
         * 
         * @return builder
         * 
         */
        public Builder autoLogonCount(Integer autoLogonCount) {
            return autoLogonCount(Output.of(autoLogonCount));
        }

        /**
         * @param computerName The host name for this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder computerName(Output<String> computerName) {
            $.computerName = computerName;
            return this;
        }

        /**
         * @param computerName The host name for this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder computerName(String computerName) {
            return computerName(Output.of(computerName));
        }

        /**
         * @param domainAdminPassword The password of the domain administrator used to join this virtual machine to the domain.
         * 
         * @return builder
         * 
         */
        public Builder domainAdminPassword(@Nullable Output<String> domainAdminPassword) {
            $.domainAdminPassword = domainAdminPassword;
            return this;
        }

        /**
         * @param domainAdminPassword The password of the domain administrator used to join this virtual machine to the domain.
         * 
         * @return builder
         * 
         */
        public Builder domainAdminPassword(String domainAdminPassword) {
            return domainAdminPassword(Output.of(domainAdminPassword));
        }

        /**
         * @param domainAdminUser The user account of the domain administrator used to join this virtual machine to the domain.
         * 
         * @return builder
         * 
         */
        public Builder domainAdminUser(@Nullable Output<String> domainAdminUser) {
            $.domainAdminUser = domainAdminUser;
            return this;
        }

        /**
         * @param domainAdminUser The user account of the domain administrator used to join this virtual machine to the domain.
         * 
         * @return builder
         * 
         */
        public Builder domainAdminUser(String domainAdminUser) {
            return domainAdminUser(Output.of(domainAdminUser));
        }

        /**
         * @param fullName The full name of the user of this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder fullName(@Nullable Output<String> fullName) {
            $.fullName = fullName;
            return this;
        }

        /**
         * @param fullName The full name of the user of this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder fullName(String fullName) {
            return fullName(Output.of(fullName));
        }

        /**
         * @param joinDomain The domain that the virtual machine should join.
         * 
         * @return builder
         * 
         */
        public Builder joinDomain(@Nullable Output<String> joinDomain) {
            $.joinDomain = joinDomain;
            return this;
        }

        /**
         * @param joinDomain The domain that the virtual machine should join.
         * 
         * @return builder
         * 
         */
        public Builder joinDomain(String joinDomain) {
            return joinDomain(Output.of(joinDomain));
        }

        /**
         * @param organizationName The organization name this virtual machine is being installed for.
         * 
         * @return builder
         * 
         */
        public Builder organizationName(@Nullable Output<String> organizationName) {
            $.organizationName = organizationName;
            return this;
        }

        /**
         * @param organizationName The organization name this virtual machine is being installed for.
         * 
         * @return builder
         * 
         */
        public Builder organizationName(String organizationName) {
            return organizationName(Output.of(organizationName));
        }

        /**
         * @param productKey The product key for this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder productKey(@Nullable Output<String> productKey) {
            $.productKey = productKey;
            return this;
        }

        /**
         * @param productKey The product key for this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder productKey(String productKey) {
            return productKey(Output.of(productKey));
        }

        /**
         * @param runOnceCommandLists A list of commands to run at first user logon, after guest customization.
         * 
         * @return builder
         * 
         */
        public Builder runOnceCommandLists(@Nullable Output<List<String>> runOnceCommandLists) {
            $.runOnceCommandLists = runOnceCommandLists;
            return this;
        }

        /**
         * @param runOnceCommandLists A list of commands to run at first user logon, after guest customization.
         * 
         * @return builder
         * 
         */
        public Builder runOnceCommandLists(List<String> runOnceCommandLists) {
            return runOnceCommandLists(Output.of(runOnceCommandLists));
        }

        /**
         * @param runOnceCommandLists A list of commands to run at first user logon, after guest customization.
         * 
         * @return builder
         * 
         */
        public Builder runOnceCommandLists(String... runOnceCommandLists) {
            return runOnceCommandLists(List.of(runOnceCommandLists));
        }

        /**
         * @param timeZone The new time zone for the virtual machine. This is a sysprep-dictated timezone code.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<Integer> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The new time zone for the virtual machine. This is a sysprep-dictated timezone code.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(Integer timeZone) {
            return timeZone(Output.of(timeZone));
        }

        /**
         * @param workgroup The workgroup for this virtual machine if not joining a domain.
         * 
         * @return builder
         * 
         */
        public Builder workgroup(@Nullable Output<String> workgroup) {
            $.workgroup = workgroup;
            return this;
        }

        /**
         * @param workgroup The workgroup for this virtual machine if not joining a domain.
         * 
         * @return builder
         * 
         */
        public Builder workgroup(String workgroup) {
            return workgroup(Output.of(workgroup));
        }

        public VirtualMachineCloneCustomizeWindowsOptionsArgs build() {
            if ($.computerName == null) {
                throw new MissingRequiredPropertyException("VirtualMachineCloneCustomizeWindowsOptionsArgs", "computerName");
            }
            return $;
        }
    }

}
