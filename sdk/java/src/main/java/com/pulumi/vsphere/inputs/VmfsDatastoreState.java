// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VmfsDatastoreState extends com.pulumi.resources.ResourceArgs {

    public static final VmfsDatastoreState Empty = new VmfsDatastoreState();

    /**
     * The connectivity status of the datastore. If this is `false`,
     * some other computed attributes may be out of date.
     * 
     */
    @Import(name="accessible")
    private @Nullable Output<Boolean> accessible;

    /**
     * @return The connectivity status of the datastore. If this is `false`,
     * some other computed attributes may be out of date.
     * 
     */
    public Optional<Output<Boolean>> accessible() {
        return Optional.ofNullable(this.accessible);
    }

    /**
     * Maximum capacity of the datastore, in megabytes.
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<Integer> capacity;

    /**
     * @return Maximum capacity of the datastore, in megabytes.
     * 
     */
    public Optional<Output<Integer>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * Map of custom attribute ids to attribute
     * value string to set on datastore resource.
     * 
     * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi connections
     * and require vCenter.
     * 
     */
    @Import(name="customAttributes")
    private @Nullable Output<Map<String,String>> customAttributes;

    /**
     * @return Map of custom attribute ids to attribute
     * value string to set on datastore resource.
     * 
     * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi connections
     * and require vCenter.
     * 
     */
    public Optional<Output<Map<String,String>>> customAttributes() {
        return Optional.ofNullable(this.customAttributes);
    }

    /**
     * The managed object
     * ID of a datastore cluster to put this datastore in.
     * Conflicts with `folder`.
     * 
     */
    @Import(name="datastoreClusterId")
    private @Nullable Output<String> datastoreClusterId;

    /**
     * @return The managed object
     * ID of a datastore cluster to put this datastore in.
     * Conflicts with `folder`.
     * 
     */
    public Optional<Output<String>> datastoreClusterId() {
        return Optional.ofNullable(this.datastoreClusterId);
    }

    /**
     * The disks to use with the datastore.
     * 
     */
    @Import(name="disks")
    private @Nullable Output<List<String>> disks;

    /**
     * @return The disks to use with the datastore.
     * 
     */
    public Optional<Output<List<String>>> disks() {
        return Optional.ofNullable(this.disks);
    }

    /**
     * The relative path to a folder to put this datastore in.
     * This is a path relative to the datacenter you are deploying the datastore to.
     * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
     * The provider will place a datastore named `test` in a datastore folder
     * located at `/dc1/datastore/foo/bar`, with the final inventory path being
     * `/dc1/datastore/foo/bar/test`. Conflicts with
     * `datastore_cluster_id`.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return The relative path to a folder to put this datastore in.
     * This is a path relative to the datacenter you are deploying the datastore to.
     * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
     * The provider will place a datastore named `test` in a datastore folder
     * located at `/dc1/datastore/foo/bar`, with the final inventory path being
     * `/dc1/datastore/foo/bar/test`. Conflicts with
     * `datastore_cluster_id`.
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * Available space of this datastore, in megabytes.
     * 
     */
    @Import(name="freeSpace")
    private @Nullable Output<Integer> freeSpace;

    /**
     * @return Available space of this datastore, in megabytes.
     * 
     */
    public Optional<Output<Integer>> freeSpace() {
        return Optional.ofNullable(this.freeSpace);
    }

    /**
     * The managed object ID of
     * the host to set the datastore up on. Note that this is not necessarily the
     * only host that the datastore will be set up on - see
     * here for more info. Forces a
     * new resource if changed.
     * 
     */
    @Import(name="hostSystemId")
    private @Nullable Output<String> hostSystemId;

    /**
     * @return The managed object ID of
     * the host to set the datastore up on. Note that this is not necessarily the
     * only host that the datastore will be set up on - see
     * here for more info. Forces a
     * new resource if changed.
     * 
     */
    public Optional<Output<String>> hostSystemId() {
        return Optional.ofNullable(this.hostSystemId);
    }

    /**
     * The current maintenance mode state of the datastore.
     * 
     */
    @Import(name="maintenanceMode")
    private @Nullable Output<String> maintenanceMode;

    /**
     * @return The current maintenance mode state of the datastore.
     * 
     */
    public Optional<Output<String>> maintenanceMode() {
        return Optional.ofNullable(this.maintenanceMode);
    }

    /**
     * If `true`, more than one host in the datacenter has
     * been configured with access to the datastore.
     * 
     */
    @Import(name="multipleHostAccess")
    private @Nullable Output<Boolean> multipleHostAccess;

    /**
     * @return If `true`, more than one host in the datacenter has
     * been configured with access to the datastore.
     * 
     */
    public Optional<Output<Boolean>> multipleHostAccess() {
        return Optional.ofNullable(this.multipleHostAccess);
    }

    /**
     * The name of the datastore. Forces a new resource if
     * changed.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the datastore. Forces a new resource if
     * changed.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The IDs of any tags to attach to this resource.
     * 
     * &gt; **NOTE:** Tagging support is unsupported on direct ESXi connections and
     * requires vCenter 6.0 or higher.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The IDs of any tags to attach to this resource.
     * 
     * &gt; **NOTE:** Tagging support is unsupported on direct ESXi connections and
     * requires vCenter 6.0 or higher.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Total additional storage space, in megabytes,
     * potentially used by all virtual machines on this datastore.
     * 
     */
    @Import(name="uncommittedSpace")
    private @Nullable Output<Integer> uncommittedSpace;

    /**
     * @return Total additional storage space, in megabytes,
     * potentially used by all virtual machines on this datastore.
     * 
     */
    public Optional<Output<Integer>> uncommittedSpace() {
        return Optional.ofNullable(this.uncommittedSpace);
    }

    /**
     * The unique locator for the datastore.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The unique locator for the datastore.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private VmfsDatastoreState() {}

    private VmfsDatastoreState(VmfsDatastoreState $) {
        this.accessible = $.accessible;
        this.capacity = $.capacity;
        this.customAttributes = $.customAttributes;
        this.datastoreClusterId = $.datastoreClusterId;
        this.disks = $.disks;
        this.folder = $.folder;
        this.freeSpace = $.freeSpace;
        this.hostSystemId = $.hostSystemId;
        this.maintenanceMode = $.maintenanceMode;
        this.multipleHostAccess = $.multipleHostAccess;
        this.name = $.name;
        this.tags = $.tags;
        this.uncommittedSpace = $.uncommittedSpace;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmfsDatastoreState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmfsDatastoreState $;

        public Builder() {
            $ = new VmfsDatastoreState();
        }

        public Builder(VmfsDatastoreState defaults) {
            $ = new VmfsDatastoreState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessible The connectivity status of the datastore. If this is `false`,
         * some other computed attributes may be out of date.
         * 
         * @return builder
         * 
         */
        public Builder accessible(@Nullable Output<Boolean> accessible) {
            $.accessible = accessible;
            return this;
        }

        /**
         * @param accessible The connectivity status of the datastore. If this is `false`,
         * some other computed attributes may be out of date.
         * 
         * @return builder
         * 
         */
        public Builder accessible(Boolean accessible) {
            return accessible(Output.of(accessible));
        }

        /**
         * @param capacity Maximum capacity of the datastore, in megabytes.
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<Integer> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity Maximum capacity of the datastore, in megabytes.
         * 
         * @return builder
         * 
         */
        public Builder capacity(Integer capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param customAttributes Map of custom attribute ids to attribute
         * value string to set on datastore resource.
         * 
         * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi connections
         * and require vCenter.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(@Nullable Output<Map<String,String>> customAttributes) {
            $.customAttributes = customAttributes;
            return this;
        }

        /**
         * @param customAttributes Map of custom attribute ids to attribute
         * value string to set on datastore resource.
         * 
         * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi connections
         * and require vCenter.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(Map<String,String> customAttributes) {
            return customAttributes(Output.of(customAttributes));
        }

        /**
         * @param datastoreClusterId The managed object
         * ID of a datastore cluster to put this datastore in.
         * Conflicts with `folder`.
         * 
         * @return builder
         * 
         */
        public Builder datastoreClusterId(@Nullable Output<String> datastoreClusterId) {
            $.datastoreClusterId = datastoreClusterId;
            return this;
        }

        /**
         * @param datastoreClusterId The managed object
         * ID of a datastore cluster to put this datastore in.
         * Conflicts with `folder`.
         * 
         * @return builder
         * 
         */
        public Builder datastoreClusterId(String datastoreClusterId) {
            return datastoreClusterId(Output.of(datastoreClusterId));
        }

        /**
         * @param disks The disks to use with the datastore.
         * 
         * @return builder
         * 
         */
        public Builder disks(@Nullable Output<List<String>> disks) {
            $.disks = disks;
            return this;
        }

        /**
         * @param disks The disks to use with the datastore.
         * 
         * @return builder
         * 
         */
        public Builder disks(List<String> disks) {
            return disks(Output.of(disks));
        }

        /**
         * @param disks The disks to use with the datastore.
         * 
         * @return builder
         * 
         */
        public Builder disks(String... disks) {
            return disks(List.of(disks));
        }

        /**
         * @param folder The relative path to a folder to put this datastore in.
         * This is a path relative to the datacenter you are deploying the datastore to.
         * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
         * The provider will place a datastore named `test` in a datastore folder
         * located at `/dc1/datastore/foo/bar`, with the final inventory path being
         * `/dc1/datastore/foo/bar/test`. Conflicts with
         * `datastore_cluster_id`.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The relative path to a folder to put this datastore in.
         * This is a path relative to the datacenter you are deploying the datastore to.
         * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
         * The provider will place a datastore named `test` in a datastore folder
         * located at `/dc1/datastore/foo/bar`, with the final inventory path being
         * `/dc1/datastore/foo/bar/test`. Conflicts with
         * `datastore_cluster_id`.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param freeSpace Available space of this datastore, in megabytes.
         * 
         * @return builder
         * 
         */
        public Builder freeSpace(@Nullable Output<Integer> freeSpace) {
            $.freeSpace = freeSpace;
            return this;
        }

        /**
         * @param freeSpace Available space of this datastore, in megabytes.
         * 
         * @return builder
         * 
         */
        public Builder freeSpace(Integer freeSpace) {
            return freeSpace(Output.of(freeSpace));
        }

        /**
         * @param hostSystemId The managed object ID of
         * the host to set the datastore up on. Note that this is not necessarily the
         * only host that the datastore will be set up on - see
         * here for more info. Forces a
         * new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder hostSystemId(@Nullable Output<String> hostSystemId) {
            $.hostSystemId = hostSystemId;
            return this;
        }

        /**
         * @param hostSystemId The managed object ID of
         * the host to set the datastore up on. Note that this is not necessarily the
         * only host that the datastore will be set up on - see
         * here for more info. Forces a
         * new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder hostSystemId(String hostSystemId) {
            return hostSystemId(Output.of(hostSystemId));
        }

        /**
         * @param maintenanceMode The current maintenance mode state of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceMode(@Nullable Output<String> maintenanceMode) {
            $.maintenanceMode = maintenanceMode;
            return this;
        }

        /**
         * @param maintenanceMode The current maintenance mode state of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceMode(String maintenanceMode) {
            return maintenanceMode(Output.of(maintenanceMode));
        }

        /**
         * @param multipleHostAccess If `true`, more than one host in the datacenter has
         * been configured with access to the datastore.
         * 
         * @return builder
         * 
         */
        public Builder multipleHostAccess(@Nullable Output<Boolean> multipleHostAccess) {
            $.multipleHostAccess = multipleHostAccess;
            return this;
        }

        /**
         * @param multipleHostAccess If `true`, more than one host in the datacenter has
         * been configured with access to the datastore.
         * 
         * @return builder
         * 
         */
        public Builder multipleHostAccess(Boolean multipleHostAccess) {
            return multipleHostAccess(Output.of(multipleHostAccess));
        }

        /**
         * @param name The name of the datastore. Forces a new resource if
         * changed.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the datastore. Forces a new resource if
         * changed.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags The IDs of any tags to attach to this resource.
         * 
         * &gt; **NOTE:** Tagging support is unsupported on direct ESXi connections and
         * requires vCenter 6.0 or higher.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The IDs of any tags to attach to this resource.
         * 
         * &gt; **NOTE:** Tagging support is unsupported on direct ESXi connections and
         * requires vCenter 6.0 or higher.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The IDs of any tags to attach to this resource.
         * 
         * &gt; **NOTE:** Tagging support is unsupported on direct ESXi connections and
         * requires vCenter 6.0 or higher.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param uncommittedSpace Total additional storage space, in megabytes,
         * potentially used by all virtual machines on this datastore.
         * 
         * @return builder
         * 
         */
        public Builder uncommittedSpace(@Nullable Output<Integer> uncommittedSpace) {
            $.uncommittedSpace = uncommittedSpace;
            return this;
        }

        /**
         * @param uncommittedSpace Total additional storage space, in megabytes,
         * potentially used by all virtual machines on this datastore.
         * 
         * @return builder
         * 
         */
        public Builder uncommittedSpace(Integer uncommittedSpace) {
            return uncommittedSpace(Output.of(uncommittedSpace));
        }

        /**
         * @param url The unique locator for the datastore.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The unique locator for the datastore.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public VmfsDatastoreState build() {
            return $;
        }
    }

}
