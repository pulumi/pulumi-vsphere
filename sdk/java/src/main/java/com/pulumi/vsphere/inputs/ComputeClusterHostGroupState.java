// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ComputeClusterHostGroupState extends com.pulumi.resources.ResourceArgs {

    public static final ComputeClusterHostGroupState Empty = new ComputeClusterHostGroupState();

    /**
     * The managed object reference
     * ID of the cluster to put the group in.  Forces a new
     * resource if changed.
     * 
     */
    @Import(name="computeClusterId")
    private @Nullable Output<String> computeClusterId;

    /**
     * @return The managed object reference
     * ID of the cluster to put the group in.  Forces a new
     * resource if changed.
     * 
     */
    public Optional<Output<String>> computeClusterId() {
        return Optional.ofNullable(this.computeClusterId);
    }

    /**
     * The managed object IDs of
     * the hosts to put in the cluster.
     * 
     */
    @Import(name="hostSystemIds")
    private @Nullable Output<List<String>> hostSystemIds;

    /**
     * @return The managed object IDs of
     * the hosts to put in the cluster.
     * 
     */
    public Optional<Output<List<String>>> hostSystemIds() {
        return Optional.ofNullable(this.hostSystemIds);
    }

    /**
     * The name of the host group. This must be unique in the
     * cluster. Forces a new resource if changed.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the host group. This must be unique in the
     * cluster. Forces a new resource if changed.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private ComputeClusterHostGroupState() {}

    private ComputeClusterHostGroupState(ComputeClusterHostGroupState $) {
        this.computeClusterId = $.computeClusterId;
        this.hostSystemIds = $.hostSystemIds;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComputeClusterHostGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComputeClusterHostGroupState $;

        public Builder() {
            $ = new ComputeClusterHostGroupState();
        }

        public Builder(ComputeClusterHostGroupState defaults) {
            $ = new ComputeClusterHostGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param computeClusterId The managed object reference
         * ID of the cluster to put the group in.  Forces a new
         * resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder computeClusterId(@Nullable Output<String> computeClusterId) {
            $.computeClusterId = computeClusterId;
            return this;
        }

        /**
         * @param computeClusterId The managed object reference
         * ID of the cluster to put the group in.  Forces a new
         * resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder computeClusterId(String computeClusterId) {
            return computeClusterId(Output.of(computeClusterId));
        }

        /**
         * @param hostSystemIds The managed object IDs of
         * the hosts to put in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder hostSystemIds(@Nullable Output<List<String>> hostSystemIds) {
            $.hostSystemIds = hostSystemIds;
            return this;
        }

        /**
         * @param hostSystemIds The managed object IDs of
         * the hosts to put in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder hostSystemIds(List<String> hostSystemIds) {
            return hostSystemIds(Output.of(hostSystemIds));
        }

        /**
         * @param hostSystemIds The managed object IDs of
         * the hosts to put in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder hostSystemIds(String... hostSystemIds) {
            return hostSystemIds(List.of(hostSystemIds));
        }

        /**
         * @param name The name of the host group. This must be unique in the
         * cluster. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the host group. This must be unique in the
         * cluster. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ComputeClusterHostGroupState build() {
            return $;
        }
    }

}
