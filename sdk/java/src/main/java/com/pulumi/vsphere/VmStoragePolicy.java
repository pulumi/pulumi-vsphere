// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.VmStoragePolicyArgs;
import com.pulumi.vsphere.inputs.VmStoragePolicyState;
import com.pulumi.vsphere.outputs.VmStoragePolicyTagRule;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `vsphere.VmStoragePolicy` resource can be used to create and manage storage
 * policies. Using this resource, tag based placement rules can be created to
 * place virtual machines on a datastore with matching tags. If storage requirements for the applications on the virtual machine change, you can modify the storage policy that was originally applied to the virtual machine.
 * 
 * ## Example Usage
 * 
 * The following example creates storage policies with `tag_rules` base on sets of environment, service level, and replication attributes.
 * 
 * In this example, tags are first applied to datastores.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VsphereFunctions;
 * import com.pulumi.vsphere.inputs.GetTagCategoryArgs;
 * import com.pulumi.vsphere.inputs.GetTagArgs;
 * import com.pulumi.vsphere.VmfsDatastore;
 * import com.pulumi.vsphere.VmfsDatastoreArgs;
 * import com.pulumi.vsphere.NasDatastore;
 * import com.pulumi.vsphere.NasDatastoreArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var environment = VsphereFunctions.getTagCategory(GetTagCategoryArgs.builder()
 *             .name("environment")
 *             .build());
 * 
 *         final var serviceLevel = VsphereFunctions.getTagCategory(GetTagCategoryArgs.builder()
 *             .name("service_level")
 *             .build());
 * 
 *         final var replication = VsphereFunctions.getTagCategory(GetTagCategoryArgs.builder()
 *             .name("replication")
 *             .build());
 * 
 *         final var production = VsphereFunctions.getTag(GetTagArgs.builder()
 *             .name("production")
 *             .categoryId("data.vsphere_tag_category.environment.id")
 *             .build());
 * 
 *         final var development = VsphereFunctions.getTag(GetTagArgs.builder()
 *             .name("development")
 *             .categoryId("data.vsphere_tag_category.environment.id")
 *             .build());
 * 
 *         final var platinum = VsphereFunctions.getTag(GetTagArgs.builder()
 *             .name("platinum")
 *             .categoryId("data.vsphere_tag_category.service_level.id")
 *             .build());
 * 
 *         final var gold = VsphereFunctions.getTag(GetTagArgs.builder()
 *             .name("platinum")
 *             .categoryId("data.vsphere_tag_category.service_level.id")
 *             .build());
 * 
 *         final var silver = VsphereFunctions.getTag(GetTagArgs.builder()
 *             .name("silver")
 *             .categoryId("data.vsphere_tag_category.service_level.id")
 *             .build());
 * 
 *         final var bronze = VsphereFunctions.getTag(GetTagArgs.builder()
 *             .name("bronze")
 *             .categoryId("data.vsphere_tag_category.service_level.id")
 *             .build());
 * 
 *         final var replicated = VsphereFunctions.getTag(GetTagArgs.builder()
 *             .name("replicated")
 *             .categoryId("data.vsphere_tag_category.replication.id")
 *             .build());
 * 
 *         final var nonReplicated = VsphereFunctions.getTag(GetTagArgs.builder()
 *             .name("non_replicated")
 *             .categoryId("data.vsphere_tag_category.replication.id")
 *             .build());
 * 
 *         var prodDatastore = new VmfsDatastore("prodDatastore", VmfsDatastoreArgs.builder()
 *             .tags(            
 *                 "data.vsphere_tag.production.id",
 *                 "data.vsphere_tag.platinum.id",
 *                 "data.vsphere_tag.replicated.id")
 *             .build());
 * 
 *         var devDatastore = new NasDatastore("devDatastore", NasDatastoreArgs.builder()
 *             .tags(            
 *                 "data.vsphere_tag.development.id",
 *                 "data.vsphere_tag.silver.id",
 *                 "data.vsphere_tag.non_replicated.id")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Next, storage policies are created and `tag_rules` are applied.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VmStoragePolicy;
 * import com.pulumi.vsphere.VmStoragePolicyArgs;
 * import com.pulumi.vsphere.inputs.VmStoragePolicyTagRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var prodPlatinumReplicated = new VmStoragePolicy("prodPlatinumReplicated", VmStoragePolicyArgs.builder()
 *             .name("prod_platinum_replicated")
 *             .description("prod_platinum_replicated")
 *             .tagRules(            
 *                 VmStoragePolicyTagRuleArgs.builder()
 *                     .tagCategory(environment.name())
 *                     .tags(production.name())
 *                     .includeDatastoresWithTags(true)
 *                     .build(),
 *                 VmStoragePolicyTagRuleArgs.builder()
 *                     .tagCategory(serviceLevel.name())
 *                     .tags(platinum.name())
 *                     .includeDatastoresWithTags(true)
 *                     .build(),
 *                 VmStoragePolicyTagRuleArgs.builder()
 *                     .tagCategory(replication.name())
 *                     .tags(replicated.name())
 *                     .includeDatastoresWithTags(true)
 *                     .build())
 *             .build());
 * 
 *         var devSilverNonreplicated = new VmStoragePolicy("devSilverNonreplicated", VmStoragePolicyArgs.builder()
 *             .name("dev_silver_nonreplicated")
 *             .description("dev_silver_nonreplicated")
 *             .tagRules(            
 *                 VmStoragePolicyTagRuleArgs.builder()
 *                     .tagCategory(environment.name())
 *                     .tags(development.name())
 *                     .includeDatastoresWithTags(true)
 *                     .build(),
 *                 VmStoragePolicyTagRuleArgs.builder()
 *                     .tagCategory(serviceLevel.name())
 *                     .tags(silver.name())
 *                     .includeDatastoresWithTags(true)
 *                     .build(),
 *                 VmStoragePolicyTagRuleArgs.builder()
 *                     .tagCategory(replication.name())
 *                     .tags(nonReplicated.name())
 *                     .includeDatastoresWithTags(true)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Lastly, when creating a virtual machine resource, a storage policy can be specified to direct virtual machine placement to a datastore which matches the policy&#39;s `tags_rules`.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VsphereFunctions;
 * import com.pulumi.vsphere.inputs.GetPolicyArgs;
 * import com.pulumi.vsphere.VirtualMachine;
 * import com.pulumi.vsphere.VirtualMachineArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var prodPlatinumReplicated = VsphereFunctions.getPolicy(GetPolicyArgs.builder()
 *             .name("prod_platinum_replicated")
 *             .build());
 * 
 *         final var devSilverNonreplicated = VsphereFunctions.getPolicy(GetPolicyArgs.builder()
 *             .name("dev_silver_nonreplicated")
 *             .build());
 * 
 *         var prodVm = new VirtualMachine("prodVm", VirtualMachineArgs.builder()
 *             .storagePolicyId(storagePolicy.prodPlatinumReplicated().id())
 *             .build());
 * 
 *         var devVm = new VirtualMachine("devVm", VirtualMachineArgs.builder()
 *             .storagePolicyId(storagePolicy.devSilverNonreplicated().id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="vsphere:index/vmStoragePolicy:VmStoragePolicy")
public class VmStoragePolicy extends com.pulumi.resources.CustomResource {
    /**
     * Description of the storage policy.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the storage policy.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The name of the storage policy.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the storage policy.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * List of tag rules. The tag category and tags to be associated to this storage policy.
     * 
     */
    @Export(name="tagRules", refs={List.class,VmStoragePolicyTagRule.class}, tree="[0,1]")
    private Output<List<VmStoragePolicyTagRule>> tagRules;

    /**
     * @return List of tag rules. The tag category and tags to be associated to this storage policy.
     * 
     */
    public Output<List<VmStoragePolicyTagRule>> tagRules() {
        return this.tagRules;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VmStoragePolicy(String name) {
        this(name, VmStoragePolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VmStoragePolicy(String name, VmStoragePolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VmStoragePolicy(String name, VmStoragePolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/vmStoragePolicy:VmStoragePolicy", name, args == null ? VmStoragePolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private VmStoragePolicy(String name, Output<String> id, @Nullable VmStoragePolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/vmStoragePolicy:VmStoragePolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VmStoragePolicy get(String name, Output<String> id, @Nullable VmStoragePolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VmStoragePolicy(name, id, state, options);
    }
}
