// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.vsphere.inputs.HostServiceNtpdArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostServiceArgs Empty = new HostServiceArgs();

    /**
     * service has three settings, `enabled` sets service to running or not running, `policy` sets service based on setting of `on` which sets service to &#34;Start and stop with host&#34;, `off` which sets service to &#34;Start and stop manually&#34;, `automatic` which sets service to &#34;Start and stop with port usage&#34;.
     * 
     * &gt; **NOTE:** `services` only supports ntpd service today.
     * 
     */
    @Import(name="ntpd")
    private @Nullable Output<HostServiceNtpdArgs> ntpd;

    /**
     * @return service has three settings, `enabled` sets service to running or not running, `policy` sets service based on setting of `on` which sets service to &#34;Start and stop with host&#34;, `off` which sets service to &#34;Start and stop manually&#34;, `automatic` which sets service to &#34;Start and stop with port usage&#34;.
     * 
     * &gt; **NOTE:** `services` only supports ntpd service today.
     * 
     */
    public Optional<Output<HostServiceNtpdArgs>> ntpd() {
        return Optional.ofNullable(this.ntpd);
    }

    private HostServiceArgs() {}

    private HostServiceArgs(HostServiceArgs $) {
        this.ntpd = $.ntpd;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostServiceArgs $;

        public Builder() {
            $ = new HostServiceArgs();
        }

        public Builder(HostServiceArgs defaults) {
            $ = new HostServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ntpd service has three settings, `enabled` sets service to running or not running, `policy` sets service based on setting of `on` which sets service to &#34;Start and stop with host&#34;, `off` which sets service to &#34;Start and stop manually&#34;, `automatic` which sets service to &#34;Start and stop with port usage&#34;.
         * 
         * &gt; **NOTE:** `services` only supports ntpd service today.
         * 
         * @return builder
         * 
         */
        public Builder ntpd(@Nullable Output<HostServiceNtpdArgs> ntpd) {
            $.ntpd = ntpd;
            return this;
        }

        /**
         * @param ntpd service has three settings, `enabled` sets service to running or not running, `policy` sets service based on setting of `on` which sets service to &#34;Start and stop with host&#34;, `off` which sets service to &#34;Start and stop manually&#34;, `automatic` which sets service to &#34;Start and stop with port usage&#34;.
         * 
         * &gt; **NOTE:** `services` only supports ntpd service today.
         * 
         * @return builder
         * 
         */
        public Builder ntpd(HostServiceNtpdArgs ntpd) {
            return ntpd(Output.of(ntpd));
        }

        public HostServiceArgs build() {
            return $;
        }
    }

}
