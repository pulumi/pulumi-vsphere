// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGuestOsCustomizationSpecNetworkInterface {
    /**
     * @return A DNS search domain to add to the DNS configuration on the virtual machine.
     * 
     */
    private String dnsDomain;
    /**
     * @return Network-interface specific DNS settings for Windows operating systems. Ignored on Linux.
     * 
     */
    private List<String> dnsServerLists;
    /**
     * @return The IPv4 address assigned to this network adapter. If left blank, DHCP is used.
     * 
     */
    private String ipv4Address;
    /**
     * @return The IPv4 CIDR netmask for the supplied IP address. Ignored if DHCP is selected.
     * 
     */
    private Integer ipv4Netmask;
    /**
     * @return The IPv6 address assigned to this network adapter. If left blank, default auto-configuration is used.
     * 
     */
    private String ipv6Address;
    /**
     * @return The IPv6 CIDR netmask for the supplied IP address. Ignored if auto-configuration is selected.
     * 
     */
    private Integer ipv6Netmask;

    private GetGuestOsCustomizationSpecNetworkInterface() {}
    /**
     * @return A DNS search domain to add to the DNS configuration on the virtual machine.
     * 
     */
    public String dnsDomain() {
        return this.dnsDomain;
    }
    /**
     * @return Network-interface specific DNS settings for Windows operating systems. Ignored on Linux.
     * 
     */
    public List<String> dnsServerLists() {
        return this.dnsServerLists;
    }
    /**
     * @return The IPv4 address assigned to this network adapter. If left blank, DHCP is used.
     * 
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }
    /**
     * @return The IPv4 CIDR netmask for the supplied IP address. Ignored if DHCP is selected.
     * 
     */
    public Integer ipv4Netmask() {
        return this.ipv4Netmask;
    }
    /**
     * @return The IPv6 address assigned to this network adapter. If left blank, default auto-configuration is used.
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }
    /**
     * @return The IPv6 CIDR netmask for the supplied IP address. Ignored if auto-configuration is selected.
     * 
     */
    public Integer ipv6Netmask() {
        return this.ipv6Netmask;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGuestOsCustomizationSpecNetworkInterface defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dnsDomain;
        private List<String> dnsServerLists;
        private String ipv4Address;
        private Integer ipv4Netmask;
        private String ipv6Address;
        private Integer ipv6Netmask;
        public Builder() {}
        public Builder(GetGuestOsCustomizationSpecNetworkInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsDomain = defaults.dnsDomain;
    	      this.dnsServerLists = defaults.dnsServerLists;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4Netmask = defaults.ipv4Netmask;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.ipv6Netmask = defaults.ipv6Netmask;
        }

        @CustomType.Setter
        public Builder dnsDomain(String dnsDomain) {
            if (dnsDomain == null) {
              throw new MissingRequiredPropertyException("GetGuestOsCustomizationSpecNetworkInterface", "dnsDomain");
            }
            this.dnsDomain = dnsDomain;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServerLists(List<String> dnsServerLists) {
            if (dnsServerLists == null) {
              throw new MissingRequiredPropertyException("GetGuestOsCustomizationSpecNetworkInterface", "dnsServerLists");
            }
            this.dnsServerLists = dnsServerLists;
            return this;
        }
        public Builder dnsServerLists(String... dnsServerLists) {
            return dnsServerLists(List.of(dnsServerLists));
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            if (ipv4Address == null) {
              throw new MissingRequiredPropertyException("GetGuestOsCustomizationSpecNetworkInterface", "ipv4Address");
            }
            this.ipv4Address = ipv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Netmask(Integer ipv4Netmask) {
            if (ipv4Netmask == null) {
              throw new MissingRequiredPropertyException("GetGuestOsCustomizationSpecNetworkInterface", "ipv4Netmask");
            }
            this.ipv4Netmask = ipv4Netmask;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Address(String ipv6Address) {
            if (ipv6Address == null) {
              throw new MissingRequiredPropertyException("GetGuestOsCustomizationSpecNetworkInterface", "ipv6Address");
            }
            this.ipv6Address = ipv6Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Netmask(Integer ipv6Netmask) {
            if (ipv6Netmask == null) {
              throw new MissingRequiredPropertyException("GetGuestOsCustomizationSpecNetworkInterface", "ipv6Netmask");
            }
            this.ipv6Netmask = ipv6Netmask;
            return this;
        }
        public GetGuestOsCustomizationSpecNetworkInterface build() {
            final var _resultValue = new GetGuestOsCustomizationSpecNetworkInterface();
            _resultValue.dnsDomain = dnsDomain;
            _resultValue.dnsServerLists = dnsServerLists;
            _resultValue.ipv4Address = ipv4Address;
            _resultValue.ipv4Netmask = ipv4Netmask;
            _resultValue.ipv6Address = ipv6Address;
            _resultValue.ipv6Netmask = ipv6Netmask;
            return _resultValue;
        }
    }
}
