// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContentLibrarySubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContentLibrarySubscriptionArgs Empty = new ContentLibrarySubscriptionArgs();

    /**
     * Authentication method to connect ro a published content library. Must be `NONE` or `BASIC`.
     * 
     */
    @Import(name="authenticationMethod")
    private @Nullable Output<String> authenticationMethod;

    /**
     * @return Authentication method to connect ro a published content library. Must be `NONE` or `BASIC`.
     * 
     */
    public Optional<Output<String>> authenticationMethod() {
        return Optional.ofNullable(this.authenticationMethod);
    }

    /**
     * Enable automatic synchronization with the published library. Default `false`.
     * 
     */
    @Import(name="automaticSync")
    private @Nullable Output<Boolean> automaticSync;

    /**
     * @return Enable automatic synchronization with the published library. Default `false`.
     * 
     */
    public Optional<Output<Boolean>> automaticSync() {
        return Optional.ofNullable(this.automaticSync);
    }

    /**
     * Download the library from a content only when needed. Default `true`.
     * 
     */
    @Import(name="onDemand")
    private @Nullable Output<Boolean> onDemand;

    /**
     * @return Download the library from a content only when needed. Default `true`.
     * 
     */
    public Optional<Output<Boolean>> onDemand() {
        return Optional.ofNullable(this.onDemand);
    }

    /**
     * Password used for authentication.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password used for authentication.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * URL of the published content library.
     * 
     */
    @Import(name="subscriptionUrl")
    private @Nullable Output<String> subscriptionUrl;

    /**
     * @return URL of the published content library.
     * 
     */
    public Optional<Output<String>> subscriptionUrl() {
        return Optional.ofNullable(this.subscriptionUrl);
    }

    /**
     * Username used for authentication.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Username used for authentication.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ContentLibrarySubscriptionArgs() {}

    private ContentLibrarySubscriptionArgs(ContentLibrarySubscriptionArgs $) {
        this.authenticationMethod = $.authenticationMethod;
        this.automaticSync = $.automaticSync;
        this.onDemand = $.onDemand;
        this.password = $.password;
        this.subscriptionUrl = $.subscriptionUrl;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContentLibrarySubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContentLibrarySubscriptionArgs $;

        public Builder() {
            $ = new ContentLibrarySubscriptionArgs();
        }

        public Builder(ContentLibrarySubscriptionArgs defaults) {
            $ = new ContentLibrarySubscriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationMethod Authentication method to connect ro a published content library. Must be `NONE` or `BASIC`.
         * 
         * @return builder
         * 
         */
        public Builder authenticationMethod(@Nullable Output<String> authenticationMethod) {
            $.authenticationMethod = authenticationMethod;
            return this;
        }

        /**
         * @param authenticationMethod Authentication method to connect ro a published content library. Must be `NONE` or `BASIC`.
         * 
         * @return builder
         * 
         */
        public Builder authenticationMethod(String authenticationMethod) {
            return authenticationMethod(Output.of(authenticationMethod));
        }

        /**
         * @param automaticSync Enable automatic synchronization with the published library. Default `false`.
         * 
         * @return builder
         * 
         */
        public Builder automaticSync(@Nullable Output<Boolean> automaticSync) {
            $.automaticSync = automaticSync;
            return this;
        }

        /**
         * @param automaticSync Enable automatic synchronization with the published library. Default `false`.
         * 
         * @return builder
         * 
         */
        public Builder automaticSync(Boolean automaticSync) {
            return automaticSync(Output.of(automaticSync));
        }

        /**
         * @param onDemand Download the library from a content only when needed. Default `true`.
         * 
         * @return builder
         * 
         */
        public Builder onDemand(@Nullable Output<Boolean> onDemand) {
            $.onDemand = onDemand;
            return this;
        }

        /**
         * @param onDemand Download the library from a content only when needed. Default `true`.
         * 
         * @return builder
         * 
         */
        public Builder onDemand(Boolean onDemand) {
            return onDemand(Output.of(onDemand));
        }

        /**
         * @param password Password used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param subscriptionUrl URL of the published content library.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionUrl(@Nullable Output<String> subscriptionUrl) {
            $.subscriptionUrl = subscriptionUrl;
            return this;
        }

        /**
         * @param subscriptionUrl URL of the published content library.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionUrl(String subscriptionUrl) {
            return subscriptionUrl(Output.of(subscriptionUrl));
        }

        /**
         * @param username Username used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ContentLibrarySubscriptionArgs build() {
            return $;
        }
    }

}
