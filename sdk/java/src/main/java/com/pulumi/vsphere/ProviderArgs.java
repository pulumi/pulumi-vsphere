// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * If set, VMware vSphere client will permit unverifiable SSL certificates.
     * 
     */
    @Import(name="allowUnverifiedSsl", json=true)
    private @Nullable Output<Boolean> allowUnverifiedSsl;

    /**
     * @return If set, VMware vSphere client will permit unverifiable SSL certificates.
     * 
     */
    public Optional<Output<Boolean>> allowUnverifiedSsl() {
        return Optional.ofNullable(this.allowUnverifiedSsl);
    }

    /**
     * API timeout in minutes (Default: 5)
     * 
     */
    @Import(name="apiTimeout", json=true)
    private @Nullable Output<Integer> apiTimeout;

    /**
     * @return API timeout in minutes (Default: 5)
     * 
     */
    public Optional<Output<Integer>> apiTimeout() {
        return Optional.ofNullable(this.apiTimeout);
    }

    /**
     * govmomi debug
     * 
     */
    @Import(name="clientDebug", json=true)
    private @Nullable Output<Boolean> clientDebug;

    /**
     * @return govmomi debug
     * 
     */
    public Optional<Output<Boolean>> clientDebug() {
        return Optional.ofNullable(this.clientDebug);
    }

    /**
     * govmomi debug path for debug
     * 
     */
    @Import(name="clientDebugPath")
    private @Nullable Output<String> clientDebugPath;

    /**
     * @return govmomi debug path for debug
     * 
     */
    public Optional<Output<String>> clientDebugPath() {
        return Optional.ofNullable(this.clientDebugPath);
    }

    /**
     * govmomi debug path for a single run
     * 
     */
    @Import(name="clientDebugPathRun")
    private @Nullable Output<String> clientDebugPathRun;

    /**
     * @return govmomi debug path for a single run
     * 
     */
    public Optional<Output<String>> clientDebugPathRun() {
        return Optional.ofNullable(this.clientDebugPathRun);
    }

    /**
     * The user password for vSphere API operations.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return The user password for vSphere API operations.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * Persist vSphere client sessions to disk
     * 
     */
    @Import(name="persistSession", json=true)
    private @Nullable Output<Boolean> persistSession;

    /**
     * @return Persist vSphere client sessions to disk
     * 
     */
    public Optional<Output<Boolean>> persistSession() {
        return Optional.ofNullable(this.persistSession);
    }

    /**
     * The directory to save vSphere REST API sessions to
     * 
     */
    @Import(name="restSessionPath")
    private @Nullable Output<String> restSessionPath;

    /**
     * @return The directory to save vSphere REST API sessions to
     * 
     */
    public Optional<Output<String>> restSessionPath() {
        return Optional.ofNullable(this.restSessionPath);
    }

    /**
     * The user name for vSphere API operations.
     * 
     */
    @Import(name="user", required=true)
    private Output<String> user;

    /**
     * @return The user name for vSphere API operations.
     * 
     */
    public Output<String> user() {
        return this.user;
    }

    /**
     * @deprecated
     * This field has been renamed to vsphere_server.
     * 
     */
    @Deprecated /* This field has been renamed to vsphere_server. */
    @Import(name="vcenterServer")
    private @Nullable Output<String> vcenterServer;

    /**
     * @deprecated
     * This field has been renamed to vsphere_server.
     * 
     */
    @Deprecated /* This field has been renamed to vsphere_server. */
    public Optional<Output<String>> vcenterServer() {
        return Optional.ofNullable(this.vcenterServer);
    }

    /**
     * Keep alive interval for the VIM session in minutes
     * 
     */
    @Import(name="vimKeepAlive", json=true)
    private @Nullable Output<Integer> vimKeepAlive;

    /**
     * @return Keep alive interval for the VIM session in minutes
     * 
     */
    public Optional<Output<Integer>> vimKeepAlive() {
        return Optional.ofNullable(this.vimKeepAlive);
    }

    /**
     * The directory to save vSphere SOAP API sessions to
     * 
     */
    @Import(name="vimSessionPath")
    private @Nullable Output<String> vimSessionPath;

    /**
     * @return The directory to save vSphere SOAP API sessions to
     * 
     */
    public Optional<Output<String>> vimSessionPath() {
        return Optional.ofNullable(this.vimSessionPath);
    }

    /**
     * The vSphere Server name for vSphere API operations.
     * 
     */
    @Import(name="vsphereServer")
    private @Nullable Output<String> vsphereServer;

    /**
     * @return The vSphere Server name for vSphere API operations.
     * 
     */
    public Optional<Output<String>> vsphereServer() {
        return Optional.ofNullable(this.vsphereServer);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.allowUnverifiedSsl = $.allowUnverifiedSsl;
        this.apiTimeout = $.apiTimeout;
        this.clientDebug = $.clientDebug;
        this.clientDebugPath = $.clientDebugPath;
        this.clientDebugPathRun = $.clientDebugPathRun;
        this.password = $.password;
        this.persistSession = $.persistSession;
        this.restSessionPath = $.restSessionPath;
        this.user = $.user;
        this.vcenterServer = $.vcenterServer;
        this.vimKeepAlive = $.vimKeepAlive;
        this.vimSessionPath = $.vimSessionPath;
        this.vsphereServer = $.vsphereServer;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowUnverifiedSsl If set, VMware vSphere client will permit unverifiable SSL certificates.
         * 
         * @return builder
         * 
         */
        public Builder allowUnverifiedSsl(@Nullable Output<Boolean> allowUnverifiedSsl) {
            $.allowUnverifiedSsl = allowUnverifiedSsl;
            return this;
        }

        /**
         * @param allowUnverifiedSsl If set, VMware vSphere client will permit unverifiable SSL certificates.
         * 
         * @return builder
         * 
         */
        public Builder allowUnverifiedSsl(Boolean allowUnverifiedSsl) {
            return allowUnverifiedSsl(Output.of(allowUnverifiedSsl));
        }

        /**
         * @param apiTimeout API timeout in minutes (Default: 5)
         * 
         * @return builder
         * 
         */
        public Builder apiTimeout(@Nullable Output<Integer> apiTimeout) {
            $.apiTimeout = apiTimeout;
            return this;
        }

        /**
         * @param apiTimeout API timeout in minutes (Default: 5)
         * 
         * @return builder
         * 
         */
        public Builder apiTimeout(Integer apiTimeout) {
            return apiTimeout(Output.of(apiTimeout));
        }

        /**
         * @param clientDebug govmomi debug
         * 
         * @return builder
         * 
         */
        public Builder clientDebug(@Nullable Output<Boolean> clientDebug) {
            $.clientDebug = clientDebug;
            return this;
        }

        /**
         * @param clientDebug govmomi debug
         * 
         * @return builder
         * 
         */
        public Builder clientDebug(Boolean clientDebug) {
            return clientDebug(Output.of(clientDebug));
        }

        /**
         * @param clientDebugPath govmomi debug path for debug
         * 
         * @return builder
         * 
         */
        public Builder clientDebugPath(@Nullable Output<String> clientDebugPath) {
            $.clientDebugPath = clientDebugPath;
            return this;
        }

        /**
         * @param clientDebugPath govmomi debug path for debug
         * 
         * @return builder
         * 
         */
        public Builder clientDebugPath(String clientDebugPath) {
            return clientDebugPath(Output.of(clientDebugPath));
        }

        /**
         * @param clientDebugPathRun govmomi debug path for a single run
         * 
         * @return builder
         * 
         */
        public Builder clientDebugPathRun(@Nullable Output<String> clientDebugPathRun) {
            $.clientDebugPathRun = clientDebugPathRun;
            return this;
        }

        /**
         * @param clientDebugPathRun govmomi debug path for a single run
         * 
         * @return builder
         * 
         */
        public Builder clientDebugPathRun(String clientDebugPathRun) {
            return clientDebugPathRun(Output.of(clientDebugPathRun));
        }

        /**
         * @param password The user password for vSphere API operations.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The user password for vSphere API operations.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param persistSession Persist vSphere client sessions to disk
         * 
         * @return builder
         * 
         */
        public Builder persistSession(@Nullable Output<Boolean> persistSession) {
            $.persistSession = persistSession;
            return this;
        }

        /**
         * @param persistSession Persist vSphere client sessions to disk
         * 
         * @return builder
         * 
         */
        public Builder persistSession(Boolean persistSession) {
            return persistSession(Output.of(persistSession));
        }

        /**
         * @param restSessionPath The directory to save vSphere REST API sessions to
         * 
         * @return builder
         * 
         */
        public Builder restSessionPath(@Nullable Output<String> restSessionPath) {
            $.restSessionPath = restSessionPath;
            return this;
        }

        /**
         * @param restSessionPath The directory to save vSphere REST API sessions to
         * 
         * @return builder
         * 
         */
        public Builder restSessionPath(String restSessionPath) {
            return restSessionPath(Output.of(restSessionPath));
        }

        /**
         * @param user The user name for vSphere API operations.
         * 
         * @return builder
         * 
         */
        public Builder user(Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The user name for vSphere API operations.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This field has been renamed to vsphere_server.
         * 
         */
        @Deprecated /* This field has been renamed to vsphere_server. */
        public Builder vcenterServer(@Nullable Output<String> vcenterServer) {
            $.vcenterServer = vcenterServer;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This field has been renamed to vsphere_server.
         * 
         */
        @Deprecated /* This field has been renamed to vsphere_server. */
        public Builder vcenterServer(String vcenterServer) {
            return vcenterServer(Output.of(vcenterServer));
        }

        /**
         * @param vimKeepAlive Keep alive interval for the VIM session in minutes
         * 
         * @return builder
         * 
         */
        public Builder vimKeepAlive(@Nullable Output<Integer> vimKeepAlive) {
            $.vimKeepAlive = vimKeepAlive;
            return this;
        }

        /**
         * @param vimKeepAlive Keep alive interval for the VIM session in minutes
         * 
         * @return builder
         * 
         */
        public Builder vimKeepAlive(Integer vimKeepAlive) {
            return vimKeepAlive(Output.of(vimKeepAlive));
        }

        /**
         * @param vimSessionPath The directory to save vSphere SOAP API sessions to
         * 
         * @return builder
         * 
         */
        public Builder vimSessionPath(@Nullable Output<String> vimSessionPath) {
            $.vimSessionPath = vimSessionPath;
            return this;
        }

        /**
         * @param vimSessionPath The directory to save vSphere SOAP API sessions to
         * 
         * @return builder
         * 
         */
        public Builder vimSessionPath(String vimSessionPath) {
            return vimSessionPath(Output.of(vimSessionPath));
        }

        /**
         * @param vsphereServer The vSphere Server name for vSphere API operations.
         * 
         * @return builder
         * 
         */
        public Builder vsphereServer(@Nullable Output<String> vsphereServer) {
            $.vsphereServer = vsphereServer;
            return this;
        }

        /**
         * @param vsphereServer The vSphere Server name for vSphere API operations.
         * 
         * @return builder
         * 
         */
        public Builder vsphereServer(String vsphereServer) {
            return vsphereServer(Output.of(vsphereServer));
        }

        public ProviderArgs build() {
            $.allowUnverifiedSsl = Codegen.booleanProp("allowUnverifiedSsl").output().arg($.allowUnverifiedSsl).env("VSPHERE_ALLOW_UNVERIFIED_SSL").getNullable();
            $.clientDebug = Codegen.booleanProp("clientDebug").output().arg($.clientDebug).env("VSPHERE_CLIENT_DEBUG").getNullable();
            $.clientDebugPath = Codegen.stringProp("clientDebugPath").output().arg($.clientDebugPath).env("VSPHERE_CLIENT_DEBUG_PATH").getNullable();
            $.clientDebugPathRun = Codegen.stringProp("clientDebugPathRun").output().arg($.clientDebugPathRun).env("VSPHERE_CLIENT_DEBUG_PATH_RUN").getNullable();
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.persistSession = Codegen.booleanProp("persistSession").output().arg($.persistSession).env("VSPHERE_PERSIST_SESSION").getNullable();
            $.restSessionPath = Codegen.stringProp("restSessionPath").output().arg($.restSessionPath).env("VSPHERE_REST_SESSION_PATH").getNullable();
            $.user = Objects.requireNonNull($.user, "expected parameter 'user' to be non-null");
            $.vimKeepAlive = Codegen.integerProp("vimKeepAlive").output().arg($.vimKeepAlive).env("VSPHERE_VIM_KEEP_ALIVE").getNullable();
            $.vimSessionPath = Codegen.stringProp("vimSessionPath").output().arg($.vimSessionPath).env("VSPHERE_VIM_SESSION_PATH").getNullable();
            return $;
        }
    }

}
