// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SupervisorNamespaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SupervisorNamespaceArgs Empty = new SupervisorNamespaceArgs();

    /**
     * A list of content libraries.
     * 
     */
    @Import(name="contentLibraries")
    private @Nullable Output<List<String>> contentLibraries;

    /**
     * @return A list of content libraries.
     * 
     */
    public Optional<Output<List<String>>> contentLibraries() {
        return Optional.ofNullable(this.contentLibraries);
    }

    /**
     * The name of the namespace.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the namespace.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A list of virtual machine classes.
     * 
     */
    @Import(name="vmClasses")
    private @Nullable Output<List<String>> vmClasses;

    /**
     * @return A list of virtual machine classes.
     * 
     */
    public Optional<Output<List<String>>> vmClasses() {
        return Optional.ofNullable(this.vmClasses);
    }

    private SupervisorNamespaceArgs() {}

    private SupervisorNamespaceArgs(SupervisorNamespaceArgs $) {
        this.contentLibraries = $.contentLibraries;
        this.name = $.name;
        this.vmClasses = $.vmClasses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SupervisorNamespaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SupervisorNamespaceArgs $;

        public Builder() {
            $ = new SupervisorNamespaceArgs();
        }

        public Builder(SupervisorNamespaceArgs defaults) {
            $ = new SupervisorNamespaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentLibraries A list of content libraries.
         * 
         * @return builder
         * 
         */
        public Builder contentLibraries(@Nullable Output<List<String>> contentLibraries) {
            $.contentLibraries = contentLibraries;
            return this;
        }

        /**
         * @param contentLibraries A list of content libraries.
         * 
         * @return builder
         * 
         */
        public Builder contentLibraries(List<String> contentLibraries) {
            return contentLibraries(Output.of(contentLibraries));
        }

        /**
         * @param contentLibraries A list of content libraries.
         * 
         * @return builder
         * 
         */
        public Builder contentLibraries(String... contentLibraries) {
            return contentLibraries(List.of(contentLibraries));
        }

        /**
         * @param name The name of the namespace.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the namespace.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param vmClasses A list of virtual machine classes.
         * 
         * @return builder
         * 
         */
        public Builder vmClasses(@Nullable Output<List<String>> vmClasses) {
            $.vmClasses = vmClasses;
            return this;
        }

        /**
         * @param vmClasses A list of virtual machine classes.
         * 
         * @return builder
         * 
         */
        public Builder vmClasses(List<String> vmClasses) {
            return vmClasses(Output.of(vmClasses));
        }

        /**
         * @param vmClasses A list of virtual machine classes.
         * 
         * @return builder
         * 
         */
        public Builder vmClasses(String... vmClasses) {
            return vmClasses(List.of(vmClasses));
        }

        public SupervisorNamespaceArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SupervisorNamespaceArgs", "name");
            }
            return $;
        }
    }

}
