// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.DatastoreClusterVmAntiAffinityRuleArgs;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.inputs.DatastoreClusterVmAntiAffinityRuleState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `vsphere.DatastoreClusterVmAntiAffinityRule` resource can be used to
 * manage VM anti-affinity rules in a datastore cluster, either created by the
 * `vsphere.DatastoreCluster` resource or looked up
 * by the `vsphere.DatastoreCluster` data source.
 * 
 * This rule can be used to tell a set to virtual machines to run on different
 * datastores within a cluster, useful for preventing single points of failure in
 * application cluster scenarios. When configured, Storage DRS will make a best effort to
 * ensure that the virtual machines run on different datastores, or prevent any
 * operation that would keep that from happening, depending on the value of the
 * `mandatory` flag.
 * 
 * &gt; **NOTE:** This resource requires vCenter and is not available on direct ESXi
 * connections.
 * 
 * &gt; **NOTE:** Storage DRS requires a vSphere Enterprise Plus license.
 * 
 * ## Example Usage
 * 
 * The example below creates two virtual machines in a cluster using the
 * `vsphere.VirtualMachine` resource, creating the
 * virtual machines in the datastore cluster looked up by the
 * `vsphere.DatastoreCluster` data
 * source. It then creates an anti-affinity rule for these two virtual machines,
 * ensuring they will run on different datastores whenever possible.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vsphere.VsphereFunctions;
 * import com.pulumi.vsphere.inputs.GetDatacenterArgs;
 * import com.pulumi.vsphere.inputs.GetDatastoreClusterArgs;
 * import com.pulumi.vsphere.inputs.GetComputeClusterArgs;
 * import com.pulumi.vsphere.inputs.GetNetworkArgs;
 * import com.pulumi.vsphere.VirtualMachine;
 * import com.pulumi.vsphere.VirtualMachineArgs;
 * import com.pulumi.vsphere.inputs.VirtualMachineNetworkInterfaceArgs;
 * import com.pulumi.vsphere.inputs.VirtualMachineDiskArgs;
 * import com.pulumi.vsphere.DatastoreClusterVmAntiAffinityRule;
 * import com.pulumi.vsphere.DatastoreClusterVmAntiAffinityRuleArgs;
 * import com.pulumi.codegen.internal.KeyedValue;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var datacenter = VsphereFunctions.getDatacenter(GetDatacenterArgs.builder()
 *             .name("dc-01")
 *             .build());
 * 
 *         final var datastoreCluster = VsphereFunctions.getDatastoreCluster(GetDatastoreClusterArgs.builder()
 *             .name("datastore-cluster1")
 *             .datacenterId(datacenter.id())
 *             .build());
 * 
 *         final var cluster = VsphereFunctions.getComputeCluster(GetComputeClusterArgs.builder()
 *             .name("cluster-01")
 *             .datacenterId(datacenter.id())
 *             .build());
 * 
 *         final var network = VsphereFunctions.getNetwork(GetNetworkArgs.builder()
 *             .name("network1")
 *             .datacenterId(datacenter.id())
 *             .build());
 * 
 *         for (var i = 0; i < 2; i++) {
 *             new VirtualMachine("vm-" + i, VirtualMachineArgs.builder()
 *                 .name(String.format("test-%s", range.value()))
 *                 .resourcePoolId(cluster.resourcePoolId())
 *                 .datastoreClusterId(datastoreCluster.id())
 *                 .numCpus(2)
 *                 .memory(2048)
 *                 .guestId("otherLinux64Guest")
 *                 .networkInterfaces(VirtualMachineNetworkInterfaceArgs.builder()
 *                     .networkId(network.id())
 *                     .build())
 *                 .disks(VirtualMachineDiskArgs.builder()
 *                     .label("disk0")
 *                     .size(20)
 *                     .build())
 *                 .build());
 * 
 *         
 * }
 *         var clusterVmAntiAffinityRule = new DatastoreClusterVmAntiAffinityRule("clusterVmAntiAffinityRule", DatastoreClusterVmAntiAffinityRuleArgs.builder()
 *             .name("test-datastore-cluster-vm-anti-affinity-rule")
 *             .datastoreClusterId(datastoreCluster.id())
 *             .virtualMachineIds(vm.stream().map(element -> element.id()).collect(toList()))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * An existing rule can be imported into this resource by supplying
 * 
 * both the path to the cluster, and the name the rule. If the name or cluster is
 * 
 * not found, or if the rule is of a different type, an error will be returned. An
 * 
 * example is below:
 * 
 * [docs-import]: https://developer.hashicorp.com/terraform/cli/import
 * 
 * ```sh
 * $ pulumi import vsphere:index/datastoreClusterVmAntiAffinityRule:DatastoreClusterVmAntiAffinityRule cluster_vm_anti_affinity_rule \
 * ```
 * 
 *   &#39;{&#34;compute_cluster_path&#34;: &#34;/dc1/datastore/cluster1&#34;, \
 * 
 *   &#34;name&#34;: &#34;pulumi-test-datastore-cluster-vm-anti-affinity-rule&#34;}&#39;
 * 
 */
@ResourceType(type="vsphere:index/datastoreClusterVmAntiAffinityRule:DatastoreClusterVmAntiAffinityRule")
public class DatastoreClusterVmAntiAffinityRule extends com.pulumi.resources.CustomResource {
    /**
     * The managed object reference
     * ID of the datastore cluster to put the group in.  Forces
     * a new resource if changed.
     * 
     */
    @Export(name="datastoreClusterId", refs={String.class}, tree="[0]")
    private Output<String> datastoreClusterId;

    /**
     * @return The managed object reference
     * ID of the datastore cluster to put the group in.  Forces
     * a new resource if changed.
     * 
     */
    public Output<String> datastoreClusterId() {
        return this.datastoreClusterId;
    }
    /**
     * Enable this rule in the cluster. Default: `true`.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Enable this rule in the cluster. Default: `true`.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * When this value is `true`, prevents any virtual
     * machine operations that may violate this rule. Default: `false`.
     * 
     */
    @Export(name="mandatory", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> mandatory;

    /**
     * @return When this value is `true`, prevents any virtual
     * machine operations that may violate this rule. Default: `false`.
     * 
     */
    public Output<Optional<Boolean>> mandatory() {
        return Codegen.optional(this.mandatory);
    }
    /**
     * The name of the rule. This must be unique in the cluster.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the rule. This must be unique in the cluster.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The UUIDs of the virtual machines to run
     * on different datastores from each other.
     * 
     * &gt; **NOTE:** The minimum length of `virtual_machine_ids` is 2.
     * 
     */
    @Export(name="virtualMachineIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> virtualMachineIds;

    /**
     * @return The UUIDs of the virtual machines to run
     * on different datastores from each other.
     * 
     * &gt; **NOTE:** The minimum length of `virtual_machine_ids` is 2.
     * 
     */
    public Output<List<String>> virtualMachineIds() {
        return this.virtualMachineIds;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DatastoreClusterVmAntiAffinityRule(java.lang.String name) {
        this(name, DatastoreClusterVmAntiAffinityRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DatastoreClusterVmAntiAffinityRule(java.lang.String name, DatastoreClusterVmAntiAffinityRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DatastoreClusterVmAntiAffinityRule(java.lang.String name, DatastoreClusterVmAntiAffinityRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/datastoreClusterVmAntiAffinityRule:DatastoreClusterVmAntiAffinityRule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DatastoreClusterVmAntiAffinityRule(java.lang.String name, Output<java.lang.String> id, @Nullable DatastoreClusterVmAntiAffinityRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/datastoreClusterVmAntiAffinityRule:DatastoreClusterVmAntiAffinityRule", name, state, makeResourceOptions(options, id), false);
    }

    private static DatastoreClusterVmAntiAffinityRuleArgs makeArgs(DatastoreClusterVmAntiAffinityRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DatastoreClusterVmAntiAffinityRuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DatastoreClusterVmAntiAffinityRule get(java.lang.String name, Output<java.lang.String> id, @Nullable DatastoreClusterVmAntiAffinityRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DatastoreClusterVmAntiAffinityRule(name, id, state, options);
    }
}
