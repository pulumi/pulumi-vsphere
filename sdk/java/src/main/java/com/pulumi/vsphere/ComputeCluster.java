// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.ComputeClusterArgs;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.inputs.ComputeClusterState;
import com.pulumi.vsphere.outputs.ComputeClusterVsanDiskGroup;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="vsphere:index/computeCluster:ComputeCluster")
public class ComputeCluster extends com.pulumi.resources.CustomResource {
    /**
     * A map of custom attribute ids to attribute
     * value strings to set for the datastore cluster.
     * 
     */
    @Export(name="customAttributes", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> customAttributes;

    /**
     * @return A map of custom attribute ids to attribute
     * value strings to set for the datastore cluster.
     * 
     */
    public Output<Optional<Map<String,String>>> customAttributes() {
        return Codegen.optional(this.customAttributes);
    }
    /**
     * The managed object ID of
     * the datacenter to create the cluster in. Forces a new resource if changed.
     * 
     */
    @Export(name="datacenterId", type=String.class, parameters={})
    private Output<String> datacenterId;

    /**
     * @return The managed object ID of
     * the datacenter to create the cluster in. Forces a new resource if changed.
     * 
     */
    public Output<String> datacenterId() {
        return this.datacenterId;
    }
    /**
     * The automation level for host power
     * operations in this cluster. Can be one of `manual` or `automated`. Default:
     * `manual`.
     * 
     */
    @Export(name="dpmAutomationLevel", type=String.class, parameters={})
    private Output</* @Nullable */ String> dpmAutomationLevel;

    /**
     * @return The automation level for host power
     * operations in this cluster. Can be one of `manual` or `automated`. Default:
     * `manual`.
     * 
     */
    public Output<Optional<String>> dpmAutomationLevel() {
        return Codegen.optional(this.dpmAutomationLevel);
    }
    /**
     * Enable DPM support for DRS in this cluster.
     * Requires `drs_enabled` to be `true` in order to be effective.
     * Default: `false`.
     * 
     */
    @Export(name="dpmEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> dpmEnabled;

    /**
     * @return Enable DPM support for DRS in this cluster.
     * Requires `drs_enabled` to be `true` in order to be effective.
     * Default: `false`.
     * 
     */
    public Output<Optional<Boolean>> dpmEnabled() {
        return Codegen.optional(this.dpmEnabled);
    }
    /**
     * A value between `1` and `5` indicating the
     * threshold of load within the cluster that influences host power operations.
     * This affects both power on and power off operations - a lower setting will
     * tolerate more of a surplus/deficit than a higher setting. Default: `3`.
     * 
     */
    @Export(name="dpmThreshold", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> dpmThreshold;

    /**
     * @return A value between `1` and `5` indicating the
     * threshold of load within the cluster that influences host power operations.
     * This affects both power on and power off operations - a lower setting will
     * tolerate more of a surplus/deficit than a higher setting. Default: `3`.
     * 
     */
    public Output<Optional<Integer>> dpmThreshold() {
        return Codegen.optional(this.dpmThreshold);
    }
    /**
     * A key/value map that specifies advanced
     * options for DRS and DPM.
     * 
     */
    @Export(name="drsAdvancedOptions", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> drsAdvancedOptions;

    /**
     * @return A key/value map that specifies advanced
     * options for DRS and DPM.
     * 
     */
    public Output<Optional<Map<String,String>>> drsAdvancedOptions() {
        return Codegen.optional(this.drsAdvancedOptions);
    }
    /**
     * The default automation level for all
     * virtual machines in this cluster. Can be one of `manual`,
     * `partiallyAutomated`, or `fullyAutomated`. Default: `manual`.
     * 
     */
    @Export(name="drsAutomationLevel", type=String.class, parameters={})
    private Output</* @Nullable */ String> drsAutomationLevel;

    /**
     * @return The default automation level for all
     * virtual machines in this cluster. Can be one of `manual`,
     * `partiallyAutomated`, or `fullyAutomated`. Default: `manual`.
     * 
     */
    public Output<Optional<String>> drsAutomationLevel() {
        return Codegen.optional(this.drsAutomationLevel);
    }
    /**
     * When `true`, enables DRS to use data
     * from [vRealize Operations Manager][ref-vsphere-vrops] to make proactive DRS
     * recommendations. &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="drsEnablePredictiveDrs", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> drsEnablePredictiveDrs;

    /**
     * @return When `true`, enables DRS to use data
     * from [vRealize Operations Manager][ref-vsphere-vrops] to make proactive DRS
     * recommendations. &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<Boolean>> drsEnablePredictiveDrs() {
        return Codegen.optional(this.drsEnablePredictiveDrs);
    }
    /**
     * Allow individual DRS overrides to be
     * set for virtual machines in the cluster. Default: `true`.
     * 
     */
    @Export(name="drsEnableVmOverrides", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> drsEnableVmOverrides;

    /**
     * @return Allow individual DRS overrides to be
     * set for virtual machines in the cluster. Default: `true`.
     * 
     */
    public Output<Optional<Boolean>> drsEnableVmOverrides() {
        return Codegen.optional(this.drsEnableVmOverrides);
    }
    /**
     * Enable DRS for this cluster. Default: `false`.
     * 
     */
    @Export(name="drsEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> drsEnabled;

    /**
     * @return Enable DRS for this cluster. Default: `false`.
     * 
     */
    public Output<Optional<Boolean>> drsEnabled() {
        return Codegen.optional(this.drsEnabled);
    }
    /**
     * A value between `1` and `5` indicating
     * the threshold of imbalance tolerated between hosts. A lower setting will
     * tolerate more imbalance while a higher setting will tolerate less. Default:
     * `3`.
     * 
     */
    @Export(name="drsMigrationThreshold", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> drsMigrationThreshold;

    /**
     * @return A value between `1` and `5` indicating
     * the threshold of imbalance tolerated between hosts. A lower setting will
     * tolerate more imbalance while a higher setting will tolerate less. Default:
     * `3`.
     * 
     */
    public Output<Optional<Integer>> drsMigrationThreshold() {
        return Codegen.optional(this.drsMigrationThreshold);
    }
    /**
     * Enable scalable shares for all
     * resource pools in the cluster. Can be one of `disabled` or
     * `scaleCpuAndMemoryShares`. Default: `disabled`.
     * 
     */
    @Export(name="drsScaleDescendantsShares", type=String.class, parameters={})
    private Output</* @Nullable */ String> drsScaleDescendantsShares;

    /**
     * @return Enable scalable shares for all
     * resource pools in the cluster. Can be one of `disabled` or
     * `scaleCpuAndMemoryShares`. Default: `disabled`.
     * 
     */
    public Output<Optional<String>> drsScaleDescendantsShares() {
        return Codegen.optional(this.drsScaleDescendantsShares);
    }
    /**
     * The relative path to a folder to put this cluster in.
     * This is a path relative to the datacenter you are deploying the cluster to.
     * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
     * The provider will place a cluster named `compute-cluster-test` in a
     * host folder located at `/dc1/host/foo/bar`, with the final inventory path
     * being `/dc1/host/foo/bar/datastore-cluster-test`.
     * 
     */
    @Export(name="folder", type=String.class, parameters={})
    private Output</* @Nullable */ String> folder;

    /**
     * @return The relative path to a folder to put this cluster in.
     * This is a path relative to the datacenter you are deploying the cluster to.
     * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
     * The provider will place a cluster named `compute-cluster-test` in a
     * host folder located at `/dc1/host/foo/bar`, with the final inventory path
     * being `/dc1/host/foo/bar/datastore-cluster-test`.
     * 
     */
    public Output<Optional<String>> folder() {
        return Codegen.optional(this.folder);
    }
    /**
     * When destroying the resource, setting this to
     * `true` will auto-remove any hosts that are currently a member of the cluster,
     * as if they were removed by taking their entry out of `host_system_ids` (see
     * below. This is an advanced
     * option and should only be used for testing. Default: `false`.
     * 
     */
    @Export(name="forceEvacuateOnDestroy", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> forceEvacuateOnDestroy;

    /**
     * @return When destroying the resource, setting this to
     * `true` will auto-remove any hosts that are currently a member of the cluster,
     * as if they were removed by taking their entry out of `host_system_ids` (see
     * below. This is an advanced
     * option and should only be used for testing. Default: `false`.
     * 
     */
    public Output<Optional<Boolean>> forceEvacuateOnDestroy() {
        return Codegen.optional(this.forceEvacuateOnDestroy);
    }
    /**
     * Defines the
     * managed object IDs of hosts to use as dedicated failover
     * hosts. These hosts are kept as available as possible - admission control will
     * block access to the host, and DRS will ignore the host when making
     * recommendations.
     * 
     */
    @Export(name="haAdmissionControlFailoverHostSystemIds", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> haAdmissionControlFailoverHostSystemIds;

    /**
     * @return Defines the
     * managed object IDs of hosts to use as dedicated failover
     * hosts. These hosts are kept as available as possible - admission control will
     * block access to the host, and DRS will ignore the host when making
     * recommendations.
     * 
     */
    public Output<Optional<List<String>>> haAdmissionControlFailoverHostSystemIds() {
        return Codegen.optional(this.haAdmissionControlFailoverHostSystemIds);
    }
    /**
     * The maximum number
     * of failed hosts that admission control tolerates when making decisions on
     * whether to permit virtual machine operations. The maximum is one less than
     * the number of hosts in the cluster. Default: `1`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="haAdmissionControlHostFailureTolerance", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> haAdmissionControlHostFailureTolerance;

    /**
     * @return The maximum number
     * of failed hosts that admission control tolerates when making decisions on
     * whether to permit virtual machine operations. The maximum is one less than
     * the number of hosts in the cluster. Default: `1`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<Integer>> haAdmissionControlHostFailureTolerance() {
        return Codegen.optional(this.haAdmissionControlHostFailureTolerance);
    }
    /**
     * The percentage of
     * resource reduction that a cluster of virtual machines can tolerate in case of
     * a failover. A value of 0 produces warnings only, whereas a value of 100
     * disables the setting. Default: `100` (disabled).
     * 
     */
    @Export(name="haAdmissionControlPerformanceTolerance", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> haAdmissionControlPerformanceTolerance;

    /**
     * @return The percentage of
     * resource reduction that a cluster of virtual machines can tolerate in case of
     * a failover. A value of 0 produces warnings only, whereas a value of 100
     * disables the setting. Default: `100` (disabled).
     * 
     */
    public Output<Optional<Integer>> haAdmissionControlPerformanceTolerance() {
        return Codegen.optional(this.haAdmissionControlPerformanceTolerance);
    }
    /**
     * The type of admission control
     * policy to use with vSphere HA. Can be one of `resourcePercentage`,
     * `slotPolicy`, `failoverHosts`, or `disabled`. Default: `resourcePercentage`.
     * 
     */
    @Export(name="haAdmissionControlPolicy", type=String.class, parameters={})
    private Output</* @Nullable */ String> haAdmissionControlPolicy;

    /**
     * @return The type of admission control
     * policy to use with vSphere HA. Can be one of `resourcePercentage`,
     * `slotPolicy`, `failoverHosts`, or `disabled`. Default: `resourcePercentage`.
     * 
     */
    public Output<Optional<String>> haAdmissionControlPolicy() {
        return Codegen.optional(this.haAdmissionControlPolicy);
    }
    /**
     * Automatically determine available resource percentages by subtracting the
     * average number of host resources represented by the
     * `ha_admission_control_host_failure_tolerance`
     * setting from the total amount of resources in the cluster. Disable to supply
     * user-defined values. Default: `true`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="haAdmissionControlResourcePercentageAutoCompute", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> haAdmissionControlResourcePercentageAutoCompute;

    /**
     * @return Automatically determine available resource percentages by subtracting the
     * average number of host resources represented by the
     * `ha_admission_control_host_failure_tolerance`
     * setting from the total amount of resources in the cluster. Disable to supply
     * user-defined values. Default: `true`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<Boolean>> haAdmissionControlResourcePercentageAutoCompute() {
        return Codegen.optional(this.haAdmissionControlResourcePercentageAutoCompute);
    }
    /**
     * Controls the
     * user-defined percentage of CPU resources in the cluster to reserve for
     * failover. Default: `100`.
     * 
     */
    @Export(name="haAdmissionControlResourcePercentageCpu", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> haAdmissionControlResourcePercentageCpu;

    /**
     * @return Controls the
     * user-defined percentage of CPU resources in the cluster to reserve for
     * failover. Default: `100`.
     * 
     */
    public Output<Optional<Integer>> haAdmissionControlResourcePercentageCpu() {
        return Codegen.optional(this.haAdmissionControlResourcePercentageCpu);
    }
    /**
     * Controls the
     * user-defined percentage of memory resources in the cluster to reserve for
     * failover. Default: `100`.
     * 
     */
    @Export(name="haAdmissionControlResourcePercentageMemory", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> haAdmissionControlResourcePercentageMemory;

    /**
     * @return Controls the
     * user-defined percentage of memory resources in the cluster to reserve for
     * failover. Default: `100`.
     * 
     */
    public Output<Optional<Integer>> haAdmissionControlResourcePercentageMemory() {
        return Codegen.optional(this.haAdmissionControlResourcePercentageMemory);
    }
    /**
     * Controls the
     * user-defined CPU slot size, in MHz. Default: `32`.
     * 
     */
    @Export(name="haAdmissionControlSlotPolicyExplicitCpu", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> haAdmissionControlSlotPolicyExplicitCpu;

    /**
     * @return Controls the
     * user-defined CPU slot size, in MHz. Default: `32`.
     * 
     */
    public Output<Optional<Integer>> haAdmissionControlSlotPolicyExplicitCpu() {
        return Codegen.optional(this.haAdmissionControlSlotPolicyExplicitCpu);
    }
    /**
     * Controls the
     * user-defined memory slot size, in MB. Default: `100`.
     * 
     */
    @Export(name="haAdmissionControlSlotPolicyExplicitMemory", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> haAdmissionControlSlotPolicyExplicitMemory;

    /**
     * @return Controls the
     * user-defined memory slot size, in MB. Default: `100`.
     * 
     */
    public Output<Optional<Integer>> haAdmissionControlSlotPolicyExplicitMemory() {
        return Codegen.optional(this.haAdmissionControlSlotPolicyExplicitMemory);
    }
    /**
     * Controls
     * whether or not you wish to supply explicit values to CPU and memory slot
     * sizes. The default is `false`, which tells vSphere to gather a automatic
     * average based on all powered-on virtual machines currently in the cluster.
     * 
     */
    @Export(name="haAdmissionControlSlotPolicyUseExplicitSize", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> haAdmissionControlSlotPolicyUseExplicitSize;

    /**
     * @return Controls
     * whether or not you wish to supply explicit values to CPU and memory slot
     * sizes. The default is `false`, which tells vSphere to gather a automatic
     * average based on all powered-on virtual machines currently in the cluster.
     * 
     */
    public Output<Optional<Boolean>> haAdmissionControlSlotPolicyUseExplicitSize() {
        return Codegen.optional(this.haAdmissionControlSlotPolicyUseExplicitSize);
    }
    /**
     * A key/value map that specifies advanced
     * options for vSphere HA.
     * 
     */
    @Export(name="haAdvancedOptions", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> haAdvancedOptions;

    /**
     * @return A key/value map that specifies advanced
     * options for vSphere HA.
     * 
     */
    public Output<Optional<Map<String,String>>> haAdvancedOptions() {
        return Codegen.optional(this.haAdvancedOptions);
    }
    /**
     * Controls the action to take
     * on virtual machines if an APD status on an affected datastore clears in the
     * middle of an APD event. Can be one of `none` or `reset`. Default: `none`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="haDatastoreApdRecoveryAction", type=String.class, parameters={})
    private Output</* @Nullable */ String> haDatastoreApdRecoveryAction;

    /**
     * @return Controls the action to take
     * on virtual machines if an APD status on an affected datastore clears in the
     * middle of an APD event. Can be one of `none` or `reset`. Default: `none`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<String>> haDatastoreApdRecoveryAction() {
        return Codegen.optional(this.haDatastoreApdRecoveryAction);
    }
    /**
     * Controls the action to take on
     * virtual machines when the cluster has detected loss to all paths to a
     * relevant datastore. Can be one of `disabled`, `warning`,
     * `restartConservative`, or `restartAggressive`.  Default: `disabled`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="haDatastoreApdResponse", type=String.class, parameters={})
    private Output</* @Nullable */ String> haDatastoreApdResponse;

    /**
     * @return Controls the action to take on
     * virtual machines when the cluster has detected loss to all paths to a
     * relevant datastore. Can be one of `disabled`, `warning`,
     * `restartConservative`, or `restartAggressive`.  Default: `disabled`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<String>> haDatastoreApdResponse() {
        return Codegen.optional(this.haDatastoreApdResponse);
    }
    /**
     * The time, in seconds,
     * to wait after an APD timeout event to run the response action defined in
     * `ha_datastore_apd_response`. Default: `180`
     * seconds (3 minutes). &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="haDatastoreApdResponseDelay", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> haDatastoreApdResponseDelay;

    /**
     * @return The time, in seconds,
     * to wait after an APD timeout event to run the response action defined in
     * `ha_datastore_apd_response`. Default: `180`
     * seconds (3 minutes). &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<Integer>> haDatastoreApdResponseDelay() {
        return Codegen.optional(this.haDatastoreApdResponseDelay);
    }
    /**
     * Controls the action to take on
     * virtual machines when the cluster has detected a permanent device loss to a
     * relevant datastore. Can be one of `disabled`, `warning`, or
     * `restartAggressive`. Default: `disabled`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="haDatastorePdlResponse", type=String.class, parameters={})
    private Output</* @Nullable */ String> haDatastorePdlResponse;

    /**
     * @return Controls the action to take on
     * virtual machines when the cluster has detected a permanent device loss to a
     * relevant datastore. Can be one of `disabled`, `warning`, or
     * `restartAggressive`. Default: `disabled`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<String>> haDatastorePdlResponse() {
        return Codegen.optional(this.haDatastorePdlResponse);
    }
    /**
     * Enable vSphere HA for this cluster. Default:
     * `false`.
     * 
     */
    @Export(name="haEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> haEnabled;

    /**
     * @return Enable vSphere HA for this cluster. Default:
     * `false`.
     * 
     */
    public Output<Optional<Boolean>> haEnabled() {
        return Codegen.optional(this.haEnabled);
    }
    /**
     * The list of managed object IDs for
     * preferred datastores to use for HA heartbeating. This setting is only useful
     * when `ha_heartbeat_datastore_policy` is set
     * to either `userSelectedDs` or `allFeasibleDsWithUserPreference`.
     * 
     */
    @Export(name="haHeartbeatDatastoreIds", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> haHeartbeatDatastoreIds;

    /**
     * @return The list of managed object IDs for
     * preferred datastores to use for HA heartbeating. This setting is only useful
     * when `ha_heartbeat_datastore_policy` is set
     * to either `userSelectedDs` or `allFeasibleDsWithUserPreference`.
     * 
     */
    public Output<Optional<List<String>>> haHeartbeatDatastoreIds() {
        return Codegen.optional(this.haHeartbeatDatastoreIds);
    }
    /**
     * The selection policy for HA
     * heartbeat datastores. Can be one of `allFeasibleDs`, `userSelectedDs`, or
     * `allFeasibleDsWithUserPreference`. Default:
     * `allFeasibleDsWithUserPreference`.
     * 
     */
    @Export(name="haHeartbeatDatastorePolicy", type=String.class, parameters={})
    private Output</* @Nullable */ String> haHeartbeatDatastorePolicy;

    /**
     * @return The selection policy for HA
     * heartbeat datastores. Can be one of `allFeasibleDs`, `userSelectedDs`, or
     * `allFeasibleDsWithUserPreference`. Default:
     * `allFeasibleDsWithUserPreference`.
     * 
     */
    public Output<Optional<String>> haHeartbeatDatastorePolicy() {
        return Codegen.optional(this.haHeartbeatDatastorePolicy);
    }
    /**
     * The action to take on virtual
     * machines when a host has detected that it has been isolated from the rest of
     * the cluster. Can be one of `none`, `powerOff`, or `shutdown`. Default:
     * `none`.
     * 
     */
    @Export(name="haHostIsolationResponse", type=String.class, parameters={})
    private Output</* @Nullable */ String> haHostIsolationResponse;

    /**
     * @return The action to take on virtual
     * machines when a host has detected that it has been isolated from the rest of
     * the cluster. Can be one of `none`, `powerOff`, or `shutdown`. Default:
     * `none`.
     * 
     */
    public Output<Optional<String>> haHostIsolationResponse() {
        return Codegen.optional(this.haHostIsolationResponse);
    }
    /**
     * Global setting that controls whether
     * vSphere HA remediates virtual machines on host failure. Can be one of `enabled`
     * or `disabled`. Default: `enabled`.
     * 
     */
    @Export(name="haHostMonitoring", type=String.class, parameters={})
    private Output</* @Nullable */ String> haHostMonitoring;

    /**
     * @return Global setting that controls whether
     * vSphere HA remediates virtual machines on host failure. Can be one of `enabled`
     * or `disabled`. Default: `enabled`.
     * 
     */
    public Output<Optional<String>> haHostMonitoring() {
        return Codegen.optional(this.haHostMonitoring);
    }
    /**
     * Controls vSphere VM component
     * protection for virtual machines in this cluster. Can be one of `enabled` or
     * `disabled`. Default: `enabled`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="haVmComponentProtection", type=String.class, parameters={})
    private Output</* @Nullable */ String> haVmComponentProtection;

    /**
     * @return Controls vSphere VM component
     * protection for virtual machines in this cluster. Can be one of `enabled` or
     * `disabled`. Default: `enabled`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<String>> haVmComponentProtection() {
        return Codegen.optional(this.haVmComponentProtection);
    }
    /**
     * The condition used to
     * determine whether or not virtual machines in a certain restart priority class
     * are online, allowing HA to move on to restarting virtual machines on the next
     * priority. Can be one of `none`, `poweredOn`, `guestHbStatusGreen`, or
     * `appHbStatusGreen`. The default is `none`, which means that a virtual machine
     * is considered ready immediately after a host is found to start it on.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="haVmDependencyRestartCondition", type=String.class, parameters={})
    private Output</* @Nullable */ String> haVmDependencyRestartCondition;

    /**
     * @return The condition used to
     * determine whether or not virtual machines in a certain restart priority class
     * are online, allowing HA to move on to restarting virtual machines on the next
     * priority. Can be one of `none`, `poweredOn`, `guestHbStatusGreen`, or
     * `appHbStatusGreen`. The default is `none`, which means that a virtual machine
     * is considered ready immediately after a host is found to start it on.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<String>> haVmDependencyRestartCondition() {
        return Codegen.optional(this.haVmDependencyRestartCondition);
    }
    /**
     * The time interval, in seconds, a heartbeat
     * from a virtual machine is not received within this configured interval,
     * the virtual machine is marked as failed. Default: `30` seconds.
     * 
     */
    @Export(name="haVmFailureInterval", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> haVmFailureInterval;

    /**
     * @return The time interval, in seconds, a heartbeat
     * from a virtual machine is not received within this configured interval,
     * the virtual machine is marked as failed. Default: `30` seconds.
     * 
     */
    public Output<Optional<Integer>> haVmFailureInterval() {
        return Codegen.optional(this.haVmFailureInterval);
    }
    /**
     * The time, in seconds, for the reset window in
     * which `ha_vm_maximum_resets` can operate. When this
     * window expires, no more resets are attempted regardless of the setting
     * configured in `ha_vm_maximum_resets`. `-1` means no window, meaning an
     * unlimited reset time is allotted. Default: `-1` (no window).
     * 
     */
    @Export(name="haVmMaximumFailureWindow", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> haVmMaximumFailureWindow;

    /**
     * @return The time, in seconds, for the reset window in
     * which `ha_vm_maximum_resets` can operate. When this
     * window expires, no more resets are attempted regardless of the setting
     * configured in `ha_vm_maximum_resets`. `-1` means no window, meaning an
     * unlimited reset time is allotted. Default: `-1` (no window).
     * 
     */
    public Output<Optional<Integer>> haVmMaximumFailureWindow() {
        return Codegen.optional(this.haVmMaximumFailureWindow);
    }
    /**
     * The maximum number of resets that HA will
     * perform to a virtual machine when responding to a failure event. Default: `3`
     * 
     */
    @Export(name="haVmMaximumResets", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> haVmMaximumResets;

    /**
     * @return The maximum number of resets that HA will
     * perform to a virtual machine when responding to a failure event. Default: `3`
     * 
     */
    public Output<Optional<Integer>> haVmMaximumResets() {
        return Codegen.optional(this.haVmMaximumResets);
    }
    /**
     * The time, in seconds, that HA waits after
     * powering on a virtual machine before monitoring for heartbeats. Default:
     * `120` seconds (2 minutes).
     * 
     */
    @Export(name="haVmMinimumUptime", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> haVmMinimumUptime;

    /**
     * @return The time, in seconds, that HA waits after
     * powering on a virtual machine before monitoring for heartbeats. Default:
     * `120` seconds (2 minutes).
     * 
     */
    public Output<Optional<Integer>> haVmMinimumUptime() {
        return Codegen.optional(this.haVmMinimumUptime);
    }
    /**
     * The type of virtual machine monitoring to use
     * when HA is enabled in the cluster. Can be one of `vmMonitoringDisabled`,
     * `vmMonitoringOnly`, or `vmAndAppMonitoring`. Default: `vmMonitoringDisabled`.
     * 
     */
    @Export(name="haVmMonitoring", type=String.class, parameters={})
    private Output</* @Nullable */ String> haVmMonitoring;

    /**
     * @return The type of virtual machine monitoring to use
     * when HA is enabled in the cluster. Can be one of `vmMonitoringDisabled`,
     * `vmMonitoringOnly`, or `vmAndAppMonitoring`. Default: `vmMonitoringDisabled`.
     * 
     */
    public Output<Optional<String>> haVmMonitoring() {
        return Codegen.optional(this.haVmMonitoring);
    }
    /**
     * Additional delay, in seconds,
     * after ready condition is met. A VM is considered ready at this point.
     * Default: `0` seconds (no delay). &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="haVmRestartAdditionalDelay", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> haVmRestartAdditionalDelay;

    /**
     * @return Additional delay, in seconds,
     * after ready condition is met. A VM is considered ready at this point.
     * Default: `0` seconds (no delay). &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<Integer>> haVmRestartAdditionalDelay() {
        return Codegen.optional(this.haVmRestartAdditionalDelay);
    }
    /**
     * The default restart priority
     * for affected virtual machines when vSphere detects a host failure. Can be one
     * of `lowest`, `low`, `medium`, `high`, or `highest`. Default: `medium`.
     * 
     */
    @Export(name="haVmRestartPriority", type=String.class, parameters={})
    private Output</* @Nullable */ String> haVmRestartPriority;

    /**
     * @return The default restart priority
     * for affected virtual machines when vSphere detects a host failure. Can be one
     * of `lowest`, `low`, `medium`, `high`, or `highest`. Default: `medium`.
     * 
     */
    public Output<Optional<String>> haVmRestartPriority() {
        return Codegen.optional(this.haVmRestartPriority);
    }
    /**
     * The maximum time, in seconds,
     * that vSphere HA will wait for virtual machines in one priority to be ready
     * before proceeding with the next priority. Default: `600` seconds (10 minutes).
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="haVmRestartTimeout", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> haVmRestartTimeout;

    /**
     * @return The maximum time, in seconds,
     * that vSphere HA will wait for virtual machines in one priority to be ready
     * before proceeding with the next priority. Default: `600` seconds (10 minutes).
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<Integer>> haVmRestartTimeout() {
        return Codegen.optional(this.haVmRestartTimeout);
    }
    /**
     * The timeout, in seconds, for each host maintenance
     * mode operation when removing hosts from a cluster. Default: `3600` seconds (1 hour).
     * 
     */
    @Export(name="hostClusterExitTimeout", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> hostClusterExitTimeout;

    /**
     * @return The timeout, in seconds, for each host maintenance
     * mode operation when removing hosts from a cluster. Default: `3600` seconds (1 hour).
     * 
     */
    public Output<Optional<Integer>> hostClusterExitTimeout() {
        return Codegen.optional(this.hostClusterExitTimeout);
    }
    /**
     * Can be set to `true` if compute cluster
     * membership will be managed through the `host` resource rather than the
     * `compute_cluster` resource. Conflicts with: `host_system_ids`.
     * 
     */
    @Export(name="hostManaged", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> hostManaged;

    /**
     * @return Can be set to `true` if compute cluster
     * membership will be managed through the `host` resource rather than the
     * `compute_cluster` resource. Conflicts with: `host_system_ids`.
     * 
     */
    public Output<Optional<Boolean>> hostManaged() {
        return Codegen.optional(this.hostManaged);
    }
    /**
     * The managed object IDs of
     * the hosts to put in the cluster. Conflicts with: `host_managed`.
     * 
     */
    @Export(name="hostSystemIds", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> hostSystemIds;

    /**
     * @return The managed object IDs of
     * the hosts to put in the cluster. Conflicts with: `host_managed`.
     * 
     */
    public Output<Optional<List<String>>> hostSystemIds() {
        return Codegen.optional(this.hostSystemIds);
    }
    /**
     * The name of the cluster.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the cluster.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Determines how the host
     * quarantine, maintenance mode, or virtual machine migration recommendations
     * made by proactive HA are to be handled. Can be one of `Automated` or
     * `Manual`. Default: `Manual`. &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="proactiveHaAutomationLevel", type=String.class, parameters={})
    private Output</* @Nullable */ String> proactiveHaAutomationLevel;

    /**
     * @return Determines how the host
     * quarantine, maintenance mode, or virtual machine migration recommendations
     * made by proactive HA are to be handled. Can be one of `Automated` or
     * `Manual`. Default: `Manual`. &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<String>> proactiveHaAutomationLevel() {
        return Codegen.optional(this.proactiveHaAutomationLevel);
    }
    /**
     * Enables Proactive HA. Default: `false`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="proactiveHaEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> proactiveHaEnabled;

    /**
     * @return Enables Proactive HA. Default: `false`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<Boolean>> proactiveHaEnabled() {
        return Codegen.optional(this.proactiveHaEnabled);
    }
    /**
     * The configured remediation
     * for moderately degraded hosts. Can be one of `MaintenanceMode` or
     * `QuarantineMode`. Note that this cannot be set to `MaintenanceMode` when
     * `proactive_ha_severe_remediation` is set
     * to `QuarantineMode`. Default: `QuarantineMode`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="proactiveHaModerateRemediation", type=String.class, parameters={})
    private Output</* @Nullable */ String> proactiveHaModerateRemediation;

    /**
     * @return The configured remediation
     * for moderately degraded hosts. Can be one of `MaintenanceMode` or
     * `QuarantineMode`. Note that this cannot be set to `MaintenanceMode` when
     * `proactive_ha_severe_remediation` is set
     * to `QuarantineMode`. Default: `QuarantineMode`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<String>> proactiveHaModerateRemediation() {
        return Codegen.optional(this.proactiveHaModerateRemediation);
    }
    /**
     * The list of IDs for health update
     * providers configured for this cluster.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="proactiveHaProviderIds", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> proactiveHaProviderIds;

    /**
     * @return The list of IDs for health update
     * providers configured for this cluster.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<List<String>>> proactiveHaProviderIds() {
        return Codegen.optional(this.proactiveHaProviderIds);
    }
    /**
     * The configured remediation for
     * severely degraded hosts. Can be one of `MaintenanceMode` or `QuarantineMode`.
     * Note that this cannot be set to `QuarantineMode` when
     * `proactive_ha_moderate_remediation` is
     * set to `MaintenanceMode`. Default: `QuarantineMode`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    @Export(name="proactiveHaSevereRemediation", type=String.class, parameters={})
    private Output</* @Nullable */ String> proactiveHaSevereRemediation;

    /**
     * @return The configured remediation for
     * severely degraded hosts. Can be one of `MaintenanceMode` or `QuarantineMode`.
     * Note that this cannot be set to `QuarantineMode` when
     * `proactive_ha_moderate_remediation` is
     * set to `MaintenanceMode`. Default: `QuarantineMode`.
     * &lt;sup&gt;\*&lt;/sup&gt;
     * 
     */
    public Output<Optional<String>> proactiveHaSevereRemediation() {
        return Codegen.optional(this.proactiveHaSevereRemediation);
    }
    /**
     * The managed object ID of the primary
     * resource pool for this cluster. This can be passed directly to the
     * `resource_pool_id`
     * attribute of the
     * `vsphere.VirtualMachine` resource.
     * 
     */
    @Export(name="resourcePoolId", type=String.class, parameters={})
    private Output<String> resourcePoolId;

    /**
     * @return The managed object ID of the primary
     * resource pool for this cluster. This can be passed directly to the
     * `resource_pool_id`
     * attribute of the
     * `vsphere.VirtualMachine` resource.
     * 
     */
    public Output<String> resourcePoolId() {
        return this.resourcePoolId;
    }
    /**
     * The IDs of any tags to attach to this resource.
     * 
     */
    @Export(name="tags", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return The IDs of any tags to attach to this resource.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Enables vSAN compression on the
     * cluster.
     * 
     */
    @Export(name="vsanCompressionEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> vsanCompressionEnabled;

    /**
     * @return Enables vSAN compression on the
     * cluster.
     * 
     */
    public Output<Optional<Boolean>> vsanCompressionEnabled() {
        return Codegen.optional(this.vsanCompressionEnabled);
    }
    /**
     * Enables vSAN deduplication on the cluster.
     * Cannot be independently set to true. When vSAN deduplication is enabled, vSAN
     * compression must also be enabled.
     * 
     */
    @Export(name="vsanDedupEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> vsanDedupEnabled;

    /**
     * @return Enables vSAN deduplication on the cluster.
     * Cannot be independently set to true. When vSAN deduplication is enabled, vSAN
     * compression must also be enabled.
     * 
     */
    public Output<Optional<Boolean>> vsanDedupEnabled() {
        return Codegen.optional(this.vsanDedupEnabled);
    }
    /**
     * Represents the configuration of a host disk
     * group in the cluster.
     * 
     */
    @Export(name="vsanDiskGroups", type=List.class, parameters={ComputeClusterVsanDiskGroup.class})
    private Output<List<ComputeClusterVsanDiskGroup>> vsanDiskGroups;

    /**
     * @return Represents the configuration of a host disk
     * group in the cluster.
     * 
     */
    public Output<List<ComputeClusterVsanDiskGroup>> vsanDiskGroups() {
        return this.vsanDiskGroups;
    }
    /**
     * Enables vSAN data-in-transit
     * encryption on the cluster. Conflicts with `vsan_remote_datastore_ids`, i.e.,
     * vSAN data-in-transit feature cannot be enabled with the vSAN HCI Mesh feature
     * at the same time.
     * 
     */
    @Export(name="vsanDitEncryptionEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> vsanDitEncryptionEnabled;

    /**
     * @return Enables vSAN data-in-transit
     * encryption on the cluster. Conflicts with `vsan_remote_datastore_ids`, i.e.,
     * vSAN data-in-transit feature cannot be enabled with the vSAN HCI Mesh feature
     * at the same time.
     * 
     */
    public Output<Optional<Boolean>> vsanDitEncryptionEnabled() {
        return Codegen.optional(this.vsanDitEncryptionEnabled);
    }
    /**
     * Indicates the rekey interval in
     * minutes for data-in-transit encryption. The valid rekey interval is 30 to
     * 10800 (feature defaults to 1440). Conflicts with `vsan_remote_datastore_ids`.
     * 
     */
    @Export(name="vsanDitRekeyInterval", type=Integer.class, parameters={})
    private Output<Integer> vsanDitRekeyInterval;

    /**
     * @return Indicates the rekey interval in
     * minutes for data-in-transit encryption. The valid rekey interval is 30 to
     * 10800 (feature defaults to 1440). Conflicts with `vsan_remote_datastore_ids`.
     * 
     */
    public Output<Integer> vsanDitRekeyInterval() {
        return this.vsanDitRekeyInterval;
    }
    /**
     * Enables vSAN on the cluster.
     * 
     */
    @Export(name="vsanEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> vsanEnabled;

    /**
     * @return Enables vSAN on the cluster.
     * 
     */
    public Output<Optional<Boolean>> vsanEnabled() {
        return Codegen.optional(this.vsanEnabled);
    }
    /**
     * Enables network
     * diagnostic mode for vSAN performance service on the cluster.
     * 
     */
    @Export(name="vsanNetworkDiagnosticModeEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> vsanNetworkDiagnosticModeEnabled;

    /**
     * @return Enables network
     * diagnostic mode for vSAN performance service on the cluster.
     * 
     */
    public Output<Optional<Boolean>> vsanNetworkDiagnosticModeEnabled() {
        return Codegen.optional(this.vsanNetworkDiagnosticModeEnabled);
    }
    /**
     * Enables vSAN performance service on
     * the cluster. Default: `true`.
     * 
     */
    @Export(name="vsanPerformanceEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> vsanPerformanceEnabled;

    /**
     * @return Enables vSAN performance service on
     * the cluster. Default: `true`.
     * 
     */
    public Output<Optional<Boolean>> vsanPerformanceEnabled() {
        return Codegen.optional(this.vsanPerformanceEnabled);
    }
    /**
     * The remote vSAN datastore IDs to be
     * mounted to this cluster. Conflicts with `vsan_dit_encryption_enabled` and
     * `vsan_dit_rekey_interval`, i.e., vSAN HCI Mesh feature cannot be enabled with
     * data-in-transit encryption feature at the same time.
     * 
     */
    @Export(name="vsanRemoteDatastoreIds", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> vsanRemoteDatastoreIds;

    /**
     * @return The remote vSAN datastore IDs to be
     * mounted to this cluster. Conflicts with `vsan_dit_encryption_enabled` and
     * `vsan_dit_rekey_interval`, i.e., vSAN HCI Mesh feature cannot be enabled with
     * data-in-transit encryption feature at the same time.
     * 
     */
    public Output<Optional<List<String>>> vsanRemoteDatastoreIds() {
        return Codegen.optional(this.vsanRemoteDatastoreIds);
    }
    /**
     * Enables vSAN unmap on the cluster.
     * 
     */
    @Export(name="vsanUnmapEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> vsanUnmapEnabled;

    /**
     * @return Enables vSAN unmap on the cluster.
     * 
     */
    public Output<Optional<Boolean>> vsanUnmapEnabled() {
        return Codegen.optional(this.vsanUnmapEnabled);
    }
    /**
     * Enables verbose mode for vSAN
     * performance service on the cluster.
     * 
     */
    @Export(name="vsanVerboseModeEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> vsanVerboseModeEnabled;

    /**
     * @return Enables verbose mode for vSAN
     * performance service on the cluster.
     * 
     */
    public Output<Optional<Boolean>> vsanVerboseModeEnabled() {
        return Codegen.optional(this.vsanVerboseModeEnabled);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ComputeCluster(String name) {
        this(name, ComputeClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ComputeCluster(String name, ComputeClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ComputeCluster(String name, ComputeClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/computeCluster:ComputeCluster", name, args == null ? ComputeClusterArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ComputeCluster(String name, Output<String> id, @Nullable ComputeClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/computeCluster:ComputeCluster", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ComputeCluster get(String name, Output<String> id, @Nullable ComputeClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ComputeCluster(name, id, state, options);
    }
}
