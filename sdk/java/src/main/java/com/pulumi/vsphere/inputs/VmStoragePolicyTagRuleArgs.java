// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VmStoragePolicyTagRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final VmStoragePolicyTagRuleArgs Empty = new VmStoragePolicyTagRuleArgs();

    /**
     * Include datastores with the given tags or exclude. Default `true`.
     * 
     */
    @Import(name="includeDatastoresWithTags")
    private @Nullable Output<Boolean> includeDatastoresWithTags;

    /**
     * @return Include datastores with the given tags or exclude. Default `true`.
     * 
     */
    public Optional<Output<Boolean>> includeDatastoresWithTags() {
        return Optional.ofNullable(this.includeDatastoresWithTags);
    }

    /**
     * Name of the tag category.
     * 
     */
    @Import(name="tagCategory", required=true)
    private Output<String> tagCategory;

    /**
     * @return Name of the tag category.
     * 
     */
    public Output<String> tagCategory() {
        return this.tagCategory;
    }

    /**
     * List of Name of tags to select from the given category.
     * 
     */
    @Import(name="tags", required=true)
    private Output<List<String>> tags;

    /**
     * @return List of Name of tags to select from the given category.
     * 
     */
    public Output<List<String>> tags() {
        return this.tags;
    }

    private VmStoragePolicyTagRuleArgs() {}

    private VmStoragePolicyTagRuleArgs(VmStoragePolicyTagRuleArgs $) {
        this.includeDatastoresWithTags = $.includeDatastoresWithTags;
        this.tagCategory = $.tagCategory;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmStoragePolicyTagRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmStoragePolicyTagRuleArgs $;

        public Builder() {
            $ = new VmStoragePolicyTagRuleArgs();
        }

        public Builder(VmStoragePolicyTagRuleArgs defaults) {
            $ = new VmStoragePolicyTagRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param includeDatastoresWithTags Include datastores with the given tags or exclude. Default `true`.
         * 
         * @return builder
         * 
         */
        public Builder includeDatastoresWithTags(@Nullable Output<Boolean> includeDatastoresWithTags) {
            $.includeDatastoresWithTags = includeDatastoresWithTags;
            return this;
        }

        /**
         * @param includeDatastoresWithTags Include datastores with the given tags or exclude. Default `true`.
         * 
         * @return builder
         * 
         */
        public Builder includeDatastoresWithTags(Boolean includeDatastoresWithTags) {
            return includeDatastoresWithTags(Output.of(includeDatastoresWithTags));
        }

        /**
         * @param tagCategory Name of the tag category.
         * 
         * @return builder
         * 
         */
        public Builder tagCategory(Output<String> tagCategory) {
            $.tagCategory = tagCategory;
            return this;
        }

        /**
         * @param tagCategory Name of the tag category.
         * 
         * @return builder
         * 
         */
        public Builder tagCategory(String tagCategory) {
            return tagCategory(Output.of(tagCategory));
        }

        /**
         * @param tags List of Name of tags to select from the given category.
         * 
         * @return builder
         * 
         */
        public Builder tags(Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags List of Name of tags to select from the given category.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags List of Name of tags to select from the given category.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public VmStoragePolicyTagRuleArgs build() {
            $.tagCategory = Objects.requireNonNull($.tagCategory, "expected parameter 'tagCategory' to be non-null");
            $.tags = Objects.requireNonNull($.tags, "expected parameter 'tags' to be non-null");
            return $;
        }
    }

}
