// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class SupervisorManagementNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final SupervisorManagementNetworkArgs Empty = new SupervisorManagementNetworkArgs();

    /**
     * Number of addresses to allocate. Starts from &#39;starting_address&#39;
     * 
     */
    @Import(name="addressCount", required=true)
    private Output<Integer> addressCount;

    /**
     * @return Number of addresses to allocate. Starts from &#39;starting_address&#39;
     * 
     */
    public Output<Integer> addressCount() {
        return this.addressCount;
    }

    /**
     * Gateway IP address.
     * 
     */
    @Import(name="gateway", required=true)
    private Output<String> gateway;

    /**
     * @return Gateway IP address.
     * 
     */
    public Output<String> gateway() {
        return this.gateway;
    }

    /**
     * ID of the network. (e.g. a distributed port group).
     * 
     */
    @Import(name="network", required=true)
    private Output<String> network;

    /**
     * @return ID of the network. (e.g. a distributed port group).
     * 
     */
    public Output<String> network() {
        return this.network;
    }

    /**
     * Starting address of the management network range.
     * 
     */
    @Import(name="startingAddress", required=true)
    private Output<String> startingAddress;

    /**
     * @return Starting address of the management network range.
     * 
     */
    public Output<String> startingAddress() {
        return this.startingAddress;
    }

    /**
     * Subnet mask.
     * 
     */
    @Import(name="subnetMask", required=true)
    private Output<String> subnetMask;

    /**
     * @return Subnet mask.
     * 
     */
    public Output<String> subnetMask() {
        return this.subnetMask;
    }

    private SupervisorManagementNetworkArgs() {}

    private SupervisorManagementNetworkArgs(SupervisorManagementNetworkArgs $) {
        this.addressCount = $.addressCount;
        this.gateway = $.gateway;
        this.network = $.network;
        this.startingAddress = $.startingAddress;
        this.subnetMask = $.subnetMask;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SupervisorManagementNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SupervisorManagementNetworkArgs $;

        public Builder() {
            $ = new SupervisorManagementNetworkArgs();
        }

        public Builder(SupervisorManagementNetworkArgs defaults) {
            $ = new SupervisorManagementNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressCount Number of addresses to allocate. Starts from &#39;starting_address&#39;
         * 
         * @return builder
         * 
         */
        public Builder addressCount(Output<Integer> addressCount) {
            $.addressCount = addressCount;
            return this;
        }

        /**
         * @param addressCount Number of addresses to allocate. Starts from &#39;starting_address&#39;
         * 
         * @return builder
         * 
         */
        public Builder addressCount(Integer addressCount) {
            return addressCount(Output.of(addressCount));
        }

        /**
         * @param gateway Gateway IP address.
         * 
         * @return builder
         * 
         */
        public Builder gateway(Output<String> gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param gateway Gateway IP address.
         * 
         * @return builder
         * 
         */
        public Builder gateway(String gateway) {
            return gateway(Output.of(gateway));
        }

        /**
         * @param network ID of the network. (e.g. a distributed port group).
         * 
         * @return builder
         * 
         */
        public Builder network(Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network ID of the network. (e.g. a distributed port group).
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param startingAddress Starting address of the management network range.
         * 
         * @return builder
         * 
         */
        public Builder startingAddress(Output<String> startingAddress) {
            $.startingAddress = startingAddress;
            return this;
        }

        /**
         * @param startingAddress Starting address of the management network range.
         * 
         * @return builder
         * 
         */
        public Builder startingAddress(String startingAddress) {
            return startingAddress(Output.of(startingAddress));
        }

        /**
         * @param subnetMask Subnet mask.
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(Output<String> subnetMask) {
            $.subnetMask = subnetMask;
            return this;
        }

        /**
         * @param subnetMask Subnet mask.
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(String subnetMask) {
            return subnetMask(Output.of(subnetMask));
        }

        public SupervisorManagementNetworkArgs build() {
            if ($.addressCount == null) {
                throw new MissingRequiredPropertyException("SupervisorManagementNetworkArgs", "addressCount");
            }
            if ($.gateway == null) {
                throw new MissingRequiredPropertyException("SupervisorManagementNetworkArgs", "gateway");
            }
            if ($.network == null) {
                throw new MissingRequiredPropertyException("SupervisorManagementNetworkArgs", "network");
            }
            if ($.startingAddress == null) {
                throw new MissingRequiredPropertyException("SupervisorManagementNetworkArgs", "startingAddress");
            }
            if ($.subnetMask == null) {
                throw new MissingRequiredPropertyException("SupervisorManagementNetworkArgs", "subnetMask");
            }
            return $;
        }
    }

}
