// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDatastoreClusterArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDatastoreClusterArgs Empty = new GetDatastoreClusterArgs();

    /**
     * The managed object reference
     * ID of the datacenter the datastore cluster is located in.
     * This can be omitted if the search path used in `name` is an absolute path.
     * For default datacenters, use the id attribute from an empty
     * `vsphere.Datacenter` data source.
     * 
     */
    @Import(name="datacenterId")
    private @Nullable Output<String> datacenterId;

    /**
     * @return The managed object reference
     * ID of the datacenter the datastore cluster is located in.
     * This can be omitted if the search path used in `name` is an absolute path.
     * For default datacenters, use the id attribute from an empty
     * `vsphere.Datacenter` data source.
     * 
     */
    public Optional<Output<String>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    /**
     * The name or absolute path to the datastore cluster.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name or absolute path to the datastore cluster.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private GetDatastoreClusterArgs() {}

    private GetDatastoreClusterArgs(GetDatastoreClusterArgs $) {
        this.datacenterId = $.datacenterId;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatastoreClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatastoreClusterArgs $;

        public Builder() {
            $ = new GetDatastoreClusterArgs();
        }

        public Builder(GetDatastoreClusterArgs defaults) {
            $ = new GetDatastoreClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId The managed object reference
         * ID of the datacenter the datastore cluster is located in.
         * This can be omitted if the search path used in `name` is an absolute path.
         * For default datacenters, use the id attribute from an empty
         * `vsphere.Datacenter` data source.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(@Nullable Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId The managed object reference
         * ID of the datacenter the datastore cluster is located in.
         * This can be omitted if the search path used in `name` is an absolute path.
         * For default datacenters, use the id attribute from an empty
         * `vsphere.Datacenter` data source.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param name The name or absolute path to the datastore cluster.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name or absolute path to the datastore cluster.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GetDatastoreClusterArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
