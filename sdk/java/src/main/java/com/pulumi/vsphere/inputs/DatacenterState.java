// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatacenterState extends com.pulumi.resources.ResourceArgs {

    public static final DatacenterState Empty = new DatacenterState();

    /**
     * Map of custom attribute ids to value
     * strings to set for datacenter resource. See
     * [here](https://www.terraform.io/docs/providers/vsphere/r/custom_attribute.html#using-custom-attributes-in-a-supported-resource) for a reference on how to set values
     * for custom attributes.
     * 
     * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi connections
     * and require vCenter.
     * 
     */
    @Import(name="customAttributes")
    private @Nullable Output<Map<String,String>> customAttributes;

    /**
     * @return Map of custom attribute ids to value
     * strings to set for datacenter resource. See
     * [here](https://www.terraform.io/docs/providers/vsphere/r/custom_attribute.html#using-custom-attributes-in-a-supported-resource) for a reference on how to set values
     * for custom attributes.
     * 
     * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi connections
     * and require vCenter.
     * 
     */
    public Optional<Output<Map<String,String>>> customAttributes() {
        return Optional.ofNullable(this.customAttributes);
    }

    /**
     * The folder where the datacenter should be created.
     * Forces a new resource if changed.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return The folder where the datacenter should be created.
     * Forces a new resource if changed.
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * Managed object ID of this datacenter.
     * 
     */
    @Import(name="moid")
    private @Nullable Output<String> moid;

    /**
     * @return Managed object ID of this datacenter.
     * 
     */
    public Optional<Output<String>> moid() {
        return Optional.ofNullable(this.moid);
    }

    /**
     * The name of the datacenter. This name needs to be unique
     * within the folder. Forces a new resource if changed.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the datacenter. This name needs to be unique
     * within the folder. Forces a new resource if changed.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The IDs of any tags to attach to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The IDs of any tags to attach to this resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DatacenterState() {}

    private DatacenterState(DatacenterState $) {
        this.customAttributes = $.customAttributes;
        this.folder = $.folder;
        this.moid = $.moid;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatacenterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatacenterState $;

        public Builder() {
            $ = new DatacenterState();
        }

        public Builder(DatacenterState defaults) {
            $ = new DatacenterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param customAttributes Map of custom attribute ids to value
         * strings to set for datacenter resource. See
         * [here](https://www.terraform.io/docs/providers/vsphere/r/custom_attribute.html#using-custom-attributes-in-a-supported-resource) for a reference on how to set values
         * for custom attributes.
         * 
         * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi connections
         * and require vCenter.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(@Nullable Output<Map<String,String>> customAttributes) {
            $.customAttributes = customAttributes;
            return this;
        }

        /**
         * @param customAttributes Map of custom attribute ids to value
         * strings to set for datacenter resource. See
         * [here](https://www.terraform.io/docs/providers/vsphere/r/custom_attribute.html#using-custom-attributes-in-a-supported-resource) for a reference on how to set values
         * for custom attributes.
         * 
         * &gt; **NOTE:** Custom attributes are unsupported on direct ESXi connections
         * and require vCenter.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(Map<String,String> customAttributes) {
            return customAttributes(Output.of(customAttributes));
        }

        /**
         * @param folder The folder where the datacenter should be created.
         * Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The folder where the datacenter should be created.
         * Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param moid Managed object ID of this datacenter.
         * 
         * @return builder
         * 
         */
        public Builder moid(@Nullable Output<String> moid) {
            $.moid = moid;
            return this;
        }

        /**
         * @param moid Managed object ID of this datacenter.
         * 
         * @return builder
         * 
         */
        public Builder moid(String moid) {
            return moid(Output.of(moid));
        }

        /**
         * @param name The name of the datacenter. This name needs to be unique
         * within the folder. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the datacenter. This name needs to be unique
         * within the folder. Forces a new resource if changed.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags The IDs of any tags to attach to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The IDs of any tags to attach to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The IDs of any tags to attach to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public DatacenterState build() {
            return $;
        }
    }

}
