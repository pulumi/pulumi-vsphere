// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetTagArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTagArgs Empty = new GetTagArgs();

    /**
     * The ID of the tag category in which the tag is
     * located.
     * 
     */
    @Import(name="categoryId", required=true)
    private Output<String> categoryId;

    /**
     * @return The ID of the tag category in which the tag is
     * located.
     * 
     */
    public Output<String> categoryId() {
        return this.categoryId;
    }

    /**
     * The name of the tag.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the tag.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private GetTagArgs() {}

    private GetTagArgs(GetTagArgs $) {
        this.categoryId = $.categoryId;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTagArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTagArgs $;

        public Builder() {
            $ = new GetTagArgs();
        }

        public Builder(GetTagArgs defaults) {
            $ = new GetTagArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param categoryId The ID of the tag category in which the tag is
         * located.
         * 
         * @return builder
         * 
         */
        public Builder categoryId(Output<String> categoryId) {
            $.categoryId = categoryId;
            return this;
        }

        /**
         * @param categoryId The ID of the tag category in which the tag is
         * located.
         * 
         * @return builder
         * 
         */
        public Builder categoryId(String categoryId) {
            return categoryId(Output.of(categoryId));
        }

        /**
         * @param name The name of the tag.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the tag.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GetTagArgs build() {
            if ($.categoryId == null) {
                throw new MissingRequiredPropertyException("GetTagArgs", "categoryId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetTagArgs", "name");
            }
            return $;
        }
    }

}
