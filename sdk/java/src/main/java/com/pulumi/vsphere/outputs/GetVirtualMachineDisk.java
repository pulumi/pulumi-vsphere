// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVirtualMachineDisk {
    /**
     * @return Set to `true` if the disk has been eager zeroed.
     * 
     */
    private Boolean eagerlyScrub;
    /**
     * @return The label for the disk.
     * 
     */
    private String label;
    /**
     * @return The size of the disk, in GIB.
     * 
     */
    private Integer size;
    /**
     * @return Set to `true` if the disk has been thin provisioned.
     * 
     */
    private Boolean thinProvisioned;
    /**
     * @return The disk number on the storage bus.
     * 
     */
    private Integer unitNumber;

    private GetVirtualMachineDisk() {}
    /**
     * @return Set to `true` if the disk has been eager zeroed.
     * 
     */
    public Boolean eagerlyScrub() {
        return this.eagerlyScrub;
    }
    /**
     * @return The label for the disk.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return The size of the disk, in GIB.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return Set to `true` if the disk has been thin provisioned.
     * 
     */
    public Boolean thinProvisioned() {
        return this.thinProvisioned;
    }
    /**
     * @return The disk number on the storage bus.
     * 
     */
    public Integer unitNumber() {
        return this.unitNumber;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualMachineDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean eagerlyScrub;
        private String label;
        private Integer size;
        private Boolean thinProvisioned;
        private Integer unitNumber;
        public Builder() {}
        public Builder(GetVirtualMachineDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eagerlyScrub = defaults.eagerlyScrub;
    	      this.label = defaults.label;
    	      this.size = defaults.size;
    	      this.thinProvisioned = defaults.thinProvisioned;
    	      this.unitNumber = defaults.unitNumber;
        }

        @CustomType.Setter
        public Builder eagerlyScrub(Boolean eagerlyScrub) {
            if (eagerlyScrub == null) {
              throw new MissingRequiredPropertyException("GetVirtualMachineDisk", "eagerlyScrub");
            }
            this.eagerlyScrub = eagerlyScrub;
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            if (label == null) {
              throw new MissingRequiredPropertyException("GetVirtualMachineDisk", "label");
            }
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetVirtualMachineDisk", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder thinProvisioned(Boolean thinProvisioned) {
            if (thinProvisioned == null) {
              throw new MissingRequiredPropertyException("GetVirtualMachineDisk", "thinProvisioned");
            }
            this.thinProvisioned = thinProvisioned;
            return this;
        }
        @CustomType.Setter
        public Builder unitNumber(Integer unitNumber) {
            if (unitNumber == null) {
              throw new MissingRequiredPropertyException("GetVirtualMachineDisk", "unitNumber");
            }
            this.unitNumber = unitNumber;
            return this;
        }
        public GetVirtualMachineDisk build() {
            final var _resultValue = new GetVirtualMachineDisk();
            _resultValue.eagerlyScrub = eagerlyScrub;
            _resultValue.label = label;
            _resultValue.size = size;
            _resultValue.thinProvisioned = thinProvisioned;
            _resultValue.unitNumber = unitNumber;
            return _resultValue;
        }
    }
}
