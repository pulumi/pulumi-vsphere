// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.vsphere.inputs.VirtualMachineCdromArgs;
import com.pulumi.vsphere.inputs.VirtualMachineCloneArgs;
import com.pulumi.vsphere.inputs.VirtualMachineDiskArgs;
import com.pulumi.vsphere.inputs.VirtualMachineNetworkInterfaceArgs;
import com.pulumi.vsphere.inputs.VirtualMachineOvfDeployArgs;
import com.pulumi.vsphere.inputs.VirtualMachineVappArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineState extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineState Empty = new VirtualMachineState();

    /**
     * The guest name for the operating system when `guest_id` is `otherGuest` or `otherGuest64`.
     * 
     */
    @Import(name="alternateGuestName")
    private @Nullable Output<String> alternateGuestName;

    /**
     * @return The guest name for the operating system when `guest_id` is `otherGuest` or `otherGuest64`.
     * 
     */
    public Optional<Output<String>> alternateGuestName() {
        return Optional.ofNullable(this.alternateGuestName);
    }

    /**
     * A user-provided description of the virtual machine.
     * 
     */
    @Import(name="annotation")
    private @Nullable Output<String> annotation;

    /**
     * @return A user-provided description of the virtual machine.
     * 
     */
    public Optional<Output<String>> annotation() {
        return Optional.ofNullable(this.annotation);
    }

    /**
     * The number of milliseconds to wait before starting the boot sequence. The default is no delay.
     * 
     */
    @Import(name="bootDelay")
    private @Nullable Output<Integer> bootDelay;

    /**
     * @return The number of milliseconds to wait before starting the boot sequence. The default is no delay.
     * 
     */
    public Optional<Output<Integer>> bootDelay() {
        return Optional.ofNullable(this.bootDelay);
    }

    /**
     * The number of milliseconds to wait before retrying the boot sequence. This option is only valid if `boot_retry_enabled` is `true`. Default: `10000` (10 seconds).
     * 
     */
    @Import(name="bootRetryDelay")
    private @Nullable Output<Integer> bootRetryDelay;

    /**
     * @return The number of milliseconds to wait before retrying the boot sequence. This option is only valid if `boot_retry_enabled` is `true`. Default: `10000` (10 seconds).
     * 
     */
    public Optional<Output<Integer>> bootRetryDelay() {
        return Optional.ofNullable(this.bootRetryDelay);
    }

    /**
     * If set to `true`, a virtual machine that fails to boot will try again after the delay defined in `boot_retry_delay`. Default: `false`.
     * 
     */
    @Import(name="bootRetryEnabled")
    private @Nullable Output<Boolean> bootRetryEnabled;

    /**
     * @return If set to `true`, a virtual machine that fails to boot will try again after the delay defined in `boot_retry_delay`. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> bootRetryEnabled() {
        return Optional.ofNullable(this.bootRetryEnabled);
    }

    /**
     * A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.
     * 
     */
    @Import(name="cdroms")
    private @Nullable Output<List<VirtualMachineCdromArgs>> cdroms;

    /**
     * @return A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.
     * 
     */
    public Optional<Output<List<VirtualMachineCdromArgs>>> cdroms() {
        return Optional.ofNullable(this.cdroms);
    }

    /**
     * A unique identifier for a given version of the last configuration was applied.
     * 
     */
    @Import(name="changeVersion")
    private @Nullable Output<String> changeVersion;

    /**
     * @return A unique identifier for a given version of the last configuration was applied.
     * 
     */
    public Optional<Output<String>> changeVersion() {
        return Optional.ofNullable(this.changeVersion);
    }

    /**
     * When specified, the virtual machine will be created as a clone of a specified template. Optional customization options can be submitted for the resource. See creating a virtual machine from a template for more information.
     * 
     */
    @Import(name="clone")
    private @Nullable Output<VirtualMachineCloneArgs> clone;

    /**
     * @return When specified, the virtual machine will be created as a clone of a specified template. Optional customization options can be submitted for the resource. See creating a virtual machine from a template for more information.
     * 
     */
    public Optional<Output<VirtualMachineCloneArgs>> clone_() {
        return Optional.ofNullable(this.clone);
    }

    /**
     * Allow CPUs to be added to the virtual machine while it is powered on.
     * 
     */
    @Import(name="cpuHotAddEnabled")
    private @Nullable Output<Boolean> cpuHotAddEnabled;

    /**
     * @return Allow CPUs to be added to the virtual machine while it is powered on.
     * 
     */
    public Optional<Output<Boolean>> cpuHotAddEnabled() {
        return Optional.ofNullable(this.cpuHotAddEnabled);
    }

    /**
     * Allow CPUs to be removed to the virtual machine while it is powered on.
     * 
     */
    @Import(name="cpuHotRemoveEnabled")
    private @Nullable Output<Boolean> cpuHotRemoveEnabled;

    /**
     * @return Allow CPUs to be removed to the virtual machine while it is powered on.
     * 
     */
    public Optional<Output<Boolean>> cpuHotRemoveEnabled() {
        return Optional.ofNullable(this.cpuHotRemoveEnabled);
    }

    /**
     * The maximum amount of CPU (in MHz) that the virtual machine can consume, regardless of available resources. The default is no limit.
     * 
     */
    @Import(name="cpuLimit")
    private @Nullable Output<Integer> cpuLimit;

    /**
     * @return The maximum amount of CPU (in MHz) that the virtual machine can consume, regardless of available resources. The default is no limit.
     * 
     */
    public Optional<Output<Integer>> cpuLimit() {
        return Optional.ofNullable(this.cpuLimit);
    }

    /**
     * Enable CPU performance counters on the virtual machine. Default: `false`.
     * 
     */
    @Import(name="cpuPerformanceCountersEnabled")
    private @Nullable Output<Boolean> cpuPerformanceCountersEnabled;

    /**
     * @return Enable CPU performance counters on the virtual machine. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> cpuPerformanceCountersEnabled() {
        return Optional.ofNullable(this.cpuPerformanceCountersEnabled);
    }

    /**
     * The amount of CPU (in MHz) that the virtual machine is guaranteed. The default is no reservation.
     * 
     */
    @Import(name="cpuReservation")
    private @Nullable Output<Integer> cpuReservation;

    /**
     * @return The amount of CPU (in MHz) that the virtual machine is guaranteed. The default is no reservation.
     * 
     */
    public Optional<Output<Integer>> cpuReservation() {
        return Optional.ofNullable(this.cpuReservation);
    }

    /**
     * The number of CPU shares allocated to the virtual machine when the `cpu_share_level` is `custom`.
     * 
     */
    @Import(name="cpuShareCount")
    private @Nullable Output<Integer> cpuShareCount;

    /**
     * @return The number of CPU shares allocated to the virtual machine when the `cpu_share_level` is `custom`.
     * 
     */
    public Optional<Output<Integer>> cpuShareCount() {
        return Optional.ofNullable(this.cpuShareCount);
    }

    /**
     * The allocation level for the virtual machine CPU resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
     * 
     */
    @Import(name="cpuShareLevel")
    private @Nullable Output<String> cpuShareLevel;

    /**
     * @return The allocation level for the virtual machine CPU resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
     * 
     */
    public Optional<Output<String>> cpuShareLevel() {
        return Optional.ofNullable(this.cpuShareLevel);
    }

    /**
     * Map of custom attribute ids to attribute value strings to set for virtual machine. Please refer to the `vsphere_custom_attributes` resource for more information on setting custom attributes.
     * 
     * &gt; **NOTE:** Custom attributes requires vCenter Server and is not supported on direct ESXi host connections.
     * 
     */
    @Import(name="customAttributes")
    private @Nullable Output<Map<String,String>> customAttributes;

    /**
     * @return Map of custom attribute ids to attribute value strings to set for virtual machine. Please refer to the `vsphere_custom_attributes` resource for more information on setting custom attributes.
     * 
     * &gt; **NOTE:** Custom attributes requires vCenter Server and is not supported on direct ESXi host connections.
     * 
     */
    public Optional<Output<Map<String,String>>> customAttributes() {
        return Optional.ofNullable(this.customAttributes);
    }

    /**
     * The datacenter ID. Required only when deploying an OVF/OVA template.
     * 
     */
    @Import(name="datacenterId")
    private @Nullable Output<String> datacenterId;

    /**
     * @return The datacenter ID. Required only when deploying an OVF/OVA template.
     * 
     */
    public Optional<Output<String>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    /**
     * The managed object reference ID of the datastore cluster in which to place the virtual machine. This setting applies to entire virtual machine and implies that you wish to use vSphere Storage DRS with the virtual machine. See the section on virtual machine migration for more information on modifying this value.
     * 
     * &gt; **NOTE:** One of `datastore_id` or `datastore_cluster_id` must be specified.
     * 
     * &gt; **NOTE:** Use of `datastore_cluster_id` requires vSphere Storage DRS to be enabled on the specified datastore cluster.
     * 
     * &gt; **NOTE:** The `datastore_cluster_id` setting applies to the entire virtual machine resource. You cannot assign individual individual disks to datastore clusters. In addition, you cannot use the `attach` setting to attach external disks on virtual machines that are assigned to datastore clusters.
     * 
     */
    @Import(name="datastoreClusterId")
    private @Nullable Output<String> datastoreClusterId;

    /**
     * @return The managed object reference ID of the datastore cluster in which to place the virtual machine. This setting applies to entire virtual machine and implies that you wish to use vSphere Storage DRS with the virtual machine. See the section on virtual machine migration for more information on modifying this value.
     * 
     * &gt; **NOTE:** One of `datastore_id` or `datastore_cluster_id` must be specified.
     * 
     * &gt; **NOTE:** Use of `datastore_cluster_id` requires vSphere Storage DRS to be enabled on the specified datastore cluster.
     * 
     * &gt; **NOTE:** The `datastore_cluster_id` setting applies to the entire virtual machine resource. You cannot assign individual individual disks to datastore clusters. In addition, you cannot use the `attach` setting to attach external disks on virtual machines that are assigned to datastore clusters.
     * 
     */
    public Optional<Output<String>> datastoreClusterId() {
        return Optional.ofNullable(this.datastoreClusterId);
    }

    /**
     * The managed object reference ID of the datastore in which to place the virtual machine. The virtual machine configuration files is placed here, along with any virtual disks that are created where a datastore is not explicitly specified. See the section on virtual machine migration for more information on modifying this value.
     * 
     * &gt; **NOTE:** Datastores cannot be assigned to individual disks when `datastore_cluster_id` is used.
     * 
     */
    @Import(name="datastoreId")
    private @Nullable Output<String> datastoreId;

    /**
     * @return The managed object reference ID of the datastore in which to place the virtual machine. The virtual machine configuration files is placed here, along with any virtual disks that are created where a datastore is not explicitly specified. See the section on virtual machine migration for more information on modifying this value.
     * 
     * &gt; **NOTE:** Datastores cannot be assigned to individual disks when `datastore_cluster_id` is used.
     * 
     */
    public Optional<Output<String>> datastoreId() {
        return Optional.ofNullable(this.datastoreId);
    }

    /**
     * The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
     * 
     */
    @Import(name="defaultIpAddress")
    private @Nullable Output<String> defaultIpAddress;

    /**
     * @return The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
     * 
     */
    public Optional<Output<String>> defaultIpAddress() {
        return Optional.ofNullable(this.defaultIpAddress);
    }

    /**
     * A specification for a virtual disk device on the virtual machine. See disk options for more information.
     * 
     */
    @Import(name="disks")
    private @Nullable Output<List<VirtualMachineDiskArgs>> disks;

    /**
     * @return A specification for a virtual disk device on the virtual machine. See disk options for more information.
     * 
     */
    public Optional<Output<List<VirtualMachineDiskArgs>>> disks() {
        return Optional.ofNullable(this.disks);
    }

    /**
     * Use this option to enable EFI secure boot when the `firmware` type is set to is `efi`. Default: `false`.
     * 
     * &gt; **NOTE:** EFI secure boot is only available on vSphere 6.5 and later.
     * 
     */
    @Import(name="efiSecureBootEnabled")
    private @Nullable Output<Boolean> efiSecureBootEnabled;

    /**
     * @return Use this option to enable EFI secure boot when the `firmware` type is set to is `efi`. Default: `false`.
     * 
     * &gt; **NOTE:** EFI secure boot is only available on vSphere 6.5 and later.
     * 
     */
    public Optional<Output<Boolean>> efiSecureBootEnabled() {
        return Optional.ofNullable(this.efiSecureBootEnabled);
    }

    /**
     * Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest. Default: `false`.
     * 
     */
    @Import(name="enableDiskUuid")
    private @Nullable Output<Boolean> enableDiskUuid;

    /**
     * @return Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> enableDiskUuid() {
        return Optional.ofNullable(this.enableDiskUuid);
    }

    /**
     * Enable logging of virtual machine events to a log file stored in the virtual machine directory. Default: `false`.
     * 
     */
    @Import(name="enableLogging")
    private @Nullable Output<Boolean> enableLogging;

    /**
     * @return Enable logging of virtual machine events to a log file stored in the virtual machine directory. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> enableLogging() {
        return Optional.ofNullable(this.enableLogging);
    }

    /**
     * The EPT/RVI (hardware memory virtualization) setting for the virtual machine. One of `automatic`, `on`, or `off`. Default: `automatic`.
     * 
     */
    @Import(name="eptRviMode")
    private @Nullable Output<String> eptRviMode;

    /**
     * @return The EPT/RVI (hardware memory virtualization) setting for the virtual machine. One of `automatic`, `on`, or `off`. Default: `automatic`.
     * 
     */
    public Optional<Output<String>> eptRviMode() {
        return Optional.ofNullable(this.eptRviMode);
    }

    /**
     * Extra configuration data for the virtual machine. Can be used to supply advanced parameters not normally in configuration, such as instance metadata and userdata.
     * 
     * &gt; **NOTE:** Do not use `extra_config` when working with a template imported from OVF/OVA as your settings may be ignored. Use the `vapp` block `properties` section as described in Using vApp Properties for OVF/OVA Configuration.
     * 
     */
    @Import(name="extraConfig")
    private @Nullable Output<Map<String,String>> extraConfig;

    /**
     * @return Extra configuration data for the virtual machine. Can be used to supply advanced parameters not normally in configuration, such as instance metadata and userdata.
     * 
     * &gt; **NOTE:** Do not use `extra_config` when working with a template imported from OVF/OVA as your settings may be ignored. Use the `vapp` block `properties` section as described in Using vApp Properties for OVF/OVA Configuration.
     * 
     */
    public Optional<Output<Map<String,String>>> extraConfig() {
        return Optional.ofNullable(this.extraConfig);
    }

    /**
     * Allow the virtual machine to be rebooted when a change to `extra_config` occurs. Default: `true`.
     * 
     */
    @Import(name="extraConfigRebootRequired")
    private @Nullable Output<Boolean> extraConfigRebootRequired;

    /**
     * @return Allow the virtual machine to be rebooted when a change to `extra_config` occurs. Default: `true`.
     * 
     */
    public Optional<Output<Boolean>> extraConfigRebootRequired() {
        return Optional.ofNullable(this.extraConfigRebootRequired);
    }

    /**
     * The firmware for the virtual machine. One of `bios` or `efi`.
     * 
     */
    @Import(name="firmware")
    private @Nullable Output<String> firmware;

    /**
     * @return The firmware for the virtual machine. One of `bios` or `efi`.
     * 
     */
    public Optional<Output<String>> firmware() {
        return Optional.ofNullable(this.firmware);
    }

    /**
     * The path to the virtual machine folder in which to place the virtual machine, relative to the datacenter path (`/&lt;datacenter-name&gt;/vm`).  For example, `/dc-01/vm/foo`
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return The path to the virtual machine folder in which to place the virtual machine, relative to the datacenter path (`/&lt;datacenter-name&gt;/vm`).  For example, `/dc-01/vm/foo`
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * If a guest shutdown failed or times out while updating or destroying (see `shutdown_wait_timeout`), force the power-off of the virtual machine. Default: `true`.
     * 
     */
    @Import(name="forcePowerOff")
    private @Nullable Output<Boolean> forcePowerOff;

    /**
     * @return If a guest shutdown failed or times out while updating or destroying (see `shutdown_wait_timeout`), force the power-off of the virtual machine. Default: `true`.
     * 
     */
    public Optional<Output<Boolean>> forcePowerOff() {
        return Optional.ofNullable(this.forcePowerOff);
    }

    /**
     * The guest ID for the operating system type. For a full list of possible values, see [here][vmware-docs-guest-ids]. Default: `otherGuest64`.
     * 
     * [vmware-docs-guest-ids]: https://vdc-download.vmware.com/vmwb-repository/dcr-public/b50dcbbf-051d-4204-a3e7-e1b618c1e384/538cf2ec-b34f-4bae-a332-3820ef9e7773/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
     * 
     */
    @Import(name="guestId")
    private @Nullable Output<String> guestId;

    /**
     * @return The guest ID for the operating system type. For a full list of possible values, see [here][vmware-docs-guest-ids]. Default: `otherGuest64`.
     * 
     * [vmware-docs-guest-ids]: https://vdc-download.vmware.com/vmwb-repository/dcr-public/b50dcbbf-051d-4204-a3e7-e1b618c1e384/538cf2ec-b34f-4bae-a332-3820ef9e7773/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
     * 
     */
    public Optional<Output<String>> guestId() {
        return Optional.ofNullable(this.guestId);
    }

    /**
     * The current list of IP addresses on this machine, including the value of `default_ip_address`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
     * 
     */
    @Import(name="guestIpAddresses")
    private @Nullable Output<List<String>> guestIpAddresses;

    /**
     * @return The current list of IP addresses on this machine, including the value of `default_ip_address`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
     * 
     */
    public Optional<Output<List<String>>> guestIpAddresses() {
        return Optional.ofNullable(this.guestIpAddresses);
    }

    /**
     * The hardware version number. Valid range is from 4 to 19. The hardware version cannot be downgraded. See [virtual machine hardware compatibility][virtual-machine-hardware-compatibility] for more information.
     * 
     * [virtual-machine-hardware-compatibility]: https://kb.vmware.com/s/article/2007240
     * 
     */
    @Import(name="hardwareVersion")
    private @Nullable Output<Integer> hardwareVersion;

    /**
     * @return The hardware version number. Valid range is from 4 to 19. The hardware version cannot be downgraded. See [virtual machine hardware compatibility][virtual-machine-hardware-compatibility] for more information.
     * 
     * [virtual-machine-hardware-compatibility]: https://kb.vmware.com/s/article/2007240
     * 
     */
    public Optional<Output<Integer>> hardwareVersion() {
        return Optional.ofNullable(this.hardwareVersion);
    }

    /**
     * The managed object reference ID of a host on which to place the virtual machine. See the section on virtual machine migration for more information on modifying this value. When using a vSphere cluster, if a `host_system_id` is not supplied, vSphere will select a host in the cluster to place the virtual machine, according to any defaults or vSphere DRS placement policies.
     * 
     */
    @Import(name="hostSystemId")
    private @Nullable Output<String> hostSystemId;

    /**
     * @return The managed object reference ID of a host on which to place the virtual machine. See the section on virtual machine migration for more information on modifying this value. When using a vSphere cluster, if a `host_system_id` is not supplied, vSphere will select a host in the cluster to place the virtual machine, according to any defaults or vSphere DRS placement policies.
     * 
     */
    public Optional<Output<String>> hostSystemId() {
        return Optional.ofNullable(this.hostSystemId);
    }

    /**
     * The hardware virtualization (non-nested) setting for the virtual machine. One of `hvAuto`, `hvOn`, or `hvOff`. Default: `hvAuto`.
     * 
     */
    @Import(name="hvMode")
    private @Nullable Output<String> hvMode;

    /**
     * @return The hardware virtualization (non-nested) setting for the virtual machine. One of `hvAuto`, `hvOn`, or `hvOff`. Default: `hvAuto`.
     * 
     */
    public Optional<Output<String>> hvMode() {
        return Optional.ofNullable(this.hvMode);
    }

    /**
     * The number of IDE controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: `2`.
     * 
     */
    @Import(name="ideControllerCount")
    private @Nullable Output<Integer> ideControllerCount;

    /**
     * @return The number of IDE controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: `2`.
     * 
     */
    public Optional<Output<Integer>> ideControllerCount() {
        return Optional.ofNullable(this.ideControllerCount);
    }

    /**
     * List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: `[]`.
     * 
     */
    @Import(name="ignoredGuestIps")
    private @Nullable Output<List<String>> ignoredGuestIps;

    /**
     * @return List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: `[]`.
     * 
     */
    public Optional<Output<List<String>>> ignoredGuestIps() {
        return Optional.ofNullable(this.ignoredGuestIps);
    }

    /**
     * Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
     * 
     */
    @Import(name="imported")
    private @Nullable Output<Boolean> imported;

    /**
     * @return Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
     * 
     */
    public Optional<Output<Boolean>> imported() {
        return Optional.ofNullable(this.imported);
    }

    /**
     * Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard devices. One of `low`, `normal`, `medium`, or `high`.
     * 
     * &gt; **NOTE:** On higher sensitivities, you may need to adjust the `memory_reservation` to the full amount of memory provisioned for the virtual machine.
     * 
     */
    @Import(name="latencySensitivity")
    private @Nullable Output<String> latencySensitivity;

    /**
     * @return Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard devices. One of `low`, `normal`, `medium`, or `high`.
     * 
     * &gt; **NOTE:** On higher sensitivities, you may need to adjust the `memory_reservation` to the full amount of memory provisioned for the virtual machine.
     * 
     */
    public Optional<Output<String>> latencySensitivity() {
        return Optional.ofNullable(this.latencySensitivity);
    }

    /**
     * The memory size to assign to the virtual machine, in MB. Default: `1024` (1 GB).
     * 
     */
    @Import(name="memory")
    private @Nullable Output<Integer> memory;

    /**
     * @return The memory size to assign to the virtual machine, in MB. Default: `1024` (1 GB).
     * 
     */
    public Optional<Output<Integer>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * Allow memory to be added to the virtual machine while it is powered on.
     * 
     * &gt; **NOTE:** CPU and memory hot add options are not available on all guest operating systems. Please refer to the [VMware Guest OS Compatibility Guide][vmware-docs-compat-guide] to which settings are allow for your guest operating system. In addition, at least one `pulumi up` must be run before you are able to use CPU and memory hot add.
     * 
     * [vmware-docs-compat-guide]: http://partnerweb.vmware.com/comp_guide2/pdf/VMware_GOS_Compatibility_Guide.pdf
     * 
     * &gt; **NOTE:** For Linux 64-bit guest operating systems with less than or equal to 3GB, the virtual machine must powered off to add memory beyond 3GB. Subsequent hot add of memory does not require the virtual machine to be powered-off to apply the plan. Please refer to [VMware KB 2008405][vmware-kb-2008405].
     * 
     * [vmware-kb-2008405]: https://kb.vmware.com/s/article/2008405
     * 
     */
    @Import(name="memoryHotAddEnabled")
    private @Nullable Output<Boolean> memoryHotAddEnabled;

    /**
     * @return Allow memory to be added to the virtual machine while it is powered on.
     * 
     * &gt; **NOTE:** CPU and memory hot add options are not available on all guest operating systems. Please refer to the [VMware Guest OS Compatibility Guide][vmware-docs-compat-guide] to which settings are allow for your guest operating system. In addition, at least one `pulumi up` must be run before you are able to use CPU and memory hot add.
     * 
     * [vmware-docs-compat-guide]: http://partnerweb.vmware.com/comp_guide2/pdf/VMware_GOS_Compatibility_Guide.pdf
     * 
     * &gt; **NOTE:** For Linux 64-bit guest operating systems with less than or equal to 3GB, the virtual machine must powered off to add memory beyond 3GB. Subsequent hot add of memory does not require the virtual machine to be powered-off to apply the plan. Please refer to [VMware KB 2008405][vmware-kb-2008405].
     * 
     * [vmware-kb-2008405]: https://kb.vmware.com/s/article/2008405
     * 
     */
    public Optional<Output<Boolean>> memoryHotAddEnabled() {
        return Optional.ofNullable(this.memoryHotAddEnabled);
    }

    /**
     * The maximum amount of memory (in MB) that th virtual machine can consume, regardless of available resources. The default is no limit.
     * 
     */
    @Import(name="memoryLimit")
    private @Nullable Output<Integer> memoryLimit;

    /**
     * @return The maximum amount of memory (in MB) that th virtual machine can consume, regardless of available resources. The default is no limit.
     * 
     */
    public Optional<Output<Integer>> memoryLimit() {
        return Optional.ofNullable(this.memoryLimit);
    }

    /**
     * The amount of memory (in MB) that the virtual machine is guaranteed. The default is no reservation.
     * 
     */
    @Import(name="memoryReservation")
    private @Nullable Output<Integer> memoryReservation;

    /**
     * @return The amount of memory (in MB) that the virtual machine is guaranteed. The default is no reservation.
     * 
     */
    public Optional<Output<Integer>> memoryReservation() {
        return Optional.ofNullable(this.memoryReservation);
    }

    /**
     * The number of memory shares allocated to the virtual machine when the `memory_share_level` is `custom`.
     * 
     */
    @Import(name="memoryShareCount")
    private @Nullable Output<Integer> memoryShareCount;

    /**
     * @return The number of memory shares allocated to the virtual machine when the `memory_share_level` is `custom`.
     * 
     */
    public Optional<Output<Integer>> memoryShareCount() {
        return Optional.ofNullable(this.memoryShareCount);
    }

    /**
     * The allocation level for the virtual machine memory resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
     * 
     */
    @Import(name="memoryShareLevel")
    private @Nullable Output<String> memoryShareLevel;

    /**
     * @return The allocation level for the virtual machine memory resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
     * 
     */
    public Optional<Output<String>> memoryShareLevel() {
        return Optional.ofNullable(this.memoryShareLevel);
    }

    /**
     * The amount of time, in minutes, to wait for a virtual machine migration to complete before failing. Default: `10` minutes. See the section on virtual machine migration for more information.
     * 
     */
    @Import(name="migrateWaitTimeout")
    private @Nullable Output<Integer> migrateWaitTimeout;

    /**
     * @return The amount of time, in minutes, to wait for a virtual machine migration to complete before failing. Default: `10` minutes. See the section on virtual machine migration for more information.
     * 
     */
    public Optional<Output<Integer>> migrateWaitTimeout() {
        return Optional.ofNullable(this.migrateWaitTimeout);
    }

    /**
     * The managed object reference ID of the created virtual machine.
     * 
     */
    @Import(name="moid")
    private @Nullable Output<String> moid;

    /**
     * @return The managed object reference ID of the created virtual machine.
     * 
     */
    public Optional<Output<String>> moid() {
        return Optional.ofNullable(this.moid);
    }

    /**
     * The name of the virtual machine.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the virtual machine.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Enable nested hardware virtualization on the virtual machine, facilitating nested virtualization in the guest operating system. Default: `false`.
     * 
     */
    @Import(name="nestedHvEnabled")
    private @Nullable Output<Boolean> nestedHvEnabled;

    /**
     * @return Enable nested hardware virtualization on the virtual machine, facilitating nested virtualization in the guest operating system. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> nestedHvEnabled() {
        return Optional.ofNullable(this.nestedHvEnabled);
    }

    /**
     * A specification for a virtual NIC on the virtual machine. See network interface options for more information.
     * 
     */
    @Import(name="networkInterfaces")
    private @Nullable Output<List<VirtualMachineNetworkInterfaceArgs>> networkInterfaces;

    /**
     * @return A specification for a virtual NIC on the virtual machine. See network interface options for more information.
     * 
     */
    public Optional<Output<List<VirtualMachineNetworkInterfaceArgs>>> networkInterfaces() {
        return Optional.ofNullable(this.networkInterfaces);
    }

    /**
     * The number of cores per socket in the virtual machine. The number of vCPUs on the virtual machine will be `num_cpus` divided by `num_cores_per_socket`. If specified, the value supplied to `num_cpus` must be evenly divisible by this value. Default: `1`.
     * 
     */
    @Import(name="numCoresPerSocket")
    private @Nullable Output<Integer> numCoresPerSocket;

    /**
     * @return The number of cores per socket in the virtual machine. The number of vCPUs on the virtual machine will be `num_cpus` divided by `num_cores_per_socket`. If specified, the value supplied to `num_cpus` must be evenly divisible by this value. Default: `1`.
     * 
     */
    public Optional<Output<Integer>> numCoresPerSocket() {
        return Optional.ofNullable(this.numCoresPerSocket);
    }

    /**
     * The total number of virtual processor cores to assign to the virtual machine. Default: `1`.
     * 
     */
    @Import(name="numCpus")
    private @Nullable Output<Integer> numCpus;

    /**
     * @return The total number of virtual processor cores to assign to the virtual machine. Default: `1`.
     * 
     */
    public Optional<Output<Integer>> numCpus() {
        return Optional.ofNullable(this.numCpus);
    }

    /**
     * When specified, the virtual machine will be deployed from the provided OVF/OVA template. See creating a virtual machine from an OVF/OVA template for more information.
     * 
     */
    @Import(name="ovfDeploy")
    private @Nullable Output<VirtualMachineOvfDeployArgs> ovfDeploy;

    /**
     * @return When specified, the virtual machine will be deployed from the provided OVF/OVA template. See creating a virtual machine from an OVF/OVA template for more information.
     * 
     */
    public Optional<Output<VirtualMachineOvfDeployArgs>> ovfDeploy() {
        return Optional.ofNullable(this.ovfDeploy);
    }

    /**
     * List of host PCI device IDs in which to create PCI passthroughs.
     * 
     * &gt; **NOTE:** Cloning requires vCenter Server and is not supported on direct ESXi host connections.
     * 
     */
    @Import(name="pciDeviceIds")
    private @Nullable Output<List<String>> pciDeviceIds;

    /**
     * @return List of host PCI device IDs in which to create PCI passthroughs.
     * 
     * &gt; **NOTE:** Cloning requires vCenter Server and is not supported on direct ESXi host connections.
     * 
     */
    public Optional<Output<List<String>>> pciDeviceIds() {
        return Optional.ofNullable(this.pciDeviceIds);
    }

    /**
     * A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
     * 
     */
    @Import(name="powerState")
    private @Nullable Output<String> powerState;

    /**
     * @return A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
     * 
     */
    public Optional<Output<String>> powerState() {
        return Optional.ofNullable(this.powerState);
    }

    /**
     * The amount of time, in seconds, that we will be trying to power on a VM
     * 
     */
    @Import(name="poweronTimeout")
    private @Nullable Output<Integer> poweronTimeout;

    /**
     * @return The amount of time, in seconds, that we will be trying to power on a VM
     * 
     */
    public Optional<Output<Integer>> poweronTimeout() {
        return Optional.ofNullable(this.poweronTimeout);
    }

    /**
     * Value internal to Terraform used to determine if a configuration set change requires a reboot.
     * 
     */
    @Import(name="rebootRequired")
    private @Nullable Output<Boolean> rebootRequired;

    /**
     * @return Value internal to Terraform used to determine if a configuration set change requires a reboot.
     * 
     */
    public Optional<Output<Boolean>> rebootRequired() {
        return Optional.ofNullable(this.rebootRequired);
    }

    /**
     * Triggers replacement of resource whenever it changes.
     * 
     * For example, `replace_trigger = sha256(format(&#34;%s-%s&#34;,data.template_file.cloud_init_metadata.rendered,data.template_file.cloud_init_userdata.rendered))` will fingerprint the changes in cloud-init metadata and userdata templates. This will enable a replacement of the resource whenever the dependant template renders a new configuration. (Forces a replacement.)
     * 
     */
    @Import(name="replaceTrigger")
    private @Nullable Output<String> replaceTrigger;

    /**
     * @return Triggers replacement of resource whenever it changes.
     * 
     * For example, `replace_trigger = sha256(format(&#34;%s-%s&#34;,data.template_file.cloud_init_metadata.rendered,data.template_file.cloud_init_userdata.rendered))` will fingerprint the changes in cloud-init metadata and userdata templates. This will enable a replacement of the resource whenever the dependant template renders a new configuration. (Forces a replacement.)
     * 
     */
    public Optional<Output<String>> replaceTrigger() {
        return Optional.ofNullable(this.replaceTrigger);
    }

    /**
     * The managed object reference ID of the resource pool in which to place the virtual machine. See the Virtual Machine Migration section for more information on modifying this value.
     * 
     * &gt; **NOTE:** All clusters and standalone hosts have a default root resource pool. This resource argument does not directly accept the cluster or standalone host resource. For more information, see the section on specifying the Root Resource Pool in the `vsphere.ResourcePool` data source documentation on using the root resource pool.
     * 
     */
    @Import(name="resourcePoolId")
    private @Nullable Output<String> resourcePoolId;

    /**
     * @return The managed object reference ID of the resource pool in which to place the virtual machine. See the Virtual Machine Migration section for more information on modifying this value.
     * 
     * &gt; **NOTE:** All clusters and standalone hosts have a default root resource pool. This resource argument does not directly accept the cluster or standalone host resource. For more information, see the section on specifying the Root Resource Pool in the `vsphere.ResourcePool` data source documentation on using the root resource pool.
     * 
     */
    public Optional<Output<String>> resourcePoolId() {
        return Optional.ofNullable(this.resourcePoolId);
    }

    /**
     * Enable post-power-on scripts to run when VMware Tools is installed. Default: `true`.
     * 
     */
    @Import(name="runToolsScriptsAfterPowerOn")
    private @Nullable Output<Boolean> runToolsScriptsAfterPowerOn;

    /**
     * @return Enable post-power-on scripts to run when VMware Tools is installed. Default: `true`.
     * 
     */
    public Optional<Output<Boolean>> runToolsScriptsAfterPowerOn() {
        return Optional.ofNullable(this.runToolsScriptsAfterPowerOn);
    }

    /**
     * Enable ost-resume scripts to run when VMware Tools is installed. Default: `true`.
     * 
     */
    @Import(name="runToolsScriptsAfterResume")
    private @Nullable Output<Boolean> runToolsScriptsAfterResume;

    /**
     * @return Enable ost-resume scripts to run when VMware Tools is installed. Default: `true`.
     * 
     */
    public Optional<Output<Boolean>> runToolsScriptsAfterResume() {
        return Optional.ofNullable(this.runToolsScriptsAfterResume);
    }

    /**
     * Enable pre-reboot scripts to run when VMware Tools is installed. Default: `false`.
     * 
     */
    @Import(name="runToolsScriptsBeforeGuestReboot")
    private @Nullable Output<Boolean> runToolsScriptsBeforeGuestReboot;

    /**
     * @return Enable pre-reboot scripts to run when VMware Tools is installed. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> runToolsScriptsBeforeGuestReboot() {
        return Optional.ofNullable(this.runToolsScriptsBeforeGuestReboot);
    }

    /**
     * Enable pre-shutdown scripts to run when VMware Tools is installed. Default: `true`.
     * 
     */
    @Import(name="runToolsScriptsBeforeGuestShutdown")
    private @Nullable Output<Boolean> runToolsScriptsBeforeGuestShutdown;

    /**
     * @return Enable pre-shutdown scripts to run when VMware Tools is installed. Default: `true`.
     * 
     */
    public Optional<Output<Boolean>> runToolsScriptsBeforeGuestShutdown() {
        return Optional.ofNullable(this.runToolsScriptsBeforeGuestShutdown);
    }

    /**
     * Enable pre-standby scripts to run when VMware Tools is installed. Default: `true`.
     * 
     */
    @Import(name="runToolsScriptsBeforeGuestStandby")
    private @Nullable Output<Boolean> runToolsScriptsBeforeGuestStandby;

    /**
     * @return Enable pre-standby scripts to run when VMware Tools is installed. Default: `true`.
     * 
     */
    public Optional<Output<Boolean>> runToolsScriptsBeforeGuestStandby() {
        return Optional.ofNullable(this.runToolsScriptsBeforeGuestStandby);
    }

    /**
     * The number of SATA controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
     * you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
     * controllers.
     * 
     */
    @Import(name="sataControllerCount")
    private @Nullable Output<Integer> sataControllerCount;

    /**
     * @return The number of SATA controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
     * you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
     * controllers.
     * 
     */
    public Optional<Output<Integer>> sataControllerCount() {
        return Optional.ofNullable(this.sataControllerCount);
    }

    /**
     * The type of SCSI bus sharing for the virtual machine SCSI controller. One of `physicalSharing`, `virtualSharing`, and `noSharing`. Default: `noSharing`.
     * 
     */
    @Import(name="scsiBusSharing")
    private @Nullable Output<String> scsiBusSharing;

    /**
     * @return The type of SCSI bus sharing for the virtual machine SCSI controller. One of `physicalSharing`, `virtualSharing`, and `noSharing`. Default: `noSharing`.
     * 
     */
    public Optional<Output<String>> scsiBusSharing() {
        return Optional.ofNullable(this.scsiBusSharing);
    }

    /**
     * The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
     * you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
     * controllers.
     * 
     */
    @Import(name="scsiControllerCount")
    private @Nullable Output<Integer> scsiControllerCount;

    /**
     * @return The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
     * you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
     * controllers.
     * 
     */
    public Optional<Output<Integer>> scsiControllerCount() {
        return Optional.ofNullable(this.scsiControllerCount);
    }

    /**
     * The SCSI controller type for the virtual machine. One of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic SAS) or `pvscsi` (VMware Paravirtual). Default: `pvscsi`.
     * 
     */
    @Import(name="scsiType")
    private @Nullable Output<String> scsiType;

    /**
     * @return The SCSI controller type for the virtual machine. One of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic SAS) or `pvscsi` (VMware Paravirtual). Default: `pvscsi`.
     * 
     */
    public Optional<Output<String>> scsiType() {
        return Optional.ofNullable(this.scsiType);
    }

    /**
     * The amount of time, in minutes, to wait for a graceful guest shutdown when making necessary updates to the virtual machine. If `force_power_off` is set to `true`, the virtual machine will be forced to power-off after the timeout, otherwise an error is returned. Default: `3` minutes.
     * 
     */
    @Import(name="shutdownWaitTimeout")
    private @Nullable Output<Integer> shutdownWaitTimeout;

    /**
     * @return The amount of time, in minutes, to wait for a graceful guest shutdown when making necessary updates to the virtual machine. If `force_power_off` is set to `true`, the virtual machine will be forced to power-off after the timeout, otherwise an error is returned. Default: `3` minutes.
     * 
     */
    public Optional<Output<Integer>> shutdownWaitTimeout() {
        return Optional.ofNullable(this.shutdownWaitTimeout);
    }

    /**
     * The ID of the storage policy to assign to the home directory of a virtual machine.
     * 
     */
    @Import(name="storagePolicyId")
    private @Nullable Output<String> storagePolicyId;

    /**
     * @return The ID of the storage policy to assign to the home directory of a virtual machine.
     * 
     */
    public Optional<Output<String>> storagePolicyId() {
        return Optional.ofNullable(this.storagePolicyId);
    }

    /**
     * The swap file placement policy for the virtual machine. One of `inherit`, `hostLocal`, or `vmDirectory`. Default: `inherit`.
     * 
     */
    @Import(name="swapPlacementPolicy")
    private @Nullable Output<String> swapPlacementPolicy;

    /**
     * @return The swap file placement policy for the virtual machine. One of `inherit`, `hostLocal`, or `vmDirectory`. Default: `inherit`.
     * 
     */
    public Optional<Output<String>> swapPlacementPolicy() {
        return Optional.ofNullable(this.swapPlacementPolicy);
    }

    /**
     * Enable the guest operating system to synchronization its clock with the host when the virtual machine is powered on or resumed. Requires vSphere 7.0 Update 1 and later. Requires VMware Tools to be installed. Default: `false`.
     * 
     */
    @Import(name="syncTimeWithHost")
    private @Nullable Output<Boolean> syncTimeWithHost;

    /**
     * @return Enable the guest operating system to synchronization its clock with the host when the virtual machine is powered on or resumed. Requires vSphere 7.0 Update 1 and later. Requires VMware Tools to be installed. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> syncTimeWithHost() {
        return Optional.ofNullable(this.syncTimeWithHost);
    }

    /**
     * Enable the guest operating system to periodically synchronize its clock with the host. Requires vSphere 7.0 Update 1 and later. On previous versions, setting `sync_time_with_host` is will enable periodic synchronization. Requires VMware Tools to be installed. Default: `false`.
     * 
     */
    @Import(name="syncTimeWithHostPeriodically")
    private @Nullable Output<Boolean> syncTimeWithHostPeriodically;

    /**
     * @return Enable the guest operating system to periodically synchronize its clock with the host. Requires vSphere 7.0 Update 1 and later. On previous versions, setting `sync_time_with_host` is will enable periodic synchronization. Requires VMware Tools to be installed. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> syncTimeWithHostPeriodically() {
        return Optional.ofNullable(this.syncTimeWithHostPeriodically);
    }

    /**
     * The IDs of any tags to attach to this resource. Please refer to the `vsphere.Tag` resource for more information on applying tags to virtual machine resources.
     * 
     * &gt; **NOTE:** Tagging support is unsupported on direct ESXi host connections and requires vCenter Server instance.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The IDs of any tags to attach to this resource. Please refer to the `vsphere.Tag` resource for more information on applying tags to virtual machine resources.
     * 
     * &gt; **NOTE:** Tagging support is unsupported on direct ESXi host connections and requires vCenter Server instance.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Enable automatic upgrade of the VMware Tools version when the virtual machine is rebooted. If necessary, VMware Tools is upgraded to the latest version supported by the host on which the virtual machine is running. Requires VMware Tools to be installed. One of `manual` or `upgradeAtPowerCycle`. Default: `manual`.
     * 
     */
    @Import(name="toolsUpgradePolicy")
    private @Nullable Output<String> toolsUpgradePolicy;

    /**
     * @return Enable automatic upgrade of the VMware Tools version when the virtual machine is rebooted. If necessary, VMware Tools is upgraded to the latest version supported by the host on which the virtual machine is running. Requires VMware Tools to be installed. One of `manual` or `upgradeAtPowerCycle`. Default: `manual`.
     * 
     */
    public Optional<Output<String>> toolsUpgradePolicy() {
        return Optional.ofNullable(this.toolsUpgradePolicy);
    }

    /**
     * The UUID of the virtual disk VMDK file. This is used to track the virtual disk on the virtual machine.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return The UUID of the virtual disk VMDK file. This is used to track the virtual disk on the virtual machine.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    /**
     * Used for vApp configurations. The only sub-key available is `properties`, which is a key/value map of properties for virtual machines imported from and OVF/OVA. See Using vApp Properties for OVF/OVA Configuration for more information.
     * 
     */
    @Import(name="vapp")
    private @Nullable Output<VirtualMachineVappArgs> vapp;

    /**
     * @return Used for vApp configurations. The only sub-key available is `properties`, which is a key/value map of properties for virtual machines imported from and OVF/OVA. See Using vApp Properties for OVF/OVA Configuration for more information.
     * 
     */
    public Optional<Output<VirtualMachineVappArgs>> vapp() {
        return Optional.ofNullable(this.vapp);
    }

    /**
     * Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
     * 
     */
    @Import(name="vappTransports")
    private @Nullable Output<List<String>> vappTransports;

    /**
     * @return Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
     * 
     */
    public Optional<Output<List<String>>> vappTransports() {
        return Optional.ofNullable(this.vappTransports);
    }

    /**
     * Enable Virtualization Based Security. Requires `firmware` to be `efi`. In addition, `vvtd_enabled`, `nested_hv_enabled`, and `efi_secure_boot_enabled` must all have a value of `true`. Supported on vSphere 6.7 and later. Default: `false`.
     * 
     */
    @Import(name="vbsEnabled")
    private @Nullable Output<Boolean> vbsEnabled;

    /**
     * @return Enable Virtualization Based Security. Requires `firmware` to be `efi`. In addition, `vvtd_enabled`, `nested_hv_enabled`, and `efi_secure_boot_enabled` must all have a value of `true`. Supported on vSphere 6.7 and later. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> vbsEnabled() {
        return Optional.ofNullable(this.vbsEnabled);
    }

    /**
     * The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
     * 
     */
    @Import(name="vmwareToolsStatus")
    private @Nullable Output<String> vmwareToolsStatus;

    /**
     * @return The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
     * 
     */
    public Optional<Output<String>> vmwareToolsStatus() {
        return Optional.ofNullable(this.vmwareToolsStatus);
    }

    /**
     * The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
     * 
     */
    @Import(name="vmxPath")
    private @Nullable Output<String> vmxPath;

    /**
     * @return The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
     * 
     */
    public Optional<Output<String>> vmxPath() {
        return Optional.ofNullable(this.vmxPath);
    }

    /**
     * Enable Intel Virtualization Technology for Directed I/O for the virtual machine (_I/O MMU_ in the vSphere Client). Supported on vSphere 6.7 and later. Default: `false`.
     * 
     */
    @Import(name="vvtdEnabled")
    private @Nullable Output<Boolean> vvtdEnabled;

    /**
     * @return Enable Intel Virtualization Technology for Directed I/O for the virtual machine (_I/O MMU_ in the vSphere Client). Supported on vSphere 6.7 and later. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> vvtdEnabled() {
        return Optional.ofNullable(this.vvtdEnabled);
    }

    /**
     * The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. This should only be used if the version VMware Tools does not allow the `wait_for_guest_net_timeout` waiter to be used. A value less than `1` disables the waiter. Default: `0`.
     * 
     */
    @Import(name="waitForGuestIpTimeout")
    private @Nullable Output<Integer> waitForGuestIpTimeout;

    /**
     * @return The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. This should only be used if the version VMware Tools does not allow the `wait_for_guest_net_timeout` waiter to be used. A value less than `1` disables the waiter. Default: `0`.
     * 
     */
    public Optional<Output<Integer>> waitForGuestIpTimeout() {
        return Optional.ofNullable(this.waitForGuestIpTimeout);
    }

    /**
     * Controls whether or not the guest network waiter waits for a routable address. When `false`, the waiter does not wait for a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria. This property is ignored if the `wait_for_guest_ip_timeout` waiter is used. Default: `true`.
     * 
     */
    @Import(name="waitForGuestNetRoutable")
    private @Nullable Output<Boolean> waitForGuestNetRoutable;

    /**
     * @return Controls whether or not the guest network waiter waits for a routable address. When `false`, the waiter does not wait for a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria. This property is ignored if the `wait_for_guest_ip_timeout` waiter is used. Default: `true`.
     * 
     */
    public Optional<Output<Boolean>> waitForGuestNetRoutable() {
        return Optional.ofNullable(this.waitForGuestNetRoutable);
    }

    /**
     * The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. Older versions of VMware Tools do not populate this property. In those cases, this waiter can be disabled and the `wait_for_guest_ip_timeout` waiter can be used instead. A value less than `1` disables the waiter. Default: `5` minutes.
     * 
     */
    @Import(name="waitForGuestNetTimeout")
    private @Nullable Output<Integer> waitForGuestNetTimeout;

    /**
     * @return The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. Older versions of VMware Tools do not populate this property. In those cases, this waiter can be disabled and the `wait_for_guest_ip_timeout` waiter can be used instead. A value less than `1` disables the waiter. Default: `5` minutes.
     * 
     */
    public Optional<Output<Integer>> waitForGuestNetTimeout() {
        return Optional.ofNullable(this.waitForGuestNetTimeout);
    }

    private VirtualMachineState() {}

    private VirtualMachineState(VirtualMachineState $) {
        this.alternateGuestName = $.alternateGuestName;
        this.annotation = $.annotation;
        this.bootDelay = $.bootDelay;
        this.bootRetryDelay = $.bootRetryDelay;
        this.bootRetryEnabled = $.bootRetryEnabled;
        this.cdroms = $.cdroms;
        this.changeVersion = $.changeVersion;
        this.clone = $.clone;
        this.cpuHotAddEnabled = $.cpuHotAddEnabled;
        this.cpuHotRemoveEnabled = $.cpuHotRemoveEnabled;
        this.cpuLimit = $.cpuLimit;
        this.cpuPerformanceCountersEnabled = $.cpuPerformanceCountersEnabled;
        this.cpuReservation = $.cpuReservation;
        this.cpuShareCount = $.cpuShareCount;
        this.cpuShareLevel = $.cpuShareLevel;
        this.customAttributes = $.customAttributes;
        this.datacenterId = $.datacenterId;
        this.datastoreClusterId = $.datastoreClusterId;
        this.datastoreId = $.datastoreId;
        this.defaultIpAddress = $.defaultIpAddress;
        this.disks = $.disks;
        this.efiSecureBootEnabled = $.efiSecureBootEnabled;
        this.enableDiskUuid = $.enableDiskUuid;
        this.enableLogging = $.enableLogging;
        this.eptRviMode = $.eptRviMode;
        this.extraConfig = $.extraConfig;
        this.extraConfigRebootRequired = $.extraConfigRebootRequired;
        this.firmware = $.firmware;
        this.folder = $.folder;
        this.forcePowerOff = $.forcePowerOff;
        this.guestId = $.guestId;
        this.guestIpAddresses = $.guestIpAddresses;
        this.hardwareVersion = $.hardwareVersion;
        this.hostSystemId = $.hostSystemId;
        this.hvMode = $.hvMode;
        this.ideControllerCount = $.ideControllerCount;
        this.ignoredGuestIps = $.ignoredGuestIps;
        this.imported = $.imported;
        this.latencySensitivity = $.latencySensitivity;
        this.memory = $.memory;
        this.memoryHotAddEnabled = $.memoryHotAddEnabled;
        this.memoryLimit = $.memoryLimit;
        this.memoryReservation = $.memoryReservation;
        this.memoryShareCount = $.memoryShareCount;
        this.memoryShareLevel = $.memoryShareLevel;
        this.migrateWaitTimeout = $.migrateWaitTimeout;
        this.moid = $.moid;
        this.name = $.name;
        this.nestedHvEnabled = $.nestedHvEnabled;
        this.networkInterfaces = $.networkInterfaces;
        this.numCoresPerSocket = $.numCoresPerSocket;
        this.numCpus = $.numCpus;
        this.ovfDeploy = $.ovfDeploy;
        this.pciDeviceIds = $.pciDeviceIds;
        this.powerState = $.powerState;
        this.poweronTimeout = $.poweronTimeout;
        this.rebootRequired = $.rebootRequired;
        this.replaceTrigger = $.replaceTrigger;
        this.resourcePoolId = $.resourcePoolId;
        this.runToolsScriptsAfterPowerOn = $.runToolsScriptsAfterPowerOn;
        this.runToolsScriptsAfterResume = $.runToolsScriptsAfterResume;
        this.runToolsScriptsBeforeGuestReboot = $.runToolsScriptsBeforeGuestReboot;
        this.runToolsScriptsBeforeGuestShutdown = $.runToolsScriptsBeforeGuestShutdown;
        this.runToolsScriptsBeforeGuestStandby = $.runToolsScriptsBeforeGuestStandby;
        this.sataControllerCount = $.sataControllerCount;
        this.scsiBusSharing = $.scsiBusSharing;
        this.scsiControllerCount = $.scsiControllerCount;
        this.scsiType = $.scsiType;
        this.shutdownWaitTimeout = $.shutdownWaitTimeout;
        this.storagePolicyId = $.storagePolicyId;
        this.swapPlacementPolicy = $.swapPlacementPolicy;
        this.syncTimeWithHost = $.syncTimeWithHost;
        this.syncTimeWithHostPeriodically = $.syncTimeWithHostPeriodically;
        this.tags = $.tags;
        this.toolsUpgradePolicy = $.toolsUpgradePolicy;
        this.uuid = $.uuid;
        this.vapp = $.vapp;
        this.vappTransports = $.vappTransports;
        this.vbsEnabled = $.vbsEnabled;
        this.vmwareToolsStatus = $.vmwareToolsStatus;
        this.vmxPath = $.vmxPath;
        this.vvtdEnabled = $.vvtdEnabled;
        this.waitForGuestIpTimeout = $.waitForGuestIpTimeout;
        this.waitForGuestNetRoutable = $.waitForGuestNetRoutable;
        this.waitForGuestNetTimeout = $.waitForGuestNetTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineState $;

        public Builder() {
            $ = new VirtualMachineState();
        }

        public Builder(VirtualMachineState defaults) {
            $ = new VirtualMachineState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alternateGuestName The guest name for the operating system when `guest_id` is `otherGuest` or `otherGuest64`.
         * 
         * @return builder
         * 
         */
        public Builder alternateGuestName(@Nullable Output<String> alternateGuestName) {
            $.alternateGuestName = alternateGuestName;
            return this;
        }

        /**
         * @param alternateGuestName The guest name for the operating system when `guest_id` is `otherGuest` or `otherGuest64`.
         * 
         * @return builder
         * 
         */
        public Builder alternateGuestName(String alternateGuestName) {
            return alternateGuestName(Output.of(alternateGuestName));
        }

        /**
         * @param annotation A user-provided description of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder annotation(@Nullable Output<String> annotation) {
            $.annotation = annotation;
            return this;
        }

        /**
         * @param annotation A user-provided description of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder annotation(String annotation) {
            return annotation(Output.of(annotation));
        }

        /**
         * @param bootDelay The number of milliseconds to wait before starting the boot sequence. The default is no delay.
         * 
         * @return builder
         * 
         */
        public Builder bootDelay(@Nullable Output<Integer> bootDelay) {
            $.bootDelay = bootDelay;
            return this;
        }

        /**
         * @param bootDelay The number of milliseconds to wait before starting the boot sequence. The default is no delay.
         * 
         * @return builder
         * 
         */
        public Builder bootDelay(Integer bootDelay) {
            return bootDelay(Output.of(bootDelay));
        }

        /**
         * @param bootRetryDelay The number of milliseconds to wait before retrying the boot sequence. This option is only valid if `boot_retry_enabled` is `true`. Default: `10000` (10 seconds).
         * 
         * @return builder
         * 
         */
        public Builder bootRetryDelay(@Nullable Output<Integer> bootRetryDelay) {
            $.bootRetryDelay = bootRetryDelay;
            return this;
        }

        /**
         * @param bootRetryDelay The number of milliseconds to wait before retrying the boot sequence. This option is only valid if `boot_retry_enabled` is `true`. Default: `10000` (10 seconds).
         * 
         * @return builder
         * 
         */
        public Builder bootRetryDelay(Integer bootRetryDelay) {
            return bootRetryDelay(Output.of(bootRetryDelay));
        }

        /**
         * @param bootRetryEnabled If set to `true`, a virtual machine that fails to boot will try again after the delay defined in `boot_retry_delay`. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder bootRetryEnabled(@Nullable Output<Boolean> bootRetryEnabled) {
            $.bootRetryEnabled = bootRetryEnabled;
            return this;
        }

        /**
         * @param bootRetryEnabled If set to `true`, a virtual machine that fails to boot will try again after the delay defined in `boot_retry_delay`. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder bootRetryEnabled(Boolean bootRetryEnabled) {
            return bootRetryEnabled(Output.of(bootRetryEnabled));
        }

        /**
         * @param cdroms A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.
         * 
         * @return builder
         * 
         */
        public Builder cdroms(@Nullable Output<List<VirtualMachineCdromArgs>> cdroms) {
            $.cdroms = cdroms;
            return this;
        }

        /**
         * @param cdroms A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.
         * 
         * @return builder
         * 
         */
        public Builder cdroms(List<VirtualMachineCdromArgs> cdroms) {
            return cdroms(Output.of(cdroms));
        }

        /**
         * @param cdroms A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.
         * 
         * @return builder
         * 
         */
        public Builder cdroms(VirtualMachineCdromArgs... cdroms) {
            return cdroms(List.of(cdroms));
        }

        /**
         * @param changeVersion A unique identifier for a given version of the last configuration was applied.
         * 
         * @return builder
         * 
         */
        public Builder changeVersion(@Nullable Output<String> changeVersion) {
            $.changeVersion = changeVersion;
            return this;
        }

        /**
         * @param changeVersion A unique identifier for a given version of the last configuration was applied.
         * 
         * @return builder
         * 
         */
        public Builder changeVersion(String changeVersion) {
            return changeVersion(Output.of(changeVersion));
        }

        /**
         * @param clone When specified, the virtual machine will be created as a clone of a specified template. Optional customization options can be submitted for the resource. See creating a virtual machine from a template for more information.
         * 
         * @return builder
         * 
         */
        public Builder clone_(@Nullable Output<VirtualMachineCloneArgs> clone) {
            $.clone = clone;
            return this;
        }

        /**
         * @param clone When specified, the virtual machine will be created as a clone of a specified template. Optional customization options can be submitted for the resource. See creating a virtual machine from a template for more information.
         * 
         * @return builder
         * 
         */
        public Builder clone_(VirtualMachineCloneArgs clone) {
            return clone_(Output.of(clone));
        }

        /**
         * @param cpuHotAddEnabled Allow CPUs to be added to the virtual machine while it is powered on.
         * 
         * @return builder
         * 
         */
        public Builder cpuHotAddEnabled(@Nullable Output<Boolean> cpuHotAddEnabled) {
            $.cpuHotAddEnabled = cpuHotAddEnabled;
            return this;
        }

        /**
         * @param cpuHotAddEnabled Allow CPUs to be added to the virtual machine while it is powered on.
         * 
         * @return builder
         * 
         */
        public Builder cpuHotAddEnabled(Boolean cpuHotAddEnabled) {
            return cpuHotAddEnabled(Output.of(cpuHotAddEnabled));
        }

        /**
         * @param cpuHotRemoveEnabled Allow CPUs to be removed to the virtual machine while it is powered on.
         * 
         * @return builder
         * 
         */
        public Builder cpuHotRemoveEnabled(@Nullable Output<Boolean> cpuHotRemoveEnabled) {
            $.cpuHotRemoveEnabled = cpuHotRemoveEnabled;
            return this;
        }

        /**
         * @param cpuHotRemoveEnabled Allow CPUs to be removed to the virtual machine while it is powered on.
         * 
         * @return builder
         * 
         */
        public Builder cpuHotRemoveEnabled(Boolean cpuHotRemoveEnabled) {
            return cpuHotRemoveEnabled(Output.of(cpuHotRemoveEnabled));
        }

        /**
         * @param cpuLimit The maximum amount of CPU (in MHz) that the virtual machine can consume, regardless of available resources. The default is no limit.
         * 
         * @return builder
         * 
         */
        public Builder cpuLimit(@Nullable Output<Integer> cpuLimit) {
            $.cpuLimit = cpuLimit;
            return this;
        }

        /**
         * @param cpuLimit The maximum amount of CPU (in MHz) that the virtual machine can consume, regardless of available resources. The default is no limit.
         * 
         * @return builder
         * 
         */
        public Builder cpuLimit(Integer cpuLimit) {
            return cpuLimit(Output.of(cpuLimit));
        }

        /**
         * @param cpuPerformanceCountersEnabled Enable CPU performance counters on the virtual machine. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder cpuPerformanceCountersEnabled(@Nullable Output<Boolean> cpuPerformanceCountersEnabled) {
            $.cpuPerformanceCountersEnabled = cpuPerformanceCountersEnabled;
            return this;
        }

        /**
         * @param cpuPerformanceCountersEnabled Enable CPU performance counters on the virtual machine. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder cpuPerformanceCountersEnabled(Boolean cpuPerformanceCountersEnabled) {
            return cpuPerformanceCountersEnabled(Output.of(cpuPerformanceCountersEnabled));
        }

        /**
         * @param cpuReservation The amount of CPU (in MHz) that the virtual machine is guaranteed. The default is no reservation.
         * 
         * @return builder
         * 
         */
        public Builder cpuReservation(@Nullable Output<Integer> cpuReservation) {
            $.cpuReservation = cpuReservation;
            return this;
        }

        /**
         * @param cpuReservation The amount of CPU (in MHz) that the virtual machine is guaranteed. The default is no reservation.
         * 
         * @return builder
         * 
         */
        public Builder cpuReservation(Integer cpuReservation) {
            return cpuReservation(Output.of(cpuReservation));
        }

        /**
         * @param cpuShareCount The number of CPU shares allocated to the virtual machine when the `cpu_share_level` is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder cpuShareCount(@Nullable Output<Integer> cpuShareCount) {
            $.cpuShareCount = cpuShareCount;
            return this;
        }

        /**
         * @param cpuShareCount The number of CPU shares allocated to the virtual machine when the `cpu_share_level` is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder cpuShareCount(Integer cpuShareCount) {
            return cpuShareCount(Output.of(cpuShareCount));
        }

        /**
         * @param cpuShareLevel The allocation level for the virtual machine CPU resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
         * 
         * @return builder
         * 
         */
        public Builder cpuShareLevel(@Nullable Output<String> cpuShareLevel) {
            $.cpuShareLevel = cpuShareLevel;
            return this;
        }

        /**
         * @param cpuShareLevel The allocation level for the virtual machine CPU resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
         * 
         * @return builder
         * 
         */
        public Builder cpuShareLevel(String cpuShareLevel) {
            return cpuShareLevel(Output.of(cpuShareLevel));
        }

        /**
         * @param customAttributes Map of custom attribute ids to attribute value strings to set for virtual machine. Please refer to the `vsphere_custom_attributes` resource for more information on setting custom attributes.
         * 
         * &gt; **NOTE:** Custom attributes requires vCenter Server and is not supported on direct ESXi host connections.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(@Nullable Output<Map<String,String>> customAttributes) {
            $.customAttributes = customAttributes;
            return this;
        }

        /**
         * @param customAttributes Map of custom attribute ids to attribute value strings to set for virtual machine. Please refer to the `vsphere_custom_attributes` resource for more information on setting custom attributes.
         * 
         * &gt; **NOTE:** Custom attributes requires vCenter Server and is not supported on direct ESXi host connections.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(Map<String,String> customAttributes) {
            return customAttributes(Output.of(customAttributes));
        }

        /**
         * @param datacenterId The datacenter ID. Required only when deploying an OVF/OVA template.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(@Nullable Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId The datacenter ID. Required only when deploying an OVF/OVA template.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param datastoreClusterId The managed object reference ID of the datastore cluster in which to place the virtual machine. This setting applies to entire virtual machine and implies that you wish to use vSphere Storage DRS with the virtual machine. See the section on virtual machine migration for more information on modifying this value.
         * 
         * &gt; **NOTE:** One of `datastore_id` or `datastore_cluster_id` must be specified.
         * 
         * &gt; **NOTE:** Use of `datastore_cluster_id` requires vSphere Storage DRS to be enabled on the specified datastore cluster.
         * 
         * &gt; **NOTE:** The `datastore_cluster_id` setting applies to the entire virtual machine resource. You cannot assign individual individual disks to datastore clusters. In addition, you cannot use the `attach` setting to attach external disks on virtual machines that are assigned to datastore clusters.
         * 
         * @return builder
         * 
         */
        public Builder datastoreClusterId(@Nullable Output<String> datastoreClusterId) {
            $.datastoreClusterId = datastoreClusterId;
            return this;
        }

        /**
         * @param datastoreClusterId The managed object reference ID of the datastore cluster in which to place the virtual machine. This setting applies to entire virtual machine and implies that you wish to use vSphere Storage DRS with the virtual machine. See the section on virtual machine migration for more information on modifying this value.
         * 
         * &gt; **NOTE:** One of `datastore_id` or `datastore_cluster_id` must be specified.
         * 
         * &gt; **NOTE:** Use of `datastore_cluster_id` requires vSphere Storage DRS to be enabled on the specified datastore cluster.
         * 
         * &gt; **NOTE:** The `datastore_cluster_id` setting applies to the entire virtual machine resource. You cannot assign individual individual disks to datastore clusters. In addition, you cannot use the `attach` setting to attach external disks on virtual machines that are assigned to datastore clusters.
         * 
         * @return builder
         * 
         */
        public Builder datastoreClusterId(String datastoreClusterId) {
            return datastoreClusterId(Output.of(datastoreClusterId));
        }

        /**
         * @param datastoreId The managed object reference ID of the datastore in which to place the virtual machine. The virtual machine configuration files is placed here, along with any virtual disks that are created where a datastore is not explicitly specified. See the section on virtual machine migration for more information on modifying this value.
         * 
         * &gt; **NOTE:** Datastores cannot be assigned to individual disks when `datastore_cluster_id` is used.
         * 
         * @return builder
         * 
         */
        public Builder datastoreId(@Nullable Output<String> datastoreId) {
            $.datastoreId = datastoreId;
            return this;
        }

        /**
         * @param datastoreId The managed object reference ID of the datastore in which to place the virtual machine. The virtual machine configuration files is placed here, along with any virtual disks that are created where a datastore is not explicitly specified. See the section on virtual machine migration for more information on modifying this value.
         * 
         * &gt; **NOTE:** Datastores cannot be assigned to individual disks when `datastore_cluster_id` is used.
         * 
         * @return builder
         * 
         */
        public Builder datastoreId(String datastoreId) {
            return datastoreId(Output.of(datastoreId));
        }

        /**
         * @param defaultIpAddress The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
         * 
         * @return builder
         * 
         */
        public Builder defaultIpAddress(@Nullable Output<String> defaultIpAddress) {
            $.defaultIpAddress = defaultIpAddress;
            return this;
        }

        /**
         * @param defaultIpAddress The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
         * 
         * @return builder
         * 
         */
        public Builder defaultIpAddress(String defaultIpAddress) {
            return defaultIpAddress(Output.of(defaultIpAddress));
        }

        /**
         * @param disks A specification for a virtual disk device on the virtual machine. See disk options for more information.
         * 
         * @return builder
         * 
         */
        public Builder disks(@Nullable Output<List<VirtualMachineDiskArgs>> disks) {
            $.disks = disks;
            return this;
        }

        /**
         * @param disks A specification for a virtual disk device on the virtual machine. See disk options for more information.
         * 
         * @return builder
         * 
         */
        public Builder disks(List<VirtualMachineDiskArgs> disks) {
            return disks(Output.of(disks));
        }

        /**
         * @param disks A specification for a virtual disk device on the virtual machine. See disk options for more information.
         * 
         * @return builder
         * 
         */
        public Builder disks(VirtualMachineDiskArgs... disks) {
            return disks(List.of(disks));
        }

        /**
         * @param efiSecureBootEnabled Use this option to enable EFI secure boot when the `firmware` type is set to is `efi`. Default: `false`.
         * 
         * &gt; **NOTE:** EFI secure boot is only available on vSphere 6.5 and later.
         * 
         * @return builder
         * 
         */
        public Builder efiSecureBootEnabled(@Nullable Output<Boolean> efiSecureBootEnabled) {
            $.efiSecureBootEnabled = efiSecureBootEnabled;
            return this;
        }

        /**
         * @param efiSecureBootEnabled Use this option to enable EFI secure boot when the `firmware` type is set to is `efi`. Default: `false`.
         * 
         * &gt; **NOTE:** EFI secure boot is only available on vSphere 6.5 and later.
         * 
         * @return builder
         * 
         */
        public Builder efiSecureBootEnabled(Boolean efiSecureBootEnabled) {
            return efiSecureBootEnabled(Output.of(efiSecureBootEnabled));
        }

        /**
         * @param enableDiskUuid Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableDiskUuid(@Nullable Output<Boolean> enableDiskUuid) {
            $.enableDiskUuid = enableDiskUuid;
            return this;
        }

        /**
         * @param enableDiskUuid Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableDiskUuid(Boolean enableDiskUuid) {
            return enableDiskUuid(Output.of(enableDiskUuid));
        }

        /**
         * @param enableLogging Enable logging of virtual machine events to a log file stored in the virtual machine directory. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableLogging(@Nullable Output<Boolean> enableLogging) {
            $.enableLogging = enableLogging;
            return this;
        }

        /**
         * @param enableLogging Enable logging of virtual machine events to a log file stored in the virtual machine directory. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableLogging(Boolean enableLogging) {
            return enableLogging(Output.of(enableLogging));
        }

        /**
         * @param eptRviMode The EPT/RVI (hardware memory virtualization) setting for the virtual machine. One of `automatic`, `on`, or `off`. Default: `automatic`.
         * 
         * @return builder
         * 
         */
        public Builder eptRviMode(@Nullable Output<String> eptRviMode) {
            $.eptRviMode = eptRviMode;
            return this;
        }

        /**
         * @param eptRviMode The EPT/RVI (hardware memory virtualization) setting for the virtual machine. One of `automatic`, `on`, or `off`. Default: `automatic`.
         * 
         * @return builder
         * 
         */
        public Builder eptRviMode(String eptRviMode) {
            return eptRviMode(Output.of(eptRviMode));
        }

        /**
         * @param extraConfig Extra configuration data for the virtual machine. Can be used to supply advanced parameters not normally in configuration, such as instance metadata and userdata.
         * 
         * &gt; **NOTE:** Do not use `extra_config` when working with a template imported from OVF/OVA as your settings may be ignored. Use the `vapp` block `properties` section as described in Using vApp Properties for OVF/OVA Configuration.
         * 
         * @return builder
         * 
         */
        public Builder extraConfig(@Nullable Output<Map<String,String>> extraConfig) {
            $.extraConfig = extraConfig;
            return this;
        }

        /**
         * @param extraConfig Extra configuration data for the virtual machine. Can be used to supply advanced parameters not normally in configuration, such as instance metadata and userdata.
         * 
         * &gt; **NOTE:** Do not use `extra_config` when working with a template imported from OVF/OVA as your settings may be ignored. Use the `vapp` block `properties` section as described in Using vApp Properties for OVF/OVA Configuration.
         * 
         * @return builder
         * 
         */
        public Builder extraConfig(Map<String,String> extraConfig) {
            return extraConfig(Output.of(extraConfig));
        }

        /**
         * @param extraConfigRebootRequired Allow the virtual machine to be rebooted when a change to `extra_config` occurs. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder extraConfigRebootRequired(@Nullable Output<Boolean> extraConfigRebootRequired) {
            $.extraConfigRebootRequired = extraConfigRebootRequired;
            return this;
        }

        /**
         * @param extraConfigRebootRequired Allow the virtual machine to be rebooted when a change to `extra_config` occurs. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder extraConfigRebootRequired(Boolean extraConfigRebootRequired) {
            return extraConfigRebootRequired(Output.of(extraConfigRebootRequired));
        }

        /**
         * @param firmware The firmware for the virtual machine. One of `bios` or `efi`.
         * 
         * @return builder
         * 
         */
        public Builder firmware(@Nullable Output<String> firmware) {
            $.firmware = firmware;
            return this;
        }

        /**
         * @param firmware The firmware for the virtual machine. One of `bios` or `efi`.
         * 
         * @return builder
         * 
         */
        public Builder firmware(String firmware) {
            return firmware(Output.of(firmware));
        }

        /**
         * @param folder The path to the virtual machine folder in which to place the virtual machine, relative to the datacenter path (`/&lt;datacenter-name&gt;/vm`).  For example, `/dc-01/vm/foo`
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The path to the virtual machine folder in which to place the virtual machine, relative to the datacenter path (`/&lt;datacenter-name&gt;/vm`).  For example, `/dc-01/vm/foo`
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param forcePowerOff If a guest shutdown failed or times out while updating or destroying (see `shutdown_wait_timeout`), force the power-off of the virtual machine. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder forcePowerOff(@Nullable Output<Boolean> forcePowerOff) {
            $.forcePowerOff = forcePowerOff;
            return this;
        }

        /**
         * @param forcePowerOff If a guest shutdown failed or times out while updating or destroying (see `shutdown_wait_timeout`), force the power-off of the virtual machine. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder forcePowerOff(Boolean forcePowerOff) {
            return forcePowerOff(Output.of(forcePowerOff));
        }

        /**
         * @param guestId The guest ID for the operating system type. For a full list of possible values, see [here][vmware-docs-guest-ids]. Default: `otherGuest64`.
         * 
         * [vmware-docs-guest-ids]: https://vdc-download.vmware.com/vmwb-repository/dcr-public/b50dcbbf-051d-4204-a3e7-e1b618c1e384/538cf2ec-b34f-4bae-a332-3820ef9e7773/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
         * 
         * @return builder
         * 
         */
        public Builder guestId(@Nullable Output<String> guestId) {
            $.guestId = guestId;
            return this;
        }

        /**
         * @param guestId The guest ID for the operating system type. For a full list of possible values, see [here][vmware-docs-guest-ids]. Default: `otherGuest64`.
         * 
         * [vmware-docs-guest-ids]: https://vdc-download.vmware.com/vmwb-repository/dcr-public/b50dcbbf-051d-4204-a3e7-e1b618c1e384/538cf2ec-b34f-4bae-a332-3820ef9e7773/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
         * 
         * @return builder
         * 
         */
        public Builder guestId(String guestId) {
            return guestId(Output.of(guestId));
        }

        /**
         * @param guestIpAddresses The current list of IP addresses on this machine, including the value of `default_ip_address`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
         * 
         * @return builder
         * 
         */
        public Builder guestIpAddresses(@Nullable Output<List<String>> guestIpAddresses) {
            $.guestIpAddresses = guestIpAddresses;
            return this;
        }

        /**
         * @param guestIpAddresses The current list of IP addresses on this machine, including the value of `default_ip_address`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
         * 
         * @return builder
         * 
         */
        public Builder guestIpAddresses(List<String> guestIpAddresses) {
            return guestIpAddresses(Output.of(guestIpAddresses));
        }

        /**
         * @param guestIpAddresses The current list of IP addresses on this machine, including the value of `default_ip_address`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
         * 
         * @return builder
         * 
         */
        public Builder guestIpAddresses(String... guestIpAddresses) {
            return guestIpAddresses(List.of(guestIpAddresses));
        }

        /**
         * @param hardwareVersion The hardware version number. Valid range is from 4 to 19. The hardware version cannot be downgraded. See [virtual machine hardware compatibility][virtual-machine-hardware-compatibility] for more information.
         * 
         * [virtual-machine-hardware-compatibility]: https://kb.vmware.com/s/article/2007240
         * 
         * @return builder
         * 
         */
        public Builder hardwareVersion(@Nullable Output<Integer> hardwareVersion) {
            $.hardwareVersion = hardwareVersion;
            return this;
        }

        /**
         * @param hardwareVersion The hardware version number. Valid range is from 4 to 19. The hardware version cannot be downgraded. See [virtual machine hardware compatibility][virtual-machine-hardware-compatibility] for more information.
         * 
         * [virtual-machine-hardware-compatibility]: https://kb.vmware.com/s/article/2007240
         * 
         * @return builder
         * 
         */
        public Builder hardwareVersion(Integer hardwareVersion) {
            return hardwareVersion(Output.of(hardwareVersion));
        }

        /**
         * @param hostSystemId The managed object reference ID of a host on which to place the virtual machine. See the section on virtual machine migration for more information on modifying this value. When using a vSphere cluster, if a `host_system_id` is not supplied, vSphere will select a host in the cluster to place the virtual machine, according to any defaults or vSphere DRS placement policies.
         * 
         * @return builder
         * 
         */
        public Builder hostSystemId(@Nullable Output<String> hostSystemId) {
            $.hostSystemId = hostSystemId;
            return this;
        }

        /**
         * @param hostSystemId The managed object reference ID of a host on which to place the virtual machine. See the section on virtual machine migration for more information on modifying this value. When using a vSphere cluster, if a `host_system_id` is not supplied, vSphere will select a host in the cluster to place the virtual machine, according to any defaults or vSphere DRS placement policies.
         * 
         * @return builder
         * 
         */
        public Builder hostSystemId(String hostSystemId) {
            return hostSystemId(Output.of(hostSystemId));
        }

        /**
         * @param hvMode The hardware virtualization (non-nested) setting for the virtual machine. One of `hvAuto`, `hvOn`, or `hvOff`. Default: `hvAuto`.
         * 
         * @return builder
         * 
         */
        public Builder hvMode(@Nullable Output<String> hvMode) {
            $.hvMode = hvMode;
            return this;
        }

        /**
         * @param hvMode The hardware virtualization (non-nested) setting for the virtual machine. One of `hvAuto`, `hvOn`, or `hvOff`. Default: `hvAuto`.
         * 
         * @return builder
         * 
         */
        public Builder hvMode(String hvMode) {
            return hvMode(Output.of(hvMode));
        }

        /**
         * @param ideControllerCount The number of IDE controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: `2`.
         * 
         * @return builder
         * 
         */
        public Builder ideControllerCount(@Nullable Output<Integer> ideControllerCount) {
            $.ideControllerCount = ideControllerCount;
            return this;
        }

        /**
         * @param ideControllerCount The number of IDE controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: `2`.
         * 
         * @return builder
         * 
         */
        public Builder ideControllerCount(Integer ideControllerCount) {
            return ideControllerCount(Output.of(ideControllerCount));
        }

        /**
         * @param ignoredGuestIps List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: `[]`.
         * 
         * @return builder
         * 
         */
        public Builder ignoredGuestIps(@Nullable Output<List<String>> ignoredGuestIps) {
            $.ignoredGuestIps = ignoredGuestIps;
            return this;
        }

        /**
         * @param ignoredGuestIps List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: `[]`.
         * 
         * @return builder
         * 
         */
        public Builder ignoredGuestIps(List<String> ignoredGuestIps) {
            return ignoredGuestIps(Output.of(ignoredGuestIps));
        }

        /**
         * @param ignoredGuestIps List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: `[]`.
         * 
         * @return builder
         * 
         */
        public Builder ignoredGuestIps(String... ignoredGuestIps) {
            return ignoredGuestIps(List.of(ignoredGuestIps));
        }

        /**
         * @param imported Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
         * 
         * @return builder
         * 
         */
        public Builder imported(@Nullable Output<Boolean> imported) {
            $.imported = imported;
            return this;
        }

        /**
         * @param imported Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
         * 
         * @return builder
         * 
         */
        public Builder imported(Boolean imported) {
            return imported(Output.of(imported));
        }

        /**
         * @param latencySensitivity Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard devices. One of `low`, `normal`, `medium`, or `high`.
         * 
         * &gt; **NOTE:** On higher sensitivities, you may need to adjust the `memory_reservation` to the full amount of memory provisioned for the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder latencySensitivity(@Nullable Output<String> latencySensitivity) {
            $.latencySensitivity = latencySensitivity;
            return this;
        }

        /**
         * @param latencySensitivity Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard devices. One of `low`, `normal`, `medium`, or `high`.
         * 
         * &gt; **NOTE:** On higher sensitivities, you may need to adjust the `memory_reservation` to the full amount of memory provisioned for the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder latencySensitivity(String latencySensitivity) {
            return latencySensitivity(Output.of(latencySensitivity));
        }

        /**
         * @param memory The memory size to assign to the virtual machine, in MB. Default: `1024` (1 GB).
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<Integer> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The memory size to assign to the virtual machine, in MB. Default: `1024` (1 GB).
         * 
         * @return builder
         * 
         */
        public Builder memory(Integer memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param memoryHotAddEnabled Allow memory to be added to the virtual machine while it is powered on.
         * 
         * &gt; **NOTE:** CPU and memory hot add options are not available on all guest operating systems. Please refer to the [VMware Guest OS Compatibility Guide][vmware-docs-compat-guide] to which settings are allow for your guest operating system. In addition, at least one `pulumi up` must be run before you are able to use CPU and memory hot add.
         * 
         * [vmware-docs-compat-guide]: http://partnerweb.vmware.com/comp_guide2/pdf/VMware_GOS_Compatibility_Guide.pdf
         * 
         * &gt; **NOTE:** For Linux 64-bit guest operating systems with less than or equal to 3GB, the virtual machine must powered off to add memory beyond 3GB. Subsequent hot add of memory does not require the virtual machine to be powered-off to apply the plan. Please refer to [VMware KB 2008405][vmware-kb-2008405].
         * 
         * [vmware-kb-2008405]: https://kb.vmware.com/s/article/2008405
         * 
         * @return builder
         * 
         */
        public Builder memoryHotAddEnabled(@Nullable Output<Boolean> memoryHotAddEnabled) {
            $.memoryHotAddEnabled = memoryHotAddEnabled;
            return this;
        }

        /**
         * @param memoryHotAddEnabled Allow memory to be added to the virtual machine while it is powered on.
         * 
         * &gt; **NOTE:** CPU and memory hot add options are not available on all guest operating systems. Please refer to the [VMware Guest OS Compatibility Guide][vmware-docs-compat-guide] to which settings are allow for your guest operating system. In addition, at least one `pulumi up` must be run before you are able to use CPU and memory hot add.
         * 
         * [vmware-docs-compat-guide]: http://partnerweb.vmware.com/comp_guide2/pdf/VMware_GOS_Compatibility_Guide.pdf
         * 
         * &gt; **NOTE:** For Linux 64-bit guest operating systems with less than or equal to 3GB, the virtual machine must powered off to add memory beyond 3GB. Subsequent hot add of memory does not require the virtual machine to be powered-off to apply the plan. Please refer to [VMware KB 2008405][vmware-kb-2008405].
         * 
         * [vmware-kb-2008405]: https://kb.vmware.com/s/article/2008405
         * 
         * @return builder
         * 
         */
        public Builder memoryHotAddEnabled(Boolean memoryHotAddEnabled) {
            return memoryHotAddEnabled(Output.of(memoryHotAddEnabled));
        }

        /**
         * @param memoryLimit The maximum amount of memory (in MB) that th virtual machine can consume, regardless of available resources. The default is no limit.
         * 
         * @return builder
         * 
         */
        public Builder memoryLimit(@Nullable Output<Integer> memoryLimit) {
            $.memoryLimit = memoryLimit;
            return this;
        }

        /**
         * @param memoryLimit The maximum amount of memory (in MB) that th virtual machine can consume, regardless of available resources. The default is no limit.
         * 
         * @return builder
         * 
         */
        public Builder memoryLimit(Integer memoryLimit) {
            return memoryLimit(Output.of(memoryLimit));
        }

        /**
         * @param memoryReservation The amount of memory (in MB) that the virtual machine is guaranteed. The default is no reservation.
         * 
         * @return builder
         * 
         */
        public Builder memoryReservation(@Nullable Output<Integer> memoryReservation) {
            $.memoryReservation = memoryReservation;
            return this;
        }

        /**
         * @param memoryReservation The amount of memory (in MB) that the virtual machine is guaranteed. The default is no reservation.
         * 
         * @return builder
         * 
         */
        public Builder memoryReservation(Integer memoryReservation) {
            return memoryReservation(Output.of(memoryReservation));
        }

        /**
         * @param memoryShareCount The number of memory shares allocated to the virtual machine when the `memory_share_level` is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder memoryShareCount(@Nullable Output<Integer> memoryShareCount) {
            $.memoryShareCount = memoryShareCount;
            return this;
        }

        /**
         * @param memoryShareCount The number of memory shares allocated to the virtual machine when the `memory_share_level` is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder memoryShareCount(Integer memoryShareCount) {
            return memoryShareCount(Output.of(memoryShareCount));
        }

        /**
         * @param memoryShareLevel The allocation level for the virtual machine memory resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
         * 
         * @return builder
         * 
         */
        public Builder memoryShareLevel(@Nullable Output<String> memoryShareLevel) {
            $.memoryShareLevel = memoryShareLevel;
            return this;
        }

        /**
         * @param memoryShareLevel The allocation level for the virtual machine memory resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
         * 
         * @return builder
         * 
         */
        public Builder memoryShareLevel(String memoryShareLevel) {
            return memoryShareLevel(Output.of(memoryShareLevel));
        }

        /**
         * @param migrateWaitTimeout The amount of time, in minutes, to wait for a virtual machine migration to complete before failing. Default: `10` minutes. See the section on virtual machine migration for more information.
         * 
         * @return builder
         * 
         */
        public Builder migrateWaitTimeout(@Nullable Output<Integer> migrateWaitTimeout) {
            $.migrateWaitTimeout = migrateWaitTimeout;
            return this;
        }

        /**
         * @param migrateWaitTimeout The amount of time, in minutes, to wait for a virtual machine migration to complete before failing. Default: `10` minutes. See the section on virtual machine migration for more information.
         * 
         * @return builder
         * 
         */
        public Builder migrateWaitTimeout(Integer migrateWaitTimeout) {
            return migrateWaitTimeout(Output.of(migrateWaitTimeout));
        }

        /**
         * @param moid The managed object reference ID of the created virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder moid(@Nullable Output<String> moid) {
            $.moid = moid;
            return this;
        }

        /**
         * @param moid The managed object reference ID of the created virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder moid(String moid) {
            return moid(Output.of(moid));
        }

        /**
         * @param name The name of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nestedHvEnabled Enable nested hardware virtualization on the virtual machine, facilitating nested virtualization in the guest operating system. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder nestedHvEnabled(@Nullable Output<Boolean> nestedHvEnabled) {
            $.nestedHvEnabled = nestedHvEnabled;
            return this;
        }

        /**
         * @param nestedHvEnabled Enable nested hardware virtualization on the virtual machine, facilitating nested virtualization in the guest operating system. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder nestedHvEnabled(Boolean nestedHvEnabled) {
            return nestedHvEnabled(Output.of(nestedHvEnabled));
        }

        /**
         * @param networkInterfaces A specification for a virtual NIC on the virtual machine. See network interface options for more information.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(@Nullable Output<List<VirtualMachineNetworkInterfaceArgs>> networkInterfaces) {
            $.networkInterfaces = networkInterfaces;
            return this;
        }

        /**
         * @param networkInterfaces A specification for a virtual NIC on the virtual machine. See network interface options for more information.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(List<VirtualMachineNetworkInterfaceArgs> networkInterfaces) {
            return networkInterfaces(Output.of(networkInterfaces));
        }

        /**
         * @param networkInterfaces A specification for a virtual NIC on the virtual machine. See network interface options for more information.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(VirtualMachineNetworkInterfaceArgs... networkInterfaces) {
            return networkInterfaces(List.of(networkInterfaces));
        }

        /**
         * @param numCoresPerSocket The number of cores per socket in the virtual machine. The number of vCPUs on the virtual machine will be `num_cpus` divided by `num_cores_per_socket`. If specified, the value supplied to `num_cpus` must be evenly divisible by this value. Default: `1`.
         * 
         * @return builder
         * 
         */
        public Builder numCoresPerSocket(@Nullable Output<Integer> numCoresPerSocket) {
            $.numCoresPerSocket = numCoresPerSocket;
            return this;
        }

        /**
         * @param numCoresPerSocket The number of cores per socket in the virtual machine. The number of vCPUs on the virtual machine will be `num_cpus` divided by `num_cores_per_socket`. If specified, the value supplied to `num_cpus` must be evenly divisible by this value. Default: `1`.
         * 
         * @return builder
         * 
         */
        public Builder numCoresPerSocket(Integer numCoresPerSocket) {
            return numCoresPerSocket(Output.of(numCoresPerSocket));
        }

        /**
         * @param numCpus The total number of virtual processor cores to assign to the virtual machine. Default: `1`.
         * 
         * @return builder
         * 
         */
        public Builder numCpus(@Nullable Output<Integer> numCpus) {
            $.numCpus = numCpus;
            return this;
        }

        /**
         * @param numCpus The total number of virtual processor cores to assign to the virtual machine. Default: `1`.
         * 
         * @return builder
         * 
         */
        public Builder numCpus(Integer numCpus) {
            return numCpus(Output.of(numCpus));
        }

        /**
         * @param ovfDeploy When specified, the virtual machine will be deployed from the provided OVF/OVA template. See creating a virtual machine from an OVF/OVA template for more information.
         * 
         * @return builder
         * 
         */
        public Builder ovfDeploy(@Nullable Output<VirtualMachineOvfDeployArgs> ovfDeploy) {
            $.ovfDeploy = ovfDeploy;
            return this;
        }

        /**
         * @param ovfDeploy When specified, the virtual machine will be deployed from the provided OVF/OVA template. See creating a virtual machine from an OVF/OVA template for more information.
         * 
         * @return builder
         * 
         */
        public Builder ovfDeploy(VirtualMachineOvfDeployArgs ovfDeploy) {
            return ovfDeploy(Output.of(ovfDeploy));
        }

        /**
         * @param pciDeviceIds List of host PCI device IDs in which to create PCI passthroughs.
         * 
         * &gt; **NOTE:** Cloning requires vCenter Server and is not supported on direct ESXi host connections.
         * 
         * @return builder
         * 
         */
        public Builder pciDeviceIds(@Nullable Output<List<String>> pciDeviceIds) {
            $.pciDeviceIds = pciDeviceIds;
            return this;
        }

        /**
         * @param pciDeviceIds List of host PCI device IDs in which to create PCI passthroughs.
         * 
         * &gt; **NOTE:** Cloning requires vCenter Server and is not supported on direct ESXi host connections.
         * 
         * @return builder
         * 
         */
        public Builder pciDeviceIds(List<String> pciDeviceIds) {
            return pciDeviceIds(Output.of(pciDeviceIds));
        }

        /**
         * @param pciDeviceIds List of host PCI device IDs in which to create PCI passthroughs.
         * 
         * &gt; **NOTE:** Cloning requires vCenter Server and is not supported on direct ESXi host connections.
         * 
         * @return builder
         * 
         */
        public Builder pciDeviceIds(String... pciDeviceIds) {
            return pciDeviceIds(List.of(pciDeviceIds));
        }

        /**
         * @param powerState A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
         * 
         * @return builder
         * 
         */
        public Builder powerState(@Nullable Output<String> powerState) {
            $.powerState = powerState;
            return this;
        }

        /**
         * @param powerState A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
         * 
         * @return builder
         * 
         */
        public Builder powerState(String powerState) {
            return powerState(Output.of(powerState));
        }

        /**
         * @param poweronTimeout The amount of time, in seconds, that we will be trying to power on a VM
         * 
         * @return builder
         * 
         */
        public Builder poweronTimeout(@Nullable Output<Integer> poweronTimeout) {
            $.poweronTimeout = poweronTimeout;
            return this;
        }

        /**
         * @param poweronTimeout The amount of time, in seconds, that we will be trying to power on a VM
         * 
         * @return builder
         * 
         */
        public Builder poweronTimeout(Integer poweronTimeout) {
            return poweronTimeout(Output.of(poweronTimeout));
        }

        /**
         * @param rebootRequired Value internal to Terraform used to determine if a configuration set change requires a reboot.
         * 
         * @return builder
         * 
         */
        public Builder rebootRequired(@Nullable Output<Boolean> rebootRequired) {
            $.rebootRequired = rebootRequired;
            return this;
        }

        /**
         * @param rebootRequired Value internal to Terraform used to determine if a configuration set change requires a reboot.
         * 
         * @return builder
         * 
         */
        public Builder rebootRequired(Boolean rebootRequired) {
            return rebootRequired(Output.of(rebootRequired));
        }

        /**
         * @param replaceTrigger Triggers replacement of resource whenever it changes.
         * 
         * For example, `replace_trigger = sha256(format(&#34;%s-%s&#34;,data.template_file.cloud_init_metadata.rendered,data.template_file.cloud_init_userdata.rendered))` will fingerprint the changes in cloud-init metadata and userdata templates. This will enable a replacement of the resource whenever the dependant template renders a new configuration. (Forces a replacement.)
         * 
         * @return builder
         * 
         */
        public Builder replaceTrigger(@Nullable Output<String> replaceTrigger) {
            $.replaceTrigger = replaceTrigger;
            return this;
        }

        /**
         * @param replaceTrigger Triggers replacement of resource whenever it changes.
         * 
         * For example, `replace_trigger = sha256(format(&#34;%s-%s&#34;,data.template_file.cloud_init_metadata.rendered,data.template_file.cloud_init_userdata.rendered))` will fingerprint the changes in cloud-init metadata and userdata templates. This will enable a replacement of the resource whenever the dependant template renders a new configuration. (Forces a replacement.)
         * 
         * @return builder
         * 
         */
        public Builder replaceTrigger(String replaceTrigger) {
            return replaceTrigger(Output.of(replaceTrigger));
        }

        /**
         * @param resourcePoolId The managed object reference ID of the resource pool in which to place the virtual machine. See the Virtual Machine Migration section for more information on modifying this value.
         * 
         * &gt; **NOTE:** All clusters and standalone hosts have a default root resource pool. This resource argument does not directly accept the cluster or standalone host resource. For more information, see the section on specifying the Root Resource Pool in the `vsphere.ResourcePool` data source documentation on using the root resource pool.
         * 
         * @return builder
         * 
         */
        public Builder resourcePoolId(@Nullable Output<String> resourcePoolId) {
            $.resourcePoolId = resourcePoolId;
            return this;
        }

        /**
         * @param resourcePoolId The managed object reference ID of the resource pool in which to place the virtual machine. See the Virtual Machine Migration section for more information on modifying this value.
         * 
         * &gt; **NOTE:** All clusters and standalone hosts have a default root resource pool. This resource argument does not directly accept the cluster or standalone host resource. For more information, see the section on specifying the Root Resource Pool in the `vsphere.ResourcePool` data source documentation on using the root resource pool.
         * 
         * @return builder
         * 
         */
        public Builder resourcePoolId(String resourcePoolId) {
            return resourcePoolId(Output.of(resourcePoolId));
        }

        /**
         * @param runToolsScriptsAfterPowerOn Enable post-power-on scripts to run when VMware Tools is installed. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder runToolsScriptsAfterPowerOn(@Nullable Output<Boolean> runToolsScriptsAfterPowerOn) {
            $.runToolsScriptsAfterPowerOn = runToolsScriptsAfterPowerOn;
            return this;
        }

        /**
         * @param runToolsScriptsAfterPowerOn Enable post-power-on scripts to run when VMware Tools is installed. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder runToolsScriptsAfterPowerOn(Boolean runToolsScriptsAfterPowerOn) {
            return runToolsScriptsAfterPowerOn(Output.of(runToolsScriptsAfterPowerOn));
        }

        /**
         * @param runToolsScriptsAfterResume Enable ost-resume scripts to run when VMware Tools is installed. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder runToolsScriptsAfterResume(@Nullable Output<Boolean> runToolsScriptsAfterResume) {
            $.runToolsScriptsAfterResume = runToolsScriptsAfterResume;
            return this;
        }

        /**
         * @param runToolsScriptsAfterResume Enable ost-resume scripts to run when VMware Tools is installed. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder runToolsScriptsAfterResume(Boolean runToolsScriptsAfterResume) {
            return runToolsScriptsAfterResume(Output.of(runToolsScriptsAfterResume));
        }

        /**
         * @param runToolsScriptsBeforeGuestReboot Enable pre-reboot scripts to run when VMware Tools is installed. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder runToolsScriptsBeforeGuestReboot(@Nullable Output<Boolean> runToolsScriptsBeforeGuestReboot) {
            $.runToolsScriptsBeforeGuestReboot = runToolsScriptsBeforeGuestReboot;
            return this;
        }

        /**
         * @param runToolsScriptsBeforeGuestReboot Enable pre-reboot scripts to run when VMware Tools is installed. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder runToolsScriptsBeforeGuestReboot(Boolean runToolsScriptsBeforeGuestReboot) {
            return runToolsScriptsBeforeGuestReboot(Output.of(runToolsScriptsBeforeGuestReboot));
        }

        /**
         * @param runToolsScriptsBeforeGuestShutdown Enable pre-shutdown scripts to run when VMware Tools is installed. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder runToolsScriptsBeforeGuestShutdown(@Nullable Output<Boolean> runToolsScriptsBeforeGuestShutdown) {
            $.runToolsScriptsBeforeGuestShutdown = runToolsScriptsBeforeGuestShutdown;
            return this;
        }

        /**
         * @param runToolsScriptsBeforeGuestShutdown Enable pre-shutdown scripts to run when VMware Tools is installed. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder runToolsScriptsBeforeGuestShutdown(Boolean runToolsScriptsBeforeGuestShutdown) {
            return runToolsScriptsBeforeGuestShutdown(Output.of(runToolsScriptsBeforeGuestShutdown));
        }

        /**
         * @param runToolsScriptsBeforeGuestStandby Enable pre-standby scripts to run when VMware Tools is installed. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder runToolsScriptsBeforeGuestStandby(@Nullable Output<Boolean> runToolsScriptsBeforeGuestStandby) {
            $.runToolsScriptsBeforeGuestStandby = runToolsScriptsBeforeGuestStandby;
            return this;
        }

        /**
         * @param runToolsScriptsBeforeGuestStandby Enable pre-standby scripts to run when VMware Tools is installed. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder runToolsScriptsBeforeGuestStandby(Boolean runToolsScriptsBeforeGuestStandby) {
            return runToolsScriptsBeforeGuestStandby(Output.of(runToolsScriptsBeforeGuestStandby));
        }

        /**
         * @param sataControllerCount The number of SATA controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
         * you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
         * controllers.
         * 
         * @return builder
         * 
         */
        public Builder sataControllerCount(@Nullable Output<Integer> sataControllerCount) {
            $.sataControllerCount = sataControllerCount;
            return this;
        }

        /**
         * @param sataControllerCount The number of SATA controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
         * you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
         * controllers.
         * 
         * @return builder
         * 
         */
        public Builder sataControllerCount(Integer sataControllerCount) {
            return sataControllerCount(Output.of(sataControllerCount));
        }

        /**
         * @param scsiBusSharing The type of SCSI bus sharing for the virtual machine SCSI controller. One of `physicalSharing`, `virtualSharing`, and `noSharing`. Default: `noSharing`.
         * 
         * @return builder
         * 
         */
        public Builder scsiBusSharing(@Nullable Output<String> scsiBusSharing) {
            $.scsiBusSharing = scsiBusSharing;
            return this;
        }

        /**
         * @param scsiBusSharing The type of SCSI bus sharing for the virtual machine SCSI controller. One of `physicalSharing`, `virtualSharing`, and `noSharing`. Default: `noSharing`.
         * 
         * @return builder
         * 
         */
        public Builder scsiBusSharing(String scsiBusSharing) {
            return scsiBusSharing(Output.of(scsiBusSharing));
        }

        /**
         * @param scsiControllerCount The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
         * you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
         * controllers.
         * 
         * @return builder
         * 
         */
        public Builder scsiControllerCount(@Nullable Output<Integer> scsiControllerCount) {
            $.scsiControllerCount = scsiControllerCount;
            return this;
        }

        /**
         * @param scsiControllerCount The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
         * you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
         * controllers.
         * 
         * @return builder
         * 
         */
        public Builder scsiControllerCount(Integer scsiControllerCount) {
            return scsiControllerCount(Output.of(scsiControllerCount));
        }

        /**
         * @param scsiType The SCSI controller type for the virtual machine. One of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic SAS) or `pvscsi` (VMware Paravirtual). Default: `pvscsi`.
         * 
         * @return builder
         * 
         */
        public Builder scsiType(@Nullable Output<String> scsiType) {
            $.scsiType = scsiType;
            return this;
        }

        /**
         * @param scsiType The SCSI controller type for the virtual machine. One of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic SAS) or `pvscsi` (VMware Paravirtual). Default: `pvscsi`.
         * 
         * @return builder
         * 
         */
        public Builder scsiType(String scsiType) {
            return scsiType(Output.of(scsiType));
        }

        /**
         * @param shutdownWaitTimeout The amount of time, in minutes, to wait for a graceful guest shutdown when making necessary updates to the virtual machine. If `force_power_off` is set to `true`, the virtual machine will be forced to power-off after the timeout, otherwise an error is returned. Default: `3` minutes.
         * 
         * @return builder
         * 
         */
        public Builder shutdownWaitTimeout(@Nullable Output<Integer> shutdownWaitTimeout) {
            $.shutdownWaitTimeout = shutdownWaitTimeout;
            return this;
        }

        /**
         * @param shutdownWaitTimeout The amount of time, in minutes, to wait for a graceful guest shutdown when making necessary updates to the virtual machine. If `force_power_off` is set to `true`, the virtual machine will be forced to power-off after the timeout, otherwise an error is returned. Default: `3` minutes.
         * 
         * @return builder
         * 
         */
        public Builder shutdownWaitTimeout(Integer shutdownWaitTimeout) {
            return shutdownWaitTimeout(Output.of(shutdownWaitTimeout));
        }

        /**
         * @param storagePolicyId The ID of the storage policy to assign to the home directory of a virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder storagePolicyId(@Nullable Output<String> storagePolicyId) {
            $.storagePolicyId = storagePolicyId;
            return this;
        }

        /**
         * @param storagePolicyId The ID of the storage policy to assign to the home directory of a virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder storagePolicyId(String storagePolicyId) {
            return storagePolicyId(Output.of(storagePolicyId));
        }

        /**
         * @param swapPlacementPolicy The swap file placement policy for the virtual machine. One of `inherit`, `hostLocal`, or `vmDirectory`. Default: `inherit`.
         * 
         * @return builder
         * 
         */
        public Builder swapPlacementPolicy(@Nullable Output<String> swapPlacementPolicy) {
            $.swapPlacementPolicy = swapPlacementPolicy;
            return this;
        }

        /**
         * @param swapPlacementPolicy The swap file placement policy for the virtual machine. One of `inherit`, `hostLocal`, or `vmDirectory`. Default: `inherit`.
         * 
         * @return builder
         * 
         */
        public Builder swapPlacementPolicy(String swapPlacementPolicy) {
            return swapPlacementPolicy(Output.of(swapPlacementPolicy));
        }

        /**
         * @param syncTimeWithHost Enable the guest operating system to synchronization its clock with the host when the virtual machine is powered on or resumed. Requires vSphere 7.0 Update 1 and later. Requires VMware Tools to be installed. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder syncTimeWithHost(@Nullable Output<Boolean> syncTimeWithHost) {
            $.syncTimeWithHost = syncTimeWithHost;
            return this;
        }

        /**
         * @param syncTimeWithHost Enable the guest operating system to synchronization its clock with the host when the virtual machine is powered on or resumed. Requires vSphere 7.0 Update 1 and later. Requires VMware Tools to be installed. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder syncTimeWithHost(Boolean syncTimeWithHost) {
            return syncTimeWithHost(Output.of(syncTimeWithHost));
        }

        /**
         * @param syncTimeWithHostPeriodically Enable the guest operating system to periodically synchronize its clock with the host. Requires vSphere 7.0 Update 1 and later. On previous versions, setting `sync_time_with_host` is will enable periodic synchronization. Requires VMware Tools to be installed. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder syncTimeWithHostPeriodically(@Nullable Output<Boolean> syncTimeWithHostPeriodically) {
            $.syncTimeWithHostPeriodically = syncTimeWithHostPeriodically;
            return this;
        }

        /**
         * @param syncTimeWithHostPeriodically Enable the guest operating system to periodically synchronize its clock with the host. Requires vSphere 7.0 Update 1 and later. On previous versions, setting `sync_time_with_host` is will enable periodic synchronization. Requires VMware Tools to be installed. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder syncTimeWithHostPeriodically(Boolean syncTimeWithHostPeriodically) {
            return syncTimeWithHostPeriodically(Output.of(syncTimeWithHostPeriodically));
        }

        /**
         * @param tags The IDs of any tags to attach to this resource. Please refer to the `vsphere.Tag` resource for more information on applying tags to virtual machine resources.
         * 
         * &gt; **NOTE:** Tagging support is unsupported on direct ESXi host connections and requires vCenter Server instance.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The IDs of any tags to attach to this resource. Please refer to the `vsphere.Tag` resource for more information on applying tags to virtual machine resources.
         * 
         * &gt; **NOTE:** Tagging support is unsupported on direct ESXi host connections and requires vCenter Server instance.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The IDs of any tags to attach to this resource. Please refer to the `vsphere.Tag` resource for more information on applying tags to virtual machine resources.
         * 
         * &gt; **NOTE:** Tagging support is unsupported on direct ESXi host connections and requires vCenter Server instance.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param toolsUpgradePolicy Enable automatic upgrade of the VMware Tools version when the virtual machine is rebooted. If necessary, VMware Tools is upgraded to the latest version supported by the host on which the virtual machine is running. Requires VMware Tools to be installed. One of `manual` or `upgradeAtPowerCycle`. Default: `manual`.
         * 
         * @return builder
         * 
         */
        public Builder toolsUpgradePolicy(@Nullable Output<String> toolsUpgradePolicy) {
            $.toolsUpgradePolicy = toolsUpgradePolicy;
            return this;
        }

        /**
         * @param toolsUpgradePolicy Enable automatic upgrade of the VMware Tools version when the virtual machine is rebooted. If necessary, VMware Tools is upgraded to the latest version supported by the host on which the virtual machine is running. Requires VMware Tools to be installed. One of `manual` or `upgradeAtPowerCycle`. Default: `manual`.
         * 
         * @return builder
         * 
         */
        public Builder toolsUpgradePolicy(String toolsUpgradePolicy) {
            return toolsUpgradePolicy(Output.of(toolsUpgradePolicy));
        }

        /**
         * @param uuid The UUID of the virtual disk VMDK file. This is used to track the virtual disk on the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid The UUID of the virtual disk VMDK file. This is used to track the virtual disk on the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        /**
         * @param vapp Used for vApp configurations. The only sub-key available is `properties`, which is a key/value map of properties for virtual machines imported from and OVF/OVA. See Using vApp Properties for OVF/OVA Configuration for more information.
         * 
         * @return builder
         * 
         */
        public Builder vapp(@Nullable Output<VirtualMachineVappArgs> vapp) {
            $.vapp = vapp;
            return this;
        }

        /**
         * @param vapp Used for vApp configurations. The only sub-key available is `properties`, which is a key/value map of properties for virtual machines imported from and OVF/OVA. See Using vApp Properties for OVF/OVA Configuration for more information.
         * 
         * @return builder
         * 
         */
        public Builder vapp(VirtualMachineVappArgs vapp) {
            return vapp(Output.of(vapp));
        }

        /**
         * @param vappTransports Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
         * 
         * @return builder
         * 
         */
        public Builder vappTransports(@Nullable Output<List<String>> vappTransports) {
            $.vappTransports = vappTransports;
            return this;
        }

        /**
         * @param vappTransports Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
         * 
         * @return builder
         * 
         */
        public Builder vappTransports(List<String> vappTransports) {
            return vappTransports(Output.of(vappTransports));
        }

        /**
         * @param vappTransports Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
         * 
         * @return builder
         * 
         */
        public Builder vappTransports(String... vappTransports) {
            return vappTransports(List.of(vappTransports));
        }

        /**
         * @param vbsEnabled Enable Virtualization Based Security. Requires `firmware` to be `efi`. In addition, `vvtd_enabled`, `nested_hv_enabled`, and `efi_secure_boot_enabled` must all have a value of `true`. Supported on vSphere 6.7 and later. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder vbsEnabled(@Nullable Output<Boolean> vbsEnabled) {
            $.vbsEnabled = vbsEnabled;
            return this;
        }

        /**
         * @param vbsEnabled Enable Virtualization Based Security. Requires `firmware` to be `efi`. In addition, `vvtd_enabled`, `nested_hv_enabled`, and `efi_secure_boot_enabled` must all have a value of `true`. Supported on vSphere 6.7 and later. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder vbsEnabled(Boolean vbsEnabled) {
            return vbsEnabled(Output.of(vbsEnabled));
        }

        /**
         * @param vmwareToolsStatus The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
         * 
         * @return builder
         * 
         */
        public Builder vmwareToolsStatus(@Nullable Output<String> vmwareToolsStatus) {
            $.vmwareToolsStatus = vmwareToolsStatus;
            return this;
        }

        /**
         * @param vmwareToolsStatus The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
         * 
         * @return builder
         * 
         */
        public Builder vmwareToolsStatus(String vmwareToolsStatus) {
            return vmwareToolsStatus(Output.of(vmwareToolsStatus));
        }

        /**
         * @param vmxPath The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
         * 
         * @return builder
         * 
         */
        public Builder vmxPath(@Nullable Output<String> vmxPath) {
            $.vmxPath = vmxPath;
            return this;
        }

        /**
         * @param vmxPath The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
         * 
         * @return builder
         * 
         */
        public Builder vmxPath(String vmxPath) {
            return vmxPath(Output.of(vmxPath));
        }

        /**
         * @param vvtdEnabled Enable Intel Virtualization Technology for Directed I/O for the virtual machine (_I/O MMU_ in the vSphere Client). Supported on vSphere 6.7 and later. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder vvtdEnabled(@Nullable Output<Boolean> vvtdEnabled) {
            $.vvtdEnabled = vvtdEnabled;
            return this;
        }

        /**
         * @param vvtdEnabled Enable Intel Virtualization Technology for Directed I/O for the virtual machine (_I/O MMU_ in the vSphere Client). Supported on vSphere 6.7 and later. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder vvtdEnabled(Boolean vvtdEnabled) {
            return vvtdEnabled(Output.of(vvtdEnabled));
        }

        /**
         * @param waitForGuestIpTimeout The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. This should only be used if the version VMware Tools does not allow the `wait_for_guest_net_timeout` waiter to be used. A value less than `1` disables the waiter. Default: `0`.
         * 
         * @return builder
         * 
         */
        public Builder waitForGuestIpTimeout(@Nullable Output<Integer> waitForGuestIpTimeout) {
            $.waitForGuestIpTimeout = waitForGuestIpTimeout;
            return this;
        }

        /**
         * @param waitForGuestIpTimeout The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. This should only be used if the version VMware Tools does not allow the `wait_for_guest_net_timeout` waiter to be used. A value less than `1` disables the waiter. Default: `0`.
         * 
         * @return builder
         * 
         */
        public Builder waitForGuestIpTimeout(Integer waitForGuestIpTimeout) {
            return waitForGuestIpTimeout(Output.of(waitForGuestIpTimeout));
        }

        /**
         * @param waitForGuestNetRoutable Controls whether or not the guest network waiter waits for a routable address. When `false`, the waiter does not wait for a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria. This property is ignored if the `wait_for_guest_ip_timeout` waiter is used. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder waitForGuestNetRoutable(@Nullable Output<Boolean> waitForGuestNetRoutable) {
            $.waitForGuestNetRoutable = waitForGuestNetRoutable;
            return this;
        }

        /**
         * @param waitForGuestNetRoutable Controls whether or not the guest network waiter waits for a routable address. When `false`, the waiter does not wait for a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria. This property is ignored if the `wait_for_guest_ip_timeout` waiter is used. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder waitForGuestNetRoutable(Boolean waitForGuestNetRoutable) {
            return waitForGuestNetRoutable(Output.of(waitForGuestNetRoutable));
        }

        /**
         * @param waitForGuestNetTimeout The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. Older versions of VMware Tools do not populate this property. In those cases, this waiter can be disabled and the `wait_for_guest_ip_timeout` waiter can be used instead. A value less than `1` disables the waiter. Default: `5` minutes.
         * 
         * @return builder
         * 
         */
        public Builder waitForGuestNetTimeout(@Nullable Output<Integer> waitForGuestNetTimeout) {
            $.waitForGuestNetTimeout = waitForGuestNetTimeout;
            return this;
        }

        /**
         * @param waitForGuestNetTimeout The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. Older versions of VMware Tools do not populate this property. In those cases, this waiter can be disabled and the `wait_for_guest_ip_timeout` waiter can be used instead. A value less than `1` disables the waiter. Default: `5` minutes.
         * 
         * @return builder
         * 
         */
        public Builder waitForGuestNetTimeout(Integer waitForGuestNetTimeout) {
            return waitForGuestNetTimeout(Output.of(waitForGuestNetTimeout));
        }

        public VirtualMachineState build() {
            return $;
        }
    }

}
