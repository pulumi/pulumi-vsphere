// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.ResourcePoolArgs;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.inputs.ResourcePoolState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="vsphere:index/resourcePool:ResourcePool")
public class ResourcePool extends com.pulumi.resources.CustomResource {
    /**
     * Determines if the reservation on a resource pool can grow beyond the specified value, if the parent resource pool has
     * unreserved resources.
     * 
     */
    @Export(name="cpuExpandable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> cpuExpandable;

    /**
     * @return Determines if the reservation on a resource pool can grow beyond the specified value, if the parent resource pool has
     * unreserved resources.
     * 
     */
    public Output<Optional<Boolean>> cpuExpandable() {
        return Codegen.optional(this.cpuExpandable);
    }
    /**
     * The utilization of a resource pool will not exceed this limit, even if there are available resources. Set to -1 for
     * unlimited.
     * 
     */
    @Export(name="cpuLimit", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> cpuLimit;

    /**
     * @return The utilization of a resource pool will not exceed this limit, even if there are available resources. Set to -1 for
     * unlimited.
     * 
     */
    public Output<Optional<Integer>> cpuLimit() {
        return Codegen.optional(this.cpuLimit);
    }
    /**
     * Amount of CPU (MHz) that is guaranteed available to the resource pool.
     * 
     */
    @Export(name="cpuReservation", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> cpuReservation;

    /**
     * @return Amount of CPU (MHz) that is guaranteed available to the resource pool.
     * 
     */
    public Output<Optional<Integer>> cpuReservation() {
        return Codegen.optional(this.cpuReservation);
    }
    /**
     * The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for
     * shares. Can be one of low, normal, high, or custom.
     * 
     */
    @Export(name="cpuShareLevel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cpuShareLevel;

    /**
     * @return The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for
     * shares. Can be one of low, normal, high, or custom.
     * 
     */
    public Output<Optional<String>> cpuShareLevel() {
        return Codegen.optional(this.cpuShareLevel);
    }
    /**
     * The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set,
     * cpu_share_level must be custom.
     * 
     */
    @Export(name="cpuShares", refs={Integer.class}, tree="[0]")
    private Output<Integer> cpuShares;

    /**
     * @return The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set,
     * cpu_share_level must be custom.
     * 
     */
    public Output<Integer> cpuShares() {
        return this.cpuShares;
    }
    /**
     * A list of custom attributes to set on this resource.
     * 
     */
    @Export(name="customAttributes", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> customAttributes;

    /**
     * @return A list of custom attributes to set on this resource.
     * 
     */
    public Output<Optional<Map<String,String>>> customAttributes() {
        return Codegen.optional(this.customAttributes);
    }
    /**
     * Determines if the reservation on a resource pool can grow beyond the specified value, if the parent resource pool has
     * unreserved resources.
     * 
     */
    @Export(name="memoryExpandable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> memoryExpandable;

    /**
     * @return Determines if the reservation on a resource pool can grow beyond the specified value, if the parent resource pool has
     * unreserved resources.
     * 
     */
    public Output<Optional<Boolean>> memoryExpandable() {
        return Codegen.optional(this.memoryExpandable);
    }
    /**
     * The utilization of a resource pool will not exceed this limit, even if there are available resources. Set to -1 for
     * unlimited.
     * 
     */
    @Export(name="memoryLimit", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> memoryLimit;

    /**
     * @return The utilization of a resource pool will not exceed this limit, even if there are available resources. Set to -1 for
     * unlimited.
     * 
     */
    public Output<Optional<Integer>> memoryLimit() {
        return Codegen.optional(this.memoryLimit);
    }
    /**
     * Amount of memory (MB) that is guaranteed available to the resource pool.
     * 
     */
    @Export(name="memoryReservation", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> memoryReservation;

    /**
     * @return Amount of memory (MB) that is guaranteed available to the resource pool.
     * 
     */
    public Output<Optional<Integer>> memoryReservation() {
        return Codegen.optional(this.memoryReservation);
    }
    /**
     * The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for
     * shares. Can be one of low, normal, high, or custom.
     * 
     */
    @Export(name="memoryShareLevel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> memoryShareLevel;

    /**
     * @return The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for
     * shares. Can be one of low, normal, high, or custom.
     * 
     */
    public Output<Optional<String>> memoryShareLevel() {
        return Codegen.optional(this.memoryShareLevel);
    }
    /**
     * The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set,
     * memory_share_level must be custom.
     * 
     */
    @Export(name="memoryShares", refs={Integer.class}, tree="[0]")
    private Output<Integer> memoryShares;

    /**
     * @return The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set,
     * memory_share_level must be custom.
     * 
     */
    public Output<Integer> memoryShares() {
        return this.memoryShares;
    }
    /**
     * Name of resource pool.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of resource pool.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the root resource pool of the compute resource the resource pool is in.
     * 
     */
    @Export(name="parentResourcePoolId", refs={String.class}, tree="[0]")
    private Output<String> parentResourcePoolId;

    /**
     * @return The ID of the root resource pool of the compute resource the resource pool is in.
     * 
     */
    public Output<String> parentResourcePoolId() {
        return this.parentResourcePoolId;
    }
    /**
     * Determines if the shares of all descendants of the resource pool are scaled up or down when the shares of the resource
     * pool are scaled up or down.
     * 
     */
    @Export(name="scaleDescendantsShares", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scaleDescendantsShares;

    /**
     * @return Determines if the shares of all descendants of the resource pool are scaled up or down when the shares of the resource
     * pool are scaled up or down.
     * 
     */
    public Output<Optional<String>> scaleDescendantsShares() {
        return Codegen.optional(this.scaleDescendantsShares);
    }
    /**
     * A list of tag IDs to apply to this object.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of tag IDs to apply to this object.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ResourcePool(java.lang.String name) {
        this(name, ResourcePoolArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ResourcePool(java.lang.String name, ResourcePoolArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ResourcePool(java.lang.String name, ResourcePoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/resourcePool:ResourcePool", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ResourcePool(java.lang.String name, Output<java.lang.String> id, @Nullable ResourcePoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/resourcePool:ResourcePool", name, state, makeResourceOptions(options, id), false);
    }

    private static ResourcePoolArgs makeArgs(ResourcePoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ResourcePoolArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ResourcePool get(java.lang.String name, Output<java.lang.String> id, @Nullable ResourcePoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ResourcePool(name, id, state, options);
    }
}
