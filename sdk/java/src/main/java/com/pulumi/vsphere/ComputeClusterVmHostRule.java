// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vsphere.ComputeClusterVmHostRuleArgs;
import com.pulumi.vsphere.Utilities;
import com.pulumi.vsphere.inputs.ComputeClusterVmHostRuleState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="vsphere:index/computeClusterVmHostRule:ComputeClusterVmHostRule")
public class ComputeClusterVmHostRule extends com.pulumi.resources.CustomResource {
    /**
     * When this field is used, the virtual
     * machines defined in `vm_group_name` will be run on the
     * hosts defined in this host group.
     * 
     */
    @Export(name="affinityHostGroupName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> affinityHostGroupName;

    /**
     * @return When this field is used, the virtual
     * machines defined in `vm_group_name` will be run on the
     * hosts defined in this host group.
     * 
     */
    public Output<Optional<String>> affinityHostGroupName() {
        return Codegen.optional(this.affinityHostGroupName);
    }
    /**
     * When this field is used, the
     * virtual machines defined in `vm_group_name` will *not* be
     * run on the hosts defined in this host group.
     * 
     */
    @Export(name="antiAffinityHostGroupName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> antiAffinityHostGroupName;

    /**
     * @return When this field is used, the
     * virtual machines defined in `vm_group_name` will *not* be
     * run on the hosts defined in this host group.
     * 
     */
    public Output<Optional<String>> antiAffinityHostGroupName() {
        return Codegen.optional(this.antiAffinityHostGroupName);
    }
    /**
     * The managed object reference
     * ID of the cluster to put the group in.  Forces a new
     * resource if changed.
     * 
     */
    @Export(name="computeClusterId", refs={String.class}, tree="[0]")
    private Output<String> computeClusterId;

    /**
     * @return The managed object reference
     * ID of the cluster to put the group in.  Forces a new
     * resource if changed.
     * 
     */
    public Output<String> computeClusterId() {
        return this.computeClusterId;
    }
    /**
     * Enable this rule in the cluster. Default: `true`.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Enable this rule in the cluster. Default: `true`.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * When this value is `true`, prevents any virtual
     * machine operations that may violate this rule. Default: `false`.
     * 
     * &gt; **NOTE:** One of `affinity_host_group_name` or
     * `anti_affinity_host_group_name` must be
     * defined, but not both.
     * 
     * &gt; **NOTE:** The namespace for rule names on this resource (defined by the
     * `name` argument) is shared with all rules in the cluster - consider
     * this when naming your rules.
     * 
     */
    @Export(name="mandatory", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> mandatory;

    /**
     * @return When this value is `true`, prevents any virtual
     * machine operations that may violate this rule. Default: `false`.
     * 
     * &gt; **NOTE:** One of `affinity_host_group_name` or
     * `anti_affinity_host_group_name` must be
     * defined, but not both.
     * 
     * &gt; **NOTE:** The namespace for rule names on this resource (defined by the
     * `name` argument) is shared with all rules in the cluster - consider
     * this when naming your rules.
     * 
     */
    public Output<Optional<Boolean>> mandatory() {
        return Codegen.optional(this.mandatory);
    }
    /**
     * The name of the rule. This must be unique in the
     * cluster.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the rule. This must be unique in the
     * cluster.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The name of the virtual machine group to use
     * with this rule.
     * 
     */
    @Export(name="vmGroupName", refs={String.class}, tree="[0]")
    private Output<String> vmGroupName;

    /**
     * @return The name of the virtual machine group to use
     * with this rule.
     * 
     */
    public Output<String> vmGroupName() {
        return this.vmGroupName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ComputeClusterVmHostRule(java.lang.String name) {
        this(name, ComputeClusterVmHostRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ComputeClusterVmHostRule(java.lang.String name, ComputeClusterVmHostRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ComputeClusterVmHostRule(java.lang.String name, ComputeClusterVmHostRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/computeClusterVmHostRule:ComputeClusterVmHostRule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ComputeClusterVmHostRule(java.lang.String name, Output<java.lang.String> id, @Nullable ComputeClusterVmHostRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vsphere:index/computeClusterVmHostRule:ComputeClusterVmHostRule", name, state, makeResourceOptions(options, id), false);
    }

    private static ComputeClusterVmHostRuleArgs makeArgs(ComputeClusterVmHostRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ComputeClusterVmHostRuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ComputeClusterVmHostRule get(java.lang.String name, Output<java.lang.String> id, @Nullable ComputeClusterVmHostRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ComputeClusterVmHostRule(name, id, state, options);
    }
}
