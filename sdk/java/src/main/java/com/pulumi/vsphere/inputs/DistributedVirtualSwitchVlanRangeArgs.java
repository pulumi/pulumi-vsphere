// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;


public final class DistributedVirtualSwitchVlanRangeArgs extends com.pulumi.resources.ResourceArgs {

    public static final DistributedVirtualSwitchVlanRangeArgs Empty = new DistributedVirtualSwitchVlanRangeArgs();

    /**
     * The minimum VLAN to use in the range.
     * 
     */
    @Import(name="maxVlan", required=true)
    private Output<Integer> maxVlan;

    /**
     * @return The minimum VLAN to use in the range.
     * 
     */
    public Output<Integer> maxVlan() {
        return this.maxVlan;
    }

    /**
     * The minimum VLAN to use in the range.
     * 
     */
    @Import(name="minVlan", required=true)
    private Output<Integer> minVlan;

    /**
     * @return The minimum VLAN to use in the range.
     * 
     */
    public Output<Integer> minVlan() {
        return this.minVlan;
    }

    private DistributedVirtualSwitchVlanRangeArgs() {}

    private DistributedVirtualSwitchVlanRangeArgs(DistributedVirtualSwitchVlanRangeArgs $) {
        this.maxVlan = $.maxVlan;
        this.minVlan = $.minVlan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DistributedVirtualSwitchVlanRangeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DistributedVirtualSwitchVlanRangeArgs $;

        public Builder() {
            $ = new DistributedVirtualSwitchVlanRangeArgs();
        }

        public Builder(DistributedVirtualSwitchVlanRangeArgs defaults) {
            $ = new DistributedVirtualSwitchVlanRangeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxVlan The minimum VLAN to use in the range.
         * 
         * @return builder
         * 
         */
        public Builder maxVlan(Output<Integer> maxVlan) {
            $.maxVlan = maxVlan;
            return this;
        }

        /**
         * @param maxVlan The minimum VLAN to use in the range.
         * 
         * @return builder
         * 
         */
        public Builder maxVlan(Integer maxVlan) {
            return maxVlan(Output.of(maxVlan));
        }

        /**
         * @param minVlan The minimum VLAN to use in the range.
         * 
         * @return builder
         * 
         */
        public Builder minVlan(Output<Integer> minVlan) {
            $.minVlan = minVlan;
            return this;
        }

        /**
         * @param minVlan The minimum VLAN to use in the range.
         * 
         * @return builder
         * 
         */
        public Builder minVlan(Integer minVlan) {
            return minVlan(Output.of(minVlan));
        }

        public DistributedVirtualSwitchVlanRangeArgs build() {
            if ($.maxVlan == null) {
                throw new MissingRequiredPropertyException("DistributedVirtualSwitchVlanRangeArgs", "maxVlan");
            }
            if ($.minVlan == null) {
                throw new MissingRequiredPropertyException("DistributedVirtualSwitchVlanRangeArgs", "minVlan");
            }
            return $;
        }
    }

}
