// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vsphere;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.vsphere.inputs.ContentLibraryPublicationArgs;
import com.pulumi.vsphere.inputs.ContentLibrarySubscriptionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContentLibraryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContentLibraryArgs Empty = new ContentLibraryArgs();

    /**
     * A description for the content library.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the content library.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the content library.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the content library.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Options to publish a local content library.
     * 
     */
    @Import(name="publication")
    private @Nullable Output<ContentLibraryPublicationArgs> publication;

    /**
     * @return Options to publish a local content library.
     * 
     */
    public Optional<Output<ContentLibraryPublicationArgs>> publication() {
        return Optional.ofNullable(this.publication);
    }

    /**
     * The managed object reference ID of the datastore on which to store the content library items.
     * 
     */
    @Import(name="storageBackings", required=true)
    private Output<List<String>> storageBackings;

    /**
     * @return The managed object reference ID of the datastore on which to store the content library items.
     * 
     */
    public Output<List<String>> storageBackings() {
        return this.storageBackings;
    }

    /**
     * Options subscribe to a published content library.
     * 
     */
    @Import(name="subscription")
    private @Nullable Output<ContentLibrarySubscriptionArgs> subscription;

    /**
     * @return Options subscribe to a published content library.
     * 
     */
    public Optional<Output<ContentLibrarySubscriptionArgs>> subscription() {
        return Optional.ofNullable(this.subscription);
    }

    private ContentLibraryArgs() {}

    private ContentLibraryArgs(ContentLibraryArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.publication = $.publication;
        this.storageBackings = $.storageBackings;
        this.subscription = $.subscription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContentLibraryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContentLibraryArgs $;

        public Builder() {
            $ = new ContentLibraryArgs();
        }

        public Builder(ContentLibraryArgs defaults) {
            $ = new ContentLibraryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description for the content library.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the content library.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the content library.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the content library.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publication Options to publish a local content library.
         * 
         * @return builder
         * 
         */
        public Builder publication(@Nullable Output<ContentLibraryPublicationArgs> publication) {
            $.publication = publication;
            return this;
        }

        /**
         * @param publication Options to publish a local content library.
         * 
         * @return builder
         * 
         */
        public Builder publication(ContentLibraryPublicationArgs publication) {
            return publication(Output.of(publication));
        }

        /**
         * @param storageBackings The managed object reference ID of the datastore on which to store the content library items.
         * 
         * @return builder
         * 
         */
        public Builder storageBackings(Output<List<String>> storageBackings) {
            $.storageBackings = storageBackings;
            return this;
        }

        /**
         * @param storageBackings The managed object reference ID of the datastore on which to store the content library items.
         * 
         * @return builder
         * 
         */
        public Builder storageBackings(List<String> storageBackings) {
            return storageBackings(Output.of(storageBackings));
        }

        /**
         * @param storageBackings The managed object reference ID of the datastore on which to store the content library items.
         * 
         * @return builder
         * 
         */
        public Builder storageBackings(String... storageBackings) {
            return storageBackings(List.of(storageBackings));
        }

        /**
         * @param subscription Options subscribe to a published content library.
         * 
         * @return builder
         * 
         */
        public Builder subscription(@Nullable Output<ContentLibrarySubscriptionArgs> subscription) {
            $.subscription = subscription;
            return this;
        }

        /**
         * @param subscription Options subscribe to a published content library.
         * 
         * @return builder
         * 
         */
        public Builder subscription(ContentLibrarySubscriptionArgs subscription) {
            return subscription(Output.of(subscription));
        }

        public ContentLibraryArgs build() {
            $.storageBackings = Objects.requireNonNull($.storageBackings, "expected parameter 'storageBackings' to be non-null");
            return $;
        }
    }

}
