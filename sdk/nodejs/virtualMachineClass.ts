// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a resource for configuring a Virtual Machine class.
 *
 * ## Example Usage
 *
 * ### S
 *
 * ### Create a Basic Class
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const basicClass = new vsphere.VirtualMachineClass("basic_class", {
 *     name: "basic-class",
 *     cpus: 4,
 *     memory: 4096,
 * });
 * ```
 *
 * ### Create a Class with a vGPU
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const vgpClass = new vsphere.VirtualMachineClass("vgp_class", {
 *     name: "vgpu-class",
 *     cpus: 4,
 *     memory: 4096,
 *     memoryReservation: 100,
 *     vgpuDevices: ["vgpu1"],
 * });
 * ```
 */
export class VirtualMachineClass extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachineClass resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineClassState, opts?: pulumi.CustomResourceOptions): VirtualMachineClass {
        return new VirtualMachineClass(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/virtualMachineClass:VirtualMachineClass';

    /**
     * Returns true if the given object is an instance of VirtualMachineClass.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachineClass {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachineClass.__pulumiType;
    }

    /**
     * The percentage of the available CPU capacity which will be reserved.
     */
    declare public readonly cpuReservation: pulumi.Output<number | undefined>;
    /**
     * The number of CPUs.
     */
    declare public readonly cpus: pulumi.Output<number>;
    /**
     * The amount of memory in MB.
     */
    declare public readonly memory: pulumi.Output<number>;
    /**
     * The percentage of memory reservation.
     */
    declare public readonly memoryReservation: pulumi.Output<number | undefined>;
    /**
     * The name for the class.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The identifiers of the vGPU devices for the class. If this is set memory reservation needs to be 100.
     */
    declare public readonly vgpuDevices: pulumi.Output<string[] | undefined>;

    /**
     * Create a VirtualMachineClass resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineClassArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineClassArgs | VirtualMachineClassState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineClassState | undefined;
            resourceInputs["cpuReservation"] = state?.cpuReservation;
            resourceInputs["cpus"] = state?.cpus;
            resourceInputs["memory"] = state?.memory;
            resourceInputs["memoryReservation"] = state?.memoryReservation;
            resourceInputs["name"] = state?.name;
            resourceInputs["vgpuDevices"] = state?.vgpuDevices;
        } else {
            const args = argsOrState as VirtualMachineClassArgs | undefined;
            if (args?.cpus === undefined && !opts.urn) {
                throw new Error("Missing required property 'cpus'");
            }
            if (args?.memory === undefined && !opts.urn) {
                throw new Error("Missing required property 'memory'");
            }
            resourceInputs["cpuReservation"] = args?.cpuReservation;
            resourceInputs["cpus"] = args?.cpus;
            resourceInputs["memory"] = args?.memory;
            resourceInputs["memoryReservation"] = args?.memoryReservation;
            resourceInputs["name"] = args?.name;
            resourceInputs["vgpuDevices"] = args?.vgpuDevices;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualMachineClass.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachineClass resources.
 */
export interface VirtualMachineClassState {
    /**
     * The percentage of the available CPU capacity which will be reserved.
     */
    cpuReservation?: pulumi.Input<number>;
    /**
     * The number of CPUs.
     */
    cpus?: pulumi.Input<number>;
    /**
     * The amount of memory in MB.
     */
    memory?: pulumi.Input<number>;
    /**
     * The percentage of memory reservation.
     */
    memoryReservation?: pulumi.Input<number>;
    /**
     * The name for the class.
     */
    name?: pulumi.Input<string>;
    /**
     * The identifiers of the vGPU devices for the class. If this is set memory reservation needs to be 100.
     */
    vgpuDevices?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VirtualMachineClass resource.
 */
export interface VirtualMachineClassArgs {
    /**
     * The percentage of the available CPU capacity which will be reserved.
     */
    cpuReservation?: pulumi.Input<number>;
    /**
     * The number of CPUs.
     */
    cpus: pulumi.Input<number>;
    /**
     * The amount of memory in MB.
     */
    memory: pulumi.Input<number>;
    /**
     * The percentage of memory reservation.
     */
    memoryReservation?: pulumi.Input<number>;
    /**
     * The name for the class.
     */
    name?: pulumi.Input<string>;
    /**
     * The identifiers of the vGPU devices for the class. If this is set memory reservation needs to be 100.
     */
    vgpuDevices?: pulumi.Input<pulumi.Input<string>[]>;
}
