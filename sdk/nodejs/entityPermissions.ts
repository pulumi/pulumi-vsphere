// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EntityPermissions extends pulumi.CustomResource {
    /**
     * Get an existing EntityPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntityPermissionsState, opts?: pulumi.CustomResourceOptions): EntityPermissions {
        return new EntityPermissions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/entityPermissions:EntityPermissions';

    /**
     * Returns true if the given object is an instance of EntityPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EntityPermissions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EntityPermissions.__pulumiType;
    }

    /**
     * The managed object id (uuid for some entities) on
     * which permissions are to be created.
     */
    public readonly entityId!: pulumi.Output<string>;
    /**
     * The managed object type, types can be found in the
     * managed object type section
     * [here](https://developer.broadcom.com/xapis/vsphere-web-services-api/latest/).
     */
    public readonly entityType!: pulumi.Output<string>;
    /**
     * The permissions to be given on this entity. Keep
     * the permissions sorted alphabetically on `userOrGroup` for a better user
     * experience.
     */
    public readonly permissions!: pulumi.Output<outputs.EntityPermissionsPermission[]>;

    /**
     * Create a EntityPermissions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EntityPermissionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntityPermissionsArgs | EntityPermissionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EntityPermissionsState | undefined;
            resourceInputs["entityId"] = state ? state.entityId : undefined;
            resourceInputs["entityType"] = state ? state.entityType : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
        } else {
            const args = argsOrState as EntityPermissionsArgs | undefined;
            if ((!args || args.entityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityId'");
            }
            if ((!args || args.entityType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityType'");
            }
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            resourceInputs["entityId"] = args ? args.entityId : undefined;
            resourceInputs["entityType"] = args ? args.entityType : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EntityPermissions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EntityPermissions resources.
 */
export interface EntityPermissionsState {
    /**
     * The managed object id (uuid for some entities) on
     * which permissions are to be created.
     */
    entityId?: pulumi.Input<string>;
    /**
     * The managed object type, types can be found in the
     * managed object type section
     * [here](https://developer.broadcom.com/xapis/vsphere-web-services-api/latest/).
     */
    entityType?: pulumi.Input<string>;
    /**
     * The permissions to be given on this entity. Keep
     * the permissions sorted alphabetically on `userOrGroup` for a better user
     * experience.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.EntityPermissionsPermission>[]>;
}

/**
 * The set of arguments for constructing a EntityPermissions resource.
 */
export interface EntityPermissionsArgs {
    /**
     * The managed object id (uuid for some entities) on
     * which permissions are to be created.
     */
    entityId: pulumi.Input<string>;
    /**
     * The managed object type, types can be found in the
     * managed object type section
     * [here](https://developer.broadcom.com/xapis/vsphere-web-services-api/latest/).
     */
    entityType: pulumi.Input<string>;
    /**
     * The permissions to be given on this entity. Keep
     * the permissions sorted alphabetically on `userOrGroup` for a better user
     * experience.
     */
    permissions: pulumi.Input<pulumi.Input<inputs.EntityPermissionsPermission>[]>;
}
