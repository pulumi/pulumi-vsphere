// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The provider type for the vsphere package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-vsphere/blob/master/website/docs/index.html.markdown.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'vsphere';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Provider.__pulumiType;
    }


    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let inputs: pulumi.Inputs = {};
        {
            inputs["allowUnverifiedSsl"] = pulumi.output((args ? args.allowUnverifiedSsl : undefined) || utilities.getEnvBoolean("VSPHERE_ALLOW_UNVERIFIED_SSL")).apply(JSON.stringify);
            inputs["clientDebug"] = pulumi.output((args ? args.clientDebug : undefined) || utilities.getEnvBoolean("VSPHERE_CLIENT_DEBUG")).apply(JSON.stringify);
            inputs["clientDebugPath"] = (args ? args.clientDebugPath : undefined) || utilities.getEnv("VSPHERE_CLIENT_DEBUG_PATH");
            inputs["clientDebugPathRun"] = (args ? args.clientDebugPathRun : undefined) || utilities.getEnv("VSPHERE_CLIENT_DEBUG_PATH_RUN");
            inputs["password"] = (args ? args.password : undefined) || utilities.getEnv("VSPHERE_PASSWORD");
            inputs["persistSession"] = pulumi.output((args ? args.persistSession : undefined) || utilities.getEnvBoolean("VSPHERE_PERSIST_SESSION")).apply(JSON.stringify);
            inputs["restSessionPath"] = (args ? args.restSessionPath : undefined) || utilities.getEnv("VSPHERE_REST_SESSION_PATH");
            inputs["user"] = (args ? args.user : undefined) || utilities.getEnv("VSPHERE_USER");
            inputs["vcenterServer"] = args ? args.vcenterServer : undefined;
            inputs["vimKeepAlive"] = pulumi.output((args ? args.vimKeepAlive : undefined) || utilities.getEnvNumber("VSPHERE_VIM_KEEP_ALIVE")).apply(JSON.stringify);
            inputs["vimSessionPath"] = (args ? args.vimSessionPath : undefined) || utilities.getEnv("VSPHERE_VIM_SESSION_PATH");
            inputs["vsphereServer"] = (args ? args.vsphereServer : undefined) || utilities.getEnv("VSPHERE_SERVER");
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Provider.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * If set, VMware vSphere client will permit unverifiable SSL certificates.
     */
    readonly allowUnverifiedSsl?: pulumi.Input<boolean>;
    /**
     * govmomi debug
     */
    readonly clientDebug?: pulumi.Input<boolean>;
    /**
     * govmomi debug path for debug
     */
    readonly clientDebugPath?: pulumi.Input<string>;
    /**
     * govmomi debug path for a single run
     */
    readonly clientDebugPathRun?: pulumi.Input<string>;
    /**
     * The user password for vSphere API operations.
     */
    readonly password?: pulumi.Input<string>;
    /**
     * Persist vSphere client sessions to disk
     */
    readonly persistSession?: pulumi.Input<boolean>;
    /**
     * The directory to save vSphere REST API sessions to
     */
    readonly restSessionPath?: pulumi.Input<string>;
    /**
     * The user name for vSphere API operations.
     */
    readonly user?: pulumi.Input<string>;
    readonly vcenterServer?: pulumi.Input<string>;
    /**
     * Keep alive interval for the VIM session in minutes
     */
    readonly vimKeepAlive?: pulumi.Input<number>;
    /**
     * The directory to save vSphere SOAP API sessions to
     */
    readonly vimSessionPath?: pulumi.Input<string>;
    /**
     * The vSphere Server name for vSphere API operations.
     */
    readonly vsphereServer?: pulumi.Input<string>;
}
