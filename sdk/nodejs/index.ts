// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ComputeClusterArgs, ComputeClusterState } from "./computeCluster";
export type ComputeCluster = import("./computeCluster").ComputeCluster;
export const ComputeCluster: typeof import("./computeCluster").ComputeCluster = null as any;
utilities.lazyLoad(exports, ["ComputeCluster"], () => require("./computeCluster"));

export { ComputeClusterHostGroupArgs, ComputeClusterHostGroupState } from "./computeClusterHostGroup";
export type ComputeClusterHostGroup = import("./computeClusterHostGroup").ComputeClusterHostGroup;
export const ComputeClusterHostGroup: typeof import("./computeClusterHostGroup").ComputeClusterHostGroup = null as any;
utilities.lazyLoad(exports, ["ComputeClusterHostGroup"], () => require("./computeClusterHostGroup"));

export { ComputeClusterVmAffinityRuleArgs, ComputeClusterVmAffinityRuleState } from "./computeClusterVmAffinityRule";
export type ComputeClusterVmAffinityRule = import("./computeClusterVmAffinityRule").ComputeClusterVmAffinityRule;
export const ComputeClusterVmAffinityRule: typeof import("./computeClusterVmAffinityRule").ComputeClusterVmAffinityRule = null as any;
utilities.lazyLoad(exports, ["ComputeClusterVmAffinityRule"], () => require("./computeClusterVmAffinityRule"));

export { ComputeClusterVmAntiAffinityRuleArgs, ComputeClusterVmAntiAffinityRuleState } from "./computeClusterVmAntiAffinityRule";
export type ComputeClusterVmAntiAffinityRule = import("./computeClusterVmAntiAffinityRule").ComputeClusterVmAntiAffinityRule;
export const ComputeClusterVmAntiAffinityRule: typeof import("./computeClusterVmAntiAffinityRule").ComputeClusterVmAntiAffinityRule = null as any;
utilities.lazyLoad(exports, ["ComputeClusterVmAntiAffinityRule"], () => require("./computeClusterVmAntiAffinityRule"));

export { ComputeClusterVmDependencyRuleArgs, ComputeClusterVmDependencyRuleState } from "./computeClusterVmDependencyRule";
export type ComputeClusterVmDependencyRule = import("./computeClusterVmDependencyRule").ComputeClusterVmDependencyRule;
export const ComputeClusterVmDependencyRule: typeof import("./computeClusterVmDependencyRule").ComputeClusterVmDependencyRule = null as any;
utilities.lazyLoad(exports, ["ComputeClusterVmDependencyRule"], () => require("./computeClusterVmDependencyRule"));

export { ComputeClusterVmGroupArgs, ComputeClusterVmGroupState } from "./computeClusterVmGroup";
export type ComputeClusterVmGroup = import("./computeClusterVmGroup").ComputeClusterVmGroup;
export const ComputeClusterVmGroup: typeof import("./computeClusterVmGroup").ComputeClusterVmGroup = null as any;
utilities.lazyLoad(exports, ["ComputeClusterVmGroup"], () => require("./computeClusterVmGroup"));

export { ComputeClusterVmHostRuleArgs, ComputeClusterVmHostRuleState } from "./computeClusterVmHostRule";
export type ComputeClusterVmHostRule = import("./computeClusterVmHostRule").ComputeClusterVmHostRule;
export const ComputeClusterVmHostRule: typeof import("./computeClusterVmHostRule").ComputeClusterVmHostRule = null as any;
utilities.lazyLoad(exports, ["ComputeClusterVmHostRule"], () => require("./computeClusterVmHostRule"));

export { ConfigurationProfileArgs, ConfigurationProfileState } from "./configurationProfile";
export type ConfigurationProfile = import("./configurationProfile").ConfigurationProfile;
export const ConfigurationProfile: typeof import("./configurationProfile").ConfigurationProfile = null as any;
utilities.lazyLoad(exports, ["ConfigurationProfile"], () => require("./configurationProfile"));

export { ContentLibraryArgs, ContentLibraryState } from "./contentLibrary";
export type ContentLibrary = import("./contentLibrary").ContentLibrary;
export const ContentLibrary: typeof import("./contentLibrary").ContentLibrary = null as any;
utilities.lazyLoad(exports, ["ContentLibrary"], () => require("./contentLibrary"));

export { ContentLibraryItemArgs, ContentLibraryItemState } from "./contentLibraryItem";
export type ContentLibraryItem = import("./contentLibraryItem").ContentLibraryItem;
export const ContentLibraryItem: typeof import("./contentLibraryItem").ContentLibraryItem = null as any;
utilities.lazyLoad(exports, ["ContentLibraryItem"], () => require("./contentLibraryItem"));

export { CustomAttributeArgs, CustomAttributeState } from "./customAttribute";
export type CustomAttribute = import("./customAttribute").CustomAttribute;
export const CustomAttribute: typeof import("./customAttribute").CustomAttribute = null as any;
utilities.lazyLoad(exports, ["CustomAttribute"], () => require("./customAttribute"));

export { DatacenterArgs, DatacenterState } from "./datacenter";
export type Datacenter = import("./datacenter").Datacenter;
export const Datacenter: typeof import("./datacenter").Datacenter = null as any;
utilities.lazyLoad(exports, ["Datacenter"], () => require("./datacenter"));

export { DatastoreClusterArgs, DatastoreClusterState } from "./datastoreCluster";
export type DatastoreCluster = import("./datastoreCluster").DatastoreCluster;
export const DatastoreCluster: typeof import("./datastoreCluster").DatastoreCluster = null as any;
utilities.lazyLoad(exports, ["DatastoreCluster"], () => require("./datastoreCluster"));

export { DatastoreClusterVmAntiAffinityRuleArgs, DatastoreClusterVmAntiAffinityRuleState } from "./datastoreClusterVmAntiAffinityRule";
export type DatastoreClusterVmAntiAffinityRule = import("./datastoreClusterVmAntiAffinityRule").DatastoreClusterVmAntiAffinityRule;
export const DatastoreClusterVmAntiAffinityRule: typeof import("./datastoreClusterVmAntiAffinityRule").DatastoreClusterVmAntiAffinityRule = null as any;
utilities.lazyLoad(exports, ["DatastoreClusterVmAntiAffinityRule"], () => require("./datastoreClusterVmAntiAffinityRule"));

export { DistributedPortGroupArgs, DistributedPortGroupState } from "./distributedPortGroup";
export type DistributedPortGroup = import("./distributedPortGroup").DistributedPortGroup;
export const DistributedPortGroup: typeof import("./distributedPortGroup").DistributedPortGroup = null as any;
utilities.lazyLoad(exports, ["DistributedPortGroup"], () => require("./distributedPortGroup"));

export { DistributedVirtualSwitchArgs, DistributedVirtualSwitchState } from "./distributedVirtualSwitch";
export type DistributedVirtualSwitch = import("./distributedVirtualSwitch").DistributedVirtualSwitch;
export const DistributedVirtualSwitch: typeof import("./distributedVirtualSwitch").DistributedVirtualSwitch = null as any;
utilities.lazyLoad(exports, ["DistributedVirtualSwitch"], () => require("./distributedVirtualSwitch"));

export { DistributedVirtualSwitchPvlanMappingArgs, DistributedVirtualSwitchPvlanMappingState } from "./distributedVirtualSwitchPvlanMapping";
export type DistributedVirtualSwitchPvlanMapping = import("./distributedVirtualSwitchPvlanMapping").DistributedVirtualSwitchPvlanMapping;
export const DistributedVirtualSwitchPvlanMapping: typeof import("./distributedVirtualSwitchPvlanMapping").DistributedVirtualSwitchPvlanMapping = null as any;
utilities.lazyLoad(exports, ["DistributedVirtualSwitchPvlanMapping"], () => require("./distributedVirtualSwitchPvlanMapping"));

export { DpmHostOverrideArgs, DpmHostOverrideState } from "./dpmHostOverride";
export type DpmHostOverride = import("./dpmHostOverride").DpmHostOverride;
export const DpmHostOverride: typeof import("./dpmHostOverride").DpmHostOverride = null as any;
utilities.lazyLoad(exports, ["DpmHostOverride"], () => require("./dpmHostOverride"));

export { DrsVmOverrideArgs, DrsVmOverrideState } from "./drsVmOverride";
export type DrsVmOverride = import("./drsVmOverride").DrsVmOverride;
export const DrsVmOverride: typeof import("./drsVmOverride").DrsVmOverride = null as any;
utilities.lazyLoad(exports, ["DrsVmOverride"], () => require("./drsVmOverride"));

export { EntityPermissionsArgs, EntityPermissionsState } from "./entityPermissions";
export type EntityPermissions = import("./entityPermissions").EntityPermissions;
export const EntityPermissions: typeof import("./entityPermissions").EntityPermissions = null as any;
utilities.lazyLoad(exports, ["EntityPermissions"], () => require("./entityPermissions"));

export { FileArgs, FileState } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { FolderArgs, FolderState } from "./folder";
export type Folder = import("./folder").Folder;
export const Folder: typeof import("./folder").Folder = null as any;
utilities.lazyLoad(exports, ["Folder"], () => require("./folder"));

export { GetComputeClusterArgs, GetComputeClusterResult, GetComputeClusterOutputArgs } from "./getComputeCluster";
export const getComputeCluster: typeof import("./getComputeCluster").getComputeCluster = null as any;
export const getComputeClusterOutput: typeof import("./getComputeCluster").getComputeClusterOutput = null as any;
utilities.lazyLoad(exports, ["getComputeCluster","getComputeClusterOutput"], () => require("./getComputeCluster"));

export { GetComputeClusterHostGroupArgs, GetComputeClusterHostGroupResult, GetComputeClusterHostGroupOutputArgs } from "./getComputeClusterHostGroup";
export const getComputeClusterHostGroup: typeof import("./getComputeClusterHostGroup").getComputeClusterHostGroup = null as any;
export const getComputeClusterHostGroupOutput: typeof import("./getComputeClusterHostGroup").getComputeClusterHostGroupOutput = null as any;
utilities.lazyLoad(exports, ["getComputeClusterHostGroup","getComputeClusterHostGroupOutput"], () => require("./getComputeClusterHostGroup"));

export { GetConfigurationProfileArgs, GetConfigurationProfileResult, GetConfigurationProfileOutputArgs } from "./getConfigurationProfile";
export const getConfigurationProfile: typeof import("./getConfigurationProfile").getConfigurationProfile = null as any;
export const getConfigurationProfileOutput: typeof import("./getConfigurationProfile").getConfigurationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationProfile","getConfigurationProfileOutput"], () => require("./getConfigurationProfile"));

export { GetContentLibraryArgs, GetContentLibraryResult, GetContentLibraryOutputArgs } from "./getContentLibrary";
export const getContentLibrary: typeof import("./getContentLibrary").getContentLibrary = null as any;
export const getContentLibraryOutput: typeof import("./getContentLibrary").getContentLibraryOutput = null as any;
utilities.lazyLoad(exports, ["getContentLibrary","getContentLibraryOutput"], () => require("./getContentLibrary"));

export { GetContentLibraryItemArgs, GetContentLibraryItemResult, GetContentLibraryItemOutputArgs } from "./getContentLibraryItem";
export const getContentLibraryItem: typeof import("./getContentLibraryItem").getContentLibraryItem = null as any;
export const getContentLibraryItemOutput: typeof import("./getContentLibraryItem").getContentLibraryItemOutput = null as any;
utilities.lazyLoad(exports, ["getContentLibraryItem","getContentLibraryItemOutput"], () => require("./getContentLibraryItem"));

export { GetCustomAttributeArgs, GetCustomAttributeResult, GetCustomAttributeOutputArgs } from "./getCustomAttribute";
export const getCustomAttribute: typeof import("./getCustomAttribute").getCustomAttribute = null as any;
export const getCustomAttributeOutput: typeof import("./getCustomAttribute").getCustomAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getCustomAttribute","getCustomAttributeOutput"], () => require("./getCustomAttribute"));

export { GetDatacenterArgs, GetDatacenterResult, GetDatacenterOutputArgs } from "./getDatacenter";
export const getDatacenter: typeof import("./getDatacenter").getDatacenter = null as any;
export const getDatacenterOutput: typeof import("./getDatacenter").getDatacenterOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenter","getDatacenterOutput"], () => require("./getDatacenter"));

export { GetDatastoreArgs, GetDatastoreResult, GetDatastoreOutputArgs } from "./getDatastore";
export const getDatastore: typeof import("./getDatastore").getDatastore = null as any;
export const getDatastoreOutput: typeof import("./getDatastore").getDatastoreOutput = null as any;
utilities.lazyLoad(exports, ["getDatastore","getDatastoreOutput"], () => require("./getDatastore"));

export { GetDatastoreClusterArgs, GetDatastoreClusterResult, GetDatastoreClusterOutputArgs } from "./getDatastoreCluster";
export const getDatastoreCluster: typeof import("./getDatastoreCluster").getDatastoreCluster = null as any;
export const getDatastoreClusterOutput: typeof import("./getDatastoreCluster").getDatastoreClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDatastoreCluster","getDatastoreClusterOutput"], () => require("./getDatastoreCluster"));

export { GetDatastoreStatsArgs, GetDatastoreStatsResult, GetDatastoreStatsOutputArgs } from "./getDatastoreStats";
export const getDatastoreStats: typeof import("./getDatastoreStats").getDatastoreStats = null as any;
export const getDatastoreStatsOutput: typeof import("./getDatastoreStats").getDatastoreStatsOutput = null as any;
utilities.lazyLoad(exports, ["getDatastoreStats","getDatastoreStatsOutput"], () => require("./getDatastoreStats"));

export { GetDistributedVirtualSwitchArgs, GetDistributedVirtualSwitchResult, GetDistributedVirtualSwitchOutputArgs } from "./getDistributedVirtualSwitch";
export const getDistributedVirtualSwitch: typeof import("./getDistributedVirtualSwitch").getDistributedVirtualSwitch = null as any;
export const getDistributedVirtualSwitchOutput: typeof import("./getDistributedVirtualSwitch").getDistributedVirtualSwitchOutput = null as any;
utilities.lazyLoad(exports, ["getDistributedVirtualSwitch","getDistributedVirtualSwitchOutput"], () => require("./getDistributedVirtualSwitch"));

export { GetDynamicArgs, GetDynamicResult, GetDynamicOutputArgs } from "./getDynamic";
export const getDynamic: typeof import("./getDynamic").getDynamic = null as any;
export const getDynamicOutput: typeof import("./getDynamic").getDynamicOutput = null as any;
utilities.lazyLoad(exports, ["getDynamic","getDynamicOutput"], () => require("./getDynamic"));

export { GetFolderArgs, GetFolderResult, GetFolderOutputArgs } from "./getFolder";
export const getFolder: typeof import("./getFolder").getFolder = null as any;
export const getFolderOutput: typeof import("./getFolder").getFolderOutput = null as any;
utilities.lazyLoad(exports, ["getFolder","getFolderOutput"], () => require("./getFolder"));

export { GetGuestOsCustomizationArgs, GetGuestOsCustomizationResult, GetGuestOsCustomizationOutputArgs } from "./getGuestOsCustomization";
export const getGuestOsCustomization: typeof import("./getGuestOsCustomization").getGuestOsCustomization = null as any;
export const getGuestOsCustomizationOutput: typeof import("./getGuestOsCustomization").getGuestOsCustomizationOutput = null as any;
utilities.lazyLoad(exports, ["getGuestOsCustomization","getGuestOsCustomizationOutput"], () => require("./getGuestOsCustomization"));

export { GetHostArgs, GetHostResult, GetHostOutputArgs } from "./getHost";
export const getHost: typeof import("./getHost").getHost = null as any;
export const getHostOutput: typeof import("./getHost").getHostOutput = null as any;
utilities.lazyLoad(exports, ["getHost","getHostOutput"], () => require("./getHost"));

export { GetHostBaseImagesResult } from "./getHostBaseImages";
export const getHostBaseImages: typeof import("./getHostBaseImages").getHostBaseImages = null as any;
export const getHostBaseImagesOutput: typeof import("./getHostBaseImages").getHostBaseImagesOutput = null as any;
utilities.lazyLoad(exports, ["getHostBaseImages","getHostBaseImagesOutput"], () => require("./getHostBaseImages"));

export { GetHostPciDeviceArgs, GetHostPciDeviceResult, GetHostPciDeviceOutputArgs } from "./getHostPciDevice";
export const getHostPciDevice: typeof import("./getHostPciDevice").getHostPciDevice = null as any;
export const getHostPciDeviceOutput: typeof import("./getHostPciDevice").getHostPciDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getHostPciDevice","getHostPciDeviceOutput"], () => require("./getHostPciDevice"));

export { GetHostThumbprintArgs, GetHostThumbprintResult, GetHostThumbprintOutputArgs } from "./getHostThumbprint";
export const getHostThumbprint: typeof import("./getHostThumbprint").getHostThumbprint = null as any;
export const getHostThumbprintOutput: typeof import("./getHostThumbprint").getHostThumbprintOutput = null as any;
utilities.lazyLoad(exports, ["getHostThumbprint","getHostThumbprintOutput"], () => require("./getHostThumbprint"));

export { GetHostVgpuProfileArgs, GetHostVgpuProfileResult, GetHostVgpuProfileOutputArgs } from "./getHostVgpuProfile";
export const getHostVgpuProfile: typeof import("./getHostVgpuProfile").getHostVgpuProfile = null as any;
export const getHostVgpuProfileOutput: typeof import("./getHostVgpuProfile").getHostVgpuProfileOutput = null as any;
utilities.lazyLoad(exports, ["getHostVgpuProfile","getHostVgpuProfileOutput"], () => require("./getHostVgpuProfile"));

export { GetLicenseArgs, GetLicenseResult, GetLicenseOutputArgs } from "./getLicense";
export const getLicense: typeof import("./getLicense").getLicense = null as any;
export const getLicenseOutput: typeof import("./getLicense").getLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getLicense","getLicenseOutput"], () => require("./getLicense"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetOvfVmTemplateArgs, GetOvfVmTemplateResult, GetOvfVmTemplateOutputArgs } from "./getOvfVmTemplate";
export const getOvfVmTemplate: typeof import("./getOvfVmTemplate").getOvfVmTemplate = null as any;
export const getOvfVmTemplateOutput: typeof import("./getOvfVmTemplate").getOvfVmTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getOvfVmTemplate","getOvfVmTemplateOutput"], () => require("./getOvfVmTemplate"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetResourcePoolArgs, GetResourcePoolResult, GetResourcePoolOutputArgs } from "./getResourcePool";
export const getResourcePool: typeof import("./getResourcePool").getResourcePool = null as any;
export const getResourcePoolOutput: typeof import("./getResourcePool").getResourcePoolOutput = null as any;
utilities.lazyLoad(exports, ["getResourcePool","getResourcePoolOutput"], () => require("./getResourcePool"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetTagCategoryArgs, GetTagCategoryResult, GetTagCategoryOutputArgs } from "./getTagCategory";
export const getTagCategory: typeof import("./getTagCategory").getTagCategory = null as any;
export const getTagCategoryOutput: typeof import("./getTagCategory").getTagCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getTagCategory","getTagCategoryOutput"], () => require("./getTagCategory"));

export { GetVappContainerArgs, GetVappContainerResult, GetVappContainerOutputArgs } from "./getVappContainer";
export const getVappContainer: typeof import("./getVappContainer").getVappContainer = null as any;
export const getVappContainerOutput: typeof import("./getVappContainer").getVappContainerOutput = null as any;
utilities.lazyLoad(exports, ["getVappContainer","getVappContainerOutput"], () => require("./getVappContainer"));

export { GetVirtualMachineArgs, GetVirtualMachineResult, GetVirtualMachineOutputArgs } from "./getVirtualMachine";
export const getVirtualMachine: typeof import("./getVirtualMachine").getVirtualMachine = null as any;
export const getVirtualMachineOutput: typeof import("./getVirtualMachine").getVirtualMachineOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualMachine","getVirtualMachineOutput"], () => require("./getVirtualMachine"));

export { GetVmfsDisksArgs, GetVmfsDisksResult, GetVmfsDisksOutputArgs } from "./getVmfsDisks";
export const getVmfsDisks: typeof import("./getVmfsDisks").getVmfsDisks = null as any;
export const getVmfsDisksOutput: typeof import("./getVmfsDisks").getVmfsDisksOutput = null as any;
utilities.lazyLoad(exports, ["getVmfsDisks","getVmfsDisksOutput"], () => require("./getVmfsDisks"));

export { GuestOsCustomizationArgs, GuestOsCustomizationState } from "./guestOsCustomization";
export type GuestOsCustomization = import("./guestOsCustomization").GuestOsCustomization;
export const GuestOsCustomization: typeof import("./guestOsCustomization").GuestOsCustomization = null as any;
utilities.lazyLoad(exports, ["GuestOsCustomization"], () => require("./guestOsCustomization"));

export { HaVmOverrideArgs, HaVmOverrideState } from "./haVmOverride";
export type HaVmOverride = import("./haVmOverride").HaVmOverride;
export const HaVmOverride: typeof import("./haVmOverride").HaVmOverride = null as any;
utilities.lazyLoad(exports, ["HaVmOverride"], () => require("./haVmOverride"));

export { HostArgs, HostState } from "./host";
export type Host = import("./host").Host;
export const Host: typeof import("./host").Host = null as any;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));

export { HostPortGroupArgs, HostPortGroupState } from "./hostPortGroup";
export type HostPortGroup = import("./hostPortGroup").HostPortGroup;
export const HostPortGroup: typeof import("./hostPortGroup").HostPortGroup = null as any;
utilities.lazyLoad(exports, ["HostPortGroup"], () => require("./hostPortGroup"));

export { HostVirtualSwitchArgs, HostVirtualSwitchState } from "./hostVirtualSwitch";
export type HostVirtualSwitch = import("./hostVirtualSwitch").HostVirtualSwitch;
export const HostVirtualSwitch: typeof import("./hostVirtualSwitch").HostVirtualSwitch = null as any;
utilities.lazyLoad(exports, ["HostVirtualSwitch"], () => require("./hostVirtualSwitch"));

export { LicenseArgs, LicenseState } from "./license";
export type License = import("./license").License;
export const License: typeof import("./license").License = null as any;
utilities.lazyLoad(exports, ["License"], () => require("./license"));

export { NasDatastoreArgs, NasDatastoreState } from "./nasDatastore";
export type NasDatastore = import("./nasDatastore").NasDatastore;
export const NasDatastore: typeof import("./nasDatastore").NasDatastore = null as any;
utilities.lazyLoad(exports, ["NasDatastore"], () => require("./nasDatastore"));

export { OfflineSoftwareDepotArgs, OfflineSoftwareDepotState } from "./offlineSoftwareDepot";
export type OfflineSoftwareDepot = import("./offlineSoftwareDepot").OfflineSoftwareDepot;
export const OfflineSoftwareDepot: typeof import("./offlineSoftwareDepot").OfflineSoftwareDepot = null as any;
utilities.lazyLoad(exports, ["OfflineSoftwareDepot"], () => require("./offlineSoftwareDepot"));

export * from "./provider";
import { Provider } from "./provider";

export { ResourcePoolArgs, ResourcePoolState } from "./resourcePool";
export type ResourcePool = import("./resourcePool").ResourcePool;
export const ResourcePool: typeof import("./resourcePool").ResourcePool = null as any;
utilities.lazyLoad(exports, ["ResourcePool"], () => require("./resourcePool"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { StorageDrsVmOverrideArgs, StorageDrsVmOverrideState } from "./storageDrsVmOverride";
export type StorageDrsVmOverride = import("./storageDrsVmOverride").StorageDrsVmOverride;
export const StorageDrsVmOverride: typeof import("./storageDrsVmOverride").StorageDrsVmOverride = null as any;
utilities.lazyLoad(exports, ["StorageDrsVmOverride"], () => require("./storageDrsVmOverride"));

export { SupervisorArgs, SupervisorState } from "./supervisor";
export type Supervisor = import("./supervisor").Supervisor;
export const Supervisor: typeof import("./supervisor").Supervisor = null as any;
utilities.lazyLoad(exports, ["Supervisor"], () => require("./supervisor"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TagCategoryArgs, TagCategoryState } from "./tagCategory";
export type TagCategory = import("./tagCategory").TagCategory;
export const TagCategory: typeof import("./tagCategory").TagCategory = null as any;
utilities.lazyLoad(exports, ["TagCategory"], () => require("./tagCategory"));

export { VappContainerArgs, VappContainerState } from "./vappContainer";
export type VappContainer = import("./vappContainer").VappContainer;
export const VappContainer: typeof import("./vappContainer").VappContainer = null as any;
utilities.lazyLoad(exports, ["VappContainer"], () => require("./vappContainer"));

export { VappEntityArgs, VappEntityState } from "./vappEntity";
export type VappEntity = import("./vappEntity").VappEntity;
export const VappEntity: typeof import("./vappEntity").VappEntity = null as any;
utilities.lazyLoad(exports, ["VappEntity"], () => require("./vappEntity"));

export { VirtualDiskArgs, VirtualDiskState } from "./virtualDisk";
export type VirtualDisk = import("./virtualDisk").VirtualDisk;
export const VirtualDisk: typeof import("./virtualDisk").VirtualDisk = null as any;
utilities.lazyLoad(exports, ["VirtualDisk"], () => require("./virtualDisk"));

export { VirtualMachineArgs, VirtualMachineState } from "./virtualMachine";
export type VirtualMachine = import("./virtualMachine").VirtualMachine;
export const VirtualMachine: typeof import("./virtualMachine").VirtualMachine = null as any;
utilities.lazyLoad(exports, ["VirtualMachine"], () => require("./virtualMachine"));

export { VirtualMachineClassArgs, VirtualMachineClassState } from "./virtualMachineClass";
export type VirtualMachineClass = import("./virtualMachineClass").VirtualMachineClass;
export const VirtualMachineClass: typeof import("./virtualMachineClass").VirtualMachineClass = null as any;
utilities.lazyLoad(exports, ["VirtualMachineClass"], () => require("./virtualMachineClass"));

export { VirtualMachineSnapshotArgs, VirtualMachineSnapshotState } from "./virtualMachineSnapshot";
export type VirtualMachineSnapshot = import("./virtualMachineSnapshot").VirtualMachineSnapshot;
export const VirtualMachineSnapshot: typeof import("./virtualMachineSnapshot").VirtualMachineSnapshot = null as any;
utilities.lazyLoad(exports, ["VirtualMachineSnapshot"], () => require("./virtualMachineSnapshot"));

export { VmStoragePolicyArgs, VmStoragePolicyState } from "./vmStoragePolicy";
export type VmStoragePolicy = import("./vmStoragePolicy").VmStoragePolicy;
export const VmStoragePolicy: typeof import("./vmStoragePolicy").VmStoragePolicy = null as any;
utilities.lazyLoad(exports, ["VmStoragePolicy"], () => require("./vmStoragePolicy"));

export { VmfsDatastoreArgs, VmfsDatastoreState } from "./vmfsDatastore";
export type VmfsDatastore = import("./vmfsDatastore").VmfsDatastore;
export const VmfsDatastore: typeof import("./vmfsDatastore").VmfsDatastore = null as any;
utilities.lazyLoad(exports, ["VmfsDatastore"], () => require("./vmfsDatastore"));

export { VnicArgs, VnicState } from "./vnic";
export type Vnic = import("./vnic").Vnic;
export const Vnic: typeof import("./vnic").Vnic = null as any;
utilities.lazyLoad(exports, ["Vnic"], () => require("./vnic"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vsphere:index/computeCluster:ComputeCluster":
                return new ComputeCluster(name, <any>undefined, { urn })
            case "vsphere:index/computeClusterHostGroup:ComputeClusterHostGroup":
                return new ComputeClusterHostGroup(name, <any>undefined, { urn })
            case "vsphere:index/computeClusterVmAffinityRule:ComputeClusterVmAffinityRule":
                return new ComputeClusterVmAffinityRule(name, <any>undefined, { urn })
            case "vsphere:index/computeClusterVmAntiAffinityRule:ComputeClusterVmAntiAffinityRule":
                return new ComputeClusterVmAntiAffinityRule(name, <any>undefined, { urn })
            case "vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule":
                return new ComputeClusterVmDependencyRule(name, <any>undefined, { urn })
            case "vsphere:index/computeClusterVmGroup:ComputeClusterVmGroup":
                return new ComputeClusterVmGroup(name, <any>undefined, { urn })
            case "vsphere:index/computeClusterVmHostRule:ComputeClusterVmHostRule":
                return new ComputeClusterVmHostRule(name, <any>undefined, { urn })
            case "vsphere:index/configurationProfile:ConfigurationProfile":
                return new ConfigurationProfile(name, <any>undefined, { urn })
            case "vsphere:index/contentLibrary:ContentLibrary":
                return new ContentLibrary(name, <any>undefined, { urn })
            case "vsphere:index/contentLibraryItem:ContentLibraryItem":
                return new ContentLibraryItem(name, <any>undefined, { urn })
            case "vsphere:index/customAttribute:CustomAttribute":
                return new CustomAttribute(name, <any>undefined, { urn })
            case "vsphere:index/datacenter:Datacenter":
                return new Datacenter(name, <any>undefined, { urn })
            case "vsphere:index/datastoreCluster:DatastoreCluster":
                return new DatastoreCluster(name, <any>undefined, { urn })
            case "vsphere:index/datastoreClusterVmAntiAffinityRule:DatastoreClusterVmAntiAffinityRule":
                return new DatastoreClusterVmAntiAffinityRule(name, <any>undefined, { urn })
            case "vsphere:index/distributedPortGroup:DistributedPortGroup":
                return new DistributedPortGroup(name, <any>undefined, { urn })
            case "vsphere:index/distributedVirtualSwitch:DistributedVirtualSwitch":
                return new DistributedVirtualSwitch(name, <any>undefined, { urn })
            case "vsphere:index/distributedVirtualSwitchPvlanMapping:DistributedVirtualSwitchPvlanMapping":
                return new DistributedVirtualSwitchPvlanMapping(name, <any>undefined, { urn })
            case "vsphere:index/dpmHostOverride:DpmHostOverride":
                return new DpmHostOverride(name, <any>undefined, { urn })
            case "vsphere:index/drsVmOverride:DrsVmOverride":
                return new DrsVmOverride(name, <any>undefined, { urn })
            case "vsphere:index/entityPermissions:EntityPermissions":
                return new EntityPermissions(name, <any>undefined, { urn })
            case "vsphere:index/file:File":
                return new File(name, <any>undefined, { urn })
            case "vsphere:index/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "vsphere:index/guestOsCustomization:GuestOsCustomization":
                return new GuestOsCustomization(name, <any>undefined, { urn })
            case "vsphere:index/haVmOverride:HaVmOverride":
                return new HaVmOverride(name, <any>undefined, { urn })
            case "vsphere:index/host:Host":
                return new Host(name, <any>undefined, { urn })
            case "vsphere:index/hostPortGroup:HostPortGroup":
                return new HostPortGroup(name, <any>undefined, { urn })
            case "vsphere:index/hostVirtualSwitch:HostVirtualSwitch":
                return new HostVirtualSwitch(name, <any>undefined, { urn })
            case "vsphere:index/license:License":
                return new License(name, <any>undefined, { urn })
            case "vsphere:index/nasDatastore:NasDatastore":
                return new NasDatastore(name, <any>undefined, { urn })
            case "vsphere:index/offlineSoftwareDepot:OfflineSoftwareDepot":
                return new OfflineSoftwareDepot(name, <any>undefined, { urn })
            case "vsphere:index/resourcePool:ResourcePool":
                return new ResourcePool(name, <any>undefined, { urn })
            case "vsphere:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "vsphere:index/storageDrsVmOverride:StorageDrsVmOverride":
                return new StorageDrsVmOverride(name, <any>undefined, { urn })
            case "vsphere:index/supervisor:Supervisor":
                return new Supervisor(name, <any>undefined, { urn })
            case "vsphere:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "vsphere:index/tagCategory:TagCategory":
                return new TagCategory(name, <any>undefined, { urn })
            case "vsphere:index/vappContainer:VappContainer":
                return new VappContainer(name, <any>undefined, { urn })
            case "vsphere:index/vappEntity:VappEntity":
                return new VappEntity(name, <any>undefined, { urn })
            case "vsphere:index/virtualDisk:VirtualDisk":
                return new VirtualDisk(name, <any>undefined, { urn })
            case "vsphere:index/virtualMachine:VirtualMachine":
                return new VirtualMachine(name, <any>undefined, { urn })
            case "vsphere:index/virtualMachineClass:VirtualMachineClass":
                return new VirtualMachineClass(name, <any>undefined, { urn })
            case "vsphere:index/virtualMachineSnapshot:VirtualMachineSnapshot":
                return new VirtualMachineSnapshot(name, <any>undefined, { urn })
            case "vsphere:index/vmStoragePolicy:VmStoragePolicy":
                return new VmStoragePolicy(name, <any>undefined, { urn })
            case "vsphere:index/vmfsDatastore:VmfsDatastore":
                return new VmfsDatastore(name, <any>undefined, { urn })
            case "vsphere:index/vnic:Vnic":
                return new Vnic(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vsphere", "index/computeCluster", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/computeClusterHostGroup", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/computeClusterVmAffinityRule", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/computeClusterVmAntiAffinityRule", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/computeClusterVmDependencyRule", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/computeClusterVmGroup", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/computeClusterVmHostRule", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/configurationProfile", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/contentLibrary", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/contentLibraryItem", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/customAttribute", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/datacenter", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/datastoreCluster", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/datastoreClusterVmAntiAffinityRule", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/distributedPortGroup", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/distributedVirtualSwitch", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/distributedVirtualSwitchPvlanMapping", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/dpmHostOverride", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/drsVmOverride", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/entityPermissions", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/file", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/folder", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/guestOsCustomization", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/haVmOverride", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/host", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/hostPortGroup", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/hostVirtualSwitch", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/license", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/nasDatastore", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/offlineSoftwareDepot", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/resourcePool", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/role", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/storageDrsVmOverride", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/supervisor", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/tag", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/tagCategory", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/vappContainer", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/vappEntity", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/virtualDisk", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/virtualMachine", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/virtualMachineClass", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/virtualMachineSnapshot", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/vmStoragePolicy", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/vmfsDatastore", _module)
pulumi.runtime.registerResourceModule("vsphere", "index/vnic", _module)
pulumi.runtime.registerResourcePackage("vsphere", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:vsphere") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
