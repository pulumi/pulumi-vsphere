// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `vsphere.VmStoragePolicy` resource can be used to create and manage storage
 * policies. Using this storage policy, tag based placement rules can be created to
 * place a VM on a particular tagged datastore.
 *
 * ## Example Usage
 *
 * This example creates a storage policy with tagRule having cat1 as tagCategory and
 * tag1, tag2 as the tags. While creating a VM, this policy can be referenced to place
 * the VM in any of the compatible datastore tagged with these tags.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const dc = vsphere.getDatacenter({
 *     name: "DC",
 * });
 * const tagCategory = vsphere.getTagCategory({
 *     name: "cat1",
 * });
 * const tag1 = tagCategory.then(tagCategory => vsphere.getTag({
 *     name: "tag1",
 *     categoryId: tagCategory.id,
 * }));
 * const tag2 = tagCategory.then(tagCategory => vsphere.getTag({
 *     name: "tag2",
 *     categoryId: tagCategory.id,
 * }));
 * const policyTagBasedPlacement = new vsphere.VmStoragePolicy("policyTagBasedPlacement", {
 *     description: "description",
 *     tagRules: [{
 *         tagCategory: tagCategory.then(tagCategory => tagCategory.name),
 *         tags: [
 *             tag1.then(tag1 => tag1.name),
 *             tag2.then(tag2 => tag2.name),
 *         ],
 *         includeDatastoresWithTags: true,
 *     }],
 * });
 * ```
 */
export class VmStoragePolicy extends pulumi.CustomResource {
    /**
     * Get an existing VmStoragePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmStoragePolicyState, opts?: pulumi.CustomResourceOptions): VmStoragePolicy {
        return new VmStoragePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/vmStoragePolicy:VmStoragePolicy';

    /**
     * Returns true if the given object is an instance of VmStoragePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmStoragePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmStoragePolicy.__pulumiType;
    }

    /**
     * Description of the storage policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the storage policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of tag rules. The tag category and tags to be associated to this storage policy.
     */
    public readonly tagRules!: pulumi.Output<outputs.VmStoragePolicyTagRule[]>;

    /**
     * Create a VmStoragePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmStoragePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmStoragePolicyArgs | VmStoragePolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as VmStoragePolicyState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["tagRules"] = state ? state.tagRules : undefined;
        } else {
            const args = argsOrState as VmStoragePolicyArgs | undefined;
            if (!args || args.tagRules === undefined) {
                throw new Error("Missing required property 'tagRules'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["tagRules"] = args ? args.tagRules : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(VmStoragePolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VmStoragePolicy resources.
 */
export interface VmStoragePolicyState {
    /**
     * Description of the storage policy.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The name of the storage policy.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * List of tag rules. The tag category and tags to be associated to this storage policy.
     */
    readonly tagRules?: pulumi.Input<pulumi.Input<inputs.VmStoragePolicyTagRule>[]>;
}

/**
 * The set of arguments for constructing a VmStoragePolicy resource.
 */
export interface VmStoragePolicyArgs {
    /**
     * Description of the storage policy.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The name of the storage policy.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * List of tag rules. The tag category and tags to be associated to this storage policy.
     */
    readonly tagRules: pulumi.Input<pulumi.Input<inputs.VmStoragePolicyTagRule>[]>;
}
