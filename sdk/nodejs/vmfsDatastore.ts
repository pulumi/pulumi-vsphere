// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `vsphere_vmfs_datastore` resource can be used to create and manage VMFS
 * datastores on an ESXi host or a set of hosts. The resource supports using any
 * SCSI device that can generally be used in a datastore, such as local disks, or
 * disks presented to a host or multiple hosts over Fibre Channel or iSCSI.
 * Devices can be specified manually, or discovered using the
 * [`vsphere_vmfs_disks`][data-source-vmfs-disks] data source.
 * 
 * [data-source-vmfs-disks]: /docs/providers/vsphere/d/vmfs_disks.html 
 * 
 * ## Auto-Mounting of Datastores Within vCenter
 * 
 * Note that the current behaviour of this resource will auto-mount any created
 * datastores to any other host within vCenter that has access to the same disk.
 * 
 * Example: You want to create a datastore with a iSCSI LUN that is visible on 3
 * hosts in a single vSphere cluster (`esxi1`, `esxi2` and `esxi3`). When you
 * create the datastore on `esxi1`, the datastore will be automatically mounted on
 * `esxi2` and `esxi3`, without the need to configure the resource on either of
 * those two hosts.
 * 
 * Future versions of this resource may allow you to control the hosts that a
 * datastore is mounted to, but currently, this automatic behaviour cannot be
 * changed, so keep this in mind when writing your configurations and deploying
 * your disks.
 * 
 * ## Increasing Datastore Size
 * 
 * To increase the size of a datastore, you must add additional disks to the
 * `disks` attribute. Expanding the size of a datastore by increasing the size of
 * an already provisioned disk is currently not supported (but may be in future
 * versions of this resource).
 * 
 * > **NOTE:** You cannot decrease the size of a datastore. If the resource
 * detects disks removed from the configuration, Terraform will give an error. To
 * reduce the size of the datastore, the resource needs to be re-created - run
 * [`terraform taint`][cmd-taint] to taint the resource so it can be re-created.
 * 
 * [cmd-taint]: /docs/commands/taint.html
 * 
 * ## Example Usage
 * 
 * ### Addition of local disks on a single host
 * 
 * The following example uses the default datacenter and default host to add a
 * datastore with local disks to a single ESXi server.
 * 
 * > **NOTE:** There are some situations where datastore creation will not work
 * when working through vCenter (usually when trying to create a datastore on a
 * single host with local disks). If you experience trouble creating the datastore
 * you need through vCenter, break the datstore off into a different configuration
 * and deploy it using the ESXi server as the provider endpoint, using a similar
 * configuration to what is below.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 * 
 * const datacenter = pulumi.output(vsphere.getDatacenter({}));
 * const esxiHost = datacenter.apply(datacenter => vsphere.getHost({
 *     datacenterId: datacenter.id,
 * }));
 * const datastore = new vsphere.VmfsDatastore("datastore", {
 *     disks: [
 *         "mpx.vmhba1:C0:T1:L0",
 *         "mpx.vmhba1:C0:T2:L0",
 *         "mpx.vmhba1:C0:T2:L0",
 *     ],
 *     hostSystemId: esxiHost.apply(esxiHost => esxiHost.id),
 * });
 * ```
 * 
 * ### Auto-detection of disks via `vsphere_vmfs_disks`
 * 
 * The following example makes use of the
 * [`vsphere_vmfs_disks`][data-source-vmfs-disks] data source to auto-detect
 * exported iSCSI LUNS matching a certain NAA vendor ID (in this case, LUNs
 * exported from a [NetApp][ext-netapp]). These discovered disks are then loaded
 * into `vsphere_vmfs_datastore`. The datastore is also placed in the
 * `datastore-folder` folder afterwards.
 * 
 * [ext-netapp]: https://kb.netapp.com/support/s/article/ka31A0000000rLRQAY/how-to-match-a-lun-s-naa-number-to-its-serial-number?language=en_US
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 * 
 * const datacenter = pulumi.output(vsphere.getDatacenter({
 *     name: "dc1",
 * }));
 * const esxiHost = datacenter.apply(datacenter => vsphere.getHost({
 *     datacenterId: datacenter.id,
 *     name: "esxi1",
 * }));
 * const available = esxiHost.apply(esxiHost => vsphere.getVmfsDisks({
 *     filter: "naa.60a98000",
 *     hostSystemId: esxiHost.id,
 *     rescan: true,
 * }));
 * const datastore = new vsphere.VmfsDatastore("datastore", {
 *     disks: available.apply(available => available.disks),
 *     folder: "datastore-folder",
 *     hostSystemId: esxiHost.apply(esxiHost => esxiHost.id),
 * });
 * ```
 */
export class VmfsDatastore extends pulumi.CustomResource {
    /**
     * Get an existing VmfsDatastore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmfsDatastoreState, opts?: pulumi.CustomResourceOptions): VmfsDatastore {
        return new VmfsDatastore(name, <any>state, { ...opts, id: id });
    }

    /**
     * The connectivity status of the datastore. If this is `false`,
     * some other computed attributes may be out of date.
     */
    public /*out*/ readonly accessible: pulumi.Output<boolean>;
    /**
     * Maximum capacity of the datastore, in megabytes.
     */
    public /*out*/ readonly capacity: pulumi.Output<number>;
    /**
     * Map of custom attribute ids to attribute 
     * value string to set on datastore resource. See
     * [here][docs-setting-custom-attributes] for a reference on how to set values
     * for custom attributes.
     */
    public readonly customAttributes: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The [managed object
     * ID][docs-about-morefs] of a datastore cluster to put this datastore in.
     * Conflicts with `folder`.
     */
    public readonly datastoreClusterId: pulumi.Output<string | undefined>;
    /**
     * The disks to use with the datastore.
     */
    public readonly disks: pulumi.Output<string[]>;
    /**
     * The relative path to a folder to put this datastore in.
     * This is a path relative to the datacenter you are deploying the datastore to.
     * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
     * Terraform will place a datastore named `terraform-test` in a datastore folder
     * located at `/dc1/datastore/foo/bar`, with the final inventory path being
     * `/dc1/datastore/foo/bar/terraform-test`. Conflicts with
     * `datastore_cluster_id`.
     */
    public readonly folder: pulumi.Output<string | undefined>;
    /**
     * Available space of this datastore, in megabytes.
     */
    public /*out*/ readonly freeSpace: pulumi.Output<number>;
    /**
     * The [managed object ID][docs-about-morefs] of
     * the host to set the datastore up on. Note that this is not necessarily the
     * only host that the datastore will be set up on - see
     * here for more info. Forces a
     * new resource if changed.
     */
    public readonly hostSystemId: pulumi.Output<string>;
    /**
     * The current maintenance mode state of the datastore.
     */
    public /*out*/ readonly maintenanceMode: pulumi.Output<string>;
    /**
     * If `true`, more than one host in the datacenter has
     * been configured with access to the datastore.
     */
    public /*out*/ readonly multipleHostAccess: pulumi.Output<boolean>;
    /**
     * The name of the datastore. Forces a new resource if
     * changed.
     */
    public readonly name: pulumi.Output<string>;
    /**
     * The IDs of any tags to attach to this resource. See
     * [here][docs-applying-tags] for a reference on how to apply tags.
     */
    public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Total additional storage space, in megabytes,
     * potentially used by all virtual machines on this datastore.
     */
    public /*out*/ readonly uncommittedSpace: pulumi.Output<number>;
    /**
     * The unique locator for the datastore.
     */
    public /*out*/ readonly url: pulumi.Output<string>;

    /**
     * Create a VmfsDatastore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmfsDatastoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmfsDatastoreArgs | VmfsDatastoreState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: VmfsDatastoreState = argsOrState as VmfsDatastoreState | undefined;
            inputs["accessible"] = state ? state.accessible : undefined;
            inputs["capacity"] = state ? state.capacity : undefined;
            inputs["customAttributes"] = state ? state.customAttributes : undefined;
            inputs["datastoreClusterId"] = state ? state.datastoreClusterId : undefined;
            inputs["disks"] = state ? state.disks : undefined;
            inputs["folder"] = state ? state.folder : undefined;
            inputs["freeSpace"] = state ? state.freeSpace : undefined;
            inputs["hostSystemId"] = state ? state.hostSystemId : undefined;
            inputs["maintenanceMode"] = state ? state.maintenanceMode : undefined;
            inputs["multipleHostAccess"] = state ? state.multipleHostAccess : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["uncommittedSpace"] = state ? state.uncommittedSpace : undefined;
            inputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as VmfsDatastoreArgs | undefined;
            if (!args || args.disks === undefined) {
                throw new Error("Missing required property 'disks'");
            }
            if (!args || args.hostSystemId === undefined) {
                throw new Error("Missing required property 'hostSystemId'");
            }
            inputs["customAttributes"] = args ? args.customAttributes : undefined;
            inputs["datastoreClusterId"] = args ? args.datastoreClusterId : undefined;
            inputs["disks"] = args ? args.disks : undefined;
            inputs["folder"] = args ? args.folder : undefined;
            inputs["hostSystemId"] = args ? args.hostSystemId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["accessible"] = undefined /*out*/;
            inputs["capacity"] = undefined /*out*/;
            inputs["freeSpace"] = undefined /*out*/;
            inputs["maintenanceMode"] = undefined /*out*/;
            inputs["multipleHostAccess"] = undefined /*out*/;
            inputs["uncommittedSpace"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        }
        super("vsphere:index/vmfsDatastore:VmfsDatastore", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VmfsDatastore resources.
 */
export interface VmfsDatastoreState {
    /**
     * The connectivity status of the datastore. If this is `false`,
     * some other computed attributes may be out of date.
     */
    readonly accessible?: pulumi.Input<boolean>;
    /**
     * Maximum capacity of the datastore, in megabytes.
     */
    readonly capacity?: pulumi.Input<number>;
    /**
     * Map of custom attribute ids to attribute 
     * value string to set on datastore resource. See
     * [here][docs-setting-custom-attributes] for a reference on how to set values
     * for custom attributes.
     */
    readonly customAttributes?: pulumi.Input<{[key: string]: any}>;
    /**
     * The [managed object
     * ID][docs-about-morefs] of a datastore cluster to put this datastore in.
     * Conflicts with `folder`.
     */
    readonly datastoreClusterId?: pulumi.Input<string>;
    /**
     * The disks to use with the datastore.
     */
    readonly disks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The relative path to a folder to put this datastore in.
     * This is a path relative to the datacenter you are deploying the datastore to.
     * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
     * Terraform will place a datastore named `terraform-test` in a datastore folder
     * located at `/dc1/datastore/foo/bar`, with the final inventory path being
     * `/dc1/datastore/foo/bar/terraform-test`. Conflicts with
     * `datastore_cluster_id`.
     */
    readonly folder?: pulumi.Input<string>;
    /**
     * Available space of this datastore, in megabytes.
     */
    readonly freeSpace?: pulumi.Input<number>;
    /**
     * The [managed object ID][docs-about-morefs] of
     * the host to set the datastore up on. Note that this is not necessarily the
     * only host that the datastore will be set up on - see
     * here for more info. Forces a
     * new resource if changed.
     */
    readonly hostSystemId?: pulumi.Input<string>;
    /**
     * The current maintenance mode state of the datastore.
     */
    readonly maintenanceMode?: pulumi.Input<string>;
    /**
     * If `true`, more than one host in the datacenter has
     * been configured with access to the datastore.
     */
    readonly multipleHostAccess?: pulumi.Input<boolean>;
    /**
     * The name of the datastore. Forces a new resource if
     * changed.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The IDs of any tags to attach to this resource. See
     * [here][docs-applying-tags] for a reference on how to apply tags.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Total additional storage space, in megabytes,
     * potentially used by all virtual machines on this datastore.
     */
    readonly uncommittedSpace?: pulumi.Input<number>;
    /**
     * The unique locator for the datastore.
     */
    readonly url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VmfsDatastore resource.
 */
export interface VmfsDatastoreArgs {
    /**
     * Map of custom attribute ids to attribute 
     * value string to set on datastore resource. See
     * [here][docs-setting-custom-attributes] for a reference on how to set values
     * for custom attributes.
     */
    readonly customAttributes?: pulumi.Input<{[key: string]: any}>;
    /**
     * The [managed object
     * ID][docs-about-morefs] of a datastore cluster to put this datastore in.
     * Conflicts with `folder`.
     */
    readonly datastoreClusterId?: pulumi.Input<string>;
    /**
     * The disks to use with the datastore.
     */
    readonly disks: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The relative path to a folder to put this datastore in.
     * This is a path relative to the datacenter you are deploying the datastore to.
     * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
     * Terraform will place a datastore named `terraform-test` in a datastore folder
     * located at `/dc1/datastore/foo/bar`, with the final inventory path being
     * `/dc1/datastore/foo/bar/terraform-test`. Conflicts with
     * `datastore_cluster_id`.
     */
    readonly folder?: pulumi.Input<string>;
    /**
     * The [managed object ID][docs-about-morefs] of
     * the host to set the datastore up on. Note that this is not necessarily the
     * only host that the datastore will be set up on - see
     * here for more info. Forces a
     * new resource if changed.
     */
    readonly hostSystemId: pulumi.Input<string>;
    /**
     * The name of the datastore. Forces a new resource if
     * changed.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The IDs of any tags to attach to this resource. See
     * [here][docs-applying-tags] for a reference on how to apply tags.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}
