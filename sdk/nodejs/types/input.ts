// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ComputeClusterVsanDiskGroup {
    /**
     * The canonical name of the disk to use for vSAN cache.
     */
    cache?: pulumi.Input<string>;
    /**
     * An array of disk canonical names for vSAN storage.
     */
    storages?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ComputeClusterVsanFaultDomain {
    /**
     * The configuration for single fault domain.
     */
    faultDomains?: pulumi.Input<pulumi.Input<inputs.ComputeClusterVsanFaultDomainFaultDomain>[]>;
}

export interface ComputeClusterVsanFaultDomainFaultDomain {
    /**
     * The managed object IDs of the hosts to put in the fault domain.
     */
    hostIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the cluster.
     */
    name: pulumi.Input<string>;
}

export interface ComputeClusterVsanStretchedCluster {
    /**
     * The managed object IDs of the hosts to put in the first fault domain.
     */
    preferredFaultDomainHostIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of first fault domain. Default is `Preferred`.
     */
    preferredFaultDomainName?: pulumi.Input<string>;
    /**
     * The managed object IDs of the hosts to put in the second fault domain.
     */
    secondaryFaultDomainHostIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of second fault domain. Default is `Secondary`.
     *
     * > **NOTE:** You must disable vSphere HA before you enable vSAN on the cluster.
     * You can enable or re-enable vSphere HA after vSAN is configured.
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as vsphere from "@pulumi/vsphere";
     *
     * const computeCluster = new vsphere.ComputeCluster("computeCluster", {
     *     datacenterId: data.vsphere_datacenter.datacenter.id,
     *     hostSystemIds: [data.vsphere_host.host.map(__item => __item.id)],
     *     drsEnabled: true,
     *     drsAutomationLevel: "fullyAutomated",
     *     haEnabled: false,
     *     vsanEnabled: true,
     *     vsanEsaEnabled: true,
     *     vsanDedupEnabled: true,
     *     vsanCompressionEnabled: true,
     *     vsanPerformanceEnabled: true,
     *     vsanVerboseModeEnabled: true,
     *     vsanNetworkDiagnosticModeEnabled: true,
     *     vsanUnmapEnabled: true,
     *     vsanDitEncryptionEnabled: true,
     *     vsanDitRekeyInterval: 1800,
     *     vsanDiskGroups: [{
     *         cache: data.vsphere_vmfs_disks.cache_disks[0],
     *         storages: data.vsphere_vmfs_disks.storage_disks,
     *     }],
     *     vsanFaultDomains: [{
     *         faultDomains: [
     *             {
     *                 name: "fd1",
     *                 hostIds: [data.vsphere_host.faultdomain1_hosts.map(__item => __item.id)],
     *             },
     *             {
     *                 name: "fd2",
     *                 hostIds: [data.vsphere_host.faultdomain2_hosts.map(__item => __item.id)],
     *             },
     *         ],
     *     }],
     *     vsanStretchedCluster: {
     *         preferredFaultDomainHostIds: [data.vsphere_host.preferred_fault_domain_host.map(__item => __item.id)],
     *         secondaryFaultDomainHostIds: [data.vsphere_host.secondary_fault_domain_host.map(__item => __item.id)],
     *         witnessNode: data.vsphere_host.witness_host.id,
     *     },
     * });
     * ```
     */
    secondaryFaultDomainName?: pulumi.Input<string>;
    /**
     * The managed object IDs of the host selected as witness node when enable stretched cluster.
     */
    witnessNode: pulumi.Input<string>;
}

export interface ContentLibraryPublication {
    /**
     * Authentication method to connect ro a published content library. Must be `NONE` or `BASIC`.
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * Password used for authentication.
     */
    password?: pulumi.Input<string>;
    /**
     * The URL of the published content library.
     */
    publishUrl?: pulumi.Input<string>;
    /**
     * Publish the content library. Default `false`.
     */
    published?: pulumi.Input<boolean>;
    /**
     * Username used for authentication.
     */
    username?: pulumi.Input<string>;
}

export interface ContentLibrarySubscription {
    /**
     * Authentication method to connect ro a published content library. Must be `NONE` or `BASIC`.
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * Enable automatic synchronization with the published library. Default `false`.
     */
    automaticSync?: pulumi.Input<boolean>;
    /**
     * Download the library from a content only when needed. Default `true`.
     */
    onDemand?: pulumi.Input<boolean>;
    /**
     * Password used for authentication.
     */
    password?: pulumi.Input<string>;
    /**
     * URL of the published content library.
     */
    subscriptionUrl?: pulumi.Input<string>;
    /**
     * Username used for authentication.
     */
    username?: pulumi.Input<string>;
}

export interface DistributedPortGroupVlanRange {
    /**
     * The minimum VLAN to use in the range.
     */
    maxVlan: pulumi.Input<number>;
    /**
     * The minimum VLAN to use in the range.
     */
    minVlan: pulumi.Input<number>;
}

export interface DistributedVirtualSwitchHost {
    /**
     * The list of NIC devices to map to uplinks on the VDS,
     * added in order they are specified.
     */
    devices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The host system ID of the host to add to the
     * VDS.
     */
    hostSystemId: pulumi.Input<string>;
}

export interface DistributedVirtualSwitchPvlanMapping {
    /**
     * The primary VLAN ID. The VLAN IDs of 0 and
     * 4095 are reserved and cannot be used in this property.
     */
    primaryVlanId: pulumi.Input<number>;
    /**
     * The private VLAN type. Valid values are
     * promiscuous, community and isolated.
     */
    pvlanType: pulumi.Input<string>;
    /**
     * The secondary VLAN ID. The VLAN IDs of 0
     * and 4095 are reserved and cannot be used in this property.
     */
    secondaryVlanId: pulumi.Input<number>;
}

export interface DistributedVirtualSwitchVlanRange {
    /**
     * The minimum VLAN to use in the range.
     */
    maxVlan: pulumi.Input<number>;
    /**
     * The minimum VLAN to use in the range.
     */
    minVlan: pulumi.Input<number>;
}

export interface EntityPermissionsPermission {
    /**
     * Whether userOrGroup field refers to a user or a group. True for a group and false for a user.
     */
    isGroup: pulumi.Input<boolean>;
    /**
     * Whether or not this permission propagates down the hierarchy to sub-entities.
     */
    propagate: pulumi.Input<boolean>;
    /**
     * The role id of the role to be given to the user on the specified entity.
     */
    roleId: pulumi.Input<string>;
    /**
     * The user/group getting the permission.
     */
    userOrGroup: pulumi.Input<string>;
}

export interface GetVirtualMachineVapp {
    /**
     * A map of customizable vApp properties and their values. Allows customization of VMs cloned from OVF templates which have customizable vApp properties.
     */
    properties?: {[key: string]: string};
}

export interface GetVirtualMachineVappArgs {
    /**
     * A map of customizable vApp properties and their values. Allows customization of VMs cloned from OVF templates which have customizable vApp properties.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface GuestOsCustomizationSpec {
    /**
     * The list of DNS servers for a virtual network adapter with a static IP address.
     */
    dnsServerLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of DNS search domains to add to the DNS configuration on the virtual machine.
     */
    dnsSuffixLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IPv4 default gateway when using networkInterface customization on the virtual machine. This address must be local to a static IPv4 address configured in an interface sub-resource.
     */
    ipv4Gateway?: pulumi.Input<string>;
    /**
     * The IPv6 default gateway when using networkInterface customization on the virtual machine. This address must be local to a static IPv4 address configured in an interface sub-resource.
     */
    ipv6Gateway?: pulumi.Input<string>;
    /**
     * A list of configuration options specific to Linux virtual machines.
     */
    linuxOptions?: pulumi.Input<inputs.GuestOsCustomizationSpecLinuxOptions>;
    /**
     * A specification of network interface configuration options.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.GuestOsCustomizationSpecNetworkInterface>[]>;
    /**
     * A list of configuration options specific to Windows virtual machines.
     */
    windowsOptions?: pulumi.Input<inputs.GuestOsCustomizationSpecWindowsOptions>;
    /**
     * Use this option to specify a windows sysprep file directly.
     */
    windowsSysprepText?: pulumi.Input<string>;
}

export interface GuestOsCustomizationSpecLinuxOptions {
    /**
     * The domain name for this virtual machine.
     */
    domain: pulumi.Input<string>;
    /**
     * The hostname for this virtual machine.
     */
    hostName: pulumi.Input<string>;
    /**
     * Specifies whether or not the hardware clock should be in UTC or not.
     */
    hwClockUtc?: pulumi.Input<boolean>;
    /**
     * The customization script to run before and or after guest customization
     */
    scriptText?: pulumi.Input<string>;
    /**
     * Customize the time zone on the VM. This should be a time zone-style entry, like America/Los_Angeles.
     */
    timeZone?: pulumi.Input<string>;
}

export interface GuestOsCustomizationSpecNetworkInterface {
    /**
     * A DNS search domain to add to the DNS configuration on the virtual machine.
     */
    dnsDomain?: pulumi.Input<string>;
    /**
     * Network-interface specific DNS settings for Windows operating systems. Ignored on Linux.
     */
    dnsServerLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IPv4 address assigned to this network adapter. If left blank, DHCP is used.
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * The IPv4 CIDR netmask for the supplied IP address. Ignored if DHCP is selected.
     */
    ipv4Netmask?: pulumi.Input<number>;
    /**
     * The IPv6 address assigned to this network adapter. If left blank, default auto-configuration is used.
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * The IPv6 CIDR netmask for the supplied IP address. Ignored if auto-configuration is selected.
     */
    ipv6Netmask?: pulumi.Input<number>;
}

export interface GuestOsCustomizationSpecWindowsOptions {
    /**
     * The new administrator password for this virtual machine.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * Specifies whether or not the VM automatically logs on as Administrator.
     */
    autoLogon?: pulumi.Input<boolean>;
    /**
     * Specifies how many times the VM should auto-logon the Administrator account when autoLogon is true.
     */
    autoLogonCount?: pulumi.Input<number>;
    /**
     * The host name for this virtual machine.
     */
    computerName: pulumi.Input<string>;
    /**
     * The password of the domain administrator used to join this virtual machine to the domain.
     */
    domainAdminPassword?: pulumi.Input<string>;
    /**
     * The user account of the domain administrator used to join this virtual machine to the domain.
     */
    domainAdminUser?: pulumi.Input<string>;
    /**
     * The full name of the user of this virtual machine.
     */
    fullName?: pulumi.Input<string>;
    /**
     * The domain that the virtual machine should join.
     */
    joinDomain?: pulumi.Input<string>;
    /**
     * The organization name this virtual machine is being installed for.
     */
    organizationName?: pulumi.Input<string>;
    /**
     * The product key for this virtual machine.
     */
    productKey?: pulumi.Input<string>;
    /**
     * A list of commands to run at first user logon, after guest customization.
     */
    runOnceCommandLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The new time zone for the virtual machine. This is a sysprep-dictated timezone code.
     */
    timeZone?: pulumi.Input<number>;
    /**
     * The workgroup for this virtual machine if not joining a domain.
     */
    workgroup?: pulumi.Input<string>;
}

export interface HostPortGroupPort {
    /**
     * The key for this port group as returned from the vSphere API.
     */
    key?: pulumi.Input<string>;
    /**
     * The MAC addresses of the network service of the virtual machine connected on this port.
     */
    macAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type type of the entity connected on this port. Possible values are host (VMKkernel), systemManagement (service console), virtualMachine, or unknown.
     */
    type?: pulumi.Input<string>;
}

export interface VirtualMachineCdrom {
    /**
     * Indicates whether the device should be backed by remote client device. Conflicts with `datastoreId` and `path`.
     */
    clientDevice?: pulumi.Input<boolean>;
    /**
     * The datastore ID that on which the ISO is located. Required for using a datastore ISO. Conflicts with `clientDevice`.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * The internally-computed address of this device, such as scsi:0:1, denoting scsi bus #0 and device unit 1.
     */
    deviceAddress?: pulumi.Input<string>;
    /**
     * The ID of the device within the virtual machine.
     */
    key?: pulumi.Input<number>;
    /**
     * The path to the ISO file. Required for using a datastore ISO. Conflicts with `clientDevice`.
     *
     * > **NOTE:** Either `clientDevice` (for a remote backed CD-ROM) or `datastoreId` and `path` (for a datastore ISO backed CD-ROM) are required to .
     *
     * > **NOTE:** Some CD-ROM drive types are not supported by this resource, such as pass-through devices. If these drives are present in a cloned template, or added outside of the provider, the desired state will be corrected to the defined device, or removed if no `cdrom` block is present.
     */
    path?: pulumi.Input<string>;
}

export interface VirtualMachineClone {
    /**
     * The customization specification for the virtual machine post-clone.
     */
    customizationSpec?: pulumi.Input<inputs.VirtualMachineCloneCustomizationSpec>;
    /**
     * The customization specification for the virtual machine post-clone.
     */
    customize?: pulumi.Input<inputs.VirtualMachineCloneCustomize>;
    /**
     * Whether or not to create a linked clone when cloning. When this option is used, the source VM must have a single snapshot associated with it.
     */
    linkedClone?: pulumi.Input<boolean>;
    /**
     * Mapping of ovf networks to the networks to use in vSphere.
     */
    ovfNetworkMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Mapping of ovf storage to the datastores to use in vSphere.
     */
    ovfStorageMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The UUID of the source virtual machine or template.
     */
    templateUuid: pulumi.Input<string>;
    /**
     * The timeout, in minutes, to wait for the virtual machine clone to complete.
     */
    timeout?: pulumi.Input<number>;
}

export interface VirtualMachineCloneCustomizationSpec {
    /**
     * The UUID of the virtual machine.
     */
    id: pulumi.Input<string>;
    /**
     * The amount of time, in minutes, to wait for guest OS customization to complete before returning with an error. Setting this value to 0 or a negative value skips the waiter. Default: 10.
     */
    timeout?: pulumi.Input<number>;
}

export interface VirtualMachineCloneCustomize {
    /**
     * The list of DNS servers for a virtual network adapter with a static IP address.
     */
    dnsServerLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of DNS search domains to add to the DNS configuration on the virtual machine.
     */
    dnsSuffixLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IPv4 default gateway when using networkInterface customization on the virtual machine. This address must be local to a static IPv4 address configured in an interface sub-resource.
     */
    ipv4Gateway?: pulumi.Input<string>;
    /**
     * The IPv6 default gateway when using networkInterface customization on the virtual machine. This address must be local to a static IPv4 address configured in an interface sub-resource.
     */
    ipv6Gateway?: pulumi.Input<string>;
    /**
     * A list of configuration options specific to Linux virtual machines.
     */
    linuxOptions?: pulumi.Input<inputs.VirtualMachineCloneCustomizeLinuxOptions>;
    /**
     * A specification for a virtual NIC on the virtual machine. See network interface options for more information.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.VirtualMachineCloneCustomizeNetworkInterface>[]>;
    /**
     * The amount of time, in minutes, to wait for guest OS customization to complete before returning with an error. Setting this value to 0 or a negative value skips the waiter. Default: 10.
     */
    timeout?: pulumi.Input<number>;
    /**
     * A list of configuration options specific to Windows virtual machines.
     */
    windowsOptions?: pulumi.Input<inputs.VirtualMachineCloneCustomizeWindowsOptions>;
    /**
     * Use this option to specify a windows sysprep file directly.
     */
    windowsSysprepText?: pulumi.Input<string>;
}

export interface VirtualMachineCloneCustomizeLinuxOptions {
    /**
     * The domain name for this virtual machine.
     */
    domain: pulumi.Input<string>;
    /**
     * The hostname for this virtual machine.
     */
    hostName: pulumi.Input<string>;
    /**
     * Specifies whether or not the hardware clock should be in UTC or not.
     */
    hwClockUtc?: pulumi.Input<boolean>;
    /**
     * The customization script to run before and or after guest customization
     */
    scriptText?: pulumi.Input<string>;
    /**
     * Customize the time zone on the VM. This should be a time zone-style entry, like America/Los_Angeles.
     */
    timeZone?: pulumi.Input<string>;
}

export interface VirtualMachineCloneCustomizeNetworkInterface {
    /**
     * A DNS search domain to add to the DNS configuration on the virtual machine.
     */
    dnsDomain?: pulumi.Input<string>;
    /**
     * Network-interface specific DNS settings for Windows operating systems. Ignored on Linux.
     */
    dnsServerLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IPv4 address assigned to this network adapter. If left blank, DHCP is used.
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * The IPv4 CIDR netmask for the supplied IP address. Ignored if DHCP is selected.
     */
    ipv4Netmask?: pulumi.Input<number>;
    /**
     * The IPv6 address assigned to this network adapter. If left blank, default auto-configuration is used.
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * The IPv6 CIDR netmask for the supplied IP address. Ignored if auto-configuration is selected.
     */
    ipv6Netmask?: pulumi.Input<number>;
}

export interface VirtualMachineCloneCustomizeWindowsOptions {
    /**
     * The new administrator password for this virtual machine.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * Specifies whether or not the VM automatically logs on as Administrator.
     */
    autoLogon?: pulumi.Input<boolean>;
    /**
     * Specifies how many times the VM should auto-logon the Administrator account when autoLogon is true.
     */
    autoLogonCount?: pulumi.Input<number>;
    /**
     * The host name for this virtual machine.
     */
    computerName: pulumi.Input<string>;
    /**
     * The password of the domain administrator used to join this virtual machine to the domain.
     */
    domainAdminPassword?: pulumi.Input<string>;
    /**
     * The user account of the domain administrator used to join this virtual machine to the domain.
     */
    domainAdminUser?: pulumi.Input<string>;
    /**
     * The full name of the user of this virtual machine.
     */
    fullName?: pulumi.Input<string>;
    /**
     * The domain that the virtual machine should join.
     */
    joinDomain?: pulumi.Input<string>;
    /**
     * The organization name this virtual machine is being installed for.
     */
    organizationName?: pulumi.Input<string>;
    /**
     * The product key for this virtual machine.
     */
    productKey?: pulumi.Input<string>;
    /**
     * A list of commands to run at first user logon, after guest customization.
     */
    runOnceCommandLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The new time zone for the virtual machine. This is a sysprep-dictated timezone code.
     */
    timeZone?: pulumi.Input<number>;
    /**
     * The workgroup for this virtual machine if not joining a domain.
     */
    workgroup?: pulumi.Input<string>;
}

export interface VirtualMachineDisk {
    /**
     * Attach an external disk instead of creating a new one. Implies and conflicts with `keepOnRemove`. If set, you cannot set `size`, `eagerlyScrub`, or `thinProvisioned`. Must set `path` if used.
     *
     * > **NOTE:** External disks cannot be attached when `datastoreClusterId` is used.
     */
    attach?: pulumi.Input<boolean>;
    /**
     * The type of storage controller to attach the  disk to. Can be `scsi`, `sata`, or `ide`. You must have the appropriate number of controllers enabled for the selected type. Default `scsi`.
     */
    controllerType?: pulumi.Input<string>;
    /**
     * The datastore ID that on which the ISO is located. Required for using a datastore ISO. Conflicts with `clientDevice`.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * The internally-computed address of this device, such as scsi:0:1, denoting scsi bus #0 and device unit 1.
     */
    deviceAddress?: pulumi.Input<string>;
    /**
     * The mode of this this virtual disk for purposes of writes and snapshots. One of `append`, `independentNonpersistent`, `independentPersistent`, `nonpersistent`, `persistent`, or `undoable`. Default: `persistent`. For more information on these option, please refer to the [product documentation][vmware-docs-disk-mode].
     *
     * [vmware-docs-disk-mode]: https://vdc-download.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.device.VirtualDiskOption.DiskMode.html
     */
    diskMode?: pulumi.Input<string>;
    /**
     * The sharing mode of this virtual disk. One of `sharingMultiWriter` or `sharingNone`. Default: `sharingNone`.
     *
     * > **NOTE:** Disk sharing is only available on vSphere 6.0 and later.
     */
    diskSharing?: pulumi.Input<string>;
    /**
     * If set to `true`, the disk space is zeroed out when the virtual machine is created. This will delay the creation of the virtual disk. Cannot be set to `true` when `thinProvisioned` is `true`.  See the section on picking a disk type for more information.  Default: `false`.
     */
    eagerlyScrub?: pulumi.Input<boolean>;
    /**
     * The upper limit of IOPS that this disk can use. The default is no limit.
     */
    ioLimit?: pulumi.Input<number>;
    /**
     * The I/O reservation (guarantee) for the virtual disk has, in IOPS.  The default is no reservation.
     */
    ioReservation?: pulumi.Input<number>;
    /**
     * The share count for the virtual disk when the share level is `custom`.
     */
    ioShareCount?: pulumi.Input<number>;
    /**
     * The share allocation level for the virtual disk. One of `low`, `normal`, `high`, or `custom`. Default: `normal`.
     */
    ioShareLevel?: pulumi.Input<string>;
    /**
     * Keep this disk when removing the device or destroying the virtual machine. Default: `false`.
     */
    keepOnRemove?: pulumi.Input<boolean>;
    /**
     * The ID of the device within the virtual machine.
     */
    key?: pulumi.Input<number>;
    /**
     * A unique label for this disk.
     */
    label: pulumi.Input<string>;
    /**
     * The path to the ISO file. Required for using a datastore ISO. Conflicts with `clientDevice`.
     *
     * > **NOTE:** Either `clientDevice` (for a remote backed CD-ROM) or `datastoreId` and `path` (for a datastore ISO backed CD-ROM) are required to .
     *
     * > **NOTE:** Some CD-ROM drive types are not supported by this resource, such as pass-through devices. If these drives are present in a cloned template, or added outside of the provider, the desired state will be corrected to the defined device, or removed if no `cdrom` block is present.
     */
    path?: pulumi.Input<string>;
    /**
     * The size of the disk, in GB. Must be a whole number.
     */
    size?: pulumi.Input<number>;
    /**
     * The UUID of the storage policy to assign to the virtual disk.
     */
    storagePolicyId?: pulumi.Input<string>;
    /**
     * If `true`, the disk is thin provisioned, with space for the file being allocated on an as-needed basis. Cannot be set to `true` when `eagerlyScrub` is `true`. See the section on selecting a disk type for more information. Default: `true`.
     */
    thinProvisioned?: pulumi.Input<boolean>;
    /**
     * The disk number on the storage bus. The maximum value for this setting is the value of the controller count times the controller capacity (15 for SCSI, 30 for SATA, and 2 for IDE). Duplicate unit numbers are not allowed. Default `0`, for which one disk must be set to.
     */
    unitNumber?: pulumi.Input<number>;
    /**
     * The UUID of the virtual disk VMDK file. This is used to track the virtual disk on the virtual machine.
     */
    uuid?: pulumi.Input<string>;
    /**
     * If `true`, writes for this disk are sent directly to the filesystem immediately instead of being buffered. Default: `false`.
     */
    writeThrough?: pulumi.Input<boolean>;
}

export interface VirtualMachineNetworkInterface {
    /**
     * The network interface type. One of `e1000`, `e1000e`, `sriov`, or `vmxnet3`. Default: `vmxnet3`.
     */
    adapterType?: pulumi.Input<string>;
    /**
     * The upper bandwidth limit of the network interface, in Mbits/sec. The default is no limit. Ignored if `adapterType` is set to `sriov`.
     */
    bandwidthLimit?: pulumi.Input<number>;
    /**
     * The bandwidth reservation of the network interface, in Mbits/sec. The default is no reservation.
     */
    bandwidthReservation?: pulumi.Input<number>;
    /**
     * The share count for the network interface when the share level is `custom`. Ignored if `adapterType` is set to `sriov`.
     */
    bandwidthShareCount?: pulumi.Input<number>;
    /**
     * The bandwidth share allocation level for the network interface. One of `low`, `normal`, `high`, or `custom`. Default: `normal`. Ignored if `adapterType` is set to `sriov`.
     */
    bandwidthShareLevel?: pulumi.Input<string>;
    /**
     * The internally-computed address of this device, such as scsi:0:1, denoting scsi bus #0 and device unit 1.
     */
    deviceAddress?: pulumi.Input<string>;
    /**
     * The ID of the device within the virtual machine.
     */
    key?: pulumi.Input<number>;
    /**
     * The MAC address of the network interface. Can only be manually set if `useStaticMac` is `true`. Otherwise, the value is computed and presents the assigned MAC address for the interface.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * The [managed object reference ID][docs-about-morefs] of the network on which to connect the virtual machine network interface.
     */
    networkId: pulumi.Input<string>;
    /**
     * Specifies which NIC in an OVF/OVA the `networkInterface` should be associated. Only applies at creation when deploying from an OVF/OVA.
     */
    ovfMapping?: pulumi.Input<string>;
    /**
     * The ID of the Physical SR-IOV NIC to attach to, e.g. '0000:d8:00.0'
     */
    physicalFunction?: pulumi.Input<string>;
    /**
     * If true, the `macAddress` field is treated as a static MAC address and set accordingly. Setting this to `true` requires `macAddress` to be set. Default: `false`.
     */
    useStaticMac?: pulumi.Input<boolean>;
}

export interface VirtualMachineOvfDeploy {
    /**
     * Allow unverified ssl certificates while deploying ovf/ova from url.
     */
    allowUnverifiedSslCert?: pulumi.Input<boolean>;
    /**
     * The Deployment option to be chosen. If empty, the default option is used.
     */
    deploymentOption?: pulumi.Input<string>;
    /**
     * An optional disk provisioning. If set, all the disks in the deployed ovf will have the same specified disk type (e.g., thin provisioned).
     */
    diskProvisioning?: pulumi.Input<string>;
    /**
     * Allow properties with ovf:userConfigurable=false to be set.
     */
    enableHiddenProperties?: pulumi.Input<boolean>;
    /**
     * The IP allocation policy.
     */
    ipAllocationPolicy?: pulumi.Input<string>;
    /**
     * The IP protocol.
     */
    ipProtocol?: pulumi.Input<string>;
    /**
     * The absolute path to the ovf/ova file in the local system.
     */
    localOvfPath?: pulumi.Input<string>;
    /**
     * The mapping of name of network identifiers from the ovf descriptor to network UUID in the VI infrastructure.
     */
    ovfNetworkMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * URL to the remote ovf/ova file to be deployed.
     */
    remoteOvfUrl?: pulumi.Input<string>;
}

export interface VirtualMachineVapp {
    /**
     * A map of customizable vApp properties and their values. Allows customization of VMs cloned from OVF templates which have customizable vApp properties.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VmStoragePolicyTagRule {
    /**
     * Include datastores with the given tags or exclude. Default `true`.
     */
    includeDatastoresWithTags?: pulumi.Input<boolean>;
    /**
     * Name of the tag category.
     */
    tagCategory: pulumi.Input<string>;
    /**
     * List of Name of tags to select from the given category.
     */
    tags: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VnicIpv4 {
    /**
     * Use DHCP to configure the interface's IPv6 stack.
     */
    dhcp?: pulumi.Input<boolean>;
    /**
     * IP address of the default gateway, if DHCP or autoconfig is not set.
     */
    gw?: pulumi.Input<string>;
    /**
     * Address of the interface, if DHCP is not set.
     */
    ip?: pulumi.Input<string>;
    /**
     * Netmask of the interface, if DHCP is not set.
     */
    netmask?: pulumi.Input<string>;
}

export interface VnicIpv6 {
    /**
     * List of IPv6 addresses
     */
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use IPv6 Autoconfiguration (RFC2462).
     */
    autoconfig?: pulumi.Input<boolean>;
    /**
     * Use DHCP to configure the interface's IPv6 stack.
     */
    dhcp?: pulumi.Input<boolean>;
    /**
     * IP address of the default gateway, if DHCP or autoconfig is not set.
     */
    gw?: pulumi.Input<string>;
}
