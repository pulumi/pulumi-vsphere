// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `vsphere.GuestOsCustomization` data source can be used to discover the
 * details about a customization specification for a guest operating system.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const datacenter = vsphere.getDatacenter({
 *     name: "dc-01",
 * });
 * const template = datacenter.then(datacenter => vsphere.getVirtualMachine({
 *     name: "windows-template",
 *     datacenterId: datacenter.id,
 * }));
 * const windows = vsphere.getGuestOsCustomization({
 *     name: "windows",
 * });
 * const vm = new vsphere.VirtualMachine("vm", {
 *     templateUuid: template.then(template => template.id),
 *     customizationSpec: [{
 *         id: windows.then(windows => windows.id),
 *     }],
 * });
 * ```
 */
export function getGuestOsCustomization(args: GetGuestOsCustomizationArgs, opts?: pulumi.InvokeOptions): Promise<GetGuestOsCustomizationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vsphere:index/getGuestOsCustomization:getGuestOsCustomization", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getGuestOsCustomization.
 */
export interface GetGuestOsCustomizationArgs {
    /**
     * The name of the customization specification is the unique
     * identifier per vCenter Server instance.
     */
    name: string;
}

/**
 * A collection of values returned by getGuestOsCustomization.
 */
export interface GetGuestOsCustomizationResult {
    /**
     * The number of last changed version to the customization
     * specification.
     */
    readonly changeVersion: string;
    /**
     * The description for the customization specification.
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The time of last modification to the customization
     * specification.
     */
    readonly lastUpdateTime: string;
    readonly name: string;
    /**
     * Container object for the guest operating system properties to be
     * customized. See
     * virtual machine customizations
     */
    readonly specs: outputs.GetGuestOsCustomizationSpec[];
    /**
     * The type of customization specification: One among: Windows, Linux.
     */
    readonly type: string;
}
/**
 * The `vsphere.GuestOsCustomization` data source can be used to discover the
 * details about a customization specification for a guest operating system.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const datacenter = vsphere.getDatacenter({
 *     name: "dc-01",
 * });
 * const template = datacenter.then(datacenter => vsphere.getVirtualMachine({
 *     name: "windows-template",
 *     datacenterId: datacenter.id,
 * }));
 * const windows = vsphere.getGuestOsCustomization({
 *     name: "windows",
 * });
 * const vm = new vsphere.VirtualMachine("vm", {
 *     templateUuid: template.then(template => template.id),
 *     customizationSpec: [{
 *         id: windows.then(windows => windows.id),
 *     }],
 * });
 * ```
 */
export function getGuestOsCustomizationOutput(args: GetGuestOsCustomizationOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetGuestOsCustomizationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vsphere:index/getGuestOsCustomization:getGuestOsCustomization", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getGuestOsCustomization.
 */
export interface GetGuestOsCustomizationOutputArgs {
    /**
     * The name of the customization specification is the unique
     * identifier per vCenter Server instance.
     */
    name: pulumi.Input<string>;
}
