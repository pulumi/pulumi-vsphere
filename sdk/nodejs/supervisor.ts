// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource for configuring Workload Management.
 *
 * ## Example Usage
 *
 * ### S
 *
 * ### Enable Workload Management on a Compute Cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const vmClass = new vsphere.VirtualMachineClass("vm_class", {
 *     name: "custom-class",
 *     cpus: 4,
 *     memory: 4096,
 * });
 * const supervisor = new vsphere.Supervisor("supervisor", {
 *     cluster: "<compute_cluster_id>",
 *     storagePolicy: "<storage_policy_name>",
 *     contentLibrary: "<content_library_id>",
 *     mainDns: "10.0.0.250",
 *     workerDns: "10.0.0.250",
 *     edgeCluster: "<edge_cluster_id>",
 *     dvsUuid: "<distributed_switch_uuid>",
 *     sizingHint: "MEDIUM",
 *     managementNetwork: {
 *         network: "<portgroup_id>",
 *         subnetMask: "255.255.255.0",
 *         startingAddress: "10.0.0.150",
 *         gateway: "10.0.0.250",
 *         addressCount: 5,
 *     },
 *     ingressCidrs: [{
 *         address: "10.10.10.0",
 *         prefix: 24,
 *     }],
 *     egressCidrs: [{
 *         address: "10.10.11.0",
 *         prefix: 24,
 *     }],
 *     podCidrs: [{
 *         address: "10.244.10.0",
 *         prefix: 23,
 *     }],
 *     serviceCidr: {
 *         address: "10.10.12.0",
 *         prefix: 24,
 *     },
 *     searchDomains: "vsphere.local",
 *     namespaces: [{
 *         name: "custom-namespace",
 *         contentLibraries: [],
 *         vmClasses: [vmClass.id],
 *     }],
 * });
 * ```
 */
export class Supervisor extends pulumi.CustomResource {
    /**
     * Get an existing Supervisor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SupervisorState, opts?: pulumi.CustomResourceOptions): Supervisor {
        return new Supervisor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/supervisor:Supervisor';

    /**
     * Returns true if the given object is an instance of Supervisor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Supervisor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Supervisor.__pulumiType;
    }

    /**
     * The identifier of the compute cluster.
     */
    public readonly cluster!: pulumi.Output<string>;
    /**
     * The identifier of the subscribed content library.
     */
    public readonly contentLibrary!: pulumi.Output<string>;
    /**
     * The UUID of the distributed switch.
     */
    public readonly dvsUuid!: pulumi.Output<string>;
    /**
     * The identifier of the NSX Edge Cluster.
     */
    public readonly edgeCluster!: pulumi.Output<string>;
    /**
     * CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.
     */
    public readonly egressCidrs!: pulumi.Output<outputs.SupervisorEgressCidr[]>;
    /**
     * CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.
     */
    public readonly ingressCidrs!: pulumi.Output<outputs.SupervisorIngressCidr[]>;
    /**
     * The list of addresses of the primary DNS servers.
     */
    public readonly mainDns!: pulumi.Output<string[]>;
    /**
     * The list of addresses of the primary NTP servers.
     */
    public readonly mainNtps!: pulumi.Output<string[]>;
    /**
     * The configuration for the management network which the control plane VMs will be connected to.
     * * * `network` - ID of the network. (e.g. a distributed port group).
     * * * `startingAddress` - Starting address of the management network range.
     * * * `subnetMask` - Subnet mask.
     * * * `gateway` - Gateway IP address.
     * * * `addressCount` - Number of addresses to allocate. Starts from `startingAddress`
     */
    public readonly managementNetwork!: pulumi.Output<outputs.SupervisorManagementNetwork>;
    /**
     * The list of namespaces to create in the Supervisor cluster
     */
    public readonly namespaces!: pulumi.Output<outputs.SupervisorNamespace[] | undefined>;
    /**
     * CIDR blocks from which Kubernetes allocates pod IP addresses. Minimum subnet size is 23.
     */
    public readonly podCidrs!: pulumi.Output<outputs.SupervisorPodCidr[]>;
    /**
     * List of DNS search domains.
     */
    public readonly searchDomains!: pulumi.Output<string>;
    /**
     * CIDR block from which Kubernetes allocates service cluster IP addresses.
     */
    public readonly serviceCidr!: pulumi.Output<outputs.SupervisorServiceCidr>;
    /**
     * The size of the Kubernetes API server.
     */
    public readonly sizingHint!: pulumi.Output<string>;
    /**
     * The name of the storage policy.
     */
    public readonly storagePolicy!: pulumi.Output<string>;
    /**
     * The list of addresses of the DNS servers to use for the worker nodes.
     */
    public readonly workerDns!: pulumi.Output<string[]>;
    /**
     * The list of addresses of the NTP servers to use for the worker nodes.
     */
    public readonly workerNtps!: pulumi.Output<string[]>;

    /**
     * Create a Supervisor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SupervisorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SupervisorArgs | SupervisorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SupervisorState | undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["contentLibrary"] = state ? state.contentLibrary : undefined;
            resourceInputs["dvsUuid"] = state ? state.dvsUuid : undefined;
            resourceInputs["edgeCluster"] = state ? state.edgeCluster : undefined;
            resourceInputs["egressCidrs"] = state ? state.egressCidrs : undefined;
            resourceInputs["ingressCidrs"] = state ? state.ingressCidrs : undefined;
            resourceInputs["mainDns"] = state ? state.mainDns : undefined;
            resourceInputs["mainNtps"] = state ? state.mainNtps : undefined;
            resourceInputs["managementNetwork"] = state ? state.managementNetwork : undefined;
            resourceInputs["namespaces"] = state ? state.namespaces : undefined;
            resourceInputs["podCidrs"] = state ? state.podCidrs : undefined;
            resourceInputs["searchDomains"] = state ? state.searchDomains : undefined;
            resourceInputs["serviceCidr"] = state ? state.serviceCidr : undefined;
            resourceInputs["sizingHint"] = state ? state.sizingHint : undefined;
            resourceInputs["storagePolicy"] = state ? state.storagePolicy : undefined;
            resourceInputs["workerDns"] = state ? state.workerDns : undefined;
            resourceInputs["workerNtps"] = state ? state.workerNtps : undefined;
        } else {
            const args = argsOrState as SupervisorArgs | undefined;
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            if ((!args || args.contentLibrary === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentLibrary'");
            }
            if ((!args || args.dvsUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dvsUuid'");
            }
            if ((!args || args.edgeCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeCluster'");
            }
            if ((!args || args.egressCidrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'egressCidrs'");
            }
            if ((!args || args.ingressCidrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ingressCidrs'");
            }
            if ((!args || args.mainDns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mainDns'");
            }
            if ((!args || args.mainNtps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mainNtps'");
            }
            if ((!args || args.managementNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementNetwork'");
            }
            if ((!args || args.podCidrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'podCidrs'");
            }
            if ((!args || args.searchDomains === undefined) && !opts.urn) {
                throw new Error("Missing required property 'searchDomains'");
            }
            if ((!args || args.serviceCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceCidr'");
            }
            if ((!args || args.sizingHint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sizingHint'");
            }
            if ((!args || args.storagePolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storagePolicy'");
            }
            if ((!args || args.workerDns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workerDns'");
            }
            if ((!args || args.workerNtps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workerNtps'");
            }
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["contentLibrary"] = args ? args.contentLibrary : undefined;
            resourceInputs["dvsUuid"] = args ? args.dvsUuid : undefined;
            resourceInputs["edgeCluster"] = args ? args.edgeCluster : undefined;
            resourceInputs["egressCidrs"] = args ? args.egressCidrs : undefined;
            resourceInputs["ingressCidrs"] = args ? args.ingressCidrs : undefined;
            resourceInputs["mainDns"] = args ? args.mainDns : undefined;
            resourceInputs["mainNtps"] = args ? args.mainNtps : undefined;
            resourceInputs["managementNetwork"] = args ? args.managementNetwork : undefined;
            resourceInputs["namespaces"] = args ? args.namespaces : undefined;
            resourceInputs["podCidrs"] = args ? args.podCidrs : undefined;
            resourceInputs["searchDomains"] = args ? args.searchDomains : undefined;
            resourceInputs["serviceCidr"] = args ? args.serviceCidr : undefined;
            resourceInputs["sizingHint"] = args ? args.sizingHint : undefined;
            resourceInputs["storagePolicy"] = args ? args.storagePolicy : undefined;
            resourceInputs["workerDns"] = args ? args.workerDns : undefined;
            resourceInputs["workerNtps"] = args ? args.workerNtps : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Supervisor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Supervisor resources.
 */
export interface SupervisorState {
    /**
     * The identifier of the compute cluster.
     */
    cluster?: pulumi.Input<string>;
    /**
     * The identifier of the subscribed content library.
     */
    contentLibrary?: pulumi.Input<string>;
    /**
     * The UUID of the distributed switch.
     */
    dvsUuid?: pulumi.Input<string>;
    /**
     * The identifier of the NSX Edge Cluster.
     */
    edgeCluster?: pulumi.Input<string>;
    /**
     * CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.
     */
    egressCidrs?: pulumi.Input<pulumi.Input<inputs.SupervisorEgressCidr>[]>;
    /**
     * CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.
     */
    ingressCidrs?: pulumi.Input<pulumi.Input<inputs.SupervisorIngressCidr>[]>;
    /**
     * The list of addresses of the primary DNS servers.
     */
    mainDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of addresses of the primary NTP servers.
     */
    mainNtps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The configuration for the management network which the control plane VMs will be connected to.
     * * * `network` - ID of the network. (e.g. a distributed port group).
     * * * `startingAddress` - Starting address of the management network range.
     * * * `subnetMask` - Subnet mask.
     * * * `gateway` - Gateway IP address.
     * * * `addressCount` - Number of addresses to allocate. Starts from `startingAddress`
     */
    managementNetwork?: pulumi.Input<inputs.SupervisorManagementNetwork>;
    /**
     * The list of namespaces to create in the Supervisor cluster
     */
    namespaces?: pulumi.Input<pulumi.Input<inputs.SupervisorNamespace>[]>;
    /**
     * CIDR blocks from which Kubernetes allocates pod IP addresses. Minimum subnet size is 23.
     */
    podCidrs?: pulumi.Input<pulumi.Input<inputs.SupervisorPodCidr>[]>;
    /**
     * List of DNS search domains.
     */
    searchDomains?: pulumi.Input<string>;
    /**
     * CIDR block from which Kubernetes allocates service cluster IP addresses.
     */
    serviceCidr?: pulumi.Input<inputs.SupervisorServiceCidr>;
    /**
     * The size of the Kubernetes API server.
     */
    sizingHint?: pulumi.Input<string>;
    /**
     * The name of the storage policy.
     */
    storagePolicy?: pulumi.Input<string>;
    /**
     * The list of addresses of the DNS servers to use for the worker nodes.
     */
    workerDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of addresses of the NTP servers to use for the worker nodes.
     */
    workerNtps?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Supervisor resource.
 */
export interface SupervisorArgs {
    /**
     * The identifier of the compute cluster.
     */
    cluster: pulumi.Input<string>;
    /**
     * The identifier of the subscribed content library.
     */
    contentLibrary: pulumi.Input<string>;
    /**
     * The UUID of the distributed switch.
     */
    dvsUuid: pulumi.Input<string>;
    /**
     * The identifier of the NSX Edge Cluster.
     */
    edgeCluster: pulumi.Input<string>;
    /**
     * CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.
     */
    egressCidrs: pulumi.Input<pulumi.Input<inputs.SupervisorEgressCidr>[]>;
    /**
     * CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.
     */
    ingressCidrs: pulumi.Input<pulumi.Input<inputs.SupervisorIngressCidr>[]>;
    /**
     * The list of addresses of the primary DNS servers.
     */
    mainDns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of addresses of the primary NTP servers.
     */
    mainNtps: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The configuration for the management network which the control plane VMs will be connected to.
     * * * `network` - ID of the network. (e.g. a distributed port group).
     * * * `startingAddress` - Starting address of the management network range.
     * * * `subnetMask` - Subnet mask.
     * * * `gateway` - Gateway IP address.
     * * * `addressCount` - Number of addresses to allocate. Starts from `startingAddress`
     */
    managementNetwork: pulumi.Input<inputs.SupervisorManagementNetwork>;
    /**
     * The list of namespaces to create in the Supervisor cluster
     */
    namespaces?: pulumi.Input<pulumi.Input<inputs.SupervisorNamespace>[]>;
    /**
     * CIDR blocks from which Kubernetes allocates pod IP addresses. Minimum subnet size is 23.
     */
    podCidrs: pulumi.Input<pulumi.Input<inputs.SupervisorPodCidr>[]>;
    /**
     * List of DNS search domains.
     */
    searchDomains: pulumi.Input<string>;
    /**
     * CIDR block from which Kubernetes allocates service cluster IP addresses.
     */
    serviceCidr: pulumi.Input<inputs.SupervisorServiceCidr>;
    /**
     * The size of the Kubernetes API server.
     */
    sizingHint: pulumi.Input<string>;
    /**
     * The name of the storage policy.
     */
    storagePolicy: pulumi.Input<string>;
    /**
     * The list of addresses of the DNS servers to use for the worker nodes.
     */
    workerDns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of addresses of the NTP servers to use for the worker nodes.
     */
    workerNtps: pulumi.Input<pulumi.Input<string>[]>;
}
