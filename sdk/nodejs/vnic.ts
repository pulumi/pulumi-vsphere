// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a VMware vSphere vnic resource.
 * 
 * ## Importing 
 * 
 * An existing vNic can be [imported][docs-import] into this resource
 * via supplying the vNic's ID. An example is below:
 * 
 * [docs-import]: /docs/import/index.html
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 * 
 * The above would import the the vnic `vmk2` from host with ID `host-123`.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-vsphere/blob/master/website/docs/r/vnic.html.markdown.
 */
export class Vnic extends pulumi.CustomResource {
    /**
     * Get an existing Vnic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VnicState, opts?: pulumi.CustomResourceOptions): Vnic {
        return new Vnic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/vnic:Vnic';

    /**
     * Returns true if the given object is an instance of Vnic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vnic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vnic.__pulumiType;
    }

    /**
     * Key of the distributed portgroup the nic will connect to. 
     */
    public readonly distributedPortGroup!: pulumi.Output<string | undefined>;
    /**
     * UUID of the DVSwitch the nic will be attached to. Do not set if you set portgroup.
     */
    public readonly distributedSwitchPort!: pulumi.Output<string | undefined>;
    /**
     * ESX host the interface belongs to
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * IPv4 settings. Either this or `ipv6` needs to be set. See  ipv4 options below.
     */
    public readonly ipv4!: pulumi.Output<outputs.VnicIpv4 | undefined>;
    /**
     * IPv6 settings. Either this or `ipv6` needs to be set. See  ipv6 options below.
     */
    public readonly ipv6!: pulumi.Output<outputs.VnicIpv6 | undefined>;
    /**
     * MAC address of the interface.
     */
    public readonly mac!: pulumi.Output<string>;
    /**
     * MTU of the interface.
     */
    public readonly mtu!: pulumi.Output<number>;
    /**
     * TCP/IP stack setting for this interface. Possible values are 'defaultTcpipStack', 'vmotion', 'vSphereProvisioning'. Changing this will force the creation of a new interface since it's not possible to change the stack once it gets created. (Default: `defaultTcpipStack`)
     */
    public readonly netstack!: pulumi.Output<string | undefined>;
    /**
     * Portgroup to attach the nic to. Do not set if you set distributed_switch_port.
     */
    public readonly portgroup!: pulumi.Output<string | undefined>;

    /**
     * Create a Vnic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VnicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VnicArgs | VnicState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as VnicState | undefined;
            inputs["distributedPortGroup"] = state ? state.distributedPortGroup : undefined;
            inputs["distributedSwitchPort"] = state ? state.distributedSwitchPort : undefined;
            inputs["host"] = state ? state.host : undefined;
            inputs["ipv4"] = state ? state.ipv4 : undefined;
            inputs["ipv6"] = state ? state.ipv6 : undefined;
            inputs["mac"] = state ? state.mac : undefined;
            inputs["mtu"] = state ? state.mtu : undefined;
            inputs["netstack"] = state ? state.netstack : undefined;
            inputs["portgroup"] = state ? state.portgroup : undefined;
        } else {
            const args = argsOrState as VnicArgs | undefined;
            if (!args || args.host === undefined) {
                throw new Error("Missing required property 'host'");
            }
            inputs["distributedPortGroup"] = args ? args.distributedPortGroup : undefined;
            inputs["distributedSwitchPort"] = args ? args.distributedSwitchPort : undefined;
            inputs["host"] = args ? args.host : undefined;
            inputs["ipv4"] = args ? args.ipv4 : undefined;
            inputs["ipv6"] = args ? args.ipv6 : undefined;
            inputs["mac"] = args ? args.mac : undefined;
            inputs["mtu"] = args ? args.mtu : undefined;
            inputs["netstack"] = args ? args.netstack : undefined;
            inputs["portgroup"] = args ? args.portgroup : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Vnic.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vnic resources.
 */
export interface VnicState {
    /**
     * Key of the distributed portgroup the nic will connect to. 
     */
    readonly distributedPortGroup?: pulumi.Input<string>;
    /**
     * UUID of the DVSwitch the nic will be attached to. Do not set if you set portgroup.
     */
    readonly distributedSwitchPort?: pulumi.Input<string>;
    /**
     * ESX host the interface belongs to
     */
    readonly host?: pulumi.Input<string>;
    /**
     * IPv4 settings. Either this or `ipv6` needs to be set. See  ipv4 options below.
     */
    readonly ipv4?: pulumi.Input<inputs.VnicIpv4>;
    /**
     * IPv6 settings. Either this or `ipv6` needs to be set. See  ipv6 options below.
     */
    readonly ipv6?: pulumi.Input<inputs.VnicIpv6>;
    /**
     * MAC address of the interface.
     */
    readonly mac?: pulumi.Input<string>;
    /**
     * MTU of the interface.
     */
    readonly mtu?: pulumi.Input<number>;
    /**
     * TCP/IP stack setting for this interface. Possible values are 'defaultTcpipStack', 'vmotion', 'vSphereProvisioning'. Changing this will force the creation of a new interface since it's not possible to change the stack once it gets created. (Default: `defaultTcpipStack`)
     */
    readonly netstack?: pulumi.Input<string>;
    /**
     * Portgroup to attach the nic to. Do not set if you set distributed_switch_port.
     */
    readonly portgroup?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vnic resource.
 */
export interface VnicArgs {
    /**
     * Key of the distributed portgroup the nic will connect to. 
     */
    readonly distributedPortGroup?: pulumi.Input<string>;
    /**
     * UUID of the DVSwitch the nic will be attached to. Do not set if you set portgroup.
     */
    readonly distributedSwitchPort?: pulumi.Input<string>;
    /**
     * ESX host the interface belongs to
     */
    readonly host: pulumi.Input<string>;
    /**
     * IPv4 settings. Either this or `ipv6` needs to be set. See  ipv4 options below.
     */
    readonly ipv4?: pulumi.Input<inputs.VnicIpv4>;
    /**
     * IPv6 settings. Either this or `ipv6` needs to be set. See  ipv6 options below.
     */
    readonly ipv6?: pulumi.Input<inputs.VnicIpv6>;
    /**
     * MAC address of the interface.
     */
    readonly mac?: pulumi.Input<string>;
    /**
     * MTU of the interface.
     */
    readonly mtu?: pulumi.Input<number>;
    /**
     * TCP/IP stack setting for this interface. Possible values are 'defaultTcpipStack', 'vmotion', 'vSphereProvisioning'. Changing this will force the creation of a new interface since it's not possible to change the stack once it gets created. (Default: `defaultTcpipStack`)
     */
    readonly netstack?: pulumi.Input<string>;
    /**
     * Portgroup to attach the nic to. Do not set if you set distributed_switch_port.
     */
    readonly portgroup?: pulumi.Input<string>;
}
