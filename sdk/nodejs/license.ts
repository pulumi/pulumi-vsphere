// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a VMware vSphere license resource. This can be used to add and remove license keys.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const licenseKey = new vsphere.License("licenseKey", {
 *     licenseKey: "00000-00000-00000-00000-00000",
 *     labels: {
 *         VpxClientLicenseLabel: "example",
 *     },
 * });
 * ```
 */
export class License extends pulumi.CustomResource {
    /**
     * Get an existing License resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicenseState, opts?: pulumi.CustomResourceOptions): License {
        return new License(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/license:License';

    /**
     * Returns true if the given object is an instance of License.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is License {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === License.__pulumiType;
    }

    /**
     * The product edition of the license key.
     */
    public /*out*/ readonly editionKey!: pulumi.Output<string>;
    /**
     * A map of labels to be applied to the license key.
     *
     * > **NOTE:** Labels are not allowed for unmanaged ESX hosts.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The license key value.
     */
    public readonly licenseKey!: pulumi.Output<string>;
    /**
     * The display name for the license key.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The total number of units contained in the license key.
     */
    public /*out*/ readonly total!: pulumi.Output<number>;
    /**
     * The number of units assigned to this license key.
     */
    public /*out*/ readonly used!: pulumi.Output<number>;

    /**
     * Create a License resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicenseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicenseArgs | LicenseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicenseState | undefined;
            resourceInputs["editionKey"] = state ? state.editionKey : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["licenseKey"] = state ? state.licenseKey : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["total"] = state ? state.total : undefined;
            resourceInputs["used"] = state ? state.used : undefined;
        } else {
            const args = argsOrState as LicenseArgs | undefined;
            if ((!args || args.licenseKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseKey'");
            }
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["licenseKey"] = args ? args.licenseKey : undefined;
            resourceInputs["editionKey"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["total"] = undefined /*out*/;
            resourceInputs["used"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(License.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering License resources.
 */
export interface LicenseState {
    /**
     * The product edition of the license key.
     */
    editionKey?: pulumi.Input<string>;
    /**
     * A map of labels to be applied to the license key.
     *
     * > **NOTE:** Labels are not allowed for unmanaged ESX hosts.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The license key value.
     */
    licenseKey?: pulumi.Input<string>;
    /**
     * The display name for the license key.
     */
    name?: pulumi.Input<string>;
    /**
     * The total number of units contained in the license key.
     */
    total?: pulumi.Input<number>;
    /**
     * The number of units assigned to this license key.
     */
    used?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a License resource.
 */
export interface LicenseArgs {
    /**
     * A map of labels to be applied to the license key.
     *
     * > **NOTE:** Labels are not allowed for unmanaged ESX hosts.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The license key value.
     */
    licenseKey: pulumi.Input<string>;
}
