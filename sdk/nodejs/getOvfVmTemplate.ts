// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * The `vsphere.getOvfVmTemplate` data source can be used to submit an OVF to vSphere and extract its hardware
 * settings in a form that can be then used as inputs for a `vsphere.VirtualMachine` resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const ovf = vsphere.getOvfVmTemplate({
 *     name: "testOVF",
 *     resourcePoolId: vsphere_resource_pool.rp.id,
 *     datastoreId: data.vsphere_datastore.ds.id,
 *     hostSystemId: data.vsphere_host.hs.id,
 *     remoteOvfUrl: "https://download3.vmware.com/software/vmw-tools/nested-esxi/Nested_ESXi7.0_Appliance_Template_v1.ova",
 *     ovfNetworkMap: {
 *         "Network 1": data.vsphere_network.net.id,
 *     },
 * });
 * ```
 */
export function getOvfVmTemplate(args: GetOvfVmTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetOvfVmTemplateResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("vsphere:index/getOvfVmTemplate:getOvfVmTemplate", {
        "allowUnverifiedSslCert": args.allowUnverifiedSslCert,
        "datastoreId": args.datastoreId,
        "deploymentOption": args.deploymentOption,
        "diskProvisioning": args.diskProvisioning,
        "enableHiddenProperties": args.enableHiddenProperties,
        "folder": args.folder,
        "hostSystemId": args.hostSystemId,
        "ipAllocationPolicy": args.ipAllocationPolicy,
        "ipProtocol": args.ipProtocol,
        "localOvfPath": args.localOvfPath,
        "name": args.name,
        "ovfNetworkMap": args.ovfNetworkMap,
        "remoteOvfUrl": args.remoteOvfUrl,
        "resourcePoolId": args.resourcePoolId,
    }, opts);
}

/**
 * A collection of arguments for invoking getOvfVmTemplate.
 */
export interface GetOvfVmTemplateArgs {
    /**
     * Allow unverified ssl certificates while deploying ovf/ova from url.
     */
    readonly allowUnverifiedSslCert?: boolean;
    /**
     * The ID of the virtual machine's datastore. The virtual machine configuration is placed here, along with any virtual disks that are created without datastores.
     */
    readonly datastoreId?: string;
    /**
     * The key of the chosen deployment option. If empty, the default option is chosen.
     */
    readonly deploymentOption?: string;
    /**
     * The disk provisioning. If set, all the disks in the deployed OVF will have
     * the same specified disk type (accepted values {thin, flat, thick, sameAsSource}).
     */
    readonly diskProvisioning?: string;
    readonly enableHiddenProperties?: boolean;
    /**
     * The name of the folder to locate the virtual machine in.
     */
    readonly folder?: string;
    /**
     * The ID of an optional host system to pin the virtual machine to.
     */
    readonly hostSystemId: string;
    /**
     * The IP allocation policy.
     */
    readonly ipAllocationPolicy?: string;
    /**
     * The IP protocol.
     */
    readonly ipProtocol?: string;
    /**
     * The absolute path to the ovf/ova file in the local system. While deploying from ovf,
     * make sure the other necessary files like the .vmdk files are also in the same directory as the given ovf file.
     */
    readonly localOvfPath?: string;
    /**
     * Name of the virtual machine to create.
     */
    readonly name: string;
    /**
     * The mapping of name of network identifiers from the ovf descriptor to network UUID in the
     * VI infrastructure.
     */
    readonly ovfNetworkMap?: {[key: string]: string};
    /**
     * URL to the remote ovf/ova file to be deployed.
     */
    readonly remoteOvfUrl?: string;
    /**
     * The ID of a resource pool to put the virtual machine in.
     */
    readonly resourcePoolId: string;
}

/**
 * A collection of values returned by getOvfVmTemplate.
 */
export interface GetOvfVmTemplateResult {
    readonly allowUnverifiedSslCert?: boolean;
    /**
     * The guest name for the operating system .
     */
    readonly alternateGuestName: string;
    /**
     * User-provided description of the virtual machine.
     */
    readonly annotation: string;
    /**
     * Allow CPUs to be added to this virtual machine while it is running.
     */
    readonly cpuHotAddEnabled: boolean;
    /**
     * Allow CPUs to be added to this virtual machine while it is running.
     */
    readonly cpuHotRemoveEnabled: boolean;
    readonly cpuPerformanceCountersEnabled: boolean;
    readonly datastoreId?: string;
    readonly deploymentOption?: string;
    readonly diskProvisioning?: string;
    readonly enableHiddenProperties?: boolean;
    /**
     * The firmware interface to use on the virtual machine.
     */
    readonly firmware: string;
    readonly folder?: string;
    /**
     * The guest ID for the operating system
     */
    readonly guestId: string;
    readonly hostSystemId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ideControllerCount: number;
    readonly ipAllocationPolicy?: string;
    readonly ipProtocol?: string;
    readonly localOvfPath?: string;
    /**
     * The size of the virtual machine's memory, in MB.
     */
    readonly memory: number;
    /**
     * Allow memory to be added to this virtual machine while it is running.
     */
    readonly memoryHotAddEnabled: boolean;
    readonly name: string;
    /**
     * Enable nested hardware virtualization on this virtual machine, facilitating nested virtualization in the guest.
     */
    readonly nestedHvEnabled: boolean;
    /**
     * The number of cores to distribute amongst the CPUs in this virtual machine.
     */
    readonly numCoresPerSocket: number;
    /**
     * The number of virtual processors to assign to this virtual machine.
     */
    readonly numCpus: number;
    readonly ovfNetworkMap?: {[key: string]: string};
    readonly remoteOvfUrl?: string;
    readonly resourcePoolId: string;
    readonly sataControllerCount: number;
    readonly scsiControllerCount: number;
    readonly scsiType: string;
    /**
     * The swap file placement policy for this virtual machine.
     */
    readonly swapPlacementPolicy: string;
}
