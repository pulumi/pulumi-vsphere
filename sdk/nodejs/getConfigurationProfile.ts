// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `vsphere.ConfigurationProfile` data source can be used to export the configuration and schema
 * of a cluster that is already managed via configuration profiles.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const datacenter = vsphere.getDatacenter({
 *     name: "dc-01",
 * });
 * const computeCluster = datacenter.then(datacenter => vsphere.getComputeCluster({
 *     name: "cluster-01",
 *     datacenterId: datacenter.id,
 * }));
 * const profile = computeCluster.then(computeCluster => vsphere.getConfigurationProfile({
 *     clusterId: computeCluster.id,
 * }));
 * ```
 */
export function getConfigurationProfile(args: GetConfigurationProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetConfigurationProfileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vsphere:index/getConfigurationProfile:getConfigurationProfile", {
        "clusterId": args.clusterId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConfigurationProfile.
 */
export interface GetConfigurationProfileArgs {
    /**
     * The identifier of the compute cluster.
     */
    clusterId: string;
}

/**
 * A collection of values returned by getConfigurationProfile.
 */
export interface GetConfigurationProfileResult {
    readonly clusterId: string;
    /**
     * The current configuration which is active on the cluster.
     */
    readonly configuration: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The JSON schema for the profile.
     */
    readonly schema: string;
}
/**
 * The `vsphere.ConfigurationProfile` data source can be used to export the configuration and schema
 * of a cluster that is already managed via configuration profiles.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const datacenter = vsphere.getDatacenter({
 *     name: "dc-01",
 * });
 * const computeCluster = datacenter.then(datacenter => vsphere.getComputeCluster({
 *     name: "cluster-01",
 *     datacenterId: datacenter.id,
 * }));
 * const profile = computeCluster.then(computeCluster => vsphere.getConfigurationProfile({
 *     clusterId: computeCluster.id,
 * }));
 * ```
 */
export function getConfigurationProfileOutput(args: GetConfigurationProfileOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetConfigurationProfileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vsphere:index/getConfigurationProfile:getConfigurationProfile", {
        "clusterId": args.clusterId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConfigurationProfile.
 */
export interface GetConfigurationProfileOutputArgs {
    /**
     * The identifier of the compute cluster.
     */
    clusterId: pulumi.Input<string>;
}
