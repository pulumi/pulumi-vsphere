// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DatastoreClusterVmAntiAffinityRule extends pulumi.CustomResource {
    /**
     * Get an existing DatastoreClusterVmAntiAffinityRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatastoreClusterVmAntiAffinityRuleState, opts?: pulumi.CustomResourceOptions): DatastoreClusterVmAntiAffinityRule {
        return new DatastoreClusterVmAntiAffinityRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/datastoreClusterVmAntiAffinityRule:DatastoreClusterVmAntiAffinityRule';

    /**
     * Returns true if the given object is an instance of DatastoreClusterVmAntiAffinityRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatastoreClusterVmAntiAffinityRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatastoreClusterVmAntiAffinityRule.__pulumiType;
    }

    /**
     * The managed object reference
     * ID of the datastore cluster to put the group in.  Forces
     * a new resource if changed.
     */
    public readonly datastoreClusterId!: pulumi.Output<string>;
    /**
     * Enable this rule in the cluster. Default: `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * When this value is `true`, prevents any virtual
     * machine operations that may violate this rule. Default: `false`.
     */
    public readonly mandatory!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the rule. This must be unique in the cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The UUIDs of the virtual machines to run
     * on different datastores from each other.
     *
     * > **NOTE:** The minimum length of `virtualMachineIds` is 2.
     */
    public readonly virtualMachineIds!: pulumi.Output<string[]>;

    /**
     * Create a DatastoreClusterVmAntiAffinityRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatastoreClusterVmAntiAffinityRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatastoreClusterVmAntiAffinityRuleArgs | DatastoreClusterVmAntiAffinityRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatastoreClusterVmAntiAffinityRuleState | undefined;
            resourceInputs["datastoreClusterId"] = state ? state.datastoreClusterId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["mandatory"] = state ? state.mandatory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["virtualMachineIds"] = state ? state.virtualMachineIds : undefined;
        } else {
            const args = argsOrState as DatastoreClusterVmAntiAffinityRuleArgs | undefined;
            if ((!args || args.datastoreClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datastoreClusterId'");
            }
            if ((!args || args.virtualMachineIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineIds'");
            }
            resourceInputs["datastoreClusterId"] = args ? args.datastoreClusterId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["mandatory"] = args ? args.mandatory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["virtualMachineIds"] = args ? args.virtualMachineIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatastoreClusterVmAntiAffinityRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatastoreClusterVmAntiAffinityRule resources.
 */
export interface DatastoreClusterVmAntiAffinityRuleState {
    /**
     * The managed object reference
     * ID of the datastore cluster to put the group in.  Forces
     * a new resource if changed.
     */
    datastoreClusterId?: pulumi.Input<string>;
    /**
     * Enable this rule in the cluster. Default: `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * When this value is `true`, prevents any virtual
     * machine operations that may violate this rule. Default: `false`.
     */
    mandatory?: pulumi.Input<boolean>;
    /**
     * The name of the rule. This must be unique in the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The UUIDs of the virtual machines to run
     * on different datastores from each other.
     *
     * > **NOTE:** The minimum length of `virtualMachineIds` is 2.
     */
    virtualMachineIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DatastoreClusterVmAntiAffinityRule resource.
 */
export interface DatastoreClusterVmAntiAffinityRuleArgs {
    /**
     * The managed object reference
     * ID of the datastore cluster to put the group in.  Forces
     * a new resource if changed.
     */
    datastoreClusterId: pulumi.Input<string>;
    /**
     * Enable this rule in the cluster. Default: `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * When this value is `true`, prevents any virtual
     * machine operations that may violate this rule. Default: `false`.
     */
    mandatory?: pulumi.Input<boolean>;
    /**
     * The name of the rule. This must be unique in the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The UUIDs of the virtual machines to run
     * on different datastores from each other.
     *
     * > **NOTE:** The minimum length of `virtualMachineIds` is 2.
     */
    virtualMachineIds: pulumi.Input<pulumi.Input<string>[]>;
}
