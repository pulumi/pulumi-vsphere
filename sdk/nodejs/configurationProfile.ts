// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ConfigurationProfile extends pulumi.CustomResource {
    /**
     * Get an existing ConfigurationProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigurationProfileState, opts?: pulumi.CustomResourceOptions): ConfigurationProfile {
        return new ConfigurationProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/configurationProfile:ConfigurationProfile';

    /**
     * Returns true if the given object is an instance of ConfigurationProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigurationProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationProfile.__pulumiType;
    }

    /**
     * The identifier of the cluster.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The configuration JSON provided as a plain string. This argument can only be specified if `referenceHostId` is not set.
     */
    public readonly configuration!: pulumi.Output<string>;
    /**
     * The identifier of the host to use as a configuration source.
     * The host needs to be a member of the cluster identified by `clusterId`. This argument can only be specified if
     * `configuration` is not set.
     */
    public readonly referenceHostId!: pulumi.Output<string | undefined>;
    /**
     * The JSON schema for the profile.
     */
    public /*out*/ readonly schema!: pulumi.Output<string>;

    /**
     * Create a ConfigurationProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigurationProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigurationProfileArgs | ConfigurationProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigurationProfileState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["referenceHostId"] = state ? state.referenceHostId : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
        } else {
            const args = argsOrState as ConfigurationProfileArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["referenceHostId"] = args ? args.referenceHostId : undefined;
            resourceInputs["schema"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigurationProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConfigurationProfile resources.
 */
export interface ConfigurationProfileState {
    /**
     * The identifier of the cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The configuration JSON provided as a plain string. This argument can only be specified if `referenceHostId` is not set.
     */
    configuration?: pulumi.Input<string>;
    /**
     * The identifier of the host to use as a configuration source.
     * The host needs to be a member of the cluster identified by `clusterId`. This argument can only be specified if
     * `configuration` is not set.
     */
    referenceHostId?: pulumi.Input<string>;
    /**
     * The JSON schema for the profile.
     */
    schema?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConfigurationProfile resource.
 */
export interface ConfigurationProfileArgs {
    /**
     * The identifier of the cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The configuration JSON provided as a plain string. This argument can only be specified if `referenceHostId` is not set.
     */
    configuration?: pulumi.Input<string>;
    /**
     * The identifier of the host to use as a configuration source.
     * The host needs to be a member of the cluster identified by `clusterId`. This argument can only be specified if
     * `configuration` is not set.
     */
    referenceHostId?: pulumi.Input<string>;
}
