// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `vsphere.getHostVgpuProfile` data source can be used to discover the
 * available vGPU profiles of a vSphere host.
 *
 * ## Example Usage
 *
 * ### To Return All VGPU Profiles
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const datacenter = vsphere.getDatacenter({
 *     name: "dc-01",
 * });
 * const host = datacenter.then(datacenter => vsphere.getHost({
 *     name: "esxi-01.example.com",
 *     datacenterId: datacenter.id,
 * }));
 * const vgpuProfile = host.then(host => vsphere.getHostVgpuProfile({
 *     hostId: host.id,
 * }));
 * ```
 *
 * ### With VGPU Profile Name_regex
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const datacenter = vsphere.getDatacenter({
 *     name: "dc-01",
 * });
 * const host = datacenter.then(datacenter => vsphere.getHost({
 *     name: "esxi-01.example.com",
 *     datacenterId: datacenter.id,
 * }));
 * const vgpuProfile = host.then(host => vsphere.getHostVgpuProfile({
 *     hostId: host.id,
 *     nameRegex: "a100",
 * }));
 * ```
 */
export function getHostVgpuProfile(args: GetHostVgpuProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetHostVgpuProfileResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vsphere:index/getHostVgpuProfile:getHostVgpuProfile", {
        "hostId": args.hostId,
        "nameRegex": args.nameRegex,
    }, opts);
}

/**
 * A collection of arguments for invoking getHostVgpuProfile.
 */
export interface GetHostVgpuProfileArgs {
    /**
     * The [managed object reference ID][docs-about-morefs] of a host.
     */
    hostId: string;
    /**
     * A regular expression that will be used to match the
     * host vGPU profile name.
     *
     * [docs-about-morefs]: /docs/providers/vsphere/index.html#use-of-managed-object-references-by-the-vsphere-provider
     */
    nameRegex?: string;
}

/**
 * A collection of values returned by getHostVgpuProfile.
 */
export interface GetHostVgpuProfileResult {
    /**
     * The [managed objectID][docs-about-morefs] of the ESXi host.
     */
    readonly hostId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * (Optional) A regular expression that will be used to match the
     * host vGPU profile name.
     */
    readonly nameRegex?: string;
    /**
     * The list of available vGPU profiles on the ESXi host.
     * This may be and empty array if no vGPU profile are identified.
     */
    readonly vgpuProfiles: outputs.GetHostVgpuProfileVgpuProfile[];
}
/**
 * The `vsphere.getHostVgpuProfile` data source can be used to discover the
 * available vGPU profiles of a vSphere host.
 *
 * ## Example Usage
 *
 * ### To Return All VGPU Profiles
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const datacenter = vsphere.getDatacenter({
 *     name: "dc-01",
 * });
 * const host = datacenter.then(datacenter => vsphere.getHost({
 *     name: "esxi-01.example.com",
 *     datacenterId: datacenter.id,
 * }));
 * const vgpuProfile = host.then(host => vsphere.getHostVgpuProfile({
 *     hostId: host.id,
 * }));
 * ```
 *
 * ### With VGPU Profile Name_regex
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const datacenter = vsphere.getDatacenter({
 *     name: "dc-01",
 * });
 * const host = datacenter.then(datacenter => vsphere.getHost({
 *     name: "esxi-01.example.com",
 *     datacenterId: datacenter.id,
 * }));
 * const vgpuProfile = host.then(host => vsphere.getHostVgpuProfile({
 *     hostId: host.id,
 *     nameRegex: "a100",
 * }));
 * ```
 */
export function getHostVgpuProfileOutput(args: GetHostVgpuProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHostVgpuProfileResult> {
    return pulumi.output(args).apply((a: any) => getHostVgpuProfile(a, opts))
}

/**
 * A collection of arguments for invoking getHostVgpuProfile.
 */
export interface GetHostVgpuProfileOutputArgs {
    /**
     * The [managed object reference ID][docs-about-morefs] of a host.
     */
    hostId: pulumi.Input<string>;
    /**
     * A regular expression that will be used to match the
     * host vGPU profile name.
     *
     * [docs-about-morefs]: /docs/providers/vsphere/index.html#use-of-managed-object-references-by-the-vsphere-provider
     */
    nameRegex?: pulumi.Input<string>;
}
