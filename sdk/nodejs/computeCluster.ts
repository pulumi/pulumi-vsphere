// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class ComputeCluster extends pulumi.CustomResource {
    /**
     * Get an existing ComputeCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeClusterState, opts?: pulumi.CustomResourceOptions): ComputeCluster {
        return new ComputeCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/computeCluster:ComputeCluster';

    /**
     * Returns true if the given object is an instance of ComputeCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeCluster.__pulumiType;
    }

    /**
     * A map of custom attribute ids to attribute
     * value strings to set for the datastore cluster.
     */
    public readonly customAttributes!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The managed object ID of
     * the datacenter to create the cluster in. Forces a new resource if changed.
     */
    public readonly datacenterId!: pulumi.Output<string>;
    /**
     * The automation level for host power
     * operations in this cluster. Can be one of `manual` or `automated`. Default:
     * `manual`.
     */
    public readonly dpmAutomationLevel!: pulumi.Output<string | undefined>;
    /**
     * Enable DPM support for DRS in this cluster.
     * Requires `drsEnabled` to be `true` in order to be effective.
     * Default: `false`.
     */
    public readonly dpmEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A value between `1` and `5` indicating the
     * threshold of load within the cluster that influences host power operations.
     * This affects both power on and power off operations - a lower setting will
     * tolerate more of a surplus/deficit than a higher setting. Default: `3`.
     */
    public readonly dpmThreshold!: pulumi.Output<number | undefined>;
    /**
     * A key/value map that specifies advanced
     * options for DRS and DPM.
     */
    public readonly drsAdvancedOptions!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The default automation level for all
     * virtual machines in this cluster. Can be one of `manual`,
     * `partiallyAutomated`, or `fullyAutomated`. Default: `manual`.
     */
    public readonly drsAutomationLevel!: pulumi.Output<string | undefined>;
    /**
     * When `true`, enables DRS to use data
     * from [vRealize Operations Manager][ref-vsphere-vro] to make proactive DRS
     * recommendations. <sup>\*</sup>
     */
    public readonly drsEnablePredictiveDrs!: pulumi.Output<boolean | undefined>;
    /**
     * Allow individual DRS overrides to be
     * set for virtual machines in the cluster. Default: `true`.
     */
    public readonly drsEnableVmOverrides!: pulumi.Output<boolean | undefined>;
    /**
     * Enable DRS for this cluster. Default: `false`.
     */
    public readonly drsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A value between `1` and `5` indicating
     * the threshold of imbalance tolerated between hosts. A lower setting will
     * tolerate more imbalance while a higher setting will tolerate less. Default:
     * `3`.
     */
    public readonly drsMigrationThreshold!: pulumi.Output<number | undefined>;
    /**
     * The relative path to a folder to put this cluster in.
     * This is a path relative to the datacenter you are deploying the cluster to.
     * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
     * The provider will place a cluster named `compute-cluster-test` in a
     * host folder located at `/dc1/host/foo/bar`, with the final inventory path
     * being `/dc1/host/foo/bar/datastore-cluster-test`.
     */
    public readonly folder!: pulumi.Output<string | undefined>;
    /**
     * When destroying the resource, setting this to
     * `true` will auto-remove any hosts that are currently a member of the cluster,
     * as if they were removed by taking their entry out of `hostSystemIds` (see
     * below. This is an advanced
     * option and should only be used for testing. Default: `false`.
     */
    public readonly forceEvacuateOnDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * Defines the
     * managed object IDs of hosts to use as dedicated failover
     * hosts. These hosts are kept as available as possible - admission control will
     * block access to the host, and DRS will ignore the host when making
     * recommendations.
     */
    public readonly haAdmissionControlFailoverHostSystemIds!: pulumi.Output<string[] | undefined>;
    /**
     * The maximum number
     * of failed hosts that admission control tolerates when making decisions on
     * whether to permit virtual machine operations. The maximum is one less than
     * the number of hosts in the cluster. Default: `1`.
     * <sup>\*</sup>
     */
    public readonly haAdmissionControlHostFailureTolerance!: pulumi.Output<number | undefined>;
    /**
     * The percentage of
     * resource reduction that a cluster of virtual machines can tolerate in case of
     * a failover. A value of 0 produces warnings only, whereas a value of 100
     * disables the setting. Default: `100` (disabled).
     */
    public readonly haAdmissionControlPerformanceTolerance!: pulumi.Output<number | undefined>;
    /**
     * The type of admission control
     * policy to use with vSphere HA. Can be one of `resourcePercentage`,
     * `slotPolicy`, `failoverHosts`, or `disabled`. Default: `resourcePercentage`.
     */
    public readonly haAdmissionControlPolicy!: pulumi.Output<string | undefined>;
    /**
     * Automatically determine available resource percentages by subtracting the
     * average number of host resources represented by the
     * `haAdmissionControlHostFailureTolerance`
     * setting from the total amount of resources in the cluster. Disable to supply
     * user-defined values. Default: `true`.
     * <sup>\*</sup>
     */
    public readonly haAdmissionControlResourcePercentageAutoCompute!: pulumi.Output<boolean | undefined>;
    /**
     * Controls the
     * user-defined percentage of CPU resources in the cluster to reserve for
     * failover. Default: `100`.
     */
    public readonly haAdmissionControlResourcePercentageCpu!: pulumi.Output<number | undefined>;
    /**
     * Controls the
     * user-defined percentage of memory resources in the cluster to reserve for
     * failover. Default: `100`.
     */
    public readonly haAdmissionControlResourcePercentageMemory!: pulumi.Output<number | undefined>;
    /**
     * Controls the
     * user-defined CPU slot size, in MHz. Default: `32`.
     */
    public readonly haAdmissionControlSlotPolicyExplicitCpu!: pulumi.Output<number | undefined>;
    /**
     * Controls the
     * user-defined memory slot size, in MB. Default: `100`.
     */
    public readonly haAdmissionControlSlotPolicyExplicitMemory!: pulumi.Output<number | undefined>;
    /**
     * Controls
     * whether or not you wish to supply explicit values to CPU and memory slot
     * sizes. The default is `false`, which tells vSphere to gather a automatic
     * average based on all powered-on virtual machines currently in the cluster.
     */
    public readonly haAdmissionControlSlotPolicyUseExplicitSize!: pulumi.Output<boolean | undefined>;
    /**
     * A key/value map that specifies advanced
     * options for vSphere HA.
     */
    public readonly haAdvancedOptions!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Controls the action to take
     * on virtual machines if an APD status on an affected datastore clears in the
     * middle of an APD event. Can be one of `none` or `reset`. Default: `none`.
     * <sup>\*</sup>
     */
    public readonly haDatastoreApdRecoveryAction!: pulumi.Output<string | undefined>;
    /**
     * Controls the action to take on
     * virtual machines when the cluster has detected loss to all paths to a
     * relevant datastore. Can be one of `disabled`, `warning`,
     * `restartConservative`, or `restartAggressive`.  Default: `disabled`.
     * <sup>\*</sup>
     */
    public readonly haDatastoreApdResponse!: pulumi.Output<string | undefined>;
    /**
     * The time, in seconds,
     * to wait after an APD timeout event to run the response action defined in
     * `haDatastoreApdResponse`. Default: `180`
     * seconds (3 minutes). <sup>\*</sup>
     */
    public readonly haDatastoreApdResponseDelay!: pulumi.Output<number | undefined>;
    /**
     * Controls the action to take on
     * virtual machines when the cluster has detected a permanent device loss to a
     * relevant datastore. Can be one of `disabled`, `warning`, or
     * `restartAggressive`. Default: `disabled`.
     * <sup>\*</sup>
     */
    public readonly haDatastorePdlResponse!: pulumi.Output<string | undefined>;
    /**
     * Enable vSphere HA for this cluster. Default:
     * `false`.
     */
    public readonly haEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The list of managed object IDs for
     * preferred datastores to use for HA heartbeating. This setting is only useful
     * when `haHeartbeatDatastorePolicy` is set
     * to either `userSelectedDs` or `allFeasibleDsWithUserPreference`.
     */
    public readonly haHeartbeatDatastoreIds!: pulumi.Output<string[] | undefined>;
    /**
     * The selection policy for HA
     * heartbeat datastores. Can be one of `allFeasibleDs`, `userSelectedDs`, or
     * `allFeasibleDsWithUserPreference`. Default:
     * `allFeasibleDsWithUserPreference`.
     */
    public readonly haHeartbeatDatastorePolicy!: pulumi.Output<string | undefined>;
    /**
     * The action to take on virtual
     * machines when a host has detected that it has been isolated from the rest of
     * the cluster. Can be one of `none`, `powerOff`, or `shutdown`. Default:
     * `none`.
     */
    public readonly haHostIsolationResponse!: pulumi.Output<string | undefined>;
    /**
     * Global setting that controls whether
     * vSphere HA remediates virtual machines on host failure. Can be one of `enabled`
     * or `disabled`. Default: `enabled`.
     */
    public readonly haHostMonitoring!: pulumi.Output<string | undefined>;
    /**
     * Controls vSphere VM component
     * protection for virtual machines in this cluster. Can be one of `enabled` or
     * `disabled`. Default: `enabled`.
     * <sup>\*</sup>
     */
    public readonly haVmComponentProtection!: pulumi.Output<string | undefined>;
    /**
     * The condition used to
     * determine whether or not virtual machines in a certain restart priority class
     * are online, allowing HA to move on to restarting virtual machines on the next
     * priority. Can be one of `none`, `poweredOn`, `guestHbStatusGreen`, or
     * `appHbStatusGreen`. The default is `none`, which means that a virtual machine
     * is considered ready immediately after a host is found to start it on.
     * <sup>\*</sup>
     */
    public readonly haVmDependencyRestartCondition!: pulumi.Output<string | undefined>;
    /**
     * The time interval, in seconds, a heartbeat
     * from a virtual machine is not received within this configured interval,
     * the virtual machine is marked as failed. Default: `30` seconds.
     */
    public readonly haVmFailureInterval!: pulumi.Output<number | undefined>;
    /**
     * The time, in seconds, for the reset window in
     * which `haVmMaximumResets` can operate. When this
     * window expires, no more resets are attempted regardless of the setting
     * configured in `haVmMaximumResets`. `-1` means no window, meaning an
     * unlimited reset time is allotted. Default: `-1` (no window).
     */
    public readonly haVmMaximumFailureWindow!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of resets that HA will
     * perform to a virtual machine when responding to a failure event. Default: `3`
     */
    public readonly haVmMaximumResets!: pulumi.Output<number | undefined>;
    /**
     * The time, in seconds, that HA waits after
     * powering on a virtual machine before monitoring for heartbeats. Default:
     * `120` seconds (2 minutes).
     */
    public readonly haVmMinimumUptime!: pulumi.Output<number | undefined>;
    /**
     * The type of virtual machine monitoring to use
     * when HA is enabled in the cluster. Can be one of `vmMonitoringDisabled`,
     * `vmMonitoringOnly`, or `vmAndAppMonitoring`. Default: `vmMonitoringDisabled`.
     */
    public readonly haVmMonitoring!: pulumi.Output<string | undefined>;
    /**
     * Additional delay, in seconds,
     * after ready condition is met. A VM is considered ready at this point.
     * Default: `0` seconds (no delay). <sup>\*</sup>
     */
    public readonly haVmRestartAdditionalDelay!: pulumi.Output<number | undefined>;
    /**
     * The default restart priority
     * for affected virtual machines when vSphere detects a host failure. Can be one
     * of `lowest`, `low`, `medium`, `high`, or `highest`. Default: `medium`.
     */
    public readonly haVmRestartPriority!: pulumi.Output<string | undefined>;
    /**
     * The maximum time, in seconds,
     * that vSphere HA will wait for virtual machines in one priority to be ready
     * before proceeding with the next priority. Default: `600` seconds (10 minutes).
     * <sup>\*</sup>
     */
    public readonly haVmRestartTimeout!: pulumi.Output<number | undefined>;
    /**
     * The timeout, in seconds, for each host maintenance
     * mode operation when removing hosts from a cluster. Default: `3600` seconds (1 hour).
     */
    public readonly hostClusterExitTimeout!: pulumi.Output<number | undefined>;
    /**
     * Can be set to `true` if compute cluster
     * membership will be managed through the `host` resource rather than the
     * `computeCluster` resource. Conflicts with: `hostSystemIds`.
     */
    public readonly hostManaged!: pulumi.Output<boolean | undefined>;
    /**
     * The managed object IDs of
     * the hosts to put in the cluster. Conflicts with: `hostManaged`.
     */
    public readonly hostSystemIds!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Determines how the host
     * quarantine, maintenance mode, or virtual machine migration recommendations
     * made by proactive HA are to be handled. Can be one of `Automated` or
     * `Manual`. Default: `Manual`. <sup>\*</sup>
     */
    public readonly proactiveHaAutomationLevel!: pulumi.Output<string | undefined>;
    /**
     * Enables Proactive HA. Default: `false`.
     * <sup>\*</sup>
     */
    public readonly proactiveHaEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The configured remediation
     * for moderately degraded hosts. Can be one of `MaintenanceMode` or
     * `QuarantineMode`. Note that this cannot be set to `MaintenanceMode` when
     * `proactiveHaSevereRemediation` is set
     * to `QuarantineMode`. Default: `QuarantineMode`.
     * <sup>\*</sup>
     */
    public readonly proactiveHaModerateRemediation!: pulumi.Output<string | undefined>;
    /**
     * The list of IDs for health update
     * providers configured for this cluster.
     * <sup>\*</sup>
     */
    public readonly proactiveHaProviderIds!: pulumi.Output<string[] | undefined>;
    /**
     * The configured remediation for
     * severely degraded hosts. Can be one of `MaintenanceMode` or `QuarantineMode`.
     * Note that this cannot be set to `QuarantineMode` when
     * `proactiveHaModerateRemediation` is
     * set to `MaintenanceMode`. Default: `QuarantineMode`.
     * <sup>\*</sup>
     */
    public readonly proactiveHaSevereRemediation!: pulumi.Output<string | undefined>;
    /**
     * The managed object ID of the cluster's root resource pool.
     */
    public /*out*/ readonly resourcePoolId!: pulumi.Output<string>;
    /**
     * The IDs of any tags to attach to this resource.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * A list of disk UUIDs to add to the vSAN cluster.
     */
    public readonly vsanDiskGroups!: pulumi.Output<outputs.ComputeClusterVsanDiskGroup[]>;
    /**
     * Whether the VSAN service is enabled for the cluster.
     */
    public readonly vsanEnabled!: pulumi.Output<boolean>;

    /**
     * Create a ComputeCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeClusterArgs | ComputeClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeClusterState | undefined;
            resourceInputs["customAttributes"] = state ? state.customAttributes : undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["dpmAutomationLevel"] = state ? state.dpmAutomationLevel : undefined;
            resourceInputs["dpmEnabled"] = state ? state.dpmEnabled : undefined;
            resourceInputs["dpmThreshold"] = state ? state.dpmThreshold : undefined;
            resourceInputs["drsAdvancedOptions"] = state ? state.drsAdvancedOptions : undefined;
            resourceInputs["drsAutomationLevel"] = state ? state.drsAutomationLevel : undefined;
            resourceInputs["drsEnablePredictiveDrs"] = state ? state.drsEnablePredictiveDrs : undefined;
            resourceInputs["drsEnableVmOverrides"] = state ? state.drsEnableVmOverrides : undefined;
            resourceInputs["drsEnabled"] = state ? state.drsEnabled : undefined;
            resourceInputs["drsMigrationThreshold"] = state ? state.drsMigrationThreshold : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["forceEvacuateOnDestroy"] = state ? state.forceEvacuateOnDestroy : undefined;
            resourceInputs["haAdmissionControlFailoverHostSystemIds"] = state ? state.haAdmissionControlFailoverHostSystemIds : undefined;
            resourceInputs["haAdmissionControlHostFailureTolerance"] = state ? state.haAdmissionControlHostFailureTolerance : undefined;
            resourceInputs["haAdmissionControlPerformanceTolerance"] = state ? state.haAdmissionControlPerformanceTolerance : undefined;
            resourceInputs["haAdmissionControlPolicy"] = state ? state.haAdmissionControlPolicy : undefined;
            resourceInputs["haAdmissionControlResourcePercentageAutoCompute"] = state ? state.haAdmissionControlResourcePercentageAutoCompute : undefined;
            resourceInputs["haAdmissionControlResourcePercentageCpu"] = state ? state.haAdmissionControlResourcePercentageCpu : undefined;
            resourceInputs["haAdmissionControlResourcePercentageMemory"] = state ? state.haAdmissionControlResourcePercentageMemory : undefined;
            resourceInputs["haAdmissionControlSlotPolicyExplicitCpu"] = state ? state.haAdmissionControlSlotPolicyExplicitCpu : undefined;
            resourceInputs["haAdmissionControlSlotPolicyExplicitMemory"] = state ? state.haAdmissionControlSlotPolicyExplicitMemory : undefined;
            resourceInputs["haAdmissionControlSlotPolicyUseExplicitSize"] = state ? state.haAdmissionControlSlotPolicyUseExplicitSize : undefined;
            resourceInputs["haAdvancedOptions"] = state ? state.haAdvancedOptions : undefined;
            resourceInputs["haDatastoreApdRecoveryAction"] = state ? state.haDatastoreApdRecoveryAction : undefined;
            resourceInputs["haDatastoreApdResponse"] = state ? state.haDatastoreApdResponse : undefined;
            resourceInputs["haDatastoreApdResponseDelay"] = state ? state.haDatastoreApdResponseDelay : undefined;
            resourceInputs["haDatastorePdlResponse"] = state ? state.haDatastorePdlResponse : undefined;
            resourceInputs["haEnabled"] = state ? state.haEnabled : undefined;
            resourceInputs["haHeartbeatDatastoreIds"] = state ? state.haHeartbeatDatastoreIds : undefined;
            resourceInputs["haHeartbeatDatastorePolicy"] = state ? state.haHeartbeatDatastorePolicy : undefined;
            resourceInputs["haHostIsolationResponse"] = state ? state.haHostIsolationResponse : undefined;
            resourceInputs["haHostMonitoring"] = state ? state.haHostMonitoring : undefined;
            resourceInputs["haVmComponentProtection"] = state ? state.haVmComponentProtection : undefined;
            resourceInputs["haVmDependencyRestartCondition"] = state ? state.haVmDependencyRestartCondition : undefined;
            resourceInputs["haVmFailureInterval"] = state ? state.haVmFailureInterval : undefined;
            resourceInputs["haVmMaximumFailureWindow"] = state ? state.haVmMaximumFailureWindow : undefined;
            resourceInputs["haVmMaximumResets"] = state ? state.haVmMaximumResets : undefined;
            resourceInputs["haVmMinimumUptime"] = state ? state.haVmMinimumUptime : undefined;
            resourceInputs["haVmMonitoring"] = state ? state.haVmMonitoring : undefined;
            resourceInputs["haVmRestartAdditionalDelay"] = state ? state.haVmRestartAdditionalDelay : undefined;
            resourceInputs["haVmRestartPriority"] = state ? state.haVmRestartPriority : undefined;
            resourceInputs["haVmRestartTimeout"] = state ? state.haVmRestartTimeout : undefined;
            resourceInputs["hostClusterExitTimeout"] = state ? state.hostClusterExitTimeout : undefined;
            resourceInputs["hostManaged"] = state ? state.hostManaged : undefined;
            resourceInputs["hostSystemIds"] = state ? state.hostSystemIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["proactiveHaAutomationLevel"] = state ? state.proactiveHaAutomationLevel : undefined;
            resourceInputs["proactiveHaEnabled"] = state ? state.proactiveHaEnabled : undefined;
            resourceInputs["proactiveHaModerateRemediation"] = state ? state.proactiveHaModerateRemediation : undefined;
            resourceInputs["proactiveHaProviderIds"] = state ? state.proactiveHaProviderIds : undefined;
            resourceInputs["proactiveHaSevereRemediation"] = state ? state.proactiveHaSevereRemediation : undefined;
            resourceInputs["resourcePoolId"] = state ? state.resourcePoolId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vsanDiskGroups"] = state ? state.vsanDiskGroups : undefined;
            resourceInputs["vsanEnabled"] = state ? state.vsanEnabled : undefined;
        } else {
            const args = argsOrState as ComputeClusterArgs | undefined;
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            resourceInputs["customAttributes"] = args ? args.customAttributes : undefined;
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["dpmAutomationLevel"] = args ? args.dpmAutomationLevel : undefined;
            resourceInputs["dpmEnabled"] = args ? args.dpmEnabled : undefined;
            resourceInputs["dpmThreshold"] = args ? args.dpmThreshold : undefined;
            resourceInputs["drsAdvancedOptions"] = args ? args.drsAdvancedOptions : undefined;
            resourceInputs["drsAutomationLevel"] = args ? args.drsAutomationLevel : undefined;
            resourceInputs["drsEnablePredictiveDrs"] = args ? args.drsEnablePredictiveDrs : undefined;
            resourceInputs["drsEnableVmOverrides"] = args ? args.drsEnableVmOverrides : undefined;
            resourceInputs["drsEnabled"] = args ? args.drsEnabled : undefined;
            resourceInputs["drsMigrationThreshold"] = args ? args.drsMigrationThreshold : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["forceEvacuateOnDestroy"] = args ? args.forceEvacuateOnDestroy : undefined;
            resourceInputs["haAdmissionControlFailoverHostSystemIds"] = args ? args.haAdmissionControlFailoverHostSystemIds : undefined;
            resourceInputs["haAdmissionControlHostFailureTolerance"] = args ? args.haAdmissionControlHostFailureTolerance : undefined;
            resourceInputs["haAdmissionControlPerformanceTolerance"] = args ? args.haAdmissionControlPerformanceTolerance : undefined;
            resourceInputs["haAdmissionControlPolicy"] = args ? args.haAdmissionControlPolicy : undefined;
            resourceInputs["haAdmissionControlResourcePercentageAutoCompute"] = args ? args.haAdmissionControlResourcePercentageAutoCompute : undefined;
            resourceInputs["haAdmissionControlResourcePercentageCpu"] = args ? args.haAdmissionControlResourcePercentageCpu : undefined;
            resourceInputs["haAdmissionControlResourcePercentageMemory"] = args ? args.haAdmissionControlResourcePercentageMemory : undefined;
            resourceInputs["haAdmissionControlSlotPolicyExplicitCpu"] = args ? args.haAdmissionControlSlotPolicyExplicitCpu : undefined;
            resourceInputs["haAdmissionControlSlotPolicyExplicitMemory"] = args ? args.haAdmissionControlSlotPolicyExplicitMemory : undefined;
            resourceInputs["haAdmissionControlSlotPolicyUseExplicitSize"] = args ? args.haAdmissionControlSlotPolicyUseExplicitSize : undefined;
            resourceInputs["haAdvancedOptions"] = args ? args.haAdvancedOptions : undefined;
            resourceInputs["haDatastoreApdRecoveryAction"] = args ? args.haDatastoreApdRecoveryAction : undefined;
            resourceInputs["haDatastoreApdResponse"] = args ? args.haDatastoreApdResponse : undefined;
            resourceInputs["haDatastoreApdResponseDelay"] = args ? args.haDatastoreApdResponseDelay : undefined;
            resourceInputs["haDatastorePdlResponse"] = args ? args.haDatastorePdlResponse : undefined;
            resourceInputs["haEnabled"] = args ? args.haEnabled : undefined;
            resourceInputs["haHeartbeatDatastoreIds"] = args ? args.haHeartbeatDatastoreIds : undefined;
            resourceInputs["haHeartbeatDatastorePolicy"] = args ? args.haHeartbeatDatastorePolicy : undefined;
            resourceInputs["haHostIsolationResponse"] = args ? args.haHostIsolationResponse : undefined;
            resourceInputs["haHostMonitoring"] = args ? args.haHostMonitoring : undefined;
            resourceInputs["haVmComponentProtection"] = args ? args.haVmComponentProtection : undefined;
            resourceInputs["haVmDependencyRestartCondition"] = args ? args.haVmDependencyRestartCondition : undefined;
            resourceInputs["haVmFailureInterval"] = args ? args.haVmFailureInterval : undefined;
            resourceInputs["haVmMaximumFailureWindow"] = args ? args.haVmMaximumFailureWindow : undefined;
            resourceInputs["haVmMaximumResets"] = args ? args.haVmMaximumResets : undefined;
            resourceInputs["haVmMinimumUptime"] = args ? args.haVmMinimumUptime : undefined;
            resourceInputs["haVmMonitoring"] = args ? args.haVmMonitoring : undefined;
            resourceInputs["haVmRestartAdditionalDelay"] = args ? args.haVmRestartAdditionalDelay : undefined;
            resourceInputs["haVmRestartPriority"] = args ? args.haVmRestartPriority : undefined;
            resourceInputs["haVmRestartTimeout"] = args ? args.haVmRestartTimeout : undefined;
            resourceInputs["hostClusterExitTimeout"] = args ? args.hostClusterExitTimeout : undefined;
            resourceInputs["hostManaged"] = args ? args.hostManaged : undefined;
            resourceInputs["hostSystemIds"] = args ? args.hostSystemIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["proactiveHaAutomationLevel"] = args ? args.proactiveHaAutomationLevel : undefined;
            resourceInputs["proactiveHaEnabled"] = args ? args.proactiveHaEnabled : undefined;
            resourceInputs["proactiveHaModerateRemediation"] = args ? args.proactiveHaModerateRemediation : undefined;
            resourceInputs["proactiveHaProviderIds"] = args ? args.proactiveHaProviderIds : undefined;
            resourceInputs["proactiveHaSevereRemediation"] = args ? args.proactiveHaSevereRemediation : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vsanDiskGroups"] = args ? args.vsanDiskGroups : undefined;
            resourceInputs["vsanEnabled"] = args ? args.vsanEnabled : undefined;
            resourceInputs["resourcePoolId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ComputeCluster resources.
 */
export interface ComputeClusterState {
    /**
     * A map of custom attribute ids to attribute
     * value strings to set for the datastore cluster.
     */
    customAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The managed object ID of
     * the datacenter to create the cluster in. Forces a new resource if changed.
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * The automation level for host power
     * operations in this cluster. Can be one of `manual` or `automated`. Default:
     * `manual`.
     */
    dpmAutomationLevel?: pulumi.Input<string>;
    /**
     * Enable DPM support for DRS in this cluster.
     * Requires `drsEnabled` to be `true` in order to be effective.
     * Default: `false`.
     */
    dpmEnabled?: pulumi.Input<boolean>;
    /**
     * A value between `1` and `5` indicating the
     * threshold of load within the cluster that influences host power operations.
     * This affects both power on and power off operations - a lower setting will
     * tolerate more of a surplus/deficit than a higher setting. Default: `3`.
     */
    dpmThreshold?: pulumi.Input<number>;
    /**
     * A key/value map that specifies advanced
     * options for DRS and DPM.
     */
    drsAdvancedOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The default automation level for all
     * virtual machines in this cluster. Can be one of `manual`,
     * `partiallyAutomated`, or `fullyAutomated`. Default: `manual`.
     */
    drsAutomationLevel?: pulumi.Input<string>;
    /**
     * When `true`, enables DRS to use data
     * from [vRealize Operations Manager][ref-vsphere-vro] to make proactive DRS
     * recommendations. <sup>\*</sup>
     */
    drsEnablePredictiveDrs?: pulumi.Input<boolean>;
    /**
     * Allow individual DRS overrides to be
     * set for virtual machines in the cluster. Default: `true`.
     */
    drsEnableVmOverrides?: pulumi.Input<boolean>;
    /**
     * Enable DRS for this cluster. Default: `false`.
     */
    drsEnabled?: pulumi.Input<boolean>;
    /**
     * A value between `1` and `5` indicating
     * the threshold of imbalance tolerated between hosts. A lower setting will
     * tolerate more imbalance while a higher setting will tolerate less. Default:
     * `3`.
     */
    drsMigrationThreshold?: pulumi.Input<number>;
    /**
     * The relative path to a folder to put this cluster in.
     * This is a path relative to the datacenter you are deploying the cluster to.
     * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
     * The provider will place a cluster named `compute-cluster-test` in a
     * host folder located at `/dc1/host/foo/bar`, with the final inventory path
     * being `/dc1/host/foo/bar/datastore-cluster-test`.
     */
    folder?: pulumi.Input<string>;
    /**
     * When destroying the resource, setting this to
     * `true` will auto-remove any hosts that are currently a member of the cluster,
     * as if they were removed by taking their entry out of `hostSystemIds` (see
     * below. This is an advanced
     * option and should only be used for testing. Default: `false`.
     */
    forceEvacuateOnDestroy?: pulumi.Input<boolean>;
    /**
     * Defines the
     * managed object IDs of hosts to use as dedicated failover
     * hosts. These hosts are kept as available as possible - admission control will
     * block access to the host, and DRS will ignore the host when making
     * recommendations.
     */
    haAdmissionControlFailoverHostSystemIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum number
     * of failed hosts that admission control tolerates when making decisions on
     * whether to permit virtual machine operations. The maximum is one less than
     * the number of hosts in the cluster. Default: `1`.
     * <sup>\*</sup>
     */
    haAdmissionControlHostFailureTolerance?: pulumi.Input<number>;
    /**
     * The percentage of
     * resource reduction that a cluster of virtual machines can tolerate in case of
     * a failover. A value of 0 produces warnings only, whereas a value of 100
     * disables the setting. Default: `100` (disabled).
     */
    haAdmissionControlPerformanceTolerance?: pulumi.Input<number>;
    /**
     * The type of admission control
     * policy to use with vSphere HA. Can be one of `resourcePercentage`,
     * `slotPolicy`, `failoverHosts`, or `disabled`. Default: `resourcePercentage`.
     */
    haAdmissionControlPolicy?: pulumi.Input<string>;
    /**
     * Automatically determine available resource percentages by subtracting the
     * average number of host resources represented by the
     * `haAdmissionControlHostFailureTolerance`
     * setting from the total amount of resources in the cluster. Disable to supply
     * user-defined values. Default: `true`.
     * <sup>\*</sup>
     */
    haAdmissionControlResourcePercentageAutoCompute?: pulumi.Input<boolean>;
    /**
     * Controls the
     * user-defined percentage of CPU resources in the cluster to reserve for
     * failover. Default: `100`.
     */
    haAdmissionControlResourcePercentageCpu?: pulumi.Input<number>;
    /**
     * Controls the
     * user-defined percentage of memory resources in the cluster to reserve for
     * failover. Default: `100`.
     */
    haAdmissionControlResourcePercentageMemory?: pulumi.Input<number>;
    /**
     * Controls the
     * user-defined CPU slot size, in MHz. Default: `32`.
     */
    haAdmissionControlSlotPolicyExplicitCpu?: pulumi.Input<number>;
    /**
     * Controls the
     * user-defined memory slot size, in MB. Default: `100`.
     */
    haAdmissionControlSlotPolicyExplicitMemory?: pulumi.Input<number>;
    /**
     * Controls
     * whether or not you wish to supply explicit values to CPU and memory slot
     * sizes. The default is `false`, which tells vSphere to gather a automatic
     * average based on all powered-on virtual machines currently in the cluster.
     */
    haAdmissionControlSlotPolicyUseExplicitSize?: pulumi.Input<boolean>;
    /**
     * A key/value map that specifies advanced
     * options for vSphere HA.
     */
    haAdvancedOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Controls the action to take
     * on virtual machines if an APD status on an affected datastore clears in the
     * middle of an APD event. Can be one of `none` or `reset`. Default: `none`.
     * <sup>\*</sup>
     */
    haDatastoreApdRecoveryAction?: pulumi.Input<string>;
    /**
     * Controls the action to take on
     * virtual machines when the cluster has detected loss to all paths to a
     * relevant datastore. Can be one of `disabled`, `warning`,
     * `restartConservative`, or `restartAggressive`.  Default: `disabled`.
     * <sup>\*</sup>
     */
    haDatastoreApdResponse?: pulumi.Input<string>;
    /**
     * The time, in seconds,
     * to wait after an APD timeout event to run the response action defined in
     * `haDatastoreApdResponse`. Default: `180`
     * seconds (3 minutes). <sup>\*</sup>
     */
    haDatastoreApdResponseDelay?: pulumi.Input<number>;
    /**
     * Controls the action to take on
     * virtual machines when the cluster has detected a permanent device loss to a
     * relevant datastore. Can be one of `disabled`, `warning`, or
     * `restartAggressive`. Default: `disabled`.
     * <sup>\*</sup>
     */
    haDatastorePdlResponse?: pulumi.Input<string>;
    /**
     * Enable vSphere HA for this cluster. Default:
     * `false`.
     */
    haEnabled?: pulumi.Input<boolean>;
    /**
     * The list of managed object IDs for
     * preferred datastores to use for HA heartbeating. This setting is only useful
     * when `haHeartbeatDatastorePolicy` is set
     * to either `userSelectedDs` or `allFeasibleDsWithUserPreference`.
     */
    haHeartbeatDatastoreIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The selection policy for HA
     * heartbeat datastores. Can be one of `allFeasibleDs`, `userSelectedDs`, or
     * `allFeasibleDsWithUserPreference`. Default:
     * `allFeasibleDsWithUserPreference`.
     */
    haHeartbeatDatastorePolicy?: pulumi.Input<string>;
    /**
     * The action to take on virtual
     * machines when a host has detected that it has been isolated from the rest of
     * the cluster. Can be one of `none`, `powerOff`, or `shutdown`. Default:
     * `none`.
     */
    haHostIsolationResponse?: pulumi.Input<string>;
    /**
     * Global setting that controls whether
     * vSphere HA remediates virtual machines on host failure. Can be one of `enabled`
     * or `disabled`. Default: `enabled`.
     */
    haHostMonitoring?: pulumi.Input<string>;
    /**
     * Controls vSphere VM component
     * protection for virtual machines in this cluster. Can be one of `enabled` or
     * `disabled`. Default: `enabled`.
     * <sup>\*</sup>
     */
    haVmComponentProtection?: pulumi.Input<string>;
    /**
     * The condition used to
     * determine whether or not virtual machines in a certain restart priority class
     * are online, allowing HA to move on to restarting virtual machines on the next
     * priority. Can be one of `none`, `poweredOn`, `guestHbStatusGreen`, or
     * `appHbStatusGreen`. The default is `none`, which means that a virtual machine
     * is considered ready immediately after a host is found to start it on.
     * <sup>\*</sup>
     */
    haVmDependencyRestartCondition?: pulumi.Input<string>;
    /**
     * The time interval, in seconds, a heartbeat
     * from a virtual machine is not received within this configured interval,
     * the virtual machine is marked as failed. Default: `30` seconds.
     */
    haVmFailureInterval?: pulumi.Input<number>;
    /**
     * The time, in seconds, for the reset window in
     * which `haVmMaximumResets` can operate. When this
     * window expires, no more resets are attempted regardless of the setting
     * configured in `haVmMaximumResets`. `-1` means no window, meaning an
     * unlimited reset time is allotted. Default: `-1` (no window).
     */
    haVmMaximumFailureWindow?: pulumi.Input<number>;
    /**
     * The maximum number of resets that HA will
     * perform to a virtual machine when responding to a failure event. Default: `3`
     */
    haVmMaximumResets?: pulumi.Input<number>;
    /**
     * The time, in seconds, that HA waits after
     * powering on a virtual machine before monitoring for heartbeats. Default:
     * `120` seconds (2 minutes).
     */
    haVmMinimumUptime?: pulumi.Input<number>;
    /**
     * The type of virtual machine monitoring to use
     * when HA is enabled in the cluster. Can be one of `vmMonitoringDisabled`,
     * `vmMonitoringOnly`, or `vmAndAppMonitoring`. Default: `vmMonitoringDisabled`.
     */
    haVmMonitoring?: pulumi.Input<string>;
    /**
     * Additional delay, in seconds,
     * after ready condition is met. A VM is considered ready at this point.
     * Default: `0` seconds (no delay). <sup>\*</sup>
     */
    haVmRestartAdditionalDelay?: pulumi.Input<number>;
    /**
     * The default restart priority
     * for affected virtual machines when vSphere detects a host failure. Can be one
     * of `lowest`, `low`, `medium`, `high`, or `highest`. Default: `medium`.
     */
    haVmRestartPriority?: pulumi.Input<string>;
    /**
     * The maximum time, in seconds,
     * that vSphere HA will wait for virtual machines in one priority to be ready
     * before proceeding with the next priority. Default: `600` seconds (10 minutes).
     * <sup>\*</sup>
     */
    haVmRestartTimeout?: pulumi.Input<number>;
    /**
     * The timeout, in seconds, for each host maintenance
     * mode operation when removing hosts from a cluster. Default: `3600` seconds (1 hour).
     */
    hostClusterExitTimeout?: pulumi.Input<number>;
    /**
     * Can be set to `true` if compute cluster
     * membership will be managed through the `host` resource rather than the
     * `computeCluster` resource. Conflicts with: `hostSystemIds`.
     */
    hostManaged?: pulumi.Input<boolean>;
    /**
     * The managed object IDs of
     * the hosts to put in the cluster. Conflicts with: `hostManaged`.
     */
    hostSystemIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * Determines how the host
     * quarantine, maintenance mode, or virtual machine migration recommendations
     * made by proactive HA are to be handled. Can be one of `Automated` or
     * `Manual`. Default: `Manual`. <sup>\*</sup>
     */
    proactiveHaAutomationLevel?: pulumi.Input<string>;
    /**
     * Enables Proactive HA. Default: `false`.
     * <sup>\*</sup>
     */
    proactiveHaEnabled?: pulumi.Input<boolean>;
    /**
     * The configured remediation
     * for moderately degraded hosts. Can be one of `MaintenanceMode` or
     * `QuarantineMode`. Note that this cannot be set to `MaintenanceMode` when
     * `proactiveHaSevereRemediation` is set
     * to `QuarantineMode`. Default: `QuarantineMode`.
     * <sup>\*</sup>
     */
    proactiveHaModerateRemediation?: pulumi.Input<string>;
    /**
     * The list of IDs for health update
     * providers configured for this cluster.
     * <sup>\*</sup>
     */
    proactiveHaProviderIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The configured remediation for
     * severely degraded hosts. Can be one of `MaintenanceMode` or `QuarantineMode`.
     * Note that this cannot be set to `QuarantineMode` when
     * `proactiveHaModerateRemediation` is
     * set to `MaintenanceMode`. Default: `QuarantineMode`.
     * <sup>\*</sup>
     */
    proactiveHaSevereRemediation?: pulumi.Input<string>;
    /**
     * The managed object ID of the cluster's root resource pool.
     */
    resourcePoolId?: pulumi.Input<string>;
    /**
     * The IDs of any tags to attach to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of disk UUIDs to add to the vSAN cluster.
     */
    vsanDiskGroups?: pulumi.Input<pulumi.Input<inputs.ComputeClusterVsanDiskGroup>[]>;
    /**
     * Whether the VSAN service is enabled for the cluster.
     */
    vsanEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ComputeCluster resource.
 */
export interface ComputeClusterArgs {
    /**
     * A map of custom attribute ids to attribute
     * value strings to set for the datastore cluster.
     */
    customAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The managed object ID of
     * the datacenter to create the cluster in. Forces a new resource if changed.
     */
    datacenterId: pulumi.Input<string>;
    /**
     * The automation level for host power
     * operations in this cluster. Can be one of `manual` or `automated`. Default:
     * `manual`.
     */
    dpmAutomationLevel?: pulumi.Input<string>;
    /**
     * Enable DPM support for DRS in this cluster.
     * Requires `drsEnabled` to be `true` in order to be effective.
     * Default: `false`.
     */
    dpmEnabled?: pulumi.Input<boolean>;
    /**
     * A value between `1` and `5` indicating the
     * threshold of load within the cluster that influences host power operations.
     * This affects both power on and power off operations - a lower setting will
     * tolerate more of a surplus/deficit than a higher setting. Default: `3`.
     */
    dpmThreshold?: pulumi.Input<number>;
    /**
     * A key/value map that specifies advanced
     * options for DRS and DPM.
     */
    drsAdvancedOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The default automation level for all
     * virtual machines in this cluster. Can be one of `manual`,
     * `partiallyAutomated`, or `fullyAutomated`. Default: `manual`.
     */
    drsAutomationLevel?: pulumi.Input<string>;
    /**
     * When `true`, enables DRS to use data
     * from [vRealize Operations Manager][ref-vsphere-vro] to make proactive DRS
     * recommendations. <sup>\*</sup>
     */
    drsEnablePredictiveDrs?: pulumi.Input<boolean>;
    /**
     * Allow individual DRS overrides to be
     * set for virtual machines in the cluster. Default: `true`.
     */
    drsEnableVmOverrides?: pulumi.Input<boolean>;
    /**
     * Enable DRS for this cluster. Default: `false`.
     */
    drsEnabled?: pulumi.Input<boolean>;
    /**
     * A value between `1` and `5` indicating
     * the threshold of imbalance tolerated between hosts. A lower setting will
     * tolerate more imbalance while a higher setting will tolerate less. Default:
     * `3`.
     */
    drsMigrationThreshold?: pulumi.Input<number>;
    /**
     * The relative path to a folder to put this cluster in.
     * This is a path relative to the datacenter you are deploying the cluster to.
     * Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
     * The provider will place a cluster named `compute-cluster-test` in a
     * host folder located at `/dc1/host/foo/bar`, with the final inventory path
     * being `/dc1/host/foo/bar/datastore-cluster-test`.
     */
    folder?: pulumi.Input<string>;
    /**
     * When destroying the resource, setting this to
     * `true` will auto-remove any hosts that are currently a member of the cluster,
     * as if they were removed by taking their entry out of `hostSystemIds` (see
     * below. This is an advanced
     * option and should only be used for testing. Default: `false`.
     */
    forceEvacuateOnDestroy?: pulumi.Input<boolean>;
    /**
     * Defines the
     * managed object IDs of hosts to use as dedicated failover
     * hosts. These hosts are kept as available as possible - admission control will
     * block access to the host, and DRS will ignore the host when making
     * recommendations.
     */
    haAdmissionControlFailoverHostSystemIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum number
     * of failed hosts that admission control tolerates when making decisions on
     * whether to permit virtual machine operations. The maximum is one less than
     * the number of hosts in the cluster. Default: `1`.
     * <sup>\*</sup>
     */
    haAdmissionControlHostFailureTolerance?: pulumi.Input<number>;
    /**
     * The percentage of
     * resource reduction that a cluster of virtual machines can tolerate in case of
     * a failover. A value of 0 produces warnings only, whereas a value of 100
     * disables the setting. Default: `100` (disabled).
     */
    haAdmissionControlPerformanceTolerance?: pulumi.Input<number>;
    /**
     * The type of admission control
     * policy to use with vSphere HA. Can be one of `resourcePercentage`,
     * `slotPolicy`, `failoverHosts`, or `disabled`. Default: `resourcePercentage`.
     */
    haAdmissionControlPolicy?: pulumi.Input<string>;
    /**
     * Automatically determine available resource percentages by subtracting the
     * average number of host resources represented by the
     * `haAdmissionControlHostFailureTolerance`
     * setting from the total amount of resources in the cluster. Disable to supply
     * user-defined values. Default: `true`.
     * <sup>\*</sup>
     */
    haAdmissionControlResourcePercentageAutoCompute?: pulumi.Input<boolean>;
    /**
     * Controls the
     * user-defined percentage of CPU resources in the cluster to reserve for
     * failover. Default: `100`.
     */
    haAdmissionControlResourcePercentageCpu?: pulumi.Input<number>;
    /**
     * Controls the
     * user-defined percentage of memory resources in the cluster to reserve for
     * failover. Default: `100`.
     */
    haAdmissionControlResourcePercentageMemory?: pulumi.Input<number>;
    /**
     * Controls the
     * user-defined CPU slot size, in MHz. Default: `32`.
     */
    haAdmissionControlSlotPolicyExplicitCpu?: pulumi.Input<number>;
    /**
     * Controls the
     * user-defined memory slot size, in MB. Default: `100`.
     */
    haAdmissionControlSlotPolicyExplicitMemory?: pulumi.Input<number>;
    /**
     * Controls
     * whether or not you wish to supply explicit values to CPU and memory slot
     * sizes. The default is `false`, which tells vSphere to gather a automatic
     * average based on all powered-on virtual machines currently in the cluster.
     */
    haAdmissionControlSlotPolicyUseExplicitSize?: pulumi.Input<boolean>;
    /**
     * A key/value map that specifies advanced
     * options for vSphere HA.
     */
    haAdvancedOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Controls the action to take
     * on virtual machines if an APD status on an affected datastore clears in the
     * middle of an APD event. Can be one of `none` or `reset`. Default: `none`.
     * <sup>\*</sup>
     */
    haDatastoreApdRecoveryAction?: pulumi.Input<string>;
    /**
     * Controls the action to take on
     * virtual machines when the cluster has detected loss to all paths to a
     * relevant datastore. Can be one of `disabled`, `warning`,
     * `restartConservative`, or `restartAggressive`.  Default: `disabled`.
     * <sup>\*</sup>
     */
    haDatastoreApdResponse?: pulumi.Input<string>;
    /**
     * The time, in seconds,
     * to wait after an APD timeout event to run the response action defined in
     * `haDatastoreApdResponse`. Default: `180`
     * seconds (3 minutes). <sup>\*</sup>
     */
    haDatastoreApdResponseDelay?: pulumi.Input<number>;
    /**
     * Controls the action to take on
     * virtual machines when the cluster has detected a permanent device loss to a
     * relevant datastore. Can be one of `disabled`, `warning`, or
     * `restartAggressive`. Default: `disabled`.
     * <sup>\*</sup>
     */
    haDatastorePdlResponse?: pulumi.Input<string>;
    /**
     * Enable vSphere HA for this cluster. Default:
     * `false`.
     */
    haEnabled?: pulumi.Input<boolean>;
    /**
     * The list of managed object IDs for
     * preferred datastores to use for HA heartbeating. This setting is only useful
     * when `haHeartbeatDatastorePolicy` is set
     * to either `userSelectedDs` or `allFeasibleDsWithUserPreference`.
     */
    haHeartbeatDatastoreIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The selection policy for HA
     * heartbeat datastores. Can be one of `allFeasibleDs`, `userSelectedDs`, or
     * `allFeasibleDsWithUserPreference`. Default:
     * `allFeasibleDsWithUserPreference`.
     */
    haHeartbeatDatastorePolicy?: pulumi.Input<string>;
    /**
     * The action to take on virtual
     * machines when a host has detected that it has been isolated from the rest of
     * the cluster. Can be one of `none`, `powerOff`, or `shutdown`. Default:
     * `none`.
     */
    haHostIsolationResponse?: pulumi.Input<string>;
    /**
     * Global setting that controls whether
     * vSphere HA remediates virtual machines on host failure. Can be one of `enabled`
     * or `disabled`. Default: `enabled`.
     */
    haHostMonitoring?: pulumi.Input<string>;
    /**
     * Controls vSphere VM component
     * protection for virtual machines in this cluster. Can be one of `enabled` or
     * `disabled`. Default: `enabled`.
     * <sup>\*</sup>
     */
    haVmComponentProtection?: pulumi.Input<string>;
    /**
     * The condition used to
     * determine whether or not virtual machines in a certain restart priority class
     * are online, allowing HA to move on to restarting virtual machines on the next
     * priority. Can be one of `none`, `poweredOn`, `guestHbStatusGreen`, or
     * `appHbStatusGreen`. The default is `none`, which means that a virtual machine
     * is considered ready immediately after a host is found to start it on.
     * <sup>\*</sup>
     */
    haVmDependencyRestartCondition?: pulumi.Input<string>;
    /**
     * The time interval, in seconds, a heartbeat
     * from a virtual machine is not received within this configured interval,
     * the virtual machine is marked as failed. Default: `30` seconds.
     */
    haVmFailureInterval?: pulumi.Input<number>;
    /**
     * The time, in seconds, for the reset window in
     * which `haVmMaximumResets` can operate. When this
     * window expires, no more resets are attempted regardless of the setting
     * configured in `haVmMaximumResets`. `-1` means no window, meaning an
     * unlimited reset time is allotted. Default: `-1` (no window).
     */
    haVmMaximumFailureWindow?: pulumi.Input<number>;
    /**
     * The maximum number of resets that HA will
     * perform to a virtual machine when responding to a failure event. Default: `3`
     */
    haVmMaximumResets?: pulumi.Input<number>;
    /**
     * The time, in seconds, that HA waits after
     * powering on a virtual machine before monitoring for heartbeats. Default:
     * `120` seconds (2 minutes).
     */
    haVmMinimumUptime?: pulumi.Input<number>;
    /**
     * The type of virtual machine monitoring to use
     * when HA is enabled in the cluster. Can be one of `vmMonitoringDisabled`,
     * `vmMonitoringOnly`, or `vmAndAppMonitoring`. Default: `vmMonitoringDisabled`.
     */
    haVmMonitoring?: pulumi.Input<string>;
    /**
     * Additional delay, in seconds,
     * after ready condition is met. A VM is considered ready at this point.
     * Default: `0` seconds (no delay). <sup>\*</sup>
     */
    haVmRestartAdditionalDelay?: pulumi.Input<number>;
    /**
     * The default restart priority
     * for affected virtual machines when vSphere detects a host failure. Can be one
     * of `lowest`, `low`, `medium`, `high`, or `highest`. Default: `medium`.
     */
    haVmRestartPriority?: pulumi.Input<string>;
    /**
     * The maximum time, in seconds,
     * that vSphere HA will wait for virtual machines in one priority to be ready
     * before proceeding with the next priority. Default: `600` seconds (10 minutes).
     * <sup>\*</sup>
     */
    haVmRestartTimeout?: pulumi.Input<number>;
    /**
     * The timeout, in seconds, for each host maintenance
     * mode operation when removing hosts from a cluster. Default: `3600` seconds (1 hour).
     */
    hostClusterExitTimeout?: pulumi.Input<number>;
    /**
     * Can be set to `true` if compute cluster
     * membership will be managed through the `host` resource rather than the
     * `computeCluster` resource. Conflicts with: `hostSystemIds`.
     */
    hostManaged?: pulumi.Input<boolean>;
    /**
     * The managed object IDs of
     * the hosts to put in the cluster. Conflicts with: `hostManaged`.
     */
    hostSystemIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * Determines how the host
     * quarantine, maintenance mode, or virtual machine migration recommendations
     * made by proactive HA are to be handled. Can be one of `Automated` or
     * `Manual`. Default: `Manual`. <sup>\*</sup>
     */
    proactiveHaAutomationLevel?: pulumi.Input<string>;
    /**
     * Enables Proactive HA. Default: `false`.
     * <sup>\*</sup>
     */
    proactiveHaEnabled?: pulumi.Input<boolean>;
    /**
     * The configured remediation
     * for moderately degraded hosts. Can be one of `MaintenanceMode` or
     * `QuarantineMode`. Note that this cannot be set to `MaintenanceMode` when
     * `proactiveHaSevereRemediation` is set
     * to `QuarantineMode`. Default: `QuarantineMode`.
     * <sup>\*</sup>
     */
    proactiveHaModerateRemediation?: pulumi.Input<string>;
    /**
     * The list of IDs for health update
     * providers configured for this cluster.
     * <sup>\*</sup>
     */
    proactiveHaProviderIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The configured remediation for
     * severely degraded hosts. Can be one of `MaintenanceMode` or `QuarantineMode`.
     * Note that this cannot be set to `QuarantineMode` when
     * `proactiveHaModerateRemediation` is
     * set to `MaintenanceMode`. Default: `QuarantineMode`.
     * <sup>\*</sup>
     */
    proactiveHaSevereRemediation?: pulumi.Input<string>;
    /**
     * The IDs of any tags to attach to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of disk UUIDs to add to the vSAN cluster.
     */
    vsanDiskGroups?: pulumi.Input<pulumi.Input<inputs.ComputeClusterVsanDiskGroup>[]>;
    /**
     * Whether the VSAN service is enabled for the cluster.
     */
    vsanEnabled?: pulumi.Input<boolean>;
}
