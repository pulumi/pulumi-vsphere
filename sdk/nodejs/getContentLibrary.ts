// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `vsphere.ContentLibrary` data source can be used to discover the ID of a content library.
 *
 * > **NOTE:** This resource requires vCenter Server and is not available on direct ESXi host connections.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const library = vsphere.getContentLibrary({
 *     name: "Content Library",
 * });
 * ```
 */
export function getContentLibrary(args: GetContentLibraryArgs, opts?: pulumi.InvokeOptions): Promise<GetContentLibraryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vsphere:index/getContentLibrary:getContentLibrary", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getContentLibrary.
 */
export interface GetContentLibraryArgs {
    /**
     * The name of the content library.
     */
    name: string;
}

/**
 * A collection of values returned by getContentLibrary.
 */
export interface GetContentLibraryResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
}
/**
 * The `vsphere.ContentLibrary` data source can be used to discover the ID of a content library.
 *
 * > **NOTE:** This resource requires vCenter Server and is not available on direct ESXi host connections.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vsphere from "@pulumi/vsphere";
 *
 * const library = vsphere.getContentLibrary({
 *     name: "Content Library",
 * });
 * ```
 */
export function getContentLibraryOutput(args: GetContentLibraryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetContentLibraryResult> {
    return pulumi.output(args).apply((a: any) => getContentLibrary(a, opts))
}

/**
 * A collection of arguments for invoking getContentLibrary.
 */
export interface GetContentLibraryOutputArgs {
    /**
     * The name of the content library.
     */
    name: pulumi.Input<string>;
}
