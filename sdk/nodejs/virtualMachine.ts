// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineState, opts?: pulumi.CustomResourceOptions): VirtualMachine {
        return new VirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/virtualMachine:VirtualMachine';

    /**
     * Returns true if the given object is an instance of VirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachine.__pulumiType;
    }

    /**
     * The guest name for the operating system when `guestId` is `otherGuest` or `otherGuest64`.
     */
    public readonly alternateGuestName!: pulumi.Output<string | undefined>;
    /**
     * A user-provided description of the virtual machine.
     */
    public readonly annotation!: pulumi.Output<string>;
    /**
     * The number of milliseconds to wait before starting the boot sequence. The default is no delay.
     */
    public readonly bootDelay!: pulumi.Output<number | undefined>;
    /**
     * The number of milliseconds to wait before retrying the boot sequence. This option is only valid if `bootRetryEnabled` is `true`. Default: `10000` (10 seconds).
     */
    public readonly bootRetryDelay!: pulumi.Output<number | undefined>;
    /**
     * If set to `true`, a virtual machine that fails to boot will try again after the delay defined in `bootRetryDelay`. Default: `false`.
     */
    public readonly bootRetryEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.
     */
    public readonly cdroms!: pulumi.Output<outputs.VirtualMachineCdrom[] | undefined>;
    /**
     * A unique identifier for a given version of the last configuration was applied.
     */
    public /*out*/ readonly changeVersion!: pulumi.Output<string>;
    /**
     * When specified, the virtual machine will be created as a clone of a specified template. Optional customization options can be submitted for the resource. See creating a virtual machine from a template for more information.
     */
    public readonly clone!: pulumi.Output<outputs.VirtualMachineClone | undefined>;
    /**
     * Allow CPUs to be added to the virtual machine while it is powered on.
     */
    public readonly cpuHotAddEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Allow CPUs to be removed to the virtual machine while it is powered on.
     */
    public readonly cpuHotRemoveEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum amount of CPU (in MHz) that the virtual machine can consume, regardless of available resources. The default is no limit.
     */
    public readonly cpuLimit!: pulumi.Output<number | undefined>;
    /**
     * Enable CPU performance counters on the virtual machine. Default: `false`.
     */
    public readonly cpuPerformanceCountersEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The amount of CPU (in MHz) that the virtual machine is guaranteed. The default is no reservation.
     */
    public readonly cpuReservation!: pulumi.Output<number | undefined>;
    /**
     * The number of CPU shares allocated to the virtual machine when the `cpuShareLevel` is `custom`.
     */
    public readonly cpuShareCount!: pulumi.Output<number>;
    /**
     * The allocation level for the virtual machine CPU resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
     */
    public readonly cpuShareLevel!: pulumi.Output<string | undefined>;
    /**
     * Map of custom attribute ids to attribute value strings to set for virtual machine. Please refer to the `vsphereCustomAttributes` resource for more information on setting custom attributes.
     *
     * > **NOTE:** Custom attributes requires vCenter Server and is not supported on direct ESXi host connections.
     */
    public readonly customAttributes!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The datacenter ID. Required only when deploying an OVF/OVA template.
     */
    public readonly datacenterId!: pulumi.Output<string | undefined>;
    /**
     * The managed object reference ID of the datastore cluster in which to place the virtual machine. This setting applies to entire virtual machine and implies that you wish to use vSphere Storage DRS with the virtual machine. See the section on virtual machine migration for more information on modifying this value.
     *
     * > **NOTE:** One of `datastoreId` or `datastoreClusterId` must be specified.
     *
     * > **NOTE:** Use of `datastoreClusterId` requires vSphere Storage DRS to be enabled on the specified datastore cluster.
     *
     * > **NOTE:** The `datastoreClusterId` setting applies to the entire virtual machine resource. You cannot assign individual individual disks to datastore clusters. In addition, you cannot use the `attach` setting to attach external disks on virtual machines that are assigned to datastore clusters.
     */
    public readonly datastoreClusterId!: pulumi.Output<string | undefined>;
    /**
     * The datastore ID that on which the ISO is located. Required for using a datastore ISO. Conflicts with `clientDevice`.
     */
    public readonly datastoreId!: pulumi.Output<string>;
    /**
     * The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
     */
    public /*out*/ readonly defaultIpAddress!: pulumi.Output<string>;
    /**
     * A specification for a virtual disk device on the virtual machine. See disk options for more information.
     */
    public readonly disks!: pulumi.Output<outputs.VirtualMachineDisk[]>;
    /**
     * Use this option to enable EFI secure boot when the `firmware` type is set to is `efi`. Default: `false`.
     *
     * > **NOTE:** EFI secure boot is only available on vSphere 6.5 and later.
     */
    public readonly efiSecureBootEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest. Default: `false`.
     */
    public readonly enableDiskUuid!: pulumi.Output<boolean | undefined>;
    /**
     * Enable logging of virtual machine events to a log file stored in the virtual machine directory. Default: `false`.
     */
    public readonly enableLogging!: pulumi.Output<boolean | undefined>;
    /**
     * The EPT/RVI (hardware memory virtualization) setting for the virtual machine. One of `automatic`, `on`, or `off`. Default: `automatic`.
     */
    public readonly eptRviMode!: pulumi.Output<string | undefined>;
    /**
     * Extra configuration data for the virtual machine. Can be used to supply advanced parameters not normally in configuration, such as instance metadata and userdata.
     *
     * > **NOTE:** Do not use `extraConfig` when working with a template imported from OVF/OVA as your settings may be ignored. Use the `vapp` block `properties` section as described in Using vApp Properties for OVF/OVA Configuration.
     */
    public readonly extraConfig!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Allow the virtual machine to be rebooted when a change to `extraConfig` occurs. Default: `true`.
     */
    public readonly extraConfigRebootRequired!: pulumi.Output<boolean | undefined>;
    /**
     * The firmware for the virtual machine. One of `bios` or `efi`.
     */
    public readonly firmware!: pulumi.Output<string | undefined>;
    /**
     * The path to the virtual machine folder in which to place the virtual machine, relative to the datacenter path (`/<datacenter-name>/vm`).  For example, `/dc-01/vm/foo`
     */
    public readonly folder!: pulumi.Output<string | undefined>;
    /**
     * If a guest shutdown failed or times out while updating or destroying (see `shutdownWaitTimeout`), force the power-off of the virtual machine. Default: `true`.
     */
    public readonly forcePowerOff!: pulumi.Output<boolean | undefined>;
    /**
     * The guest ID for the operating system type. For a full list of possible values, see [here][vmware-docs-guest-ids]. Default: `otherGuest64`.
     *
     * [vmware-docs-guest-ids]: https://vdc-repo.vmware.com/vmwb-repository/dcr-public/184bb3ba-6fa8-4574-a767-d0c96e2a38f4/ba9422ef-405c-47dd-8553-e11b619185b2/SDK/vsphere-ws/docs/ReferenceGuide/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
     */
    public readonly guestId!: pulumi.Output<string>;
    /**
     * The current list of IP addresses on this machine, including the value of `defaultIpAddress`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
     */
    public /*out*/ readonly guestIpAddresses!: pulumi.Output<string[]>;
    /**
     * The hardware version number. Valid range is from 4 to 21. The hardware version cannot be downgraded. See virtual machine hardware [versions][virtual-machine-hardware-versions] and [compatibility][virtual-machine-hardware-compatibility] for more information on supported settings.
     *
     * [virtual-machine-hardware-versions]: https://kb.vmware.com/s/article/1003746
     * [virtual-machine-hardware-compatibility]: https://kb.vmware.com/s/article/2007240
     */
    public readonly hardwareVersion!: pulumi.Output<number>;
    /**
     * The managed object reference ID of a host on which to place the virtual machine. See the section on virtual machine migration for more information on modifying this value. When using a vSphere cluster, if a `hostSystemId` is not supplied, vSphere will select a host in the cluster to place the virtual machine, according to any defaults or vSphere DRS placement policies.
     */
    public readonly hostSystemId!: pulumi.Output<string>;
    /**
     * The hardware virtualization (non-nested) setting for the virtual machine. One of `hvAuto`, `hvOn`, or `hvOff`. Default: `hvAuto`.
     */
    public readonly hvMode!: pulumi.Output<string | undefined>;
    /**
     * The number of IDE controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: `2`.
     */
    public readonly ideControllerCount!: pulumi.Output<number | undefined>;
    /**
     * List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: `[]`.
     */
    public readonly ignoredGuestIps!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
     */
    public /*out*/ readonly imported!: pulumi.Output<boolean>;
    /**
     * Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard devices. One of `low`, `normal`, `medium`, or `high`.
     *
     * > **NOTE:** On higher sensitivities, you may need to adjust the `memoryReservation` to the full amount of memory provisioned for the virtual machine.
     */
    public readonly latencySensitivity!: pulumi.Output<string | undefined>;
    /**
     * The memory size to assign to the virtual machine, in MB. Default: `1024` (1 GB).
     */
    public readonly memory!: pulumi.Output<number | undefined>;
    /**
     * Allow memory to be added to the virtual machine while it is powered on.
     *
     * > **NOTE:** CPU and memory hot add options are not available on all guest operating systems. Please refer to the [VMware Guest OS Compatibility Guide][vmware-docs-compat-guide] to which settings are allow for your guest operating system. In addition, at least one `pulumi up` must be run before you are able to use CPU and memory hot add.
     *
     * [vmware-docs-compat-guide]: http://partnerweb.vmware.com/comp_guide2/pdf/VMware_GOS_Compatibility_Guide.pdf
     *
     * > **NOTE:** For Linux 64-bit guest operating systems with less than or equal to 3GB, the virtual machine must powered off to add memory beyond 3GB. Subsequent hot add of memory does not require the virtual machine to be powered-off to apply the plan. Please refer to [VMware KB 2008405][vmware-kb-2008405].
     *
     * [vmware-kb-2008405]: https://kb.vmware.com/s/article/2008405
     */
    public readonly memoryHotAddEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum amount of memory (in MB) that th virtual machine can consume, regardless of available resources. The default is no limit.
     */
    public readonly memoryLimit!: pulumi.Output<number | undefined>;
    /**
     * The amount of memory (in MB) that the virtual machine is guaranteed. The default is no reservation.
     */
    public readonly memoryReservation!: pulumi.Output<number | undefined>;
    /**
     * The number of memory shares allocated to the virtual machine when the `memoryShareLevel` is `custom`.
     */
    public readonly memoryShareCount!: pulumi.Output<number>;
    /**
     * The allocation level for the virtual machine memory resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
     */
    public readonly memoryShareLevel!: pulumi.Output<string | undefined>;
    /**
     * The amount of time, in minutes, to wait for a virtual machine migration to complete before failing. Default: `10` minutes. See the section on virtual machine migration for more information.
     */
    public readonly migrateWaitTimeout!: pulumi.Output<number | undefined>;
    /**
     * The managed object reference ID of the created virtual machine.
     */
    public /*out*/ readonly moid!: pulumi.Output<string>;
    /**
     * The name of the virtual machine.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable nested hardware virtualization on the virtual machine, facilitating nested virtualization in the guest operating system. Default: `false`.
     */
    public readonly nestedHvEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A specification for a virtual NIC on the virtual machine. See network interface options for more information.
     */
    public readonly networkInterfaces!: pulumi.Output<outputs.VirtualMachineNetworkInterface[] | undefined>;
    /**
     * The number of cores per socket in the virtual machine. The number of vCPUs on the virtual machine will be `numCpus` divided by `numCoresPerSocket`. If specified, the value supplied to `numCpus` must be evenly divisible by this value. Default: `1`.
     */
    public readonly numCoresPerSocket!: pulumi.Output<number | undefined>;
    /**
     * The total number of virtual processor cores to assign to the virtual machine. Default: `1`.
     */
    public readonly numCpus!: pulumi.Output<number | undefined>;
    /**
     * When specified, the virtual machine will be deployed from the provided OVF/OVA template. See creating a virtual machine from an OVF/OVA template for more information.
     */
    public readonly ovfDeploy!: pulumi.Output<outputs.VirtualMachineOvfDeploy | undefined>;
    /**
     * List of host PCI device IDs in which to create PCI passthroughs.
     *
     * > **NOTE:** Cloning requires vCenter Server and is not supported on direct ESXi host connections.
     */
    public readonly pciDeviceIds!: pulumi.Output<string[] | undefined>;
    /**
     * A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
     */
    public /*out*/ readonly powerState!: pulumi.Output<string>;
    /**
     * The amount of time, in seconds, that we will be trying to power on a VM
     */
    public readonly poweronTimeout!: pulumi.Output<number | undefined>;
    /**
     * Value internal to Terraform used to determine if a configuration set change requires a reboot.
     */
    public /*out*/ readonly rebootRequired!: pulumi.Output<boolean>;
    /**
     * Triggers replacement of resource whenever it changes.
     *
     * For example, `replaceTrigger = sha256(format("%!s(MISSING)-%!s(MISSING)",data.template_file.cloud_init_metadata.rendered,data.template_file.cloud_init_userdata.rendered))` will fingerprint the changes in cloud-init metadata and userdata templates. This will enable a replacement of the resource whenever the dependant template renders a new configuration. (Forces a replacement.)
     */
    public readonly replaceTrigger!: pulumi.Output<string | undefined>;
    /**
     * The managed object reference ID of the resource pool in which to place the virtual machine. See the Virtual Machine Migration section for more information on modifying this value.
     *
     * > **NOTE:** All clusters and standalone hosts have a default root resource pool. This resource argument does not directly accept the cluster or standalone host resource. For more information, see the section on specifying the Root Resource Pool in the `vsphere.ResourcePool` data source documentation on using the root resource pool.
     */
    public readonly resourcePoolId!: pulumi.Output<string>;
    /**
     * Enable post-power-on scripts to run when VMware Tools is installed. Default: `true`.
     */
    public readonly runToolsScriptsAfterPowerOn!: pulumi.Output<boolean | undefined>;
    /**
     * Enable ost-resume scripts to run when VMware Tools is installed. Default: `true`.
     */
    public readonly runToolsScriptsAfterResume!: pulumi.Output<boolean | undefined>;
    /**
     * Enable pre-reboot scripts to run when VMware Tools is installed. Default: `false`.
     */
    public readonly runToolsScriptsBeforeGuestReboot!: pulumi.Output<boolean | undefined>;
    /**
     * Enable pre-shutdown scripts to run when VMware Tools is installed. Default: `true`.
     */
    public readonly runToolsScriptsBeforeGuestShutdown!: pulumi.Output<boolean | undefined>;
    /**
     * Enable pre-standby scripts to run when VMware Tools is installed. Default: `true`.
     */
    public readonly runToolsScriptsBeforeGuestStandby!: pulumi.Output<boolean | undefined>;
    /**
     * The number of SATA controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
     * you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
     * controllers.
     */
    public readonly sataControllerCount!: pulumi.Output<number | undefined>;
    /**
     * The type of SCSI bus sharing for the virtual machine SCSI controller. One of `physicalSharing`, `virtualSharing`, and `noSharing`. Default: `noSharing`.
     */
    public readonly scsiBusSharing!: pulumi.Output<string | undefined>;
    /**
     * The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
     * you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
     * controllers.
     */
    public readonly scsiControllerCount!: pulumi.Output<number | undefined>;
    /**
     * The SCSI controller type for the virtual machine. One of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic SAS) or `pvscsi` (VMware Paravirtual). Default: `pvscsi`.
     */
    public readonly scsiType!: pulumi.Output<string | undefined>;
    /**
     * The amount of time, in minutes, to wait for a graceful guest shutdown when making necessary updates to the virtual machine. If `forcePowerOff` is set to `true`, the virtual machine will be forced to power-off after the timeout, otherwise an error is returned. Default: `3` minutes.
     */
    public readonly shutdownWaitTimeout!: pulumi.Output<number | undefined>;
    /**
     * The UUID of the storage policy to assign to the virtual disk.
     */
    public readonly storagePolicyId!: pulumi.Output<string>;
    /**
     * The swap file placement policy for the virtual machine. One of `inherit`, `hostLocal`, or `vmDirectory`. Default: `inherit`.
     */
    public readonly swapPlacementPolicy!: pulumi.Output<string | undefined>;
    /**
     * Enable the guest operating system to synchronization its clock with the host when the virtual machine is powered on or resumed. Requires vSphere 7.0 Update 1 and later. Requires VMware Tools to be installed. Default: `false`.
     */
    public readonly syncTimeWithHost!: pulumi.Output<boolean | undefined>;
    /**
     * Enable the guest operating system to periodically synchronize its clock with the host. Requires vSphere 7.0 Update 1 and later. On previous versions, setting `syncTimeWithHost` is will enable periodic synchronization. Requires VMware Tools to be installed. Default: `false`.
     */
    public readonly syncTimeWithHostPeriodically!: pulumi.Output<boolean | undefined>;
    /**
     * The IDs of any tags to attach to this resource. Please refer to the `vsphere.Tag` resource for more information on applying tags to virtual machine resources.
     *
     * > **NOTE:** Tagging support is unsupported on direct ESXi host connections and requires vCenter Server instance.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Enable automatic upgrade of the VMware Tools version when the virtual machine is rebooted. If necessary, VMware Tools is upgraded to the latest version supported by the host on which the virtual machine is running. Requires VMware Tools to be installed. One of `manual` or `upgradeAtPowerCycle`. Default: `manual`.
     */
    public readonly toolsUpgradePolicy!: pulumi.Output<string | undefined>;
    /**
     * The UUID of the virtual disk VMDK file. This is used to track the virtual disk on the virtual machine.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    /**
     * Used for vApp configurations. The only sub-key available is `properties`, which is a key/value map of properties for virtual machines imported from and OVF/OVA. See Using vApp Properties for OVF/OVA Configuration for more information.
     */
    public readonly vapp!: pulumi.Output<outputs.VirtualMachineVapp | undefined>;
    /**
     * Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
     */
    public /*out*/ readonly vappTransports!: pulumi.Output<string[]>;
    /**
     * Enable Virtualization Based Security. Requires `firmware` to be `efi`. In addition, `vvtdEnabled`, `nestedHvEnabled`, and `efiSecureBootEnabled` must all have a value of `true`. Supported on vSphere 6.7 and later. Default: `false`.
     */
    public readonly vbsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
     */
    public /*out*/ readonly vmwareToolsStatus!: pulumi.Output<string>;
    /**
     * The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
     */
    public /*out*/ readonly vmxPath!: pulumi.Output<string>;
    /**
     * Enable Intel Virtualization Technology for Directed I/O for the virtual machine (_I/O MMU_ in the vSphere Client). Supported on vSphere 6.7 and later. Default: `false`.
     */
    public readonly vvtdEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. This should only be used if the version VMware Tools does not allow the `waitForGuestNetTimeout` waiter to be used. A value less than `1` disables the waiter. Default: `0`.
     */
    public readonly waitForGuestIpTimeout!: pulumi.Output<number | undefined>;
    /**
     * Controls whether or not the guest network waiter waits for a routable address. When `false`, the waiter does not wait for a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria. This property is ignored if the `waitForGuestIpTimeout` waiter is used. Default: `true`.
     */
    public readonly waitForGuestNetRoutable!: pulumi.Output<boolean | undefined>;
    /**
     * The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. Older versions of VMware Tools do not populate this property. In those cases, this waiter can be disabled and the `waitForGuestIpTimeout` waiter can be used instead. A value less than `1` disables the waiter. Default: `5` minutes.
     */
    public readonly waitForGuestNetTimeout!: pulumi.Output<number | undefined>;

    /**
     * Create a VirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineArgs | VirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineState | undefined;
            resourceInputs["alternateGuestName"] = state ? state.alternateGuestName : undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["bootDelay"] = state ? state.bootDelay : undefined;
            resourceInputs["bootRetryDelay"] = state ? state.bootRetryDelay : undefined;
            resourceInputs["bootRetryEnabled"] = state ? state.bootRetryEnabled : undefined;
            resourceInputs["cdroms"] = state ? state.cdroms : undefined;
            resourceInputs["changeVersion"] = state ? state.changeVersion : undefined;
            resourceInputs["clone"] = state ? state.clone : undefined;
            resourceInputs["cpuHotAddEnabled"] = state ? state.cpuHotAddEnabled : undefined;
            resourceInputs["cpuHotRemoveEnabled"] = state ? state.cpuHotRemoveEnabled : undefined;
            resourceInputs["cpuLimit"] = state ? state.cpuLimit : undefined;
            resourceInputs["cpuPerformanceCountersEnabled"] = state ? state.cpuPerformanceCountersEnabled : undefined;
            resourceInputs["cpuReservation"] = state ? state.cpuReservation : undefined;
            resourceInputs["cpuShareCount"] = state ? state.cpuShareCount : undefined;
            resourceInputs["cpuShareLevel"] = state ? state.cpuShareLevel : undefined;
            resourceInputs["customAttributes"] = state ? state.customAttributes : undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["datastoreClusterId"] = state ? state.datastoreClusterId : undefined;
            resourceInputs["datastoreId"] = state ? state.datastoreId : undefined;
            resourceInputs["defaultIpAddress"] = state ? state.defaultIpAddress : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["efiSecureBootEnabled"] = state ? state.efiSecureBootEnabled : undefined;
            resourceInputs["enableDiskUuid"] = state ? state.enableDiskUuid : undefined;
            resourceInputs["enableLogging"] = state ? state.enableLogging : undefined;
            resourceInputs["eptRviMode"] = state ? state.eptRviMode : undefined;
            resourceInputs["extraConfig"] = state ? state.extraConfig : undefined;
            resourceInputs["extraConfigRebootRequired"] = state ? state.extraConfigRebootRequired : undefined;
            resourceInputs["firmware"] = state ? state.firmware : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["forcePowerOff"] = state ? state.forcePowerOff : undefined;
            resourceInputs["guestId"] = state ? state.guestId : undefined;
            resourceInputs["guestIpAddresses"] = state ? state.guestIpAddresses : undefined;
            resourceInputs["hardwareVersion"] = state ? state.hardwareVersion : undefined;
            resourceInputs["hostSystemId"] = state ? state.hostSystemId : undefined;
            resourceInputs["hvMode"] = state ? state.hvMode : undefined;
            resourceInputs["ideControllerCount"] = state ? state.ideControllerCount : undefined;
            resourceInputs["ignoredGuestIps"] = state ? state.ignoredGuestIps : undefined;
            resourceInputs["imported"] = state ? state.imported : undefined;
            resourceInputs["latencySensitivity"] = state ? state.latencySensitivity : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["memoryHotAddEnabled"] = state ? state.memoryHotAddEnabled : undefined;
            resourceInputs["memoryLimit"] = state ? state.memoryLimit : undefined;
            resourceInputs["memoryReservation"] = state ? state.memoryReservation : undefined;
            resourceInputs["memoryShareCount"] = state ? state.memoryShareCount : undefined;
            resourceInputs["memoryShareLevel"] = state ? state.memoryShareLevel : undefined;
            resourceInputs["migrateWaitTimeout"] = state ? state.migrateWaitTimeout : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nestedHvEnabled"] = state ? state.nestedHvEnabled : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["numCoresPerSocket"] = state ? state.numCoresPerSocket : undefined;
            resourceInputs["numCpus"] = state ? state.numCpus : undefined;
            resourceInputs["ovfDeploy"] = state ? state.ovfDeploy : undefined;
            resourceInputs["pciDeviceIds"] = state ? state.pciDeviceIds : undefined;
            resourceInputs["powerState"] = state ? state.powerState : undefined;
            resourceInputs["poweronTimeout"] = state ? state.poweronTimeout : undefined;
            resourceInputs["rebootRequired"] = state ? state.rebootRequired : undefined;
            resourceInputs["replaceTrigger"] = state ? state.replaceTrigger : undefined;
            resourceInputs["resourcePoolId"] = state ? state.resourcePoolId : undefined;
            resourceInputs["runToolsScriptsAfterPowerOn"] = state ? state.runToolsScriptsAfterPowerOn : undefined;
            resourceInputs["runToolsScriptsAfterResume"] = state ? state.runToolsScriptsAfterResume : undefined;
            resourceInputs["runToolsScriptsBeforeGuestReboot"] = state ? state.runToolsScriptsBeforeGuestReboot : undefined;
            resourceInputs["runToolsScriptsBeforeGuestShutdown"] = state ? state.runToolsScriptsBeforeGuestShutdown : undefined;
            resourceInputs["runToolsScriptsBeforeGuestStandby"] = state ? state.runToolsScriptsBeforeGuestStandby : undefined;
            resourceInputs["sataControllerCount"] = state ? state.sataControllerCount : undefined;
            resourceInputs["scsiBusSharing"] = state ? state.scsiBusSharing : undefined;
            resourceInputs["scsiControllerCount"] = state ? state.scsiControllerCount : undefined;
            resourceInputs["scsiType"] = state ? state.scsiType : undefined;
            resourceInputs["shutdownWaitTimeout"] = state ? state.shutdownWaitTimeout : undefined;
            resourceInputs["storagePolicyId"] = state ? state.storagePolicyId : undefined;
            resourceInputs["swapPlacementPolicy"] = state ? state.swapPlacementPolicy : undefined;
            resourceInputs["syncTimeWithHost"] = state ? state.syncTimeWithHost : undefined;
            resourceInputs["syncTimeWithHostPeriodically"] = state ? state.syncTimeWithHostPeriodically : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["toolsUpgradePolicy"] = state ? state.toolsUpgradePolicy : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vapp"] = state ? state.vapp : undefined;
            resourceInputs["vappTransports"] = state ? state.vappTransports : undefined;
            resourceInputs["vbsEnabled"] = state ? state.vbsEnabled : undefined;
            resourceInputs["vmwareToolsStatus"] = state ? state.vmwareToolsStatus : undefined;
            resourceInputs["vmxPath"] = state ? state.vmxPath : undefined;
            resourceInputs["vvtdEnabled"] = state ? state.vvtdEnabled : undefined;
            resourceInputs["waitForGuestIpTimeout"] = state ? state.waitForGuestIpTimeout : undefined;
            resourceInputs["waitForGuestNetRoutable"] = state ? state.waitForGuestNetRoutable : undefined;
            resourceInputs["waitForGuestNetTimeout"] = state ? state.waitForGuestNetTimeout : undefined;
        } else {
            const args = argsOrState as VirtualMachineArgs | undefined;
            if ((!args || args.resourcePoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourcePoolId'");
            }
            resourceInputs["alternateGuestName"] = args ? args.alternateGuestName : undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["bootDelay"] = args ? args.bootDelay : undefined;
            resourceInputs["bootRetryDelay"] = args ? args.bootRetryDelay : undefined;
            resourceInputs["bootRetryEnabled"] = args ? args.bootRetryEnabled : undefined;
            resourceInputs["cdroms"] = args ? args.cdroms : undefined;
            resourceInputs["clone"] = args ? args.clone : undefined;
            resourceInputs["cpuHotAddEnabled"] = args ? args.cpuHotAddEnabled : undefined;
            resourceInputs["cpuHotRemoveEnabled"] = args ? args.cpuHotRemoveEnabled : undefined;
            resourceInputs["cpuLimit"] = args ? args.cpuLimit : undefined;
            resourceInputs["cpuPerformanceCountersEnabled"] = args ? args.cpuPerformanceCountersEnabled : undefined;
            resourceInputs["cpuReservation"] = args ? args.cpuReservation : undefined;
            resourceInputs["cpuShareCount"] = args ? args.cpuShareCount : undefined;
            resourceInputs["cpuShareLevel"] = args ? args.cpuShareLevel : undefined;
            resourceInputs["customAttributes"] = args ? args.customAttributes : undefined;
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["datastoreClusterId"] = args ? args.datastoreClusterId : undefined;
            resourceInputs["datastoreId"] = args ? args.datastoreId : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["efiSecureBootEnabled"] = args ? args.efiSecureBootEnabled : undefined;
            resourceInputs["enableDiskUuid"] = args ? args.enableDiskUuid : undefined;
            resourceInputs["enableLogging"] = args ? args.enableLogging : undefined;
            resourceInputs["eptRviMode"] = args ? args.eptRviMode : undefined;
            resourceInputs["extraConfig"] = args ? args.extraConfig : undefined;
            resourceInputs["extraConfigRebootRequired"] = args ? args.extraConfigRebootRequired : undefined;
            resourceInputs["firmware"] = args ? args.firmware : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["forcePowerOff"] = args ? args.forcePowerOff : undefined;
            resourceInputs["guestId"] = args ? args.guestId : undefined;
            resourceInputs["hardwareVersion"] = args ? args.hardwareVersion : undefined;
            resourceInputs["hostSystemId"] = args ? args.hostSystemId : undefined;
            resourceInputs["hvMode"] = args ? args.hvMode : undefined;
            resourceInputs["ideControllerCount"] = args ? args.ideControllerCount : undefined;
            resourceInputs["ignoredGuestIps"] = args ? args.ignoredGuestIps : undefined;
            resourceInputs["latencySensitivity"] = args ? args.latencySensitivity : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["memoryHotAddEnabled"] = args ? args.memoryHotAddEnabled : undefined;
            resourceInputs["memoryLimit"] = args ? args.memoryLimit : undefined;
            resourceInputs["memoryReservation"] = args ? args.memoryReservation : undefined;
            resourceInputs["memoryShareCount"] = args ? args.memoryShareCount : undefined;
            resourceInputs["memoryShareLevel"] = args ? args.memoryShareLevel : undefined;
            resourceInputs["migrateWaitTimeout"] = args ? args.migrateWaitTimeout : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nestedHvEnabled"] = args ? args.nestedHvEnabled : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["numCoresPerSocket"] = args ? args.numCoresPerSocket : undefined;
            resourceInputs["numCpus"] = args ? args.numCpus : undefined;
            resourceInputs["ovfDeploy"] = args ? args.ovfDeploy : undefined;
            resourceInputs["pciDeviceIds"] = args ? args.pciDeviceIds : undefined;
            resourceInputs["poweronTimeout"] = args ? args.poweronTimeout : undefined;
            resourceInputs["replaceTrigger"] = args ? args.replaceTrigger : undefined;
            resourceInputs["resourcePoolId"] = args ? args.resourcePoolId : undefined;
            resourceInputs["runToolsScriptsAfterPowerOn"] = args ? args.runToolsScriptsAfterPowerOn : undefined;
            resourceInputs["runToolsScriptsAfterResume"] = args ? args.runToolsScriptsAfterResume : undefined;
            resourceInputs["runToolsScriptsBeforeGuestReboot"] = args ? args.runToolsScriptsBeforeGuestReboot : undefined;
            resourceInputs["runToolsScriptsBeforeGuestShutdown"] = args ? args.runToolsScriptsBeforeGuestShutdown : undefined;
            resourceInputs["runToolsScriptsBeforeGuestStandby"] = args ? args.runToolsScriptsBeforeGuestStandby : undefined;
            resourceInputs["sataControllerCount"] = args ? args.sataControllerCount : undefined;
            resourceInputs["scsiBusSharing"] = args ? args.scsiBusSharing : undefined;
            resourceInputs["scsiControllerCount"] = args ? args.scsiControllerCount : undefined;
            resourceInputs["scsiType"] = args ? args.scsiType : undefined;
            resourceInputs["shutdownWaitTimeout"] = args ? args.shutdownWaitTimeout : undefined;
            resourceInputs["storagePolicyId"] = args ? args.storagePolicyId : undefined;
            resourceInputs["swapPlacementPolicy"] = args ? args.swapPlacementPolicy : undefined;
            resourceInputs["syncTimeWithHost"] = args ? args.syncTimeWithHost : undefined;
            resourceInputs["syncTimeWithHostPeriodically"] = args ? args.syncTimeWithHostPeriodically : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["toolsUpgradePolicy"] = args ? args.toolsUpgradePolicy : undefined;
            resourceInputs["vapp"] = args ? args.vapp : undefined;
            resourceInputs["vbsEnabled"] = args ? args.vbsEnabled : undefined;
            resourceInputs["vvtdEnabled"] = args ? args.vvtdEnabled : undefined;
            resourceInputs["waitForGuestIpTimeout"] = args ? args.waitForGuestIpTimeout : undefined;
            resourceInputs["waitForGuestNetRoutable"] = args ? args.waitForGuestNetRoutable : undefined;
            resourceInputs["waitForGuestNetTimeout"] = args ? args.waitForGuestNetTimeout : undefined;
            resourceInputs["changeVersion"] = undefined /*out*/;
            resourceInputs["defaultIpAddress"] = undefined /*out*/;
            resourceInputs["guestIpAddresses"] = undefined /*out*/;
            resourceInputs["imported"] = undefined /*out*/;
            resourceInputs["moid"] = undefined /*out*/;
            resourceInputs["powerState"] = undefined /*out*/;
            resourceInputs["rebootRequired"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
            resourceInputs["vappTransports"] = undefined /*out*/;
            resourceInputs["vmwareToolsStatus"] = undefined /*out*/;
            resourceInputs["vmxPath"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualMachine.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachine resources.
 */
export interface VirtualMachineState {
    /**
     * The guest name for the operating system when `guestId` is `otherGuest` or `otherGuest64`.
     */
    alternateGuestName?: pulumi.Input<string>;
    /**
     * A user-provided description of the virtual machine.
     */
    annotation?: pulumi.Input<string>;
    /**
     * The number of milliseconds to wait before starting the boot sequence. The default is no delay.
     */
    bootDelay?: pulumi.Input<number>;
    /**
     * The number of milliseconds to wait before retrying the boot sequence. This option is only valid if `bootRetryEnabled` is `true`. Default: `10000` (10 seconds).
     */
    bootRetryDelay?: pulumi.Input<number>;
    /**
     * If set to `true`, a virtual machine that fails to boot will try again after the delay defined in `bootRetryDelay`. Default: `false`.
     */
    bootRetryEnabled?: pulumi.Input<boolean>;
    /**
     * A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.
     */
    cdroms?: pulumi.Input<pulumi.Input<inputs.VirtualMachineCdrom>[]>;
    /**
     * A unique identifier for a given version of the last configuration was applied.
     */
    changeVersion?: pulumi.Input<string>;
    /**
     * When specified, the virtual machine will be created as a clone of a specified template. Optional customization options can be submitted for the resource. See creating a virtual machine from a template for more information.
     */
    clone?: pulumi.Input<inputs.VirtualMachineClone>;
    /**
     * Allow CPUs to be added to the virtual machine while it is powered on.
     */
    cpuHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * Allow CPUs to be removed to the virtual machine while it is powered on.
     */
    cpuHotRemoveEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum amount of CPU (in MHz) that the virtual machine can consume, regardless of available resources. The default is no limit.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Enable CPU performance counters on the virtual machine. Default: `false`.
     */
    cpuPerformanceCountersEnabled?: pulumi.Input<boolean>;
    /**
     * The amount of CPU (in MHz) that the virtual machine is guaranteed. The default is no reservation.
     */
    cpuReservation?: pulumi.Input<number>;
    /**
     * The number of CPU shares allocated to the virtual machine when the `cpuShareLevel` is `custom`.
     */
    cpuShareCount?: pulumi.Input<number>;
    /**
     * The allocation level for the virtual machine CPU resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
     */
    cpuShareLevel?: pulumi.Input<string>;
    /**
     * Map of custom attribute ids to attribute value strings to set for virtual machine. Please refer to the `vsphereCustomAttributes` resource for more information on setting custom attributes.
     *
     * > **NOTE:** Custom attributes requires vCenter Server and is not supported on direct ESXi host connections.
     */
    customAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The datacenter ID. Required only when deploying an OVF/OVA template.
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * The managed object reference ID of the datastore cluster in which to place the virtual machine. This setting applies to entire virtual machine and implies that you wish to use vSphere Storage DRS with the virtual machine. See the section on virtual machine migration for more information on modifying this value.
     *
     * > **NOTE:** One of `datastoreId` or `datastoreClusterId` must be specified.
     *
     * > **NOTE:** Use of `datastoreClusterId` requires vSphere Storage DRS to be enabled on the specified datastore cluster.
     *
     * > **NOTE:** The `datastoreClusterId` setting applies to the entire virtual machine resource. You cannot assign individual individual disks to datastore clusters. In addition, you cannot use the `attach` setting to attach external disks on virtual machines that are assigned to datastore clusters.
     */
    datastoreClusterId?: pulumi.Input<string>;
    /**
     * The datastore ID that on which the ISO is located. Required for using a datastore ISO. Conflicts with `clientDevice`.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
     */
    defaultIpAddress?: pulumi.Input<string>;
    /**
     * A specification for a virtual disk device on the virtual machine. See disk options for more information.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDisk>[]>;
    /**
     * Use this option to enable EFI secure boot when the `firmware` type is set to is `efi`. Default: `false`.
     *
     * > **NOTE:** EFI secure boot is only available on vSphere 6.5 and later.
     */
    efiSecureBootEnabled?: pulumi.Input<boolean>;
    /**
     * Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest. Default: `false`.
     */
    enableDiskUuid?: pulumi.Input<boolean>;
    /**
     * Enable logging of virtual machine events to a log file stored in the virtual machine directory. Default: `false`.
     */
    enableLogging?: pulumi.Input<boolean>;
    /**
     * The EPT/RVI (hardware memory virtualization) setting for the virtual machine. One of `automatic`, `on`, or `off`. Default: `automatic`.
     */
    eptRviMode?: pulumi.Input<string>;
    /**
     * Extra configuration data for the virtual machine. Can be used to supply advanced parameters not normally in configuration, such as instance metadata and userdata.
     *
     * > **NOTE:** Do not use `extraConfig` when working with a template imported from OVF/OVA as your settings may be ignored. Use the `vapp` block `properties` section as described in Using vApp Properties for OVF/OVA Configuration.
     */
    extraConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Allow the virtual machine to be rebooted when a change to `extraConfig` occurs. Default: `true`.
     */
    extraConfigRebootRequired?: pulumi.Input<boolean>;
    /**
     * The firmware for the virtual machine. One of `bios` or `efi`.
     */
    firmware?: pulumi.Input<string>;
    /**
     * The path to the virtual machine folder in which to place the virtual machine, relative to the datacenter path (`/<datacenter-name>/vm`).  For example, `/dc-01/vm/foo`
     */
    folder?: pulumi.Input<string>;
    /**
     * If a guest shutdown failed or times out while updating or destroying (see `shutdownWaitTimeout`), force the power-off of the virtual machine. Default: `true`.
     */
    forcePowerOff?: pulumi.Input<boolean>;
    /**
     * The guest ID for the operating system type. For a full list of possible values, see [here][vmware-docs-guest-ids]. Default: `otherGuest64`.
     *
     * [vmware-docs-guest-ids]: https://vdc-repo.vmware.com/vmwb-repository/dcr-public/184bb3ba-6fa8-4574-a767-d0c96e2a38f4/ba9422ef-405c-47dd-8553-e11b619185b2/SDK/vsphere-ws/docs/ReferenceGuide/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
     */
    guestId?: pulumi.Input<string>;
    /**
     * The current list of IP addresses on this machine, including the value of `defaultIpAddress`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
     */
    guestIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The hardware version number. Valid range is from 4 to 21. The hardware version cannot be downgraded. See virtual machine hardware [versions][virtual-machine-hardware-versions] and [compatibility][virtual-machine-hardware-compatibility] for more information on supported settings.
     *
     * [virtual-machine-hardware-versions]: https://kb.vmware.com/s/article/1003746
     * [virtual-machine-hardware-compatibility]: https://kb.vmware.com/s/article/2007240
     */
    hardwareVersion?: pulumi.Input<number>;
    /**
     * The managed object reference ID of a host on which to place the virtual machine. See the section on virtual machine migration for more information on modifying this value. When using a vSphere cluster, if a `hostSystemId` is not supplied, vSphere will select a host in the cluster to place the virtual machine, according to any defaults or vSphere DRS placement policies.
     */
    hostSystemId?: pulumi.Input<string>;
    /**
     * The hardware virtualization (non-nested) setting for the virtual machine. One of `hvAuto`, `hvOn`, or `hvOff`. Default: `hvAuto`.
     */
    hvMode?: pulumi.Input<string>;
    /**
     * The number of IDE controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: `2`.
     */
    ideControllerCount?: pulumi.Input<number>;
    /**
     * List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: `[]`.
     */
    ignoredGuestIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
     */
    imported?: pulumi.Input<boolean>;
    /**
     * Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard devices. One of `low`, `normal`, `medium`, or `high`.
     *
     * > **NOTE:** On higher sensitivities, you may need to adjust the `memoryReservation` to the full amount of memory provisioned for the virtual machine.
     */
    latencySensitivity?: pulumi.Input<string>;
    /**
     * The memory size to assign to the virtual machine, in MB. Default: `1024` (1 GB).
     */
    memory?: pulumi.Input<number>;
    /**
     * Allow memory to be added to the virtual machine while it is powered on.
     *
     * > **NOTE:** CPU and memory hot add options are not available on all guest operating systems. Please refer to the [VMware Guest OS Compatibility Guide][vmware-docs-compat-guide] to which settings are allow for your guest operating system. In addition, at least one `pulumi up` must be run before you are able to use CPU and memory hot add.
     *
     * [vmware-docs-compat-guide]: http://partnerweb.vmware.com/comp_guide2/pdf/VMware_GOS_Compatibility_Guide.pdf
     *
     * > **NOTE:** For Linux 64-bit guest operating systems with less than or equal to 3GB, the virtual machine must powered off to add memory beyond 3GB. Subsequent hot add of memory does not require the virtual machine to be powered-off to apply the plan. Please refer to [VMware KB 2008405][vmware-kb-2008405].
     *
     * [vmware-kb-2008405]: https://kb.vmware.com/s/article/2008405
     */
    memoryHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum amount of memory (in MB) that th virtual machine can consume, regardless of available resources. The default is no limit.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * The amount of memory (in MB) that the virtual machine is guaranteed. The default is no reservation.
     */
    memoryReservation?: pulumi.Input<number>;
    /**
     * The number of memory shares allocated to the virtual machine when the `memoryShareLevel` is `custom`.
     */
    memoryShareCount?: pulumi.Input<number>;
    /**
     * The allocation level for the virtual machine memory resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
     */
    memoryShareLevel?: pulumi.Input<string>;
    /**
     * The amount of time, in minutes, to wait for a virtual machine migration to complete before failing. Default: `10` minutes. See the section on virtual machine migration for more information.
     */
    migrateWaitTimeout?: pulumi.Input<number>;
    /**
     * The managed object reference ID of the created virtual machine.
     */
    moid?: pulumi.Input<string>;
    /**
     * The name of the virtual machine.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable nested hardware virtualization on the virtual machine, facilitating nested virtualization in the guest operating system. Default: `false`.
     */
    nestedHvEnabled?: pulumi.Input<boolean>;
    /**
     * A specification for a virtual NIC on the virtual machine. See network interface options for more information.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNetworkInterface>[]>;
    /**
     * The number of cores per socket in the virtual machine. The number of vCPUs on the virtual machine will be `numCpus` divided by `numCoresPerSocket`. If specified, the value supplied to `numCpus` must be evenly divisible by this value. Default: `1`.
     */
    numCoresPerSocket?: pulumi.Input<number>;
    /**
     * The total number of virtual processor cores to assign to the virtual machine. Default: `1`.
     */
    numCpus?: pulumi.Input<number>;
    /**
     * When specified, the virtual machine will be deployed from the provided OVF/OVA template. See creating a virtual machine from an OVF/OVA template for more information.
     */
    ovfDeploy?: pulumi.Input<inputs.VirtualMachineOvfDeploy>;
    /**
     * List of host PCI device IDs in which to create PCI passthroughs.
     *
     * > **NOTE:** Cloning requires vCenter Server and is not supported on direct ESXi host connections.
     */
    pciDeviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
     */
    powerState?: pulumi.Input<string>;
    /**
     * The amount of time, in seconds, that we will be trying to power on a VM
     */
    poweronTimeout?: pulumi.Input<number>;
    /**
     * Value internal to Terraform used to determine if a configuration set change requires a reboot.
     */
    rebootRequired?: pulumi.Input<boolean>;
    /**
     * Triggers replacement of resource whenever it changes.
     *
     * For example, `replaceTrigger = sha256(format("%!s(MISSING)-%!s(MISSING)",data.template_file.cloud_init_metadata.rendered,data.template_file.cloud_init_userdata.rendered))` will fingerprint the changes in cloud-init metadata and userdata templates. This will enable a replacement of the resource whenever the dependant template renders a new configuration. (Forces a replacement.)
     */
    replaceTrigger?: pulumi.Input<string>;
    /**
     * The managed object reference ID of the resource pool in which to place the virtual machine. See the Virtual Machine Migration section for more information on modifying this value.
     *
     * > **NOTE:** All clusters and standalone hosts have a default root resource pool. This resource argument does not directly accept the cluster or standalone host resource. For more information, see the section on specifying the Root Resource Pool in the `vsphere.ResourcePool` data source documentation on using the root resource pool.
     */
    resourcePoolId?: pulumi.Input<string>;
    /**
     * Enable post-power-on scripts to run when VMware Tools is installed. Default: `true`.
     */
    runToolsScriptsAfterPowerOn?: pulumi.Input<boolean>;
    /**
     * Enable ost-resume scripts to run when VMware Tools is installed. Default: `true`.
     */
    runToolsScriptsAfterResume?: pulumi.Input<boolean>;
    /**
     * Enable pre-reboot scripts to run when VMware Tools is installed. Default: `false`.
     */
    runToolsScriptsBeforeGuestReboot?: pulumi.Input<boolean>;
    /**
     * Enable pre-shutdown scripts to run when VMware Tools is installed. Default: `true`.
     */
    runToolsScriptsBeforeGuestShutdown?: pulumi.Input<boolean>;
    /**
     * Enable pre-standby scripts to run when VMware Tools is installed. Default: `true`.
     */
    runToolsScriptsBeforeGuestStandby?: pulumi.Input<boolean>;
    /**
     * The number of SATA controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
     * you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
     * controllers.
     */
    sataControllerCount?: pulumi.Input<number>;
    /**
     * The type of SCSI bus sharing for the virtual machine SCSI controller. One of `physicalSharing`, `virtualSharing`, and `noSharing`. Default: `noSharing`.
     */
    scsiBusSharing?: pulumi.Input<string>;
    /**
     * The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
     * you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
     * controllers.
     */
    scsiControllerCount?: pulumi.Input<number>;
    /**
     * The SCSI controller type for the virtual machine. One of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic SAS) or `pvscsi` (VMware Paravirtual). Default: `pvscsi`.
     */
    scsiType?: pulumi.Input<string>;
    /**
     * The amount of time, in minutes, to wait for a graceful guest shutdown when making necessary updates to the virtual machine. If `forcePowerOff` is set to `true`, the virtual machine will be forced to power-off after the timeout, otherwise an error is returned. Default: `3` minutes.
     */
    shutdownWaitTimeout?: pulumi.Input<number>;
    /**
     * The UUID of the storage policy to assign to the virtual disk.
     */
    storagePolicyId?: pulumi.Input<string>;
    /**
     * The swap file placement policy for the virtual machine. One of `inherit`, `hostLocal`, or `vmDirectory`. Default: `inherit`.
     */
    swapPlacementPolicy?: pulumi.Input<string>;
    /**
     * Enable the guest operating system to synchronization its clock with the host when the virtual machine is powered on or resumed. Requires vSphere 7.0 Update 1 and later. Requires VMware Tools to be installed. Default: `false`.
     */
    syncTimeWithHost?: pulumi.Input<boolean>;
    /**
     * Enable the guest operating system to periodically synchronize its clock with the host. Requires vSphere 7.0 Update 1 and later. On previous versions, setting `syncTimeWithHost` is will enable periodic synchronization. Requires VMware Tools to be installed. Default: `false`.
     */
    syncTimeWithHostPeriodically?: pulumi.Input<boolean>;
    /**
     * The IDs of any tags to attach to this resource. Please refer to the `vsphere.Tag` resource for more information on applying tags to virtual machine resources.
     *
     * > **NOTE:** Tagging support is unsupported on direct ESXi host connections and requires vCenter Server instance.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable automatic upgrade of the VMware Tools version when the virtual machine is rebooted. If necessary, VMware Tools is upgraded to the latest version supported by the host on which the virtual machine is running. Requires VMware Tools to be installed. One of `manual` or `upgradeAtPowerCycle`. Default: `manual`.
     */
    toolsUpgradePolicy?: pulumi.Input<string>;
    /**
     * The UUID of the virtual disk VMDK file. This is used to track the virtual disk on the virtual machine.
     */
    uuid?: pulumi.Input<string>;
    /**
     * Used for vApp configurations. The only sub-key available is `properties`, which is a key/value map of properties for virtual machines imported from and OVF/OVA. See Using vApp Properties for OVF/OVA Configuration for more information.
     */
    vapp?: pulumi.Input<inputs.VirtualMachineVapp>;
    /**
     * Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
     */
    vappTransports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable Virtualization Based Security. Requires `firmware` to be `efi`. In addition, `vvtdEnabled`, `nestedHvEnabled`, and `efiSecureBootEnabled` must all have a value of `true`. Supported on vSphere 6.7 and later. Default: `false`.
     */
    vbsEnabled?: pulumi.Input<boolean>;
    /**
     * The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
     */
    vmwareToolsStatus?: pulumi.Input<string>;
    /**
     * The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
     */
    vmxPath?: pulumi.Input<string>;
    /**
     * Enable Intel Virtualization Technology for Directed I/O for the virtual machine (_I/O MMU_ in the vSphere Client). Supported on vSphere 6.7 and later. Default: `false`.
     */
    vvtdEnabled?: pulumi.Input<boolean>;
    /**
     * The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. This should only be used if the version VMware Tools does not allow the `waitForGuestNetTimeout` waiter to be used. A value less than `1` disables the waiter. Default: `0`.
     */
    waitForGuestIpTimeout?: pulumi.Input<number>;
    /**
     * Controls whether or not the guest network waiter waits for a routable address. When `false`, the waiter does not wait for a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria. This property is ignored if the `waitForGuestIpTimeout` waiter is used. Default: `true`.
     */
    waitForGuestNetRoutable?: pulumi.Input<boolean>;
    /**
     * The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. Older versions of VMware Tools do not populate this property. In those cases, this waiter can be disabled and the `waitForGuestIpTimeout` waiter can be used instead. A value less than `1` disables the waiter. Default: `5` minutes.
     */
    waitForGuestNetTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VirtualMachine resource.
 */
export interface VirtualMachineArgs {
    /**
     * The guest name for the operating system when `guestId` is `otherGuest` or `otherGuest64`.
     */
    alternateGuestName?: pulumi.Input<string>;
    /**
     * A user-provided description of the virtual machine.
     */
    annotation?: pulumi.Input<string>;
    /**
     * The number of milliseconds to wait before starting the boot sequence. The default is no delay.
     */
    bootDelay?: pulumi.Input<number>;
    /**
     * The number of milliseconds to wait before retrying the boot sequence. This option is only valid if `bootRetryEnabled` is `true`. Default: `10000` (10 seconds).
     */
    bootRetryDelay?: pulumi.Input<number>;
    /**
     * If set to `true`, a virtual machine that fails to boot will try again after the delay defined in `bootRetryDelay`. Default: `false`.
     */
    bootRetryEnabled?: pulumi.Input<boolean>;
    /**
     * A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.
     */
    cdroms?: pulumi.Input<pulumi.Input<inputs.VirtualMachineCdrom>[]>;
    /**
     * When specified, the virtual machine will be created as a clone of a specified template. Optional customization options can be submitted for the resource. See creating a virtual machine from a template for more information.
     */
    clone?: pulumi.Input<inputs.VirtualMachineClone>;
    /**
     * Allow CPUs to be added to the virtual machine while it is powered on.
     */
    cpuHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * Allow CPUs to be removed to the virtual machine while it is powered on.
     */
    cpuHotRemoveEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum amount of CPU (in MHz) that the virtual machine can consume, regardless of available resources. The default is no limit.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Enable CPU performance counters on the virtual machine. Default: `false`.
     */
    cpuPerformanceCountersEnabled?: pulumi.Input<boolean>;
    /**
     * The amount of CPU (in MHz) that the virtual machine is guaranteed. The default is no reservation.
     */
    cpuReservation?: pulumi.Input<number>;
    /**
     * The number of CPU shares allocated to the virtual machine when the `cpuShareLevel` is `custom`.
     */
    cpuShareCount?: pulumi.Input<number>;
    /**
     * The allocation level for the virtual machine CPU resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
     */
    cpuShareLevel?: pulumi.Input<string>;
    /**
     * Map of custom attribute ids to attribute value strings to set for virtual machine. Please refer to the `vsphereCustomAttributes` resource for more information on setting custom attributes.
     *
     * > **NOTE:** Custom attributes requires vCenter Server and is not supported on direct ESXi host connections.
     */
    customAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The datacenter ID. Required only when deploying an OVF/OVA template.
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * The managed object reference ID of the datastore cluster in which to place the virtual machine. This setting applies to entire virtual machine and implies that you wish to use vSphere Storage DRS with the virtual machine. See the section on virtual machine migration for more information on modifying this value.
     *
     * > **NOTE:** One of `datastoreId` or `datastoreClusterId` must be specified.
     *
     * > **NOTE:** Use of `datastoreClusterId` requires vSphere Storage DRS to be enabled on the specified datastore cluster.
     *
     * > **NOTE:** The `datastoreClusterId` setting applies to the entire virtual machine resource. You cannot assign individual individual disks to datastore clusters. In addition, you cannot use the `attach` setting to attach external disks on virtual machines that are assigned to datastore clusters.
     */
    datastoreClusterId?: pulumi.Input<string>;
    /**
     * The datastore ID that on which the ISO is located. Required for using a datastore ISO. Conflicts with `clientDevice`.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * A specification for a virtual disk device on the virtual machine. See disk options for more information.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDisk>[]>;
    /**
     * Use this option to enable EFI secure boot when the `firmware` type is set to is `efi`. Default: `false`.
     *
     * > **NOTE:** EFI secure boot is only available on vSphere 6.5 and later.
     */
    efiSecureBootEnabled?: pulumi.Input<boolean>;
    /**
     * Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest. Default: `false`.
     */
    enableDiskUuid?: pulumi.Input<boolean>;
    /**
     * Enable logging of virtual machine events to a log file stored in the virtual machine directory. Default: `false`.
     */
    enableLogging?: pulumi.Input<boolean>;
    /**
     * The EPT/RVI (hardware memory virtualization) setting for the virtual machine. One of `automatic`, `on`, or `off`. Default: `automatic`.
     */
    eptRviMode?: pulumi.Input<string>;
    /**
     * Extra configuration data for the virtual machine. Can be used to supply advanced parameters not normally in configuration, such as instance metadata and userdata.
     *
     * > **NOTE:** Do not use `extraConfig` when working with a template imported from OVF/OVA as your settings may be ignored. Use the `vapp` block `properties` section as described in Using vApp Properties for OVF/OVA Configuration.
     */
    extraConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Allow the virtual machine to be rebooted when a change to `extraConfig` occurs. Default: `true`.
     */
    extraConfigRebootRequired?: pulumi.Input<boolean>;
    /**
     * The firmware for the virtual machine. One of `bios` or `efi`.
     */
    firmware?: pulumi.Input<string>;
    /**
     * The path to the virtual machine folder in which to place the virtual machine, relative to the datacenter path (`/<datacenter-name>/vm`).  For example, `/dc-01/vm/foo`
     */
    folder?: pulumi.Input<string>;
    /**
     * If a guest shutdown failed or times out while updating or destroying (see `shutdownWaitTimeout`), force the power-off of the virtual machine. Default: `true`.
     */
    forcePowerOff?: pulumi.Input<boolean>;
    /**
     * The guest ID for the operating system type. For a full list of possible values, see [here][vmware-docs-guest-ids]. Default: `otherGuest64`.
     *
     * [vmware-docs-guest-ids]: https://vdc-repo.vmware.com/vmwb-repository/dcr-public/184bb3ba-6fa8-4574-a767-d0c96e2a38f4/ba9422ef-405c-47dd-8553-e11b619185b2/SDK/vsphere-ws/docs/ReferenceGuide/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
     */
    guestId?: pulumi.Input<string>;
    /**
     * The hardware version number. Valid range is from 4 to 21. The hardware version cannot be downgraded. See virtual machine hardware [versions][virtual-machine-hardware-versions] and [compatibility][virtual-machine-hardware-compatibility] for more information on supported settings.
     *
     * [virtual-machine-hardware-versions]: https://kb.vmware.com/s/article/1003746
     * [virtual-machine-hardware-compatibility]: https://kb.vmware.com/s/article/2007240
     */
    hardwareVersion?: pulumi.Input<number>;
    /**
     * The managed object reference ID of a host on which to place the virtual machine. See the section on virtual machine migration for more information on modifying this value. When using a vSphere cluster, if a `hostSystemId` is not supplied, vSphere will select a host in the cluster to place the virtual machine, according to any defaults or vSphere DRS placement policies.
     */
    hostSystemId?: pulumi.Input<string>;
    /**
     * The hardware virtualization (non-nested) setting for the virtual machine. One of `hvAuto`, `hvOn`, or `hvOff`. Default: `hvAuto`.
     */
    hvMode?: pulumi.Input<string>;
    /**
     * The number of IDE controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: `2`.
     */
    ideControllerCount?: pulumi.Input<number>;
    /**
     * List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: `[]`.
     */
    ignoredGuestIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard devices. One of `low`, `normal`, `medium`, or `high`.
     *
     * > **NOTE:** On higher sensitivities, you may need to adjust the `memoryReservation` to the full amount of memory provisioned for the virtual machine.
     */
    latencySensitivity?: pulumi.Input<string>;
    /**
     * The memory size to assign to the virtual machine, in MB. Default: `1024` (1 GB).
     */
    memory?: pulumi.Input<number>;
    /**
     * Allow memory to be added to the virtual machine while it is powered on.
     *
     * > **NOTE:** CPU and memory hot add options are not available on all guest operating systems. Please refer to the [VMware Guest OS Compatibility Guide][vmware-docs-compat-guide] to which settings are allow for your guest operating system. In addition, at least one `pulumi up` must be run before you are able to use CPU and memory hot add.
     *
     * [vmware-docs-compat-guide]: http://partnerweb.vmware.com/comp_guide2/pdf/VMware_GOS_Compatibility_Guide.pdf
     *
     * > **NOTE:** For Linux 64-bit guest operating systems with less than or equal to 3GB, the virtual machine must powered off to add memory beyond 3GB. Subsequent hot add of memory does not require the virtual machine to be powered-off to apply the plan. Please refer to [VMware KB 2008405][vmware-kb-2008405].
     *
     * [vmware-kb-2008405]: https://kb.vmware.com/s/article/2008405
     */
    memoryHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum amount of memory (in MB) that th virtual machine can consume, regardless of available resources. The default is no limit.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * The amount of memory (in MB) that the virtual machine is guaranteed. The default is no reservation.
     */
    memoryReservation?: pulumi.Input<number>;
    /**
     * The number of memory shares allocated to the virtual machine when the `memoryShareLevel` is `custom`.
     */
    memoryShareCount?: pulumi.Input<number>;
    /**
     * The allocation level for the virtual machine memory resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
     */
    memoryShareLevel?: pulumi.Input<string>;
    /**
     * The amount of time, in minutes, to wait for a virtual machine migration to complete before failing. Default: `10` minutes. See the section on virtual machine migration for more information.
     */
    migrateWaitTimeout?: pulumi.Input<number>;
    /**
     * The name of the virtual machine.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable nested hardware virtualization on the virtual machine, facilitating nested virtualization in the guest operating system. Default: `false`.
     */
    nestedHvEnabled?: pulumi.Input<boolean>;
    /**
     * A specification for a virtual NIC on the virtual machine. See network interface options for more information.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNetworkInterface>[]>;
    /**
     * The number of cores per socket in the virtual machine. The number of vCPUs on the virtual machine will be `numCpus` divided by `numCoresPerSocket`. If specified, the value supplied to `numCpus` must be evenly divisible by this value. Default: `1`.
     */
    numCoresPerSocket?: pulumi.Input<number>;
    /**
     * The total number of virtual processor cores to assign to the virtual machine. Default: `1`.
     */
    numCpus?: pulumi.Input<number>;
    /**
     * When specified, the virtual machine will be deployed from the provided OVF/OVA template. See creating a virtual machine from an OVF/OVA template for more information.
     */
    ovfDeploy?: pulumi.Input<inputs.VirtualMachineOvfDeploy>;
    /**
     * List of host PCI device IDs in which to create PCI passthroughs.
     *
     * > **NOTE:** Cloning requires vCenter Server and is not supported on direct ESXi host connections.
     */
    pciDeviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of time, in seconds, that we will be trying to power on a VM
     */
    poweronTimeout?: pulumi.Input<number>;
    /**
     * Triggers replacement of resource whenever it changes.
     *
     * For example, `replaceTrigger = sha256(format("%!s(MISSING)-%!s(MISSING)",data.template_file.cloud_init_metadata.rendered,data.template_file.cloud_init_userdata.rendered))` will fingerprint the changes in cloud-init metadata and userdata templates. This will enable a replacement of the resource whenever the dependant template renders a new configuration. (Forces a replacement.)
     */
    replaceTrigger?: pulumi.Input<string>;
    /**
     * The managed object reference ID of the resource pool in which to place the virtual machine. See the Virtual Machine Migration section for more information on modifying this value.
     *
     * > **NOTE:** All clusters and standalone hosts have a default root resource pool. This resource argument does not directly accept the cluster or standalone host resource. For more information, see the section on specifying the Root Resource Pool in the `vsphere.ResourcePool` data source documentation on using the root resource pool.
     */
    resourcePoolId: pulumi.Input<string>;
    /**
     * Enable post-power-on scripts to run when VMware Tools is installed. Default: `true`.
     */
    runToolsScriptsAfterPowerOn?: pulumi.Input<boolean>;
    /**
     * Enable ost-resume scripts to run when VMware Tools is installed. Default: `true`.
     */
    runToolsScriptsAfterResume?: pulumi.Input<boolean>;
    /**
     * Enable pre-reboot scripts to run when VMware Tools is installed. Default: `false`.
     */
    runToolsScriptsBeforeGuestReboot?: pulumi.Input<boolean>;
    /**
     * Enable pre-shutdown scripts to run when VMware Tools is installed. Default: `true`.
     */
    runToolsScriptsBeforeGuestShutdown?: pulumi.Input<boolean>;
    /**
     * Enable pre-standby scripts to run when VMware Tools is installed. Default: `true`.
     */
    runToolsScriptsBeforeGuestStandby?: pulumi.Input<boolean>;
    /**
     * The number of SATA controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
     * you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
     * controllers.
     */
    sataControllerCount?: pulumi.Input<number>;
    /**
     * The type of SCSI bus sharing for the virtual machine SCSI controller. One of `physicalSharing`, `virtualSharing`, and `noSharing`. Default: `noSharing`.
     */
    scsiBusSharing?: pulumi.Input<string>;
    /**
     * The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
     * you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
     * controllers.
     */
    scsiControllerCount?: pulumi.Input<number>;
    /**
     * The SCSI controller type for the virtual machine. One of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic SAS) or `pvscsi` (VMware Paravirtual). Default: `pvscsi`.
     */
    scsiType?: pulumi.Input<string>;
    /**
     * The amount of time, in minutes, to wait for a graceful guest shutdown when making necessary updates to the virtual machine. If `forcePowerOff` is set to `true`, the virtual machine will be forced to power-off after the timeout, otherwise an error is returned. Default: `3` minutes.
     */
    shutdownWaitTimeout?: pulumi.Input<number>;
    /**
     * The UUID of the storage policy to assign to the virtual disk.
     */
    storagePolicyId?: pulumi.Input<string>;
    /**
     * The swap file placement policy for the virtual machine. One of `inherit`, `hostLocal`, or `vmDirectory`. Default: `inherit`.
     */
    swapPlacementPolicy?: pulumi.Input<string>;
    /**
     * Enable the guest operating system to synchronization its clock with the host when the virtual machine is powered on or resumed. Requires vSphere 7.0 Update 1 and later. Requires VMware Tools to be installed. Default: `false`.
     */
    syncTimeWithHost?: pulumi.Input<boolean>;
    /**
     * Enable the guest operating system to periodically synchronize its clock with the host. Requires vSphere 7.0 Update 1 and later. On previous versions, setting `syncTimeWithHost` is will enable periodic synchronization. Requires VMware Tools to be installed. Default: `false`.
     */
    syncTimeWithHostPeriodically?: pulumi.Input<boolean>;
    /**
     * The IDs of any tags to attach to this resource. Please refer to the `vsphere.Tag` resource for more information on applying tags to virtual machine resources.
     *
     * > **NOTE:** Tagging support is unsupported on direct ESXi host connections and requires vCenter Server instance.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable automatic upgrade of the VMware Tools version when the virtual machine is rebooted. If necessary, VMware Tools is upgraded to the latest version supported by the host on which the virtual machine is running. Requires VMware Tools to be installed. One of `manual` or `upgradeAtPowerCycle`. Default: `manual`.
     */
    toolsUpgradePolicy?: pulumi.Input<string>;
    /**
     * Used for vApp configurations. The only sub-key available is `properties`, which is a key/value map of properties for virtual machines imported from and OVF/OVA. See Using vApp Properties for OVF/OVA Configuration for more information.
     */
    vapp?: pulumi.Input<inputs.VirtualMachineVapp>;
    /**
     * Enable Virtualization Based Security. Requires `firmware` to be `efi`. In addition, `vvtdEnabled`, `nestedHvEnabled`, and `efiSecureBootEnabled` must all have a value of `true`. Supported on vSphere 6.7 and later. Default: `false`.
     */
    vbsEnabled?: pulumi.Input<boolean>;
    /**
     * Enable Intel Virtualization Technology for Directed I/O for the virtual machine (_I/O MMU_ in the vSphere Client). Supported on vSphere 6.7 and later. Default: `false`.
     */
    vvtdEnabled?: pulumi.Input<boolean>;
    /**
     * The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. This should only be used if the version VMware Tools does not allow the `waitForGuestNetTimeout` waiter to be used. A value less than `1` disables the waiter. Default: `0`.
     */
    waitForGuestIpTimeout?: pulumi.Input<number>;
    /**
     * Controls whether or not the guest network waiter waits for a routable address. When `false`, the waiter does not wait for a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria. This property is ignored if the `waitForGuestIpTimeout` waiter is used. Default: `true`.
     */
    waitForGuestNetRoutable?: pulumi.Input<boolean>;
    /**
     * The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. Older versions of VMware Tools do not populate this property. In those cases, this waiter can be disabled and the `waitForGuestIpTimeout` waiter can be used instead. A value less than `1` disables the waiter. Default: `5` minutes.
     */
    waitForGuestNetTimeout?: pulumi.Input<number>;
}
