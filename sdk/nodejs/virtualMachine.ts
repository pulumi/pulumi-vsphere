// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ### Additional Importing Requirements
 *
 * Many of the requirements for [cloning](#additional-requirements-and-notes-for-cloning) apply to importing. Although importing writes directly to the Terraform state, some rules can not be enforced during import time, so every effort should be made to ensure the correctness of the configuration before the import.
 *
 * The following requirements apply to import:
 *
 * * The disks must have a [`label`](#label) argument assigned in a convention matching `Hard Disk`, starting with disk number 0, based on each virtual disk order on the SCSI bus. As an example, a disk on SCSI controller `0` with a unit number of `0` would be labeled as `Hard Disk 0`, a disk on the same controller with a unit number of `1` would be `Hard Disk 1`, but the next disk, which is on SCSI controller `1` with a unit number of `0`, still becomes `Hard Disk 2`.
 *
 * * Disks are always imported with [`keep_on_remove`](#keep_on_remove) enabled until the first `pulumi up` run which will remove the setting for known disks. This process safeguards against naming or accounting mistakes in the disk configuration.
 *
 * * The storage controller count for the resource is set to the number of contiguous storage controllers found, starting with the controller at SCSI bus number `0`. If no storage controllers are discovered, the virtual machine is not eligible for import. For maximum compatibility, ensure that the virtual machine has the exact number of storage controllers needed and set the storage controller count accordingly.
 *
 * After importing, you should run `pulumi preview`. Unless you have changed anything else in the configuration that would cause other attributes to change. The only difference should be configuration-only changes, which are typically comprised of:
 *
 * * The [`imported`](#imported) flag will transition from `true` to `false`.
 *
 * * The [`keep_on_remove`](#keep_on_remove) of known disks will transition from `true` to `false`.
 *
 * * Configuration supplied in the [`clone`](#clone) block, if present, will be persisted to state. This initial persistence operation does not perform any cloning or customization actions, nor does it force a new resource. After the first apply operation, further changes to `clone` will force the creation of a new resource.
 *
 * These changes only update Terraform state when applied. Hence, it is safe to run when the virtual machine is running. If more settings are modified, you may need to plan maintenance accordingly for any necessary virtual machine re-configurations.
 */
export class VirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineState, opts?: pulumi.CustomResourceOptions): VirtualMachine {
        return new VirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/virtualMachine:VirtualMachine';

    /**
     * Returns true if the given object is an instance of VirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachine.__pulumiType;
    }

    /**
     * The guest name for the operating system when guestId is otherGuest or otherGuest64.
     */
    public readonly alternateGuestName!: pulumi.Output<string | undefined>;
    /**
     * User-provided description of the virtual machine.
     */
    public readonly annotation!: pulumi.Output<string>;
    /**
     * The number of milliseconds to wait before starting the boot sequence.
     */
    public readonly bootDelay!: pulumi.Output<number | undefined>;
    /**
     * The number of milliseconds to wait before retrying the boot sequence. This only valid if bootRetryEnabled is true.
     */
    public readonly bootRetryDelay!: pulumi.Output<number | undefined>;
    /**
     * If set to true, a virtual machine that fails to boot will try again after the delay defined in boot_retry_delay.
     */
    public readonly bootRetryEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A specification for a CDROM device on this virtual machine.
     */
    public readonly cdroms!: pulumi.Output<outputs.VirtualMachineCdrom[] | undefined>;
    /**
     * A unique identifier for a given version of the last configuration was applied.
     */
    public /*out*/ readonly changeVersion!: pulumi.Output<string>;
    /**
     * A specification for cloning a virtual machine from template.
     */
    public readonly clone!: pulumi.Output<outputs.VirtualMachineClone | undefined>;
    /**
     * Allow CPUs to be added to this virtual machine while it is running.
     */
    public readonly cpuHotAddEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Allow CPUs to be added to this virtual machine while it is running.
     */
    public readonly cpuHotRemoveEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
     * resources.
     */
    public readonly cpuLimit!: pulumi.Output<number | undefined>;
    /**
     * Enable CPU performance counters on this virtual machine.
     */
    public readonly cpuPerformanceCountersEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
     */
    public readonly cpuReservation!: pulumi.Output<number | undefined>;
    /**
     * The amount of shares to allocate to cpu for a custom share level.
     */
    public readonly cpuShareCount!: pulumi.Output<number>;
    /**
     * The allocation level for cpu resources. Can be one of high, low, normal, or custom.
     */
    public readonly cpuShareLevel!: pulumi.Output<string | undefined>;
    /**
     * A list of custom attributes to set on this resource.
     */
    public readonly customAttributes!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the datacenter where the VM is to be created.
     */
    public readonly datacenterId!: pulumi.Output<string | undefined>;
    /**
     * The ID of a datastore cluster to put the virtual machine in.
     */
    public readonly datastoreClusterId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the virtual machine's datastore. The virtual machine configuration is placed here, along with any virtual
     * disks that are created without datastores.
     */
    public readonly datastoreId!: pulumi.Output<string>;
    /**
     * The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
     */
    public /*out*/ readonly defaultIpAddress!: pulumi.Output<string>;
    /**
     * A specification for a virtual disk device on this virtual machine.
     */
    public readonly disks!: pulumi.Output<outputs.VirtualMachineDisk[]>;
    /**
     * When the boot type set in firmware is efi, this enables EFI secure boot.
     */
    public readonly efiSecureBootEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest.
     */
    public readonly enableDiskUuid!: pulumi.Output<boolean | undefined>;
    /**
     * Enable logging on this virtual machine.
     */
    public readonly enableLogging!: pulumi.Output<boolean | undefined>;
    /**
     * The EPT/RVI (hardware memory virtualization) setting for this virtual machine. Can be one of automatic, on, or off.
     */
    public readonly eptRviMode!: pulumi.Output<string>;
    /**
     * Extra configuration data for this virtual machine. Can be used to supply advanced parameters not normally in
     * configuration, such as instance metadata, or configuration data for OVF images.
     */
    public readonly extraConfig!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Allow the virtual machine to be rebooted when a change to `extraConfig` occurs.
     */
    public readonly extraConfigRebootRequired!: pulumi.Output<boolean | undefined>;
    /**
     * The firmware interface to use on the virtual machine. Can be one of bios or efi.
     */
    public readonly firmware!: pulumi.Output<string | undefined>;
    /**
     * The name of the folder to locate the virtual machine in.
     */
    public readonly folder!: pulumi.Output<string | undefined>;
    /**
     * Set to true to force power-off a virtual machine if a graceful guest shutdown failed for a necessary operation.
     */
    public readonly forcePowerOff!: pulumi.Output<boolean | undefined>;
    /**
     * The guest ID for the operating system.
     */
    public readonly guestId!: pulumi.Output<string>;
    /**
     * The current list of IP addresses on this machine, including the value of `defaultIpAddress`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
     */
    public /*out*/ readonly guestIpAddresses!: pulumi.Output<string[]>;
    /**
     * The hardware version for the virtual machine.
     */
    public readonly hardwareVersion!: pulumi.Output<number>;
    /**
     * The ID of an optional host system to pin the virtual machine to.
     */
    public readonly hostSystemId!: pulumi.Output<string>;
    /**
     * The (non-nested) hardware virtualization setting for this virtual machine. Can be one of hvAuto, hvOn, or hvOff.
     */
    public readonly hvMode!: pulumi.Output<string>;
    public readonly ideControllerCount!: pulumi.Output<number | undefined>;
    /**
     * List of IP addresses and CIDR networks to ignore while waiting for an IP
     */
    public readonly ignoredGuestIps!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
     */
    public /*out*/ readonly imported!: pulumi.Output<boolean>;
    /**
     * Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower
     * latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard
     * devices. Can be one of low, normal, medium, or high.
     */
    public readonly latencySensitivity!: pulumi.Output<string | undefined>;
    /**
     * The size of the virtual machine's memory, in MB.
     */
    public readonly memory!: pulumi.Output<number | undefined>;
    /**
     * Allow memory to be added to this virtual machine while it is running.
     */
    public readonly memoryHotAddEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
     * resources.
     */
    public readonly memoryLimit!: pulumi.Output<number | undefined>;
    /**
     * The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
     */
    public readonly memoryReservation!: pulumi.Output<number | undefined>;
    /**
     * If set true, memory resource reservation for this virtual machine will always be equal to the virtual machine's memory
     * size;increases in memory size will be rejected when a corresponding reservation increase is not possible. This feature
     * may only be enabled if it is currently possible to reserve all of the virtual machine's memory.
     */
    public readonly memoryReservationLockedToMax!: pulumi.Output<boolean | undefined>;
    /**
     * The amount of shares to allocate to memory for a custom share level.
     */
    public readonly memoryShareCount!: pulumi.Output<number>;
    /**
     * The allocation level for memory resources. Can be one of high, low, normal, or custom.
     */
    public readonly memoryShareLevel!: pulumi.Output<string | undefined>;
    /**
     * The amount of time, in minutes, to wait for a vMotion operation to complete before failing.
     */
    public readonly migrateWaitTimeout!: pulumi.Output<number | undefined>;
    /**
     * The managed object reference ID of the created virtual machine.
     */
    public /*out*/ readonly moid!: pulumi.Output<string>;
    /**
     * The name of this virtual machine.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable nested hardware virtualization on this virtual machine, facilitating nested virtualization in the guest.
     */
    public readonly nestedHvEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A specification for a virtual NIC on this virtual machine.
     */
    public readonly networkInterfaces!: pulumi.Output<outputs.VirtualMachineNetworkInterface[] | undefined>;
    /**
     * The number of cores to distribute amongst the CPUs in this virtual machine. If specified, the value supplied to numCpus
     * must be evenly divisible by this value.
     */
    public readonly numCoresPerSocket!: pulumi.Output<number | undefined>;
    /**
     * The number of virtual processors to assign to this virtual machine.
     */
    public readonly numCpus!: pulumi.Output<number | undefined>;
    /**
     * A specification for deploying a virtual machine from ovf/ova template.
     */
    public readonly ovfDeploy!: pulumi.Output<outputs.VirtualMachineOvfDeploy | undefined>;
    /**
     * A list of PCI passthrough devices
     */
    public readonly pciDeviceIds!: pulumi.Output<string[] | undefined>;
    /**
     * A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
     */
    public /*out*/ readonly powerState!: pulumi.Output<string>;
    /**
     * The amount of time, in seconds, that we will be trying to power on a VM
     */
    public readonly poweronTimeout!: pulumi.Output<number | undefined>;
    public /*out*/ readonly rebootRequired!: pulumi.Output<boolean>;
    /**
     * Triggers replacement of resource whenever it changes.
     */
    public readonly replaceTrigger!: pulumi.Output<string | undefined>;
    /**
     * The ID of a resource pool to put the virtual machine in.
     */
    public readonly resourcePoolId!: pulumi.Output<string>;
    /**
     * Enable the run of scripts after virtual machine power-on when VMware Tools is installed.
     */
    public readonly runToolsScriptsAfterPowerOn!: pulumi.Output<boolean | undefined>;
    /**
     * Enable the run of scripts after virtual machine resume when when VMware Tools is installed.
     */
    public readonly runToolsScriptsAfterResume!: pulumi.Output<boolean | undefined>;
    /**
     * Enable the run of scripts before guest operating system reboot when VMware Tools is installed.
     */
    public readonly runToolsScriptsBeforeGuestReboot!: pulumi.Output<boolean | undefined>;
    /**
     * Enable the run of scripts before guest operating system shutdown when VMware Tools is installed.
     */
    public readonly runToolsScriptsBeforeGuestShutdown!: pulumi.Output<boolean | undefined>;
    /**
     * Enable the run of scripts before guest operating system standby when VMware Tools is installed.
     */
    public readonly runToolsScriptsBeforeGuestStandby!: pulumi.Output<boolean | undefined>;
    public readonly sataControllerCount!: pulumi.Output<number | undefined>;
    /**
     * Mode for sharing the SCSI bus. The modes are physicalSharing, virtualSharing, and noSharing.
     */
    public readonly scsiBusSharing!: pulumi.Output<string | undefined>;
    public readonly scsiControllerCount!: pulumi.Output<number | undefined>;
    /**
     * The type of SCSI bus this virtual machine will have. Can be one of lsilogic, lsilogic-sas or pvscsi.
     */
    public readonly scsiType!: pulumi.Output<string | undefined>;
    /**
     * The amount of time, in minutes, to wait for shutdown when making necessary updates to the virtual machine.
     */
    public readonly shutdownWaitTimeout!: pulumi.Output<number | undefined>;
    /**
     * The ID of the storage policy to assign to the virtual machine home directory.
     */
    public readonly storagePolicyId!: pulumi.Output<string>;
    /**
     * The swap file placement policy for this virtual machine. Can be one of inherit, hostLocal, or vmDirectory.
     */
    public readonly swapPlacementPolicy!: pulumi.Output<string | undefined>;
    /**
     * Enable guest clock synchronization with the host. On vSphere 7.0 U1 and above, with only this setting the clock is
     * synchronized on startup and resume. Requires VMware Tools to be installed.
     */
    public readonly syncTimeWithHost!: pulumi.Output<boolean | undefined>;
    /**
     * Enable periodic clock synchronization with the host. Supported only on vSphere 7.0 U1 and above. On prior versions
     * setting `syncTimeWithHost` is enough for periodic synchronization. Requires VMware Tools to be installed.
     */
    public readonly syncTimeWithHostPeriodically!: pulumi.Output<boolean | undefined>;
    /**
     * A list of tag IDs to apply to this object.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Set the upgrade policy for VMware Tools. Can be one of `manual` or `upgradeAtPowerCycle`.
     */
    public readonly toolsUpgradePolicy!: pulumi.Output<string | undefined>;
    /**
     * The UUID of the virtual machine. Also exposed as the `id` of the resource.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    /**
     * vApp configuration data for this virtual machine. Can be used to provide configuration data for OVF images.
     */
    public readonly vapp!: pulumi.Output<outputs.VirtualMachineVapp | undefined>;
    /**
     * Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
     */
    public /*out*/ readonly vappTransports!: pulumi.Output<string[]>;
    /**
     * Flag to specify if Virtualization-based security is enabled for this virtual machine.
     */
    public readonly vbsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
     */
    public /*out*/ readonly vmwareToolsStatus!: pulumi.Output<string>;
    /**
     * The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
     */
    public /*out*/ readonly vmxPath!: pulumi.Output<string>;
    /**
     * Flag to specify if I/O MMU virtualization, also called Intel Virtualization Technology for Directed I/O (VT-d) and AMD
     * I/O Virtualization (AMD-Vi or IOMMU), is enabled.
     */
    public readonly vvtdEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
     * disables the waiter.
     */
    public readonly waitForGuestIpTimeout!: pulumi.Output<number | undefined>;
    /**
     * Controls whether or not the guest network waiter waits for a routable address. When false, the waiter does not wait for
     * a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria.
     */
    public readonly waitForGuestNetRoutable!: pulumi.Output<boolean | undefined>;
    /**
     * The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
     * disables the waiter.
     */
    public readonly waitForGuestNetTimeout!: pulumi.Output<number | undefined>;

    /**
     * Create a VirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineArgs | VirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineState | undefined;
            resourceInputs["alternateGuestName"] = state ? state.alternateGuestName : undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["bootDelay"] = state ? state.bootDelay : undefined;
            resourceInputs["bootRetryDelay"] = state ? state.bootRetryDelay : undefined;
            resourceInputs["bootRetryEnabled"] = state ? state.bootRetryEnabled : undefined;
            resourceInputs["cdroms"] = state ? state.cdroms : undefined;
            resourceInputs["changeVersion"] = state ? state.changeVersion : undefined;
            resourceInputs["clone"] = state ? state.clone : undefined;
            resourceInputs["cpuHotAddEnabled"] = state ? state.cpuHotAddEnabled : undefined;
            resourceInputs["cpuHotRemoveEnabled"] = state ? state.cpuHotRemoveEnabled : undefined;
            resourceInputs["cpuLimit"] = state ? state.cpuLimit : undefined;
            resourceInputs["cpuPerformanceCountersEnabled"] = state ? state.cpuPerformanceCountersEnabled : undefined;
            resourceInputs["cpuReservation"] = state ? state.cpuReservation : undefined;
            resourceInputs["cpuShareCount"] = state ? state.cpuShareCount : undefined;
            resourceInputs["cpuShareLevel"] = state ? state.cpuShareLevel : undefined;
            resourceInputs["customAttributes"] = state ? state.customAttributes : undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["datastoreClusterId"] = state ? state.datastoreClusterId : undefined;
            resourceInputs["datastoreId"] = state ? state.datastoreId : undefined;
            resourceInputs["defaultIpAddress"] = state ? state.defaultIpAddress : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["efiSecureBootEnabled"] = state ? state.efiSecureBootEnabled : undefined;
            resourceInputs["enableDiskUuid"] = state ? state.enableDiskUuid : undefined;
            resourceInputs["enableLogging"] = state ? state.enableLogging : undefined;
            resourceInputs["eptRviMode"] = state ? state.eptRviMode : undefined;
            resourceInputs["extraConfig"] = state ? state.extraConfig : undefined;
            resourceInputs["extraConfigRebootRequired"] = state ? state.extraConfigRebootRequired : undefined;
            resourceInputs["firmware"] = state ? state.firmware : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["forcePowerOff"] = state ? state.forcePowerOff : undefined;
            resourceInputs["guestId"] = state ? state.guestId : undefined;
            resourceInputs["guestIpAddresses"] = state ? state.guestIpAddresses : undefined;
            resourceInputs["hardwareVersion"] = state ? state.hardwareVersion : undefined;
            resourceInputs["hostSystemId"] = state ? state.hostSystemId : undefined;
            resourceInputs["hvMode"] = state ? state.hvMode : undefined;
            resourceInputs["ideControllerCount"] = state ? state.ideControllerCount : undefined;
            resourceInputs["ignoredGuestIps"] = state ? state.ignoredGuestIps : undefined;
            resourceInputs["imported"] = state ? state.imported : undefined;
            resourceInputs["latencySensitivity"] = state ? state.latencySensitivity : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["memoryHotAddEnabled"] = state ? state.memoryHotAddEnabled : undefined;
            resourceInputs["memoryLimit"] = state ? state.memoryLimit : undefined;
            resourceInputs["memoryReservation"] = state ? state.memoryReservation : undefined;
            resourceInputs["memoryReservationLockedToMax"] = state ? state.memoryReservationLockedToMax : undefined;
            resourceInputs["memoryShareCount"] = state ? state.memoryShareCount : undefined;
            resourceInputs["memoryShareLevel"] = state ? state.memoryShareLevel : undefined;
            resourceInputs["migrateWaitTimeout"] = state ? state.migrateWaitTimeout : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nestedHvEnabled"] = state ? state.nestedHvEnabled : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["numCoresPerSocket"] = state ? state.numCoresPerSocket : undefined;
            resourceInputs["numCpus"] = state ? state.numCpus : undefined;
            resourceInputs["ovfDeploy"] = state ? state.ovfDeploy : undefined;
            resourceInputs["pciDeviceIds"] = state ? state.pciDeviceIds : undefined;
            resourceInputs["powerState"] = state ? state.powerState : undefined;
            resourceInputs["poweronTimeout"] = state ? state.poweronTimeout : undefined;
            resourceInputs["rebootRequired"] = state ? state.rebootRequired : undefined;
            resourceInputs["replaceTrigger"] = state ? state.replaceTrigger : undefined;
            resourceInputs["resourcePoolId"] = state ? state.resourcePoolId : undefined;
            resourceInputs["runToolsScriptsAfterPowerOn"] = state ? state.runToolsScriptsAfterPowerOn : undefined;
            resourceInputs["runToolsScriptsAfterResume"] = state ? state.runToolsScriptsAfterResume : undefined;
            resourceInputs["runToolsScriptsBeforeGuestReboot"] = state ? state.runToolsScriptsBeforeGuestReboot : undefined;
            resourceInputs["runToolsScriptsBeforeGuestShutdown"] = state ? state.runToolsScriptsBeforeGuestShutdown : undefined;
            resourceInputs["runToolsScriptsBeforeGuestStandby"] = state ? state.runToolsScriptsBeforeGuestStandby : undefined;
            resourceInputs["sataControllerCount"] = state ? state.sataControllerCount : undefined;
            resourceInputs["scsiBusSharing"] = state ? state.scsiBusSharing : undefined;
            resourceInputs["scsiControllerCount"] = state ? state.scsiControllerCount : undefined;
            resourceInputs["scsiType"] = state ? state.scsiType : undefined;
            resourceInputs["shutdownWaitTimeout"] = state ? state.shutdownWaitTimeout : undefined;
            resourceInputs["storagePolicyId"] = state ? state.storagePolicyId : undefined;
            resourceInputs["swapPlacementPolicy"] = state ? state.swapPlacementPolicy : undefined;
            resourceInputs["syncTimeWithHost"] = state ? state.syncTimeWithHost : undefined;
            resourceInputs["syncTimeWithHostPeriodically"] = state ? state.syncTimeWithHostPeriodically : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["toolsUpgradePolicy"] = state ? state.toolsUpgradePolicy : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vapp"] = state ? state.vapp : undefined;
            resourceInputs["vappTransports"] = state ? state.vappTransports : undefined;
            resourceInputs["vbsEnabled"] = state ? state.vbsEnabled : undefined;
            resourceInputs["vmwareToolsStatus"] = state ? state.vmwareToolsStatus : undefined;
            resourceInputs["vmxPath"] = state ? state.vmxPath : undefined;
            resourceInputs["vvtdEnabled"] = state ? state.vvtdEnabled : undefined;
            resourceInputs["waitForGuestIpTimeout"] = state ? state.waitForGuestIpTimeout : undefined;
            resourceInputs["waitForGuestNetRoutable"] = state ? state.waitForGuestNetRoutable : undefined;
            resourceInputs["waitForGuestNetTimeout"] = state ? state.waitForGuestNetTimeout : undefined;
        } else {
            const args = argsOrState as VirtualMachineArgs | undefined;
            if ((!args || args.resourcePoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourcePoolId'");
            }
            resourceInputs["alternateGuestName"] = args ? args.alternateGuestName : undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["bootDelay"] = args ? args.bootDelay : undefined;
            resourceInputs["bootRetryDelay"] = args ? args.bootRetryDelay : undefined;
            resourceInputs["bootRetryEnabled"] = args ? args.bootRetryEnabled : undefined;
            resourceInputs["cdroms"] = args ? args.cdroms : undefined;
            resourceInputs["clone"] = args ? args.clone : undefined;
            resourceInputs["cpuHotAddEnabled"] = args ? args.cpuHotAddEnabled : undefined;
            resourceInputs["cpuHotRemoveEnabled"] = args ? args.cpuHotRemoveEnabled : undefined;
            resourceInputs["cpuLimit"] = args ? args.cpuLimit : undefined;
            resourceInputs["cpuPerformanceCountersEnabled"] = args ? args.cpuPerformanceCountersEnabled : undefined;
            resourceInputs["cpuReservation"] = args ? args.cpuReservation : undefined;
            resourceInputs["cpuShareCount"] = args ? args.cpuShareCount : undefined;
            resourceInputs["cpuShareLevel"] = args ? args.cpuShareLevel : undefined;
            resourceInputs["customAttributes"] = args ? args.customAttributes : undefined;
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["datastoreClusterId"] = args ? args.datastoreClusterId : undefined;
            resourceInputs["datastoreId"] = args ? args.datastoreId : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["efiSecureBootEnabled"] = args ? args.efiSecureBootEnabled : undefined;
            resourceInputs["enableDiskUuid"] = args ? args.enableDiskUuid : undefined;
            resourceInputs["enableLogging"] = args ? args.enableLogging : undefined;
            resourceInputs["eptRviMode"] = args ? args.eptRviMode : undefined;
            resourceInputs["extraConfig"] = args ? args.extraConfig : undefined;
            resourceInputs["extraConfigRebootRequired"] = args ? args.extraConfigRebootRequired : undefined;
            resourceInputs["firmware"] = args ? args.firmware : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["forcePowerOff"] = args ? args.forcePowerOff : undefined;
            resourceInputs["guestId"] = args ? args.guestId : undefined;
            resourceInputs["hardwareVersion"] = args ? args.hardwareVersion : undefined;
            resourceInputs["hostSystemId"] = args ? args.hostSystemId : undefined;
            resourceInputs["hvMode"] = args ? args.hvMode : undefined;
            resourceInputs["ideControllerCount"] = args ? args.ideControllerCount : undefined;
            resourceInputs["ignoredGuestIps"] = args ? args.ignoredGuestIps : undefined;
            resourceInputs["latencySensitivity"] = args ? args.latencySensitivity : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["memoryHotAddEnabled"] = args ? args.memoryHotAddEnabled : undefined;
            resourceInputs["memoryLimit"] = args ? args.memoryLimit : undefined;
            resourceInputs["memoryReservation"] = args ? args.memoryReservation : undefined;
            resourceInputs["memoryReservationLockedToMax"] = args ? args.memoryReservationLockedToMax : undefined;
            resourceInputs["memoryShareCount"] = args ? args.memoryShareCount : undefined;
            resourceInputs["memoryShareLevel"] = args ? args.memoryShareLevel : undefined;
            resourceInputs["migrateWaitTimeout"] = args ? args.migrateWaitTimeout : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nestedHvEnabled"] = args ? args.nestedHvEnabled : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["numCoresPerSocket"] = args ? args.numCoresPerSocket : undefined;
            resourceInputs["numCpus"] = args ? args.numCpus : undefined;
            resourceInputs["ovfDeploy"] = args ? args.ovfDeploy : undefined;
            resourceInputs["pciDeviceIds"] = args ? args.pciDeviceIds : undefined;
            resourceInputs["poweronTimeout"] = args ? args.poweronTimeout : undefined;
            resourceInputs["replaceTrigger"] = args ? args.replaceTrigger : undefined;
            resourceInputs["resourcePoolId"] = args ? args.resourcePoolId : undefined;
            resourceInputs["runToolsScriptsAfterPowerOn"] = args ? args.runToolsScriptsAfterPowerOn : undefined;
            resourceInputs["runToolsScriptsAfterResume"] = args ? args.runToolsScriptsAfterResume : undefined;
            resourceInputs["runToolsScriptsBeforeGuestReboot"] = args ? args.runToolsScriptsBeforeGuestReboot : undefined;
            resourceInputs["runToolsScriptsBeforeGuestShutdown"] = args ? args.runToolsScriptsBeforeGuestShutdown : undefined;
            resourceInputs["runToolsScriptsBeforeGuestStandby"] = args ? args.runToolsScriptsBeforeGuestStandby : undefined;
            resourceInputs["sataControllerCount"] = args ? args.sataControllerCount : undefined;
            resourceInputs["scsiBusSharing"] = args ? args.scsiBusSharing : undefined;
            resourceInputs["scsiControllerCount"] = args ? args.scsiControllerCount : undefined;
            resourceInputs["scsiType"] = args ? args.scsiType : undefined;
            resourceInputs["shutdownWaitTimeout"] = args ? args.shutdownWaitTimeout : undefined;
            resourceInputs["storagePolicyId"] = args ? args.storagePolicyId : undefined;
            resourceInputs["swapPlacementPolicy"] = args ? args.swapPlacementPolicy : undefined;
            resourceInputs["syncTimeWithHost"] = args ? args.syncTimeWithHost : undefined;
            resourceInputs["syncTimeWithHostPeriodically"] = args ? args.syncTimeWithHostPeriodically : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["toolsUpgradePolicy"] = args ? args.toolsUpgradePolicy : undefined;
            resourceInputs["vapp"] = args ? args.vapp : undefined;
            resourceInputs["vbsEnabled"] = args ? args.vbsEnabled : undefined;
            resourceInputs["vvtdEnabled"] = args ? args.vvtdEnabled : undefined;
            resourceInputs["waitForGuestIpTimeout"] = args ? args.waitForGuestIpTimeout : undefined;
            resourceInputs["waitForGuestNetRoutable"] = args ? args.waitForGuestNetRoutable : undefined;
            resourceInputs["waitForGuestNetTimeout"] = args ? args.waitForGuestNetTimeout : undefined;
            resourceInputs["changeVersion"] = undefined /*out*/;
            resourceInputs["defaultIpAddress"] = undefined /*out*/;
            resourceInputs["guestIpAddresses"] = undefined /*out*/;
            resourceInputs["imported"] = undefined /*out*/;
            resourceInputs["moid"] = undefined /*out*/;
            resourceInputs["powerState"] = undefined /*out*/;
            resourceInputs["rebootRequired"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
            resourceInputs["vappTransports"] = undefined /*out*/;
            resourceInputs["vmwareToolsStatus"] = undefined /*out*/;
            resourceInputs["vmxPath"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualMachine.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachine resources.
 */
export interface VirtualMachineState {
    /**
     * The guest name for the operating system when guestId is otherGuest or otherGuest64.
     */
    alternateGuestName?: pulumi.Input<string>;
    /**
     * User-provided description of the virtual machine.
     */
    annotation?: pulumi.Input<string>;
    /**
     * The number of milliseconds to wait before starting the boot sequence.
     */
    bootDelay?: pulumi.Input<number>;
    /**
     * The number of milliseconds to wait before retrying the boot sequence. This only valid if bootRetryEnabled is true.
     */
    bootRetryDelay?: pulumi.Input<number>;
    /**
     * If set to true, a virtual machine that fails to boot will try again after the delay defined in boot_retry_delay.
     */
    bootRetryEnabled?: pulumi.Input<boolean>;
    /**
     * A specification for a CDROM device on this virtual machine.
     */
    cdroms?: pulumi.Input<pulumi.Input<inputs.VirtualMachineCdrom>[]>;
    /**
     * A unique identifier for a given version of the last configuration was applied.
     */
    changeVersion?: pulumi.Input<string>;
    /**
     * A specification for cloning a virtual machine from template.
     */
    clone?: pulumi.Input<inputs.VirtualMachineClone>;
    /**
     * Allow CPUs to be added to this virtual machine while it is running.
     */
    cpuHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * Allow CPUs to be added to this virtual machine while it is running.
     */
    cpuHotRemoveEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
     * resources.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Enable CPU performance counters on this virtual machine.
     */
    cpuPerformanceCountersEnabled?: pulumi.Input<boolean>;
    /**
     * The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
     */
    cpuReservation?: pulumi.Input<number>;
    /**
     * The amount of shares to allocate to cpu for a custom share level.
     */
    cpuShareCount?: pulumi.Input<number>;
    /**
     * The allocation level for cpu resources. Can be one of high, low, normal, or custom.
     */
    cpuShareLevel?: pulumi.Input<string>;
    /**
     * A list of custom attributes to set on this resource.
     */
    customAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the datacenter where the VM is to be created.
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * The ID of a datastore cluster to put the virtual machine in.
     */
    datastoreClusterId?: pulumi.Input<string>;
    /**
     * The ID of the virtual machine's datastore. The virtual machine configuration is placed here, along with any virtual
     * disks that are created without datastores.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
     */
    defaultIpAddress?: pulumi.Input<string>;
    /**
     * A specification for a virtual disk device on this virtual machine.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDisk>[]>;
    /**
     * When the boot type set in firmware is efi, this enables EFI secure boot.
     */
    efiSecureBootEnabled?: pulumi.Input<boolean>;
    /**
     * Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest.
     */
    enableDiskUuid?: pulumi.Input<boolean>;
    /**
     * Enable logging on this virtual machine.
     */
    enableLogging?: pulumi.Input<boolean>;
    /**
     * The EPT/RVI (hardware memory virtualization) setting for this virtual machine. Can be one of automatic, on, or off.
     */
    eptRviMode?: pulumi.Input<string>;
    /**
     * Extra configuration data for this virtual machine. Can be used to supply advanced parameters not normally in
     * configuration, such as instance metadata, or configuration data for OVF images.
     */
    extraConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Allow the virtual machine to be rebooted when a change to `extraConfig` occurs.
     */
    extraConfigRebootRequired?: pulumi.Input<boolean>;
    /**
     * The firmware interface to use on the virtual machine. Can be one of bios or efi.
     */
    firmware?: pulumi.Input<string>;
    /**
     * The name of the folder to locate the virtual machine in.
     */
    folder?: pulumi.Input<string>;
    /**
     * Set to true to force power-off a virtual machine if a graceful guest shutdown failed for a necessary operation.
     */
    forcePowerOff?: pulumi.Input<boolean>;
    /**
     * The guest ID for the operating system.
     */
    guestId?: pulumi.Input<string>;
    /**
     * The current list of IP addresses on this machine, including the value of `defaultIpAddress`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
     */
    guestIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The hardware version for the virtual machine.
     */
    hardwareVersion?: pulumi.Input<number>;
    /**
     * The ID of an optional host system to pin the virtual machine to.
     */
    hostSystemId?: pulumi.Input<string>;
    /**
     * The (non-nested) hardware virtualization setting for this virtual machine. Can be one of hvAuto, hvOn, or hvOff.
     */
    hvMode?: pulumi.Input<string>;
    ideControllerCount?: pulumi.Input<number>;
    /**
     * List of IP addresses and CIDR networks to ignore while waiting for an IP
     */
    ignoredGuestIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
     */
    imported?: pulumi.Input<boolean>;
    /**
     * Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower
     * latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard
     * devices. Can be one of low, normal, medium, or high.
     */
    latencySensitivity?: pulumi.Input<string>;
    /**
     * The size of the virtual machine's memory, in MB.
     */
    memory?: pulumi.Input<number>;
    /**
     * Allow memory to be added to this virtual machine while it is running.
     */
    memoryHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
     * resources.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
     */
    memoryReservation?: pulumi.Input<number>;
    /**
     * If set true, memory resource reservation for this virtual machine will always be equal to the virtual machine's memory
     * size;increases in memory size will be rejected when a corresponding reservation increase is not possible. This feature
     * may only be enabled if it is currently possible to reserve all of the virtual machine's memory.
     */
    memoryReservationLockedToMax?: pulumi.Input<boolean>;
    /**
     * The amount of shares to allocate to memory for a custom share level.
     */
    memoryShareCount?: pulumi.Input<number>;
    /**
     * The allocation level for memory resources. Can be one of high, low, normal, or custom.
     */
    memoryShareLevel?: pulumi.Input<string>;
    /**
     * The amount of time, in minutes, to wait for a vMotion operation to complete before failing.
     */
    migrateWaitTimeout?: pulumi.Input<number>;
    /**
     * The managed object reference ID of the created virtual machine.
     */
    moid?: pulumi.Input<string>;
    /**
     * The name of this virtual machine.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable nested hardware virtualization on this virtual machine, facilitating nested virtualization in the guest.
     */
    nestedHvEnabled?: pulumi.Input<boolean>;
    /**
     * A specification for a virtual NIC on this virtual machine.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNetworkInterface>[]>;
    /**
     * The number of cores to distribute amongst the CPUs in this virtual machine. If specified, the value supplied to numCpus
     * must be evenly divisible by this value.
     */
    numCoresPerSocket?: pulumi.Input<number>;
    /**
     * The number of virtual processors to assign to this virtual machine.
     */
    numCpus?: pulumi.Input<number>;
    /**
     * A specification for deploying a virtual machine from ovf/ova template.
     */
    ovfDeploy?: pulumi.Input<inputs.VirtualMachineOvfDeploy>;
    /**
     * A list of PCI passthrough devices
     */
    pciDeviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
     */
    powerState?: pulumi.Input<string>;
    /**
     * The amount of time, in seconds, that we will be trying to power on a VM
     */
    poweronTimeout?: pulumi.Input<number>;
    rebootRequired?: pulumi.Input<boolean>;
    /**
     * Triggers replacement of resource whenever it changes.
     */
    replaceTrigger?: pulumi.Input<string>;
    /**
     * The ID of a resource pool to put the virtual machine in.
     */
    resourcePoolId?: pulumi.Input<string>;
    /**
     * Enable the run of scripts after virtual machine power-on when VMware Tools is installed.
     */
    runToolsScriptsAfterPowerOn?: pulumi.Input<boolean>;
    /**
     * Enable the run of scripts after virtual machine resume when when VMware Tools is installed.
     */
    runToolsScriptsAfterResume?: pulumi.Input<boolean>;
    /**
     * Enable the run of scripts before guest operating system reboot when VMware Tools is installed.
     */
    runToolsScriptsBeforeGuestReboot?: pulumi.Input<boolean>;
    /**
     * Enable the run of scripts before guest operating system shutdown when VMware Tools is installed.
     */
    runToolsScriptsBeforeGuestShutdown?: pulumi.Input<boolean>;
    /**
     * Enable the run of scripts before guest operating system standby when VMware Tools is installed.
     */
    runToolsScriptsBeforeGuestStandby?: pulumi.Input<boolean>;
    sataControllerCount?: pulumi.Input<number>;
    /**
     * Mode for sharing the SCSI bus. The modes are physicalSharing, virtualSharing, and noSharing.
     */
    scsiBusSharing?: pulumi.Input<string>;
    scsiControllerCount?: pulumi.Input<number>;
    /**
     * The type of SCSI bus this virtual machine will have. Can be one of lsilogic, lsilogic-sas or pvscsi.
     */
    scsiType?: pulumi.Input<string>;
    /**
     * The amount of time, in minutes, to wait for shutdown when making necessary updates to the virtual machine.
     */
    shutdownWaitTimeout?: pulumi.Input<number>;
    /**
     * The ID of the storage policy to assign to the virtual machine home directory.
     */
    storagePolicyId?: pulumi.Input<string>;
    /**
     * The swap file placement policy for this virtual machine. Can be one of inherit, hostLocal, or vmDirectory.
     */
    swapPlacementPolicy?: pulumi.Input<string>;
    /**
     * Enable guest clock synchronization with the host. On vSphere 7.0 U1 and above, with only this setting the clock is
     * synchronized on startup and resume. Requires VMware Tools to be installed.
     */
    syncTimeWithHost?: pulumi.Input<boolean>;
    /**
     * Enable periodic clock synchronization with the host. Supported only on vSphere 7.0 U1 and above. On prior versions
     * setting `syncTimeWithHost` is enough for periodic synchronization. Requires VMware Tools to be installed.
     */
    syncTimeWithHostPeriodically?: pulumi.Input<boolean>;
    /**
     * A list of tag IDs to apply to this object.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set the upgrade policy for VMware Tools. Can be one of `manual` or `upgradeAtPowerCycle`.
     */
    toolsUpgradePolicy?: pulumi.Input<string>;
    /**
     * The UUID of the virtual machine. Also exposed as the `id` of the resource.
     */
    uuid?: pulumi.Input<string>;
    /**
     * vApp configuration data for this virtual machine. Can be used to provide configuration data for OVF images.
     */
    vapp?: pulumi.Input<inputs.VirtualMachineVapp>;
    /**
     * Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
     */
    vappTransports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag to specify if Virtualization-based security is enabled for this virtual machine.
     */
    vbsEnabled?: pulumi.Input<boolean>;
    /**
     * The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
     */
    vmwareToolsStatus?: pulumi.Input<string>;
    /**
     * The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
     */
    vmxPath?: pulumi.Input<string>;
    /**
     * Flag to specify if I/O MMU virtualization, also called Intel Virtualization Technology for Directed I/O (VT-d) and AMD
     * I/O Virtualization (AMD-Vi or IOMMU), is enabled.
     */
    vvtdEnabled?: pulumi.Input<boolean>;
    /**
     * The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
     * disables the waiter.
     */
    waitForGuestIpTimeout?: pulumi.Input<number>;
    /**
     * Controls whether or not the guest network waiter waits for a routable address. When false, the waiter does not wait for
     * a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria.
     */
    waitForGuestNetRoutable?: pulumi.Input<boolean>;
    /**
     * The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
     * disables the waiter.
     */
    waitForGuestNetTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VirtualMachine resource.
 */
export interface VirtualMachineArgs {
    /**
     * The guest name for the operating system when guestId is otherGuest or otherGuest64.
     */
    alternateGuestName?: pulumi.Input<string>;
    /**
     * User-provided description of the virtual machine.
     */
    annotation?: pulumi.Input<string>;
    /**
     * The number of milliseconds to wait before starting the boot sequence.
     */
    bootDelay?: pulumi.Input<number>;
    /**
     * The number of milliseconds to wait before retrying the boot sequence. This only valid if bootRetryEnabled is true.
     */
    bootRetryDelay?: pulumi.Input<number>;
    /**
     * If set to true, a virtual machine that fails to boot will try again after the delay defined in boot_retry_delay.
     */
    bootRetryEnabled?: pulumi.Input<boolean>;
    /**
     * A specification for a CDROM device on this virtual machine.
     */
    cdroms?: pulumi.Input<pulumi.Input<inputs.VirtualMachineCdrom>[]>;
    /**
     * A specification for cloning a virtual machine from template.
     */
    clone?: pulumi.Input<inputs.VirtualMachineClone>;
    /**
     * Allow CPUs to be added to this virtual machine while it is running.
     */
    cpuHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * Allow CPUs to be added to this virtual machine while it is running.
     */
    cpuHotRemoveEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
     * resources.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Enable CPU performance counters on this virtual machine.
     */
    cpuPerformanceCountersEnabled?: pulumi.Input<boolean>;
    /**
     * The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
     */
    cpuReservation?: pulumi.Input<number>;
    /**
     * The amount of shares to allocate to cpu for a custom share level.
     */
    cpuShareCount?: pulumi.Input<number>;
    /**
     * The allocation level for cpu resources. Can be one of high, low, normal, or custom.
     */
    cpuShareLevel?: pulumi.Input<string>;
    /**
     * A list of custom attributes to set on this resource.
     */
    customAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the datacenter where the VM is to be created.
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * The ID of a datastore cluster to put the virtual machine in.
     */
    datastoreClusterId?: pulumi.Input<string>;
    /**
     * The ID of the virtual machine's datastore. The virtual machine configuration is placed here, along with any virtual
     * disks that are created without datastores.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * A specification for a virtual disk device on this virtual machine.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDisk>[]>;
    /**
     * When the boot type set in firmware is efi, this enables EFI secure boot.
     */
    efiSecureBootEnabled?: pulumi.Input<boolean>;
    /**
     * Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest.
     */
    enableDiskUuid?: pulumi.Input<boolean>;
    /**
     * Enable logging on this virtual machine.
     */
    enableLogging?: pulumi.Input<boolean>;
    /**
     * The EPT/RVI (hardware memory virtualization) setting for this virtual machine. Can be one of automatic, on, or off.
     */
    eptRviMode?: pulumi.Input<string>;
    /**
     * Extra configuration data for this virtual machine. Can be used to supply advanced parameters not normally in
     * configuration, such as instance metadata, or configuration data for OVF images.
     */
    extraConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Allow the virtual machine to be rebooted when a change to `extraConfig` occurs.
     */
    extraConfigRebootRequired?: pulumi.Input<boolean>;
    /**
     * The firmware interface to use on the virtual machine. Can be one of bios or efi.
     */
    firmware?: pulumi.Input<string>;
    /**
     * The name of the folder to locate the virtual machine in.
     */
    folder?: pulumi.Input<string>;
    /**
     * Set to true to force power-off a virtual machine if a graceful guest shutdown failed for a necessary operation.
     */
    forcePowerOff?: pulumi.Input<boolean>;
    /**
     * The guest ID for the operating system.
     */
    guestId?: pulumi.Input<string>;
    /**
     * The hardware version for the virtual machine.
     */
    hardwareVersion?: pulumi.Input<number>;
    /**
     * The ID of an optional host system to pin the virtual machine to.
     */
    hostSystemId?: pulumi.Input<string>;
    /**
     * The (non-nested) hardware virtualization setting for this virtual machine. Can be one of hvAuto, hvOn, or hvOff.
     */
    hvMode?: pulumi.Input<string>;
    ideControllerCount?: pulumi.Input<number>;
    /**
     * List of IP addresses and CIDR networks to ignore while waiting for an IP
     */
    ignoredGuestIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower
     * latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard
     * devices. Can be one of low, normal, medium, or high.
     */
    latencySensitivity?: pulumi.Input<string>;
    /**
     * The size of the virtual machine's memory, in MB.
     */
    memory?: pulumi.Input<number>;
    /**
     * Allow memory to be added to this virtual machine while it is running.
     */
    memoryHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
     * resources.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
     */
    memoryReservation?: pulumi.Input<number>;
    /**
     * If set true, memory resource reservation for this virtual machine will always be equal to the virtual machine's memory
     * size;increases in memory size will be rejected when a corresponding reservation increase is not possible. This feature
     * may only be enabled if it is currently possible to reserve all of the virtual machine's memory.
     */
    memoryReservationLockedToMax?: pulumi.Input<boolean>;
    /**
     * The amount of shares to allocate to memory for a custom share level.
     */
    memoryShareCount?: pulumi.Input<number>;
    /**
     * The allocation level for memory resources. Can be one of high, low, normal, or custom.
     */
    memoryShareLevel?: pulumi.Input<string>;
    /**
     * The amount of time, in minutes, to wait for a vMotion operation to complete before failing.
     */
    migrateWaitTimeout?: pulumi.Input<number>;
    /**
     * The name of this virtual machine.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable nested hardware virtualization on this virtual machine, facilitating nested virtualization in the guest.
     */
    nestedHvEnabled?: pulumi.Input<boolean>;
    /**
     * A specification for a virtual NIC on this virtual machine.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNetworkInterface>[]>;
    /**
     * The number of cores to distribute amongst the CPUs in this virtual machine. If specified, the value supplied to numCpus
     * must be evenly divisible by this value.
     */
    numCoresPerSocket?: pulumi.Input<number>;
    /**
     * The number of virtual processors to assign to this virtual machine.
     */
    numCpus?: pulumi.Input<number>;
    /**
     * A specification for deploying a virtual machine from ovf/ova template.
     */
    ovfDeploy?: pulumi.Input<inputs.VirtualMachineOvfDeploy>;
    /**
     * A list of PCI passthrough devices
     */
    pciDeviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of time, in seconds, that we will be trying to power on a VM
     */
    poweronTimeout?: pulumi.Input<number>;
    /**
     * Triggers replacement of resource whenever it changes.
     */
    replaceTrigger?: pulumi.Input<string>;
    /**
     * The ID of a resource pool to put the virtual machine in.
     */
    resourcePoolId: pulumi.Input<string>;
    /**
     * Enable the run of scripts after virtual machine power-on when VMware Tools is installed.
     */
    runToolsScriptsAfterPowerOn?: pulumi.Input<boolean>;
    /**
     * Enable the run of scripts after virtual machine resume when when VMware Tools is installed.
     */
    runToolsScriptsAfterResume?: pulumi.Input<boolean>;
    /**
     * Enable the run of scripts before guest operating system reboot when VMware Tools is installed.
     */
    runToolsScriptsBeforeGuestReboot?: pulumi.Input<boolean>;
    /**
     * Enable the run of scripts before guest operating system shutdown when VMware Tools is installed.
     */
    runToolsScriptsBeforeGuestShutdown?: pulumi.Input<boolean>;
    /**
     * Enable the run of scripts before guest operating system standby when VMware Tools is installed.
     */
    runToolsScriptsBeforeGuestStandby?: pulumi.Input<boolean>;
    sataControllerCount?: pulumi.Input<number>;
    /**
     * Mode for sharing the SCSI bus. The modes are physicalSharing, virtualSharing, and noSharing.
     */
    scsiBusSharing?: pulumi.Input<string>;
    scsiControllerCount?: pulumi.Input<number>;
    /**
     * The type of SCSI bus this virtual machine will have. Can be one of lsilogic, lsilogic-sas or pvscsi.
     */
    scsiType?: pulumi.Input<string>;
    /**
     * The amount of time, in minutes, to wait for shutdown when making necessary updates to the virtual machine.
     */
    shutdownWaitTimeout?: pulumi.Input<number>;
    /**
     * The ID of the storage policy to assign to the virtual machine home directory.
     */
    storagePolicyId?: pulumi.Input<string>;
    /**
     * The swap file placement policy for this virtual machine. Can be one of inherit, hostLocal, or vmDirectory.
     */
    swapPlacementPolicy?: pulumi.Input<string>;
    /**
     * Enable guest clock synchronization with the host. On vSphere 7.0 U1 and above, with only this setting the clock is
     * synchronized on startup and resume. Requires VMware Tools to be installed.
     */
    syncTimeWithHost?: pulumi.Input<boolean>;
    /**
     * Enable periodic clock synchronization with the host. Supported only on vSphere 7.0 U1 and above. On prior versions
     * setting `syncTimeWithHost` is enough for periodic synchronization. Requires VMware Tools to be installed.
     */
    syncTimeWithHostPeriodically?: pulumi.Input<boolean>;
    /**
     * A list of tag IDs to apply to this object.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set the upgrade policy for VMware Tools. Can be one of `manual` or `upgradeAtPowerCycle`.
     */
    toolsUpgradePolicy?: pulumi.Input<string>;
    /**
     * vApp configuration data for this virtual machine. Can be used to provide configuration data for OVF images.
     */
    vapp?: pulumi.Input<inputs.VirtualMachineVapp>;
    /**
     * Flag to specify if Virtualization-based security is enabled for this virtual machine.
     */
    vbsEnabled?: pulumi.Input<boolean>;
    /**
     * Flag to specify if I/O MMU virtualization, also called Intel Virtualization Technology for Directed I/O (VT-d) and AMD
     * I/O Virtualization (AMD-Vi or IOMMU), is enabled.
     */
    vvtdEnabled?: pulumi.Input<boolean>;
    /**
     * The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
     * disables the waiter.
     */
    waitForGuestIpTimeout?: pulumi.Input<number>;
    /**
     * Controls whether or not the guest network waiter waits for a routable address. When false, the waiter does not wait for
     * a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria.
     */
    waitForGuestNetRoutable?: pulumi.Input<boolean>;
    /**
     * The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
     * disables the waiter.
     */
    waitForGuestNetTimeout?: pulumi.Input<number>;
}
