// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ContentLibraryItem extends pulumi.CustomResource {
    /**
     * Get an existing ContentLibraryItem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContentLibraryItemState, opts?: pulumi.CustomResourceOptions): ContentLibraryItem {
        return new ContentLibraryItem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/contentLibraryItem:ContentLibraryItem';

    /**
     * Returns true if the given object is an instance of ContentLibraryItem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContentLibraryItem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContentLibraryItem.__pulumiType;
    }

    /**
     * A description for the content library item.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * File to import as the content library item.
     */
    public readonly fileUrl!: pulumi.Output<string | undefined>;
    /**
     * The ID of the content library in which to create the item.
     */
    public readonly libraryId!: pulumi.Output<string>;
    /**
     * The name of the item to be created in the content library.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Virtual machine UUID to clone to content library.
     */
    public readonly sourceUuid!: pulumi.Output<string | undefined>;
    /**
     * Type of content library item.
     * One of "ovf", "iso", or "vm-template". Default: `ovf`.
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a ContentLibraryItem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContentLibraryItemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContentLibraryItemArgs | ContentLibraryItemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContentLibraryItemState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fileUrl"] = state ? state.fileUrl : undefined;
            resourceInputs["libraryId"] = state ? state.libraryId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sourceUuid"] = state ? state.sourceUuid : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ContentLibraryItemArgs | undefined;
            if ((!args || args.libraryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'libraryId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fileUrl"] = args ? args.fileUrl : undefined;
            resourceInputs["libraryId"] = args ? args.libraryId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sourceUuid"] = args ? args.sourceUuid : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContentLibraryItem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContentLibraryItem resources.
 */
export interface ContentLibraryItemState {
    /**
     * A description for the content library item.
     */
    description?: pulumi.Input<string>;
    /**
     * File to import as the content library item.
     */
    fileUrl?: pulumi.Input<string>;
    /**
     * The ID of the content library in which to create the item.
     */
    libraryId?: pulumi.Input<string>;
    /**
     * The name of the item to be created in the content library.
     */
    name?: pulumi.Input<string>;
    /**
     * Virtual machine UUID to clone to content library.
     */
    sourceUuid?: pulumi.Input<string>;
    /**
     * Type of content library item.
     * One of "ovf", "iso", or "vm-template". Default: `ovf`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContentLibraryItem resource.
 */
export interface ContentLibraryItemArgs {
    /**
     * A description for the content library item.
     */
    description?: pulumi.Input<string>;
    /**
     * File to import as the content library item.
     */
    fileUrl?: pulumi.Input<string>;
    /**
     * The ID of the content library in which to create the item.
     */
    libraryId: pulumi.Input<string>;
    /**
     * The name of the item to be created in the content library.
     */
    name?: pulumi.Input<string>;
    /**
     * Virtual machine UUID to clone to content library.
     */
    sourceUuid?: pulumi.Input<string>;
    /**
     * Type of content library item.
     * One of "ovf", "iso", or "vm-template". Default: `ovf`.
     */
    type?: pulumi.Input<string>;
}
