// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    public static partial class Invokes
    {
        /// <summary>
        /// The `vsphere..getVmfsDisks` data source can be used to discover the storage
        /// devices available on an ESXi host. This data source can be combined with the
        /// [`vsphere..VmfsDatastore`][data-source-vmfs-datastore] resource to create VMFS
        /// datastores based off a set of discovered disks.
        /// 
        /// [data-source-vmfs-datastore]: /docs/providers/vsphere/r/vmfs_datastore.html
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-vsphere/blob/master/website/docs/d/vmfs_disks.html.markdown.
        /// </summary>
        public static Task<GetVmfsDisksResult> GetVmfsDisks(GetVmfsDisksArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVmfsDisksResult>("vsphere:index/getVmfsDisks:getVmfsDisks", args ?? ResourceArgs.Empty, options.WithVersion());
    }

    public sealed class GetVmfsDisksArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A regular expression to filter the disks against. Only
        /// disks with canonical names that match will be included.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// The [managed object ID][docs-about-morefs] of
        /// the host to look for disks on.
        /// </summary>
        [Input("hostSystemId", required: true)]
        public Input<string> HostSystemId { get; set; } = null!;

        /// <summary>
        /// Whether or not to rescan storage adapters before
        /// searching for disks. This may lengthen the time it takes to perform the
        /// search. Default: `false`.
        /// </summary>
        [Input("rescan")]
        public Input<bool>? Rescan { get; set; }

        public GetVmfsDisksArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetVmfsDisksResult
    {
        /// <summary>
        /// A lexicographically sorted list of devices discovered by the
        /// operation, matching the supplied `filter`, if provided.
        /// </summary>
        public readonly ImmutableArray<string> Disks;
        public readonly string? Filter;
        public readonly string HostSystemId;
        public readonly bool? Rescan;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetVmfsDisksResult(
            ImmutableArray<string> disks,
            string? filter,
            string hostSystemId,
            bool? rescan,
            string id)
        {
            Disks = disks;
            Filter = filter;
            HostSystemId = hostSystemId;
            Rescan = rescan;
            Id = id;
        }
    }
}
