// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    /// <summary>
    /// The `vsphere.HaVmOverride` resource can be used to add an override for
    /// vSphere HA settings on a cluster for a specific virtual machine. With this
    /// resource, one can control specific HA settings so that they are different than
    /// the cluster default, accommodating the needs of that specific virtual machine,
    /// while not affecting the rest of the cluster.
    /// 
    /// For more information on vSphere HA, see [this page][ref-vsphere-ha-clusters].
    /// 
    /// [ref-vsphere-ha-clusters]: https://techdocs.broadcom.com/us/en/vmware-cis/vsphere/vsphere/8-0/vsphere-availability.html
    /// 
    /// &gt; **NOTE:** This resource requires vCenter and is not available on direct ESXi
    /// connections.
    /// 
    /// ## Example Usage
    /// 
    /// The example below creates a virtual machine in a cluster using the
    /// `vsphere.VirtualMachine` resource, creating the
    /// virtual machine in the cluster looked up by the
    /// `vsphere.ComputeCluster` data source.
    /// 
    /// Considering a scenario where this virtual machine is of high value to the
    /// application or organization for which it does its work, it's been determined in
    /// the event of a host failure, that this should be one of the first virtual
    /// machines to be started by vSphere HA during recovery. Hence, it
    /// `ha_vm_restart_priority` has been set to `highest`,
    /// which, assuming that the default restart priority is `medium` and no other
    /// virtual machine has been assigned the `highest` priority, will mean that this
    /// VM will be started before any other virtual machine in the event of host
    /// failure.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using VSphere = Pulumi.VSphere;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
    ///     {
    ///         Name = "dc-01",
    ///     });
    /// 
    ///     var datastore = VSphere.GetDatastore.Invoke(new()
    ///     {
    ///         Name = "datastore1",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var cluster = VSphere.GetComputeCluster.Invoke(new()
    ///     {
    ///         Name = "cluster-01",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var network = VSphere.GetNetwork.Invoke(new()
    ///     {
    ///         Name = "network1",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var vm = new VSphere.VirtualMachine("vm", new()
    ///     {
    ///         Name = "test",
    ///         ResourcePoolId = cluster.Apply(getComputeClusterResult =&gt; getComputeClusterResult.ResourcePoolId),
    ///         DatastoreId = datastore.Apply(getDatastoreResult =&gt; getDatastoreResult.Id),
    ///         NumCpus = 2,
    ///         Memory = 2048,
    ///         GuestId = "otherLinux64Guest",
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new VSphere.Inputs.VirtualMachineNetworkInterfaceArgs
    ///             {
    ///                 NetworkId = network.Apply(getNetworkResult =&gt; getNetworkResult.Id),
    ///             },
    ///         },
    ///         Disks = new[]
    ///         {
    ///             new VSphere.Inputs.VirtualMachineDiskArgs
    ///             {
    ///                 Label = "disk0",
    ///                 Size = 20,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var haVmOverride = new VSphere.HaVmOverride("ha_vm_override", new()
    ///     {
    ///         ComputeClusterId = cluster.Apply(getComputeClusterResult =&gt; getComputeClusterResult.Id),
    ///         VirtualMachineId = vm.Id,
    ///         HaVmRestartPriority = "highest",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing override can be imported into this resource by
    /// 
    /// supplying both the path to the cluster, and the path to the virtual machine, to
    /// 
    /// `pulumi import`. If no override exists, an error will be given.  An example
    /// 
    /// is below:
    /// 
    /// [docs-import]: https://developer.hashicorp.com/terraform/cli/import
    /// 
    /// ```sh
    /// $ pulumi import vsphere:index/haVmOverride:HaVmOverride ha_vm_override \
    /// ```
    /// 
    ///   '{"compute_cluster_path": "/dc1/host/cluster1", \
    /// 
    ///   "virtual_machine_path": "/dc1/vm/srv1"}'
    /// </summary>
    [VSphereResourceType("vsphere:index/haVmOverride:HaVmOverride")]
    public partial class HaVmOverride : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The managed object ID of the cluster.
        /// </summary>
        [Output("computeClusterId")]
        public Output<string> ComputeClusterId { get; private set; } = null!;

        /// <summary>
        /// Controls the action to take on this virtual machine if an APD status on an affected datastore clears in the middle of an APD event. Can be one of useClusterDefault, none or reset.
        /// </summary>
        [Output("haDatastoreApdRecoveryAction")]
        public Output<string?> HaDatastoreApdRecoveryAction { get; private set; } = null!;

        /// <summary>
        /// Controls the action to take on this virtual machine when the cluster has detected loss to all paths to a relevant datastore. Can be one of clusterDefault, disabled, warning, restartConservative, or restartAggressive.
        /// </summary>
        [Output("haDatastoreApdResponse")]
        public Output<string?> HaDatastoreApdResponse { get; private set; } = null!;

        /// <summary>
        /// Controls the delay in seconds to wait after an APD timeout event to execute the response action defined in ha_datastore_apd_response. Specify -1 to use the cluster setting.
        /// </summary>
        [Output("haDatastoreApdResponseDelay")]
        public Output<int?> HaDatastoreApdResponseDelay { get; private set; } = null!;

        /// <summary>
        /// Controls the action to take on this virtual machine when the cluster has detected a permanent device loss to a relevant datastore. Can be one of clusterDefault, disabled, warning, or restartAggressive.
        /// </summary>
        [Output("haDatastorePdlResponse")]
        public Output<string?> HaDatastorePdlResponse { get; private set; } = null!;

        /// <summary>
        /// The action to take on this virtual machine when a host is isolated from the rest of the cluster. Can be one of clusterIsolationResponse, none, powerOff, or shutdown.
        /// </summary>
        [Output("haHostIsolationResponse")]
        public Output<string?> HaHostIsolationResponse { get; private set; } = null!;

        /// <summary>
        /// If a heartbeat from this virtual machine is not received within this configured interval, the virtual machine is marked as failed. The value is in seconds.
        /// </summary>
        [Output("haVmFailureInterval")]
        public Output<int?> HaVmFailureInterval { get; private set; } = null!;

        /// <summary>
        /// The length of the reset window in which ha_vm_maximum_resets can operate. When this window expires, no more resets are attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset time is allotted.
        /// </summary>
        [Output("haVmMaximumFailureWindow")]
        public Output<int?> HaVmMaximumFailureWindow { get; private set; } = null!;

        /// <summary>
        /// The maximum number of resets that HA will perform to this virtual machine when responding to a failure event.
        /// </summary>
        [Output("haVmMaximumResets")]
        public Output<int?> HaVmMaximumResets { get; private set; } = null!;

        /// <summary>
        /// The time, in seconds, that HA waits after powering on this virtual machine before monitoring for heartbeats.
        /// </summary>
        [Output("haVmMinimumUptime")]
        public Output<int?> HaVmMinimumUptime { get; private set; } = null!;

        /// <summary>
        /// The type of virtual machine monitoring to use for this virtual machine. Can be one of vmMonitoringDisabled, vmMonitoringOnly, or vmAndAppMonitoring.
        /// </summary>
        [Output("haVmMonitoring")]
        public Output<string?> HaVmMonitoring { get; private set; } = null!;

        /// <summary>
        /// Determines whether or not the cluster's default settings or the VM override settings specified in this resource are used for virtual machine monitoring. The default is true (use cluster defaults) - set to false to have overrides take effect.
        /// </summary>
        [Output("haVmMonitoringUseClusterDefaults")]
        public Output<bool?> HaVmMonitoringUseClusterDefaults { get; private set; } = null!;

        /// <summary>
        /// The restart priority for this virtual machine when vSphere detects a host failure. Can be one of clusterRestartPriority, lowest, low, medium, high, or highest.
        /// </summary>
        [Output("haVmRestartPriority")]
        public Output<string?> HaVmRestartPriority { get; private set; } = null!;

        /// <summary>
        /// The maximum time, in seconds, that vSphere HA will wait for the virtual machine to be ready. Use -1 to use the cluster default.
        /// </summary>
        [Output("haVmRestartTimeout")]
        public Output<int?> HaVmRestartTimeout { get; private set; } = null!;

        /// <summary>
        /// The managed object ID of the virtual machine.
        /// </summary>
        [Output("virtualMachineId")]
        public Output<string> VirtualMachineId { get; private set; } = null!;


        /// <summary>
        /// Create a HaVmOverride resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HaVmOverride(string name, HaVmOverrideArgs args, CustomResourceOptions? options = null)
            : base("vsphere:index/haVmOverride:HaVmOverride", name, args ?? new HaVmOverrideArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HaVmOverride(string name, Input<string> id, HaVmOverrideState? state = null, CustomResourceOptions? options = null)
            : base("vsphere:index/haVmOverride:HaVmOverride", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HaVmOverride resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HaVmOverride Get(string name, Input<string> id, HaVmOverrideState? state = null, CustomResourceOptions? options = null)
        {
            return new HaVmOverride(name, id, state, options);
        }
    }

    public sealed class HaVmOverrideArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The managed object ID of the cluster.
        /// </summary>
        [Input("computeClusterId", required: true)]
        public Input<string> ComputeClusterId { get; set; } = null!;

        /// <summary>
        /// Controls the action to take on this virtual machine if an APD status on an affected datastore clears in the middle of an APD event. Can be one of useClusterDefault, none or reset.
        /// </summary>
        [Input("haDatastoreApdRecoveryAction")]
        public Input<string>? HaDatastoreApdRecoveryAction { get; set; }

        /// <summary>
        /// Controls the action to take on this virtual machine when the cluster has detected loss to all paths to a relevant datastore. Can be one of clusterDefault, disabled, warning, restartConservative, or restartAggressive.
        /// </summary>
        [Input("haDatastoreApdResponse")]
        public Input<string>? HaDatastoreApdResponse { get; set; }

        /// <summary>
        /// Controls the delay in seconds to wait after an APD timeout event to execute the response action defined in ha_datastore_apd_response. Specify -1 to use the cluster setting.
        /// </summary>
        [Input("haDatastoreApdResponseDelay")]
        public Input<int>? HaDatastoreApdResponseDelay { get; set; }

        /// <summary>
        /// Controls the action to take on this virtual machine when the cluster has detected a permanent device loss to a relevant datastore. Can be one of clusterDefault, disabled, warning, or restartAggressive.
        /// </summary>
        [Input("haDatastorePdlResponse")]
        public Input<string>? HaDatastorePdlResponse { get; set; }

        /// <summary>
        /// The action to take on this virtual machine when a host is isolated from the rest of the cluster. Can be one of clusterIsolationResponse, none, powerOff, or shutdown.
        /// </summary>
        [Input("haHostIsolationResponse")]
        public Input<string>? HaHostIsolationResponse { get; set; }

        /// <summary>
        /// If a heartbeat from this virtual machine is not received within this configured interval, the virtual machine is marked as failed. The value is in seconds.
        /// </summary>
        [Input("haVmFailureInterval")]
        public Input<int>? HaVmFailureInterval { get; set; }

        /// <summary>
        /// The length of the reset window in which ha_vm_maximum_resets can operate. When this window expires, no more resets are attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset time is allotted.
        /// </summary>
        [Input("haVmMaximumFailureWindow")]
        public Input<int>? HaVmMaximumFailureWindow { get; set; }

        /// <summary>
        /// The maximum number of resets that HA will perform to this virtual machine when responding to a failure event.
        /// </summary>
        [Input("haVmMaximumResets")]
        public Input<int>? HaVmMaximumResets { get; set; }

        /// <summary>
        /// The time, in seconds, that HA waits after powering on this virtual machine before monitoring for heartbeats.
        /// </summary>
        [Input("haVmMinimumUptime")]
        public Input<int>? HaVmMinimumUptime { get; set; }

        /// <summary>
        /// The type of virtual machine monitoring to use for this virtual machine. Can be one of vmMonitoringDisabled, vmMonitoringOnly, or vmAndAppMonitoring.
        /// </summary>
        [Input("haVmMonitoring")]
        public Input<string>? HaVmMonitoring { get; set; }

        /// <summary>
        /// Determines whether or not the cluster's default settings or the VM override settings specified in this resource are used for virtual machine monitoring. The default is true (use cluster defaults) - set to false to have overrides take effect.
        /// </summary>
        [Input("haVmMonitoringUseClusterDefaults")]
        public Input<bool>? HaVmMonitoringUseClusterDefaults { get; set; }

        /// <summary>
        /// The restart priority for this virtual machine when vSphere detects a host failure. Can be one of clusterRestartPriority, lowest, low, medium, high, or highest.
        /// </summary>
        [Input("haVmRestartPriority")]
        public Input<string>? HaVmRestartPriority { get; set; }

        /// <summary>
        /// The maximum time, in seconds, that vSphere HA will wait for the virtual machine to be ready. Use -1 to use the cluster default.
        /// </summary>
        [Input("haVmRestartTimeout")]
        public Input<int>? HaVmRestartTimeout { get; set; }

        /// <summary>
        /// The managed object ID of the virtual machine.
        /// </summary>
        [Input("virtualMachineId", required: true)]
        public Input<string> VirtualMachineId { get; set; } = null!;

        public HaVmOverrideArgs()
        {
        }
        public static new HaVmOverrideArgs Empty => new HaVmOverrideArgs();
    }

    public sealed class HaVmOverrideState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The managed object ID of the cluster.
        /// </summary>
        [Input("computeClusterId")]
        public Input<string>? ComputeClusterId { get; set; }

        /// <summary>
        /// Controls the action to take on this virtual machine if an APD status on an affected datastore clears in the middle of an APD event. Can be one of useClusterDefault, none or reset.
        /// </summary>
        [Input("haDatastoreApdRecoveryAction")]
        public Input<string>? HaDatastoreApdRecoveryAction { get; set; }

        /// <summary>
        /// Controls the action to take on this virtual machine when the cluster has detected loss to all paths to a relevant datastore. Can be one of clusterDefault, disabled, warning, restartConservative, or restartAggressive.
        /// </summary>
        [Input("haDatastoreApdResponse")]
        public Input<string>? HaDatastoreApdResponse { get; set; }

        /// <summary>
        /// Controls the delay in seconds to wait after an APD timeout event to execute the response action defined in ha_datastore_apd_response. Specify -1 to use the cluster setting.
        /// </summary>
        [Input("haDatastoreApdResponseDelay")]
        public Input<int>? HaDatastoreApdResponseDelay { get; set; }

        /// <summary>
        /// Controls the action to take on this virtual machine when the cluster has detected a permanent device loss to a relevant datastore. Can be one of clusterDefault, disabled, warning, or restartAggressive.
        /// </summary>
        [Input("haDatastorePdlResponse")]
        public Input<string>? HaDatastorePdlResponse { get; set; }

        /// <summary>
        /// The action to take on this virtual machine when a host is isolated from the rest of the cluster. Can be one of clusterIsolationResponse, none, powerOff, or shutdown.
        /// </summary>
        [Input("haHostIsolationResponse")]
        public Input<string>? HaHostIsolationResponse { get; set; }

        /// <summary>
        /// If a heartbeat from this virtual machine is not received within this configured interval, the virtual machine is marked as failed. The value is in seconds.
        /// </summary>
        [Input("haVmFailureInterval")]
        public Input<int>? HaVmFailureInterval { get; set; }

        /// <summary>
        /// The length of the reset window in which ha_vm_maximum_resets can operate. When this window expires, no more resets are attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset time is allotted.
        /// </summary>
        [Input("haVmMaximumFailureWindow")]
        public Input<int>? HaVmMaximumFailureWindow { get; set; }

        /// <summary>
        /// The maximum number of resets that HA will perform to this virtual machine when responding to a failure event.
        /// </summary>
        [Input("haVmMaximumResets")]
        public Input<int>? HaVmMaximumResets { get; set; }

        /// <summary>
        /// The time, in seconds, that HA waits after powering on this virtual machine before monitoring for heartbeats.
        /// </summary>
        [Input("haVmMinimumUptime")]
        public Input<int>? HaVmMinimumUptime { get; set; }

        /// <summary>
        /// The type of virtual machine monitoring to use for this virtual machine. Can be one of vmMonitoringDisabled, vmMonitoringOnly, or vmAndAppMonitoring.
        /// </summary>
        [Input("haVmMonitoring")]
        public Input<string>? HaVmMonitoring { get; set; }

        /// <summary>
        /// Determines whether or not the cluster's default settings or the VM override settings specified in this resource are used for virtual machine monitoring. The default is true (use cluster defaults) - set to false to have overrides take effect.
        /// </summary>
        [Input("haVmMonitoringUseClusterDefaults")]
        public Input<bool>? HaVmMonitoringUseClusterDefaults { get; set; }

        /// <summary>
        /// The restart priority for this virtual machine when vSphere detects a host failure. Can be one of clusterRestartPriority, lowest, low, medium, high, or highest.
        /// </summary>
        [Input("haVmRestartPriority")]
        public Input<string>? HaVmRestartPriority { get; set; }

        /// <summary>
        /// The maximum time, in seconds, that vSphere HA will wait for the virtual machine to be ready. Use -1 to use the cluster default.
        /// </summary>
        [Input("haVmRestartTimeout")]
        public Input<int>? HaVmRestartTimeout { get; set; }

        /// <summary>
        /// The managed object ID of the virtual machine.
        /// </summary>
        [Input("virtualMachineId")]
        public Input<string>? VirtualMachineId { get; set; }

        public HaVmOverrideState()
        {
        }
        public static new HaVmOverrideState Empty => new HaVmOverrideState();
    }
}
