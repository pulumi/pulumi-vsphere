// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    public static class GetResourcePool
    {
        /// <summary>
        /// The `vsphere.ResourcePool` data source can be used to discover the ID of a
        /// resource pool in vSphere. This is useful to return the ID of a resource pool
        /// that you want to use to create virtual machines in using the
        /// `vsphere.VirtualMachine` resource.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
        ///     {
        ///         Name = "dc-01",
        ///     });
        /// 
        ///     var pool = VSphere.GetResourcePool.Invoke(new()
        ///     {
        ///         Name = "resource-pool-01",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Specifying the Root Resource Pool for a Standalone ESXi Host
        /// 
        /// &gt; **NOTE:** Returning the root resource pool for a cluster can be done
        /// directly via the `vsphere.ComputeCluster`
        /// data source.
        /// 
        /// All compute resources in vSphere have a resource pool, even if one has not been
        /// explicitly created. This resource pool is referred to as the
        /// _root resource pool_ and can be looked up by specifying the path.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pool = VSphere.GetResourcePool.Invoke(new()
        ///     {
        ///         Name = "esxi-01.example.com/Resources",
        ///         DatacenterId = data.Vsphere_datacenter.Datacenter.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// For more information on the root resource pool, see [Managing Resource Pools][vmware-docs-resource-pools] in the vSphere documentation.
        /// 
        /// [vmware-docs-resource-pools]: https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.resmgmt.doc/GUID-60077B40-66FF-4625-934A-641703ED7601.html
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetResourcePoolResult> InvokeAsync(GetResourcePoolArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetResourcePoolResult>("vsphere:index/getResourcePool:getResourcePool", args ?? new GetResourcePoolArgs(), options.WithDefaults());

        /// <summary>
        /// The `vsphere.ResourcePool` data source can be used to discover the ID of a
        /// resource pool in vSphere. This is useful to return the ID of a resource pool
        /// that you want to use to create virtual machines in using the
        /// `vsphere.VirtualMachine` resource.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
        ///     {
        ///         Name = "dc-01",
        ///     });
        /// 
        ///     var pool = VSphere.GetResourcePool.Invoke(new()
        ///     {
        ///         Name = "resource-pool-01",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Specifying the Root Resource Pool for a Standalone ESXi Host
        /// 
        /// &gt; **NOTE:** Returning the root resource pool for a cluster can be done
        /// directly via the `vsphere.ComputeCluster`
        /// data source.
        /// 
        /// All compute resources in vSphere have a resource pool, even if one has not been
        /// explicitly created. This resource pool is referred to as the
        /// _root resource pool_ and can be looked up by specifying the path.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pool = VSphere.GetResourcePool.Invoke(new()
        ///     {
        ///         Name = "esxi-01.example.com/Resources",
        ///         DatacenterId = data.Vsphere_datacenter.Datacenter.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// For more information on the root resource pool, see [Managing Resource Pools][vmware-docs-resource-pools] in the vSphere documentation.
        /// 
        /// [vmware-docs-resource-pools]: https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.resmgmt.doc/GUID-60077B40-66FF-4625-934A-641703ED7601.html
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetResourcePoolResult> Invoke(GetResourcePoolInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetResourcePoolResult>("vsphere:index/getResourcePool:getResourcePool", args ?? new GetResourcePoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetResourcePoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The managed object reference ID
        /// of the datacenter in which the resource pool is located. This can be omitted
        /// if the search path used in `name` is an absolute path. For default
        /// datacenters, use the id attribute from an empty `vsphere.Datacenter` data
        /// source.
        /// </summary>
        [Input("datacenterId")]
        public string? DatacenterId { get; set; }

        /// <summary>
        /// The name of the resource pool. This can be a name or
        /// path. This is required when using vCenter.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetResourcePoolArgs()
        {
        }
        public static new GetResourcePoolArgs Empty => new GetResourcePoolArgs();
    }

    public sealed class GetResourcePoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The managed object reference ID
        /// of the datacenter in which the resource pool is located. This can be omitted
        /// if the search path used in `name` is an absolute path. For default
        /// datacenters, use the id attribute from an empty `vsphere.Datacenter` data
        /// source.
        /// </summary>
        [Input("datacenterId")]
        public Input<string>? DatacenterId { get; set; }

        /// <summary>
        /// The name of the resource pool. This can be a name or
        /// path. This is required when using vCenter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetResourcePoolInvokeArgs()
        {
        }
        public static new GetResourcePoolInvokeArgs Empty => new GetResourcePoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetResourcePoolResult
    {
        public readonly string? DatacenterId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;

        [OutputConstructor]
        private GetResourcePoolResult(
            string? datacenterId,

            string id,

            string? name)
        {
            DatacenterId = datacenterId;
            Id = id;
            Name = name;
        }
    }
}
