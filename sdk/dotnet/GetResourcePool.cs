// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    public static class GetResourcePool
    {
        /// <summary>
        /// The `vsphere.ResourcePool` data source can be used to discover the ID of a
        /// resource pool in vSphere. This is useful to return the ID of a resource pool
        /// that you want to use to create virtual machines in using the
        /// `vsphere.VirtualMachine` resource.
        /// </summary>
        public static Task<GetResourcePoolResult> InvokeAsync(GetResourcePoolArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetResourcePoolResult>("vsphere:index/getResourcePool:getResourcePool", args ?? new GetResourcePoolArgs(), options.WithDefaults());

        /// <summary>
        /// The `vsphere.ResourcePool` data source can be used to discover the ID of a
        /// resource pool in vSphere. This is useful to return the ID of a resource pool
        /// that you want to use to create virtual machines in using the
        /// `vsphere.VirtualMachine` resource.
        /// </summary>
        public static Output<GetResourcePoolResult> Invoke(GetResourcePoolInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetResourcePoolResult>("vsphere:index/getResourcePool:getResourcePool", args ?? new GetResourcePoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetResourcePoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The managed object reference ID
        /// of the datacenter in which the resource pool is located. This can be omitted
        /// if the search path used in `name` is an absolute path. For default
        /// datacenters, use the id attribute from an empty `vsphere.Datacenter` data
        /// source.
        /// 
        /// &gt; **Note:** When using ESXi without a vCenter Server instance, you do not
        /// need to specify either attribute to use this data source. An empty declaration
        /// will load the ESXi host's root resource pool.
        /// </summary>
        [Input("datacenterId")]
        public string? DatacenterId { get; set; }

        /// <summary>
        /// The name of the resource pool. This can be a name or
        /// path. This is required when using vCenter.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetResourcePoolArgs()
        {
        }
        public static new GetResourcePoolArgs Empty => new GetResourcePoolArgs();
    }

    public sealed class GetResourcePoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The managed object reference ID
        /// of the datacenter in which the resource pool is located. This can be omitted
        /// if the search path used in `name` is an absolute path. For default
        /// datacenters, use the id attribute from an empty `vsphere.Datacenter` data
        /// source.
        /// 
        /// &gt; **Note:** When using ESXi without a vCenter Server instance, you do not
        /// need to specify either attribute to use this data source. An empty declaration
        /// will load the ESXi host's root resource pool.
        /// </summary>
        [Input("datacenterId")]
        public Input<string>? DatacenterId { get; set; }

        /// <summary>
        /// The name of the resource pool. This can be a name or
        /// path. This is required when using vCenter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetResourcePoolInvokeArgs()
        {
        }
        public static new GetResourcePoolInvokeArgs Empty => new GetResourcePoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetResourcePoolResult
    {
        public readonly string? DatacenterId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;

        [OutputConstructor]
        private GetResourcePoolResult(
            string? datacenterId,

            string id,

            string? name)
        {
            DatacenterId = datacenterId;
            Id = id;
            Name = name;
        }
    }
}
