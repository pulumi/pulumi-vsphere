// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    public partial class VirtualMachine : Pulumi.CustomResource
    {
        /// <summary>
        /// The guest name for the operating system
        /// when `guest_id` is `other` or `other-64`.
        /// </summary>
        [Output("alternateGuestName")]
        public Output<string?> AlternateGuestName { get; private set; } = null!;

        /// <summary>
        /// A user-provided description of the virtual machine.
        /// The default is no annotation.
        /// </summary>
        [Output("annotation")]
        public Output<string?> Annotation { get; private set; } = null!;

        /// <summary>
        /// The number of milliseconds to wait before starting
        /// the boot sequence. The default is no delay.
        /// </summary>
        [Output("bootDelay")]
        public Output<int?> BootDelay { get; private set; } = null!;

        /// <summary>
        /// The number of milliseconds to wait before
        /// retrying the boot sequence. This only valid if `boot_retry_enabled` is true.
        /// Default: `10000` (10 seconds).
        /// </summary>
        [Output("bootRetryDelay")]
        public Output<int?> BootRetryDelay { get; private set; } = null!;

        /// <summary>
        /// If set to true, a virtual machine that
        /// fails to boot will try again after the delay defined in `boot_retry_delay`.
        /// Default: `false`.
        /// </summary>
        [Output("bootRetryEnabled")]
        public Output<bool?> BootRetryEnabled { get; private set; } = null!;

        /// <summary>
        /// A specification for a CDROM device on this virtual
        /// machine. See CDROM options below.
        /// </summary>
        [Output("cdrom")]
        public Output<Outputs.VirtualMachineCdrom?> Cdrom { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for a given version of the last
        /// configuration applied, such the timestamp of the last update to the
        /// configuration.
        /// </summary>
        [Output("changeVersion")]
        public Output<string> ChangeVersion { get; private set; } = null!;

        /// <summary>
        /// When specified, the VM will be created as a clone of a
        /// specified template. Optional customization options can be submitted as well.
        /// See creating a virtual machine from a
        /// template for more details.
        /// </summary>
        [Output("clone")]
        public Output<Outputs.VirtualMachineClone?> Clone { get; private set; } = null!;

        /// <summary>
        /// Allow CPUs to be added to this virtual
        /// machine while it is running.
        /// </summary>
        [Output("cpuHotAddEnabled")]
        public Output<bool?> CpuHotAddEnabled { get; private set; } = null!;

        /// <summary>
        /// Allow CPUs to be removed to this
        /// virtual machine while it is running.
        /// </summary>
        [Output("cpuHotRemoveEnabled")]
        public Output<bool?> CpuHotRemoveEnabled { get; private set; } = null!;

        /// <summary>
        /// The maximum amount of CPU (in MHz) that this virtual
        /// machine can consume, regardless of available resources. The default is no
        /// limit.
        /// </summary>
        [Output("cpuLimit")]
        public Output<int?> CpuLimit { get; private set; } = null!;

        /// <summary>
        /// Enable CPU performance
        /// counters on this virtual machine. Default: `false`.
        /// </summary>
        [Output("cpuPerformanceCountersEnabled")]
        public Output<bool?> CpuPerformanceCountersEnabled { get; private set; } = null!;

        /// <summary>
        /// The amount of CPU (in MHz) that this virtual
        /// machine is guaranteed. The default is no reservation.
        /// </summary>
        [Output("cpuReservation")]
        public Output<int?> CpuReservation { get; private set; } = null!;

        /// <summary>
        /// The number of CPU shares allocated to the
        /// virtual machine when the `cpu_share_level` is `custom`.
        /// </summary>
        [Output("cpuShareCount")]
        public Output<int> CpuShareCount { get; private set; } = null!;

        /// <summary>
        /// The allocation level for CPU resources. Can be
        /// one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
        /// </summary>
        [Output("cpuShareLevel")]
        public Output<string?> CpuShareLevel { get; private set; } = null!;

        /// <summary>
        /// Map of custom attribute ids to attribute
        /// value strings to set for virtual machine. See
        /// [here][docs-setting-custom-attributes] for a reference on how to set values
        /// for custom attributes.
        /// </summary>
        [Output("customAttributes")]
        public Output<ImmutableDictionary<string, string>?> CustomAttributes { get; private set; } = null!;

        /// <summary>
        /// The [managed object reference
        /// ID][docs-about-morefs] of the datastore cluster ID to use. This setting
        /// applies to entire virtual machine and implies that you wish to use Storage
        /// DRS with this virtual machine. See the section on virtual machine
        /// migration for details on changing this value.
        /// </summary>
        [Output("datastoreClusterId")]
        public Output<string?> DatastoreClusterId { get; private set; } = null!;

        /// <summary>
        /// The datastore ID that the ISO is located in.
        /// Requried for using a datastore ISO. Conflicts with `client_device`.
        /// </summary>
        [Output("datastoreId")]
        public Output<string> DatastoreId { get; private set; } = null!;

        /// <summary>
        /// The IP address selected by Terraform to be used for the provisioner.
        /// </summary>
        [Output("defaultIpAddress")]
        public Output<string> DefaultIpAddress { get; private set; } = null!;

        /// <summary>
        /// A specification for a virtual disk device on this virtual
        /// machine. See disk options below.
        /// </summary>
        [Output("disks")]
        public Output<ImmutableArray<Outputs.VirtualMachineDisk>> Disks { get; private set; } = null!;

        /// <summary>
        /// When the `firmware` type is set to is
        /// `efi`, this enables EFI secure boot. Default: `false`.
        /// </summary>
        [Output("efiSecureBootEnabled")]
        public Output<bool?> EfiSecureBootEnabled { get; private set; } = null!;

        /// <summary>
        /// Expose the UUIDs of attached virtual disks to
        /// the virtual machine, allowing access to them in the guest. Default: `false`.
        /// </summary>
        [Output("enableDiskUuid")]
        public Output<bool?> EnableDiskUuid { get; private set; } = null!;

        /// <summary>
        /// Enable logging of virtual machine events to a
        /// log file stored in the virtual machine directory. Default: `false`.
        /// </summary>
        [Output("enableLogging")]
        public Output<bool?> EnableLogging { get; private set; } = null!;

        /// <summary>
        /// The EPT/RVI (hardware memory virtualization)
        /// setting for this virtual machine. Can be one of `automatic`, `on`, or `off`.
        /// Default: `automatic`.
        /// </summary>
        [Output("eptRviMode")]
        public Output<string?> EptRviMode { get; private set; } = null!;

        /// <summary>
        /// Extra configuration data for this virtual
        /// machine. Can be used to supply advanced parameters not normally in
        /// configuration, such as instance metadata.
        /// </summary>
        [Output("extraConfig")]
        public Output<ImmutableDictionary<string, string>?> ExtraConfig { get; private set; } = null!;

        /// <summary>
        /// The firmware interface to use on the virtual machine.
        /// Can be one of `bios` or `EFI`. Default: `bios`.
        /// </summary>
        [Output("firmware")]
        public Output<string?> Firmware { get; private set; } = null!;

        /// <summary>
        /// The path to the folder to put this virtual machine in,
        /// relative to the datacenter that the resource pool is in.
        /// </summary>
        [Output("folder")]
        public Output<string?> Folder { get; private set; } = null!;

        /// <summary>
        /// If a guest shutdown failed or timed out while
        /// updating or destroying (see
        /// `shutdown_wait_timeout`), force the power-off of
        /// the virtual machine. Default: `true`.
        /// </summary>
        [Output("forcePowerOff")]
        public Output<bool?> ForcePowerOff { get; private set; } = null!;

        /// <summary>
        /// The guest ID for the operating system type. For a
        /// full list of possible values, see [here][vmware-docs-guest-ids]. Default: `other-64`.
        /// </summary>
        [Output("guestId")]
        public Output<string?> GuestId { get; private set; } = null!;

        /// <summary>
        /// The current list of IP addresses on this machine,
        /// including the value of `default_ip_address`. If VMware tools is not running
        /// on the virtual machine, or if the VM is powered off, this list will be empty.
        /// * `moid`: The [managed object reference ID][docs-about-morefs] of the created
        /// virtual machine.
        /// </summary>
        [Output("guestIpAddresses")]
        public Output<ImmutableArray<string>> GuestIpAddresses { get; private set; } = null!;

        /// <summary>
        /// The hardware version number. Valid range
        /// is from 4 to 15. The hardware version cannot be downgraded. See [virtual
        /// machine hardware compatibility][virtual-machine-hardware-compatibility] for
        /// more details.
        /// </summary>
        [Output("hardwareVersion")]
        public Output<int> HardwareVersion { get; private set; } = null!;

        /// <summary>
        /// An optional [managed object reference
        /// ID][docs-about-morefs] of a host to put this virtual machine on. See the
        /// section on virtual machine migration for
        /// details on changing this value. If a `host_system_id` is not supplied,
        /// vSphere will select a host in the resource pool to place the virtual machine,
        /// according to any defaults or DRS policies in place.
        /// </summary>
        [Output("hostSystemId")]
        public Output<string> HostSystemId { get; private set; } = null!;

        /// <summary>
        /// The (non-nested) hardware virtualization setting for
        /// this virtual machine. Can be one of `hvAuto`, `hvOn`, or `hvOff`. Default:
        /// `hvAuto`.
        /// </summary>
        [Output("hvMode")]
        public Output<string?> HvMode { get; private set; } = null!;

        /// <summary>
        /// List of IP addresses and CIDR networks to
        /// ignore while waiting for an available IP address using either of the waiters.
        /// Any IP addresses in this list will be ignored if they show up so that the
        /// waiter will continue to wait for a real IP address. Default: [].
        /// </summary>
        [Output("ignoredGuestIps")]
        public Output<ImmutableArray<string>> IgnoredGuestIps { get; private set; } = null!;

        /// <summary>
        /// This is flagged if the virtual machine has been imported, or the
        /// state has been migrated from a previous version of the resource. It
        /// influences the behavior of the first post-import apply operation. See the
        /// section on importing below.
        /// </summary>
        [Output("imported")]
        public Output<bool> Imported { get; private set; } = null!;

        /// <summary>
        /// Controls the scheduling delay of the
        /// virtual machine. Use a higher sensitivity for applications that require lower
        /// latency, such as VOIP, media player applications, or applications that
        /// require frequent access to mouse or keyboard devices. Can be one of `low`,
        /// `normal`, `medium`, or `high`.
        /// </summary>
        [Output("latencySensitivity")]
        public Output<string?> LatencySensitivity { get; private set; } = null!;

        /// <summary>
        /// The size of the virtual machine's memory, in MB.
        /// Default: `1024` (1 GB).
        /// </summary>
        [Output("memory")]
        public Output<int?> Memory { get; private set; } = null!;

        /// <summary>
        /// Allow memory to be added to this
        /// virtual machine while it is running.
        /// </summary>
        [Output("memoryHotAddEnabled")]
        public Output<bool?> MemoryHotAddEnabled { get; private set; } = null!;

        /// <summary>
        /// The maximum amount of memory (in MB) that this
        /// virtual machine can consume, regardless of available resources. The default
        /// is no limit.
        /// </summary>
        [Output("memoryLimit")]
        public Output<int?> MemoryLimit { get; private set; } = null!;

        /// <summary>
        /// The amount of memory (in MB) that this
        /// virtual machine is guaranteed. The default is no reservation.
        /// </summary>
        [Output("memoryReservation")]
        public Output<int?> MemoryReservation { get; private set; } = null!;

        /// <summary>
        /// The number of memory shares allocated to
        /// the virtual machine when the `memory_share_level` is `custom`.
        /// </summary>
        [Output("memoryShareCount")]
        public Output<int> MemoryShareCount { get; private set; } = null!;

        /// <summary>
        /// The allocation level for memory resources.
        /// Can be one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
        /// </summary>
        [Output("memoryShareLevel")]
        public Output<string?> MemoryShareLevel { get; private set; } = null!;

        /// <summary>
        /// The amount of time, in minutes, to wait
        /// for a virtual machine migration to complete before failing. Default: 10
        /// minutes. Also see the section on virtual machine
        /// migration.
        /// </summary>
        [Output("migrateWaitTimeout")]
        public Output<int?> MigrateWaitTimeout { get; private set; } = null!;

        /// <summary>
        /// The machine object ID from VMWare
        /// </summary>
        [Output("moid")]
        public Output<string> Moid { get; private set; } = null!;

        /// <summary>
        /// An alias for both `label` and `path`, the latter when
        /// using `attach`. Required if not using `label`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Enable nested hardware virtualization on
        /// this virtual machine, facilitating nested virtualization in the guest.
        /// Default: `false`.
        /// </summary>
        [Output("nestedHvEnabled")]
        public Output<bool?> NestedHvEnabled { get; private set; } = null!;

        /// <summary>
        /// A specification for a virtual NIC on this
        /// virtual machine. See network interface options
        /// below.
        /// </summary>
        [Output("networkInterfaces")]
        public Output<ImmutableArray<Outputs.VirtualMachineNetworkInterface>> NetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// The number of cores per socket in this
        /// virtual machine. The number of vCPUs on the virtual machine will be
        /// `num_cpus` divided by `num_cores_per_socket`. If specified, the value
        /// supplied to `num_cpus` must be evenly divisible by this value. Default: `1`.
        /// </summary>
        [Output("numCoresPerSocket")]
        public Output<int?> NumCoresPerSocket { get; private set; } = null!;

        /// <summary>
        /// The total number of virtual processor cores to assign
        /// to this virtual machine. Default: `1`.
        /// </summary>
        [Output("numCpus")]
        public Output<int?> NumCpus { get; private set; } = null!;

        /// <summary>
        /// The amount of time, in seconds, that we will be trying to power on a VM
        /// </summary>
        [Output("poweronTimeout")]
        public Output<int?> PoweronTimeout { get; private set; } = null!;

        /// <summary>
        /// Value internal to Terraform used to determine if a configuration set change requires a reboot.
        /// </summary>
        [Output("rebootRequired")]
        public Output<bool> RebootRequired { get; private set; } = null!;

        /// <summary>
        /// The [managed object reference
        /// ID][docs-about-morefs] of the resource pool to put this virtual machine in.
        /// See the section on virtual machine migration
        /// for details on changing this value.
        /// </summary>
        [Output("resourcePoolId")]
        public Output<string> ResourcePoolId { get; private set; } = null!;

        /// <summary>
        /// Enable the execution of
        /// post-power-on scripts when VMware tools is installed. Default: `true`.
        /// </summary>
        [Output("runToolsScriptsAfterPowerOn")]
        public Output<bool?> RunToolsScriptsAfterPowerOn { get; private set; } = null!;

        /// <summary>
        /// Enable the execution of
        /// post-resume scripts when VMware tools is installed. Default: `true`.
        /// </summary>
        [Output("runToolsScriptsAfterResume")]
        public Output<bool?> RunToolsScriptsAfterResume { get; private set; } = null!;

        /// <summary>
        /// Enable the execution of
        /// pre-reboot scripts when VMware tools is installed. Default: `false`.
        /// </summary>
        [Output("runToolsScriptsBeforeGuestReboot")]
        public Output<bool?> RunToolsScriptsBeforeGuestReboot { get; private set; } = null!;

        /// <summary>
        /// Enable the execution
        /// of pre-shutdown scripts when VMware tools is installed. Default: `true`.
        /// </summary>
        [Output("runToolsScriptsBeforeGuestShutdown")]
        public Output<bool?> RunToolsScriptsBeforeGuestShutdown { get; private set; } = null!;

        /// <summary>
        /// Enable the execution of
        /// pre-standby scripts when VMware tools is installed. Default: `true`.
        /// </summary>
        [Output("runToolsScriptsBeforeGuestStandby")]
        public Output<bool?> RunToolsScriptsBeforeGuestStandby { get; private set; } = null!;

        /// <summary>
        /// Mode for sharing the SCSI bus. The modes are
        /// physicalSharing, virtualSharing, and noSharing. Default: `noSharing`.
        /// </summary>
        [Output("scsiBusSharing")]
        public Output<string?> ScsiBusSharing { get; private set; } = null!;

        /// <summary>
        /// The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
        /// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
        /// controllers.
        /// </summary>
        [Output("scsiControllerCount")]
        public Output<int?> ScsiControllerCount { get; private set; } = null!;

        /// <summary>
        /// The type of SCSI bus this virtual machine will have.
        /// Can be one of lsilogic (LSI Logic Parallel), lsilogic-sas (LSI Logic SAS) or
        /// pvscsi (VMware Paravirtual). Defualt: `pvscsi`.
        /// </summary>
        [Output("scsiType")]
        public Output<string?> ScsiType { get; private set; } = null!;

        /// <summary>
        /// The amount of time, in minutes, to wait
        /// for a graceful guest shutdown when making necessary updates to the virtual
        /// machine. If `force_power_off` is set to true, the VM will be force powered-off
        /// after this timeout, otherwise an error is returned. Default: 3 minutes.
        /// </summary>
        [Output("shutdownWaitTimeout")]
        public Output<int?> ShutdownWaitTimeout { get; private set; } = null!;

        /// <summary>
        /// The UUID of the storage policy to assign to this disk.
        /// </summary>
        [Output("storagePolicyId")]
        public Output<string?> StoragePolicyId { get; private set; } = null!;

        /// <summary>
        /// The swap file placement policy for this
        /// virtual machine. Can be one of `inherit`, `hostLocal`, or `vmDirectory`.
        /// Default: `inherit`.
        /// </summary>
        [Output("swapPlacementPolicy")]
        public Output<string?> SwapPlacementPolicy { get; private set; } = null!;

        /// <summary>
        /// Enable guest clock synchronization with
        /// the host. Requires VMware tools to be installed. Default: `false`.
        /// </summary>
        [Output("syncTimeWithHost")]
        public Output<bool?> SyncTimeWithHost { get; private set; } = null!;

        /// <summary>
        /// The IDs of any tags to attach to this resource. See
        /// [here][docs-applying-tags] for a reference on how to apply tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The UUID of the virtual disk's VMDK file. This is used to track the
        /// virtual disk on the virtual machine.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;

        /// <summary>
        /// Optional vApp configuration. The only sub-key available
        /// is `properties`, which is a key/value map of properties for virtual machines
        /// imported from OVF or OVA files. See Using vApp properties to supply OVF/OVA
        /// configuration for
        /// more details.
        /// </summary>
        [Output("vapp")]
        public Output<Outputs.VirtualMachineVapp?> Vapp { get; private set; } = null!;

        /// <summary>
        /// Computed value which is only valid for cloned virtual
        /// machines. A list of vApp transport methods supported by the source virtual
        /// machine or template.
        /// </summary>
        [Output("vappTransports")]
        public Output<ImmutableArray<string>> VappTransports { get; private set; } = null!;

        /// <summary>
        /// The state of VMware tools in the guest. This will
        /// determine the proper course of action for some device operations.
        /// </summary>
        [Output("vmwareToolsStatus")]
        public Output<string> VmwareToolsStatus { get; private set; } = null!;

        /// <summary>
        /// The path of the virtual machine's configuration file in the VM's
        /// datastore.
        /// </summary>
        [Output("vmxPath")]
        public Output<string> VmxPath { get; private set; } = null!;

        /// <summary>
        /// The amount of time, in minutes, to
        /// wait for an available guest IP address on this virtual machine. This should
        /// only be used if your version of VMware Tools does not allow the
        /// `wait_for_guest_net_timeout` waiter to be
        /// used. A value less than 1 disables the waiter. Default: 0.
        /// </summary>
        [Output("waitForGuestIpTimeout")]
        public Output<int?> WaitForGuestIpTimeout { get; private set; } = null!;

        /// <summary>
        /// Controls whether or not the guest
        /// network waiter waits for a routable address. When `false`, the waiter does
        /// not wait for a default gateway, nor are IP addresses checked against any
        /// discovered default gateways as part of its success criteria. This property is
        /// ignored if the `wait_for_guest_ip_timeout`
        /// waiter is used. Default: `true`.
        /// </summary>
        [Output("waitForGuestNetRoutable")]
        public Output<bool?> WaitForGuestNetRoutable { get; private set; } = null!;

        /// <summary>
        /// The amount of time, in minutes, to
        /// wait for an available IP address on this virtual machine's NICs. Older
        /// versions of VMware Tools do not populate this property. In those cases, this
        /// waiter can be disabled and the
        /// `wait_for_guest_ip_timeout` waiter can be used
        /// instead. A value less than 1 disables the waiter. Default: 5 minutes.
        /// </summary>
        [Output("waitForGuestNetTimeout")]
        public Output<int?> WaitForGuestNetTimeout { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualMachine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualMachine(string name, VirtualMachineArgs args, CustomResourceOptions? options = null)
            : base("vsphere:index/virtualMachine:VirtualMachine", name, args ?? new VirtualMachineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualMachine(string name, Input<string> id, VirtualMachineState? state = null, CustomResourceOptions? options = null)
            : base("vsphere:index/virtualMachine:VirtualMachine", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualMachine Get(string name, Input<string> id, VirtualMachineState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualMachine(name, id, state, options);
        }
    }

    public sealed class VirtualMachineArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The guest name for the operating system
        /// when `guest_id` is `other` or `other-64`.
        /// </summary>
        [Input("alternateGuestName")]
        public Input<string>? AlternateGuestName { get; set; }

        /// <summary>
        /// A user-provided description of the virtual machine.
        /// The default is no annotation.
        /// </summary>
        [Input("annotation")]
        public Input<string>? Annotation { get; set; }

        /// <summary>
        /// The number of milliseconds to wait before starting
        /// the boot sequence. The default is no delay.
        /// </summary>
        [Input("bootDelay")]
        public Input<int>? BootDelay { get; set; }

        /// <summary>
        /// The number of milliseconds to wait before
        /// retrying the boot sequence. This only valid if `boot_retry_enabled` is true.
        /// Default: `10000` (10 seconds).
        /// </summary>
        [Input("bootRetryDelay")]
        public Input<int>? BootRetryDelay { get; set; }

        /// <summary>
        /// If set to true, a virtual machine that
        /// fails to boot will try again after the delay defined in `boot_retry_delay`.
        /// Default: `false`.
        /// </summary>
        [Input("bootRetryEnabled")]
        public Input<bool>? BootRetryEnabled { get; set; }

        /// <summary>
        /// A specification for a CDROM device on this virtual
        /// machine. See CDROM options below.
        /// </summary>
        [Input("cdrom")]
        public Input<Inputs.VirtualMachineCdromArgs>? Cdrom { get; set; }

        /// <summary>
        /// When specified, the VM will be created as a clone of a
        /// specified template. Optional customization options can be submitted as well.
        /// See creating a virtual machine from a
        /// template for more details.
        /// </summary>
        [Input("clone")]
        public Input<Inputs.VirtualMachineCloneArgs>? Clone { get; set; }

        /// <summary>
        /// Allow CPUs to be added to this virtual
        /// machine while it is running.
        /// </summary>
        [Input("cpuHotAddEnabled")]
        public Input<bool>? CpuHotAddEnabled { get; set; }

        /// <summary>
        /// Allow CPUs to be removed to this
        /// virtual machine while it is running.
        /// </summary>
        [Input("cpuHotRemoveEnabled")]
        public Input<bool>? CpuHotRemoveEnabled { get; set; }

        /// <summary>
        /// The maximum amount of CPU (in MHz) that this virtual
        /// machine can consume, regardless of available resources. The default is no
        /// limit.
        /// </summary>
        [Input("cpuLimit")]
        public Input<int>? CpuLimit { get; set; }

        /// <summary>
        /// Enable CPU performance
        /// counters on this virtual machine. Default: `false`.
        /// </summary>
        [Input("cpuPerformanceCountersEnabled")]
        public Input<bool>? CpuPerformanceCountersEnabled { get; set; }

        /// <summary>
        /// The amount of CPU (in MHz) that this virtual
        /// machine is guaranteed. The default is no reservation.
        /// </summary>
        [Input("cpuReservation")]
        public Input<int>? CpuReservation { get; set; }

        /// <summary>
        /// The number of CPU shares allocated to the
        /// virtual machine when the `cpu_share_level` is `custom`.
        /// </summary>
        [Input("cpuShareCount")]
        public Input<int>? CpuShareCount { get; set; }

        /// <summary>
        /// The allocation level for CPU resources. Can be
        /// one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
        /// </summary>
        [Input("cpuShareLevel")]
        public Input<string>? CpuShareLevel { get; set; }

        [Input("customAttributes")]
        private InputMap<string>? _customAttributes;

        /// <summary>
        /// Map of custom attribute ids to attribute
        /// value strings to set for virtual machine. See
        /// [here][docs-setting-custom-attributes] for a reference on how to set values
        /// for custom attributes.
        /// </summary>
        public InputMap<string> CustomAttributes
        {
            get => _customAttributes ?? (_customAttributes = new InputMap<string>());
            set => _customAttributes = value;
        }

        /// <summary>
        /// The [managed object reference
        /// ID][docs-about-morefs] of the datastore cluster ID to use. This setting
        /// applies to entire virtual machine and implies that you wish to use Storage
        /// DRS with this virtual machine. See the section on virtual machine
        /// migration for details on changing this value.
        /// </summary>
        [Input("datastoreClusterId")]
        public Input<string>? DatastoreClusterId { get; set; }

        /// <summary>
        /// The datastore ID that the ISO is located in.
        /// Requried for using a datastore ISO. Conflicts with `client_device`.
        /// </summary>
        [Input("datastoreId")]
        public Input<string>? DatastoreId { get; set; }

        [Input("disks")]
        private InputList<Inputs.VirtualMachineDiskArgs>? _disks;

        /// <summary>
        /// A specification for a virtual disk device on this virtual
        /// machine. See disk options below.
        /// </summary>
        public InputList<Inputs.VirtualMachineDiskArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.VirtualMachineDiskArgs>());
            set => _disks = value;
        }

        /// <summary>
        /// When the `firmware` type is set to is
        /// `efi`, this enables EFI secure boot. Default: `false`.
        /// </summary>
        [Input("efiSecureBootEnabled")]
        public Input<bool>? EfiSecureBootEnabled { get; set; }

        /// <summary>
        /// Expose the UUIDs of attached virtual disks to
        /// the virtual machine, allowing access to them in the guest. Default: `false`.
        /// </summary>
        [Input("enableDiskUuid")]
        public Input<bool>? EnableDiskUuid { get; set; }

        /// <summary>
        /// Enable logging of virtual machine events to a
        /// log file stored in the virtual machine directory. Default: `false`.
        /// </summary>
        [Input("enableLogging")]
        public Input<bool>? EnableLogging { get; set; }

        /// <summary>
        /// The EPT/RVI (hardware memory virtualization)
        /// setting for this virtual machine. Can be one of `automatic`, `on`, or `off`.
        /// Default: `automatic`.
        /// </summary>
        [Input("eptRviMode")]
        public Input<string>? EptRviMode { get; set; }

        [Input("extraConfig")]
        private InputMap<string>? _extraConfig;

        /// <summary>
        /// Extra configuration data for this virtual
        /// machine. Can be used to supply advanced parameters not normally in
        /// configuration, such as instance metadata.
        /// </summary>
        public InputMap<string> ExtraConfig
        {
            get => _extraConfig ?? (_extraConfig = new InputMap<string>());
            set => _extraConfig = value;
        }

        /// <summary>
        /// The firmware interface to use on the virtual machine.
        /// Can be one of `bios` or `EFI`. Default: `bios`.
        /// </summary>
        [Input("firmware")]
        public Input<string>? Firmware { get; set; }

        /// <summary>
        /// The path to the folder to put this virtual machine in,
        /// relative to the datacenter that the resource pool is in.
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// If a guest shutdown failed or timed out while
        /// updating or destroying (see
        /// `shutdown_wait_timeout`), force the power-off of
        /// the virtual machine. Default: `true`.
        /// </summary>
        [Input("forcePowerOff")]
        public Input<bool>? ForcePowerOff { get; set; }

        /// <summary>
        /// The guest ID for the operating system type. For a
        /// full list of possible values, see [here][vmware-docs-guest-ids]. Default: `other-64`.
        /// </summary>
        [Input("guestId")]
        public Input<string>? GuestId { get; set; }

        /// <summary>
        /// The hardware version number. Valid range
        /// is from 4 to 15. The hardware version cannot be downgraded. See [virtual
        /// machine hardware compatibility][virtual-machine-hardware-compatibility] for
        /// more details.
        /// </summary>
        [Input("hardwareVersion")]
        public Input<int>? HardwareVersion { get; set; }

        /// <summary>
        /// An optional [managed object reference
        /// ID][docs-about-morefs] of a host to put this virtual machine on. See the
        /// section on virtual machine migration for
        /// details on changing this value. If a `host_system_id` is not supplied,
        /// vSphere will select a host in the resource pool to place the virtual machine,
        /// according to any defaults or DRS policies in place.
        /// </summary>
        [Input("hostSystemId")]
        public Input<string>? HostSystemId { get; set; }

        /// <summary>
        /// The (non-nested) hardware virtualization setting for
        /// this virtual machine. Can be one of `hvAuto`, `hvOn`, or `hvOff`. Default:
        /// `hvAuto`.
        /// </summary>
        [Input("hvMode")]
        public Input<string>? HvMode { get; set; }

        [Input("ignoredGuestIps")]
        private InputList<string>? _ignoredGuestIps;

        /// <summary>
        /// List of IP addresses and CIDR networks to
        /// ignore while waiting for an available IP address using either of the waiters.
        /// Any IP addresses in this list will be ignored if they show up so that the
        /// waiter will continue to wait for a real IP address. Default: [].
        /// </summary>
        public InputList<string> IgnoredGuestIps
        {
            get => _ignoredGuestIps ?? (_ignoredGuestIps = new InputList<string>());
            set => _ignoredGuestIps = value;
        }

        /// <summary>
        /// Controls the scheduling delay of the
        /// virtual machine. Use a higher sensitivity for applications that require lower
        /// latency, such as VOIP, media player applications, or applications that
        /// require frequent access to mouse or keyboard devices. Can be one of `low`,
        /// `normal`, `medium`, or `high`.
        /// </summary>
        [Input("latencySensitivity")]
        public Input<string>? LatencySensitivity { get; set; }

        /// <summary>
        /// The size of the virtual machine's memory, in MB.
        /// Default: `1024` (1 GB).
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        /// <summary>
        /// Allow memory to be added to this
        /// virtual machine while it is running.
        /// </summary>
        [Input("memoryHotAddEnabled")]
        public Input<bool>? MemoryHotAddEnabled { get; set; }

        /// <summary>
        /// The maximum amount of memory (in MB) that this
        /// virtual machine can consume, regardless of available resources. The default
        /// is no limit.
        /// </summary>
        [Input("memoryLimit")]
        public Input<int>? MemoryLimit { get; set; }

        /// <summary>
        /// The amount of memory (in MB) that this
        /// virtual machine is guaranteed. The default is no reservation.
        /// </summary>
        [Input("memoryReservation")]
        public Input<int>? MemoryReservation { get; set; }

        /// <summary>
        /// The number of memory shares allocated to
        /// the virtual machine when the `memory_share_level` is `custom`.
        /// </summary>
        [Input("memoryShareCount")]
        public Input<int>? MemoryShareCount { get; set; }

        /// <summary>
        /// The allocation level for memory resources.
        /// Can be one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
        /// </summary>
        [Input("memoryShareLevel")]
        public Input<string>? MemoryShareLevel { get; set; }

        /// <summary>
        /// The amount of time, in minutes, to wait
        /// for a virtual machine migration to complete before failing. Default: 10
        /// minutes. Also see the section on virtual machine
        /// migration.
        /// </summary>
        [Input("migrateWaitTimeout")]
        public Input<int>? MigrateWaitTimeout { get; set; }

        /// <summary>
        /// An alias for both `label` and `path`, the latter when
        /// using `attach`. Required if not using `label`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable nested hardware virtualization on
        /// this virtual machine, facilitating nested virtualization in the guest.
        /// Default: `false`.
        /// </summary>
        [Input("nestedHvEnabled")]
        public Input<bool>? NestedHvEnabled { get; set; }

        [Input("networkInterfaces", required: true)]
        private InputList<Inputs.VirtualMachineNetworkInterfaceArgs>? _networkInterfaces;

        /// <summary>
        /// A specification for a virtual NIC on this
        /// virtual machine. See network interface options
        /// below.
        /// </summary>
        public InputList<Inputs.VirtualMachineNetworkInterfaceArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.VirtualMachineNetworkInterfaceArgs>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// The number of cores per socket in this
        /// virtual machine. The number of vCPUs on the virtual machine will be
        /// `num_cpus` divided by `num_cores_per_socket`. If specified, the value
        /// supplied to `num_cpus` must be evenly divisible by this value. Default: `1`.
        /// </summary>
        [Input("numCoresPerSocket")]
        public Input<int>? NumCoresPerSocket { get; set; }

        /// <summary>
        /// The total number of virtual processor cores to assign
        /// to this virtual machine. Default: `1`.
        /// </summary>
        [Input("numCpus")]
        public Input<int>? NumCpus { get; set; }

        /// <summary>
        /// The amount of time, in seconds, that we will be trying to power on a VM
        /// </summary>
        [Input("poweronTimeout")]
        public Input<int>? PoweronTimeout { get; set; }

        /// <summary>
        /// The [managed object reference
        /// ID][docs-about-morefs] of the resource pool to put this virtual machine in.
        /// See the section on virtual machine migration
        /// for details on changing this value.
        /// </summary>
        [Input("resourcePoolId", required: true)]
        public Input<string> ResourcePoolId { get; set; } = null!;

        /// <summary>
        /// Enable the execution of
        /// post-power-on scripts when VMware tools is installed. Default: `true`.
        /// </summary>
        [Input("runToolsScriptsAfterPowerOn")]
        public Input<bool>? RunToolsScriptsAfterPowerOn { get; set; }

        /// <summary>
        /// Enable the execution of
        /// post-resume scripts when VMware tools is installed. Default: `true`.
        /// </summary>
        [Input("runToolsScriptsAfterResume")]
        public Input<bool>? RunToolsScriptsAfterResume { get; set; }

        /// <summary>
        /// Enable the execution of
        /// pre-reboot scripts when VMware tools is installed. Default: `false`.
        /// </summary>
        [Input("runToolsScriptsBeforeGuestReboot")]
        public Input<bool>? RunToolsScriptsBeforeGuestReboot { get; set; }

        /// <summary>
        /// Enable the execution
        /// of pre-shutdown scripts when VMware tools is installed. Default: `true`.
        /// </summary>
        [Input("runToolsScriptsBeforeGuestShutdown")]
        public Input<bool>? RunToolsScriptsBeforeGuestShutdown { get; set; }

        /// <summary>
        /// Enable the execution of
        /// pre-standby scripts when VMware tools is installed. Default: `true`.
        /// </summary>
        [Input("runToolsScriptsBeforeGuestStandby")]
        public Input<bool>? RunToolsScriptsBeforeGuestStandby { get; set; }

        /// <summary>
        /// Mode for sharing the SCSI bus. The modes are
        /// physicalSharing, virtualSharing, and noSharing. Default: `noSharing`.
        /// </summary>
        [Input("scsiBusSharing")]
        public Input<string>? ScsiBusSharing { get; set; }

        /// <summary>
        /// The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
        /// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
        /// controllers.
        /// </summary>
        [Input("scsiControllerCount")]
        public Input<int>? ScsiControllerCount { get; set; }

        /// <summary>
        /// The type of SCSI bus this virtual machine will have.
        /// Can be one of lsilogic (LSI Logic Parallel), lsilogic-sas (LSI Logic SAS) or
        /// pvscsi (VMware Paravirtual). Defualt: `pvscsi`.
        /// </summary>
        [Input("scsiType")]
        public Input<string>? ScsiType { get; set; }

        /// <summary>
        /// The amount of time, in minutes, to wait
        /// for a graceful guest shutdown when making necessary updates to the virtual
        /// machine. If `force_power_off` is set to true, the VM will be force powered-off
        /// after this timeout, otherwise an error is returned. Default: 3 minutes.
        /// </summary>
        [Input("shutdownWaitTimeout")]
        public Input<int>? ShutdownWaitTimeout { get; set; }

        /// <summary>
        /// The UUID of the storage policy to assign to this disk.
        /// </summary>
        [Input("storagePolicyId")]
        public Input<string>? StoragePolicyId { get; set; }

        /// <summary>
        /// The swap file placement policy for this
        /// virtual machine. Can be one of `inherit`, `hostLocal`, or `vmDirectory`.
        /// Default: `inherit`.
        /// </summary>
        [Input("swapPlacementPolicy")]
        public Input<string>? SwapPlacementPolicy { get; set; }

        /// <summary>
        /// Enable guest clock synchronization with
        /// the host. Requires VMware tools to be installed. Default: `false`.
        /// </summary>
        [Input("syncTimeWithHost")]
        public Input<bool>? SyncTimeWithHost { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The IDs of any tags to attach to this resource. See
        /// [here][docs-applying-tags] for a reference on how to apply tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Optional vApp configuration. The only sub-key available
        /// is `properties`, which is a key/value map of properties for virtual machines
        /// imported from OVF or OVA files. See Using vApp properties to supply OVF/OVA
        /// configuration for
        /// more details.
        /// </summary>
        [Input("vapp")]
        public Input<Inputs.VirtualMachineVappArgs>? Vapp { get; set; }

        /// <summary>
        /// The amount of time, in minutes, to
        /// wait for an available guest IP address on this virtual machine. This should
        /// only be used if your version of VMware Tools does not allow the
        /// `wait_for_guest_net_timeout` waiter to be
        /// used. A value less than 1 disables the waiter. Default: 0.
        /// </summary>
        [Input("waitForGuestIpTimeout")]
        public Input<int>? WaitForGuestIpTimeout { get; set; }

        /// <summary>
        /// Controls whether or not the guest
        /// network waiter waits for a routable address. When `false`, the waiter does
        /// not wait for a default gateway, nor are IP addresses checked against any
        /// discovered default gateways as part of its success criteria. This property is
        /// ignored if the `wait_for_guest_ip_timeout`
        /// waiter is used. Default: `true`.
        /// </summary>
        [Input("waitForGuestNetRoutable")]
        public Input<bool>? WaitForGuestNetRoutable { get; set; }

        /// <summary>
        /// The amount of time, in minutes, to
        /// wait for an available IP address on this virtual machine's NICs. Older
        /// versions of VMware Tools do not populate this property. In those cases, this
        /// waiter can be disabled and the
        /// `wait_for_guest_ip_timeout` waiter can be used
        /// instead. A value less than 1 disables the waiter. Default: 5 minutes.
        /// </summary>
        [Input("waitForGuestNetTimeout")]
        public Input<int>? WaitForGuestNetTimeout { get; set; }

        public VirtualMachineArgs()
        {
        }
    }

    public sealed class VirtualMachineState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The guest name for the operating system
        /// when `guest_id` is `other` or `other-64`.
        /// </summary>
        [Input("alternateGuestName")]
        public Input<string>? AlternateGuestName { get; set; }

        /// <summary>
        /// A user-provided description of the virtual machine.
        /// The default is no annotation.
        /// </summary>
        [Input("annotation")]
        public Input<string>? Annotation { get; set; }

        /// <summary>
        /// The number of milliseconds to wait before starting
        /// the boot sequence. The default is no delay.
        /// </summary>
        [Input("bootDelay")]
        public Input<int>? BootDelay { get; set; }

        /// <summary>
        /// The number of milliseconds to wait before
        /// retrying the boot sequence. This only valid if `boot_retry_enabled` is true.
        /// Default: `10000` (10 seconds).
        /// </summary>
        [Input("bootRetryDelay")]
        public Input<int>? BootRetryDelay { get; set; }

        /// <summary>
        /// If set to true, a virtual machine that
        /// fails to boot will try again after the delay defined in `boot_retry_delay`.
        /// Default: `false`.
        /// </summary>
        [Input("bootRetryEnabled")]
        public Input<bool>? BootRetryEnabled { get; set; }

        /// <summary>
        /// A specification for a CDROM device on this virtual
        /// machine. See CDROM options below.
        /// </summary>
        [Input("cdrom")]
        public Input<Inputs.VirtualMachineCdromGetArgs>? Cdrom { get; set; }

        /// <summary>
        /// A unique identifier for a given version of the last
        /// configuration applied, such the timestamp of the last update to the
        /// configuration.
        /// </summary>
        [Input("changeVersion")]
        public Input<string>? ChangeVersion { get; set; }

        /// <summary>
        /// When specified, the VM will be created as a clone of a
        /// specified template. Optional customization options can be submitted as well.
        /// See creating a virtual machine from a
        /// template for more details.
        /// </summary>
        [Input("clone")]
        public Input<Inputs.VirtualMachineCloneGetArgs>? Clone { get; set; }

        /// <summary>
        /// Allow CPUs to be added to this virtual
        /// machine while it is running.
        /// </summary>
        [Input("cpuHotAddEnabled")]
        public Input<bool>? CpuHotAddEnabled { get; set; }

        /// <summary>
        /// Allow CPUs to be removed to this
        /// virtual machine while it is running.
        /// </summary>
        [Input("cpuHotRemoveEnabled")]
        public Input<bool>? CpuHotRemoveEnabled { get; set; }

        /// <summary>
        /// The maximum amount of CPU (in MHz) that this virtual
        /// machine can consume, regardless of available resources. The default is no
        /// limit.
        /// </summary>
        [Input("cpuLimit")]
        public Input<int>? CpuLimit { get; set; }

        /// <summary>
        /// Enable CPU performance
        /// counters on this virtual machine. Default: `false`.
        /// </summary>
        [Input("cpuPerformanceCountersEnabled")]
        public Input<bool>? CpuPerformanceCountersEnabled { get; set; }

        /// <summary>
        /// The amount of CPU (in MHz) that this virtual
        /// machine is guaranteed. The default is no reservation.
        /// </summary>
        [Input("cpuReservation")]
        public Input<int>? CpuReservation { get; set; }

        /// <summary>
        /// The number of CPU shares allocated to the
        /// virtual machine when the `cpu_share_level` is `custom`.
        /// </summary>
        [Input("cpuShareCount")]
        public Input<int>? CpuShareCount { get; set; }

        /// <summary>
        /// The allocation level for CPU resources. Can be
        /// one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
        /// </summary>
        [Input("cpuShareLevel")]
        public Input<string>? CpuShareLevel { get; set; }

        [Input("customAttributes")]
        private InputMap<string>? _customAttributes;

        /// <summary>
        /// Map of custom attribute ids to attribute
        /// value strings to set for virtual machine. See
        /// [here][docs-setting-custom-attributes] for a reference on how to set values
        /// for custom attributes.
        /// </summary>
        public InputMap<string> CustomAttributes
        {
            get => _customAttributes ?? (_customAttributes = new InputMap<string>());
            set => _customAttributes = value;
        }

        /// <summary>
        /// The [managed object reference
        /// ID][docs-about-morefs] of the datastore cluster ID to use. This setting
        /// applies to entire virtual machine and implies that you wish to use Storage
        /// DRS with this virtual machine. See the section on virtual machine
        /// migration for details on changing this value.
        /// </summary>
        [Input("datastoreClusterId")]
        public Input<string>? DatastoreClusterId { get; set; }

        /// <summary>
        /// The datastore ID that the ISO is located in.
        /// Requried for using a datastore ISO. Conflicts with `client_device`.
        /// </summary>
        [Input("datastoreId")]
        public Input<string>? DatastoreId { get; set; }

        /// <summary>
        /// The IP address selected by Terraform to be used for the provisioner.
        /// </summary>
        [Input("defaultIpAddress")]
        public Input<string>? DefaultIpAddress { get; set; }

        [Input("disks")]
        private InputList<Inputs.VirtualMachineDiskGetArgs>? _disks;

        /// <summary>
        /// A specification for a virtual disk device on this virtual
        /// machine. See disk options below.
        /// </summary>
        public InputList<Inputs.VirtualMachineDiskGetArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.VirtualMachineDiskGetArgs>());
            set => _disks = value;
        }

        /// <summary>
        /// When the `firmware` type is set to is
        /// `efi`, this enables EFI secure boot. Default: `false`.
        /// </summary>
        [Input("efiSecureBootEnabled")]
        public Input<bool>? EfiSecureBootEnabled { get; set; }

        /// <summary>
        /// Expose the UUIDs of attached virtual disks to
        /// the virtual machine, allowing access to them in the guest. Default: `false`.
        /// </summary>
        [Input("enableDiskUuid")]
        public Input<bool>? EnableDiskUuid { get; set; }

        /// <summary>
        /// Enable logging of virtual machine events to a
        /// log file stored in the virtual machine directory. Default: `false`.
        /// </summary>
        [Input("enableLogging")]
        public Input<bool>? EnableLogging { get; set; }

        /// <summary>
        /// The EPT/RVI (hardware memory virtualization)
        /// setting for this virtual machine. Can be one of `automatic`, `on`, or `off`.
        /// Default: `automatic`.
        /// </summary>
        [Input("eptRviMode")]
        public Input<string>? EptRviMode { get; set; }

        [Input("extraConfig")]
        private InputMap<string>? _extraConfig;

        /// <summary>
        /// Extra configuration data for this virtual
        /// machine. Can be used to supply advanced parameters not normally in
        /// configuration, such as instance metadata.
        /// </summary>
        public InputMap<string> ExtraConfig
        {
            get => _extraConfig ?? (_extraConfig = new InputMap<string>());
            set => _extraConfig = value;
        }

        /// <summary>
        /// The firmware interface to use on the virtual machine.
        /// Can be one of `bios` or `EFI`. Default: `bios`.
        /// </summary>
        [Input("firmware")]
        public Input<string>? Firmware { get; set; }

        /// <summary>
        /// The path to the folder to put this virtual machine in,
        /// relative to the datacenter that the resource pool is in.
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// If a guest shutdown failed or timed out while
        /// updating or destroying (see
        /// `shutdown_wait_timeout`), force the power-off of
        /// the virtual machine. Default: `true`.
        /// </summary>
        [Input("forcePowerOff")]
        public Input<bool>? ForcePowerOff { get; set; }

        /// <summary>
        /// The guest ID for the operating system type. For a
        /// full list of possible values, see [here][vmware-docs-guest-ids]. Default: `other-64`.
        /// </summary>
        [Input("guestId")]
        public Input<string>? GuestId { get; set; }

        [Input("guestIpAddresses")]
        private InputList<string>? _guestIpAddresses;

        /// <summary>
        /// The current list of IP addresses on this machine,
        /// including the value of `default_ip_address`. If VMware tools is not running
        /// on the virtual machine, or if the VM is powered off, this list will be empty.
        /// * `moid`: The [managed object reference ID][docs-about-morefs] of the created
        /// virtual machine.
        /// </summary>
        public InputList<string> GuestIpAddresses
        {
            get => _guestIpAddresses ?? (_guestIpAddresses = new InputList<string>());
            set => _guestIpAddresses = value;
        }

        /// <summary>
        /// The hardware version number. Valid range
        /// is from 4 to 15. The hardware version cannot be downgraded. See [virtual
        /// machine hardware compatibility][virtual-machine-hardware-compatibility] for
        /// more details.
        /// </summary>
        [Input("hardwareVersion")]
        public Input<int>? HardwareVersion { get; set; }

        /// <summary>
        /// An optional [managed object reference
        /// ID][docs-about-morefs] of a host to put this virtual machine on. See the
        /// section on virtual machine migration for
        /// details on changing this value. If a `host_system_id` is not supplied,
        /// vSphere will select a host in the resource pool to place the virtual machine,
        /// according to any defaults or DRS policies in place.
        /// </summary>
        [Input("hostSystemId")]
        public Input<string>? HostSystemId { get; set; }

        /// <summary>
        /// The (non-nested) hardware virtualization setting for
        /// this virtual machine. Can be one of `hvAuto`, `hvOn`, or `hvOff`. Default:
        /// `hvAuto`.
        /// </summary>
        [Input("hvMode")]
        public Input<string>? HvMode { get; set; }

        [Input("ignoredGuestIps")]
        private InputList<string>? _ignoredGuestIps;

        /// <summary>
        /// List of IP addresses and CIDR networks to
        /// ignore while waiting for an available IP address using either of the waiters.
        /// Any IP addresses in this list will be ignored if they show up so that the
        /// waiter will continue to wait for a real IP address. Default: [].
        /// </summary>
        public InputList<string> IgnoredGuestIps
        {
            get => _ignoredGuestIps ?? (_ignoredGuestIps = new InputList<string>());
            set => _ignoredGuestIps = value;
        }

        /// <summary>
        /// This is flagged if the virtual machine has been imported, or the
        /// state has been migrated from a previous version of the resource. It
        /// influences the behavior of the first post-import apply operation. See the
        /// section on importing below.
        /// </summary>
        [Input("imported")]
        public Input<bool>? Imported { get; set; }

        /// <summary>
        /// Controls the scheduling delay of the
        /// virtual machine. Use a higher sensitivity for applications that require lower
        /// latency, such as VOIP, media player applications, or applications that
        /// require frequent access to mouse or keyboard devices. Can be one of `low`,
        /// `normal`, `medium`, or `high`.
        /// </summary>
        [Input("latencySensitivity")]
        public Input<string>? LatencySensitivity { get; set; }

        /// <summary>
        /// The size of the virtual machine's memory, in MB.
        /// Default: `1024` (1 GB).
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        /// <summary>
        /// Allow memory to be added to this
        /// virtual machine while it is running.
        /// </summary>
        [Input("memoryHotAddEnabled")]
        public Input<bool>? MemoryHotAddEnabled { get; set; }

        /// <summary>
        /// The maximum amount of memory (in MB) that this
        /// virtual machine can consume, regardless of available resources. The default
        /// is no limit.
        /// </summary>
        [Input("memoryLimit")]
        public Input<int>? MemoryLimit { get; set; }

        /// <summary>
        /// The amount of memory (in MB) that this
        /// virtual machine is guaranteed. The default is no reservation.
        /// </summary>
        [Input("memoryReservation")]
        public Input<int>? MemoryReservation { get; set; }

        /// <summary>
        /// The number of memory shares allocated to
        /// the virtual machine when the `memory_share_level` is `custom`.
        /// </summary>
        [Input("memoryShareCount")]
        public Input<int>? MemoryShareCount { get; set; }

        /// <summary>
        /// The allocation level for memory resources.
        /// Can be one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
        /// </summary>
        [Input("memoryShareLevel")]
        public Input<string>? MemoryShareLevel { get; set; }

        /// <summary>
        /// The amount of time, in minutes, to wait
        /// for a virtual machine migration to complete before failing. Default: 10
        /// minutes. Also see the section on virtual machine
        /// migration.
        /// </summary>
        [Input("migrateWaitTimeout")]
        public Input<int>? MigrateWaitTimeout { get; set; }

        /// <summary>
        /// The machine object ID from VMWare
        /// </summary>
        [Input("moid")]
        public Input<string>? Moid { get; set; }

        /// <summary>
        /// An alias for both `label` and `path`, the latter when
        /// using `attach`. Required if not using `label`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable nested hardware virtualization on
        /// this virtual machine, facilitating nested virtualization in the guest.
        /// Default: `false`.
        /// </summary>
        [Input("nestedHvEnabled")]
        public Input<bool>? NestedHvEnabled { get; set; }

        [Input("networkInterfaces")]
        private InputList<Inputs.VirtualMachineNetworkInterfaceGetArgs>? _networkInterfaces;

        /// <summary>
        /// A specification for a virtual NIC on this
        /// virtual machine. See network interface options
        /// below.
        /// </summary>
        public InputList<Inputs.VirtualMachineNetworkInterfaceGetArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.VirtualMachineNetworkInterfaceGetArgs>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// The number of cores per socket in this
        /// virtual machine. The number of vCPUs on the virtual machine will be
        /// `num_cpus` divided by `num_cores_per_socket`. If specified, the value
        /// supplied to `num_cpus` must be evenly divisible by this value. Default: `1`.
        /// </summary>
        [Input("numCoresPerSocket")]
        public Input<int>? NumCoresPerSocket { get; set; }

        /// <summary>
        /// The total number of virtual processor cores to assign
        /// to this virtual machine. Default: `1`.
        /// </summary>
        [Input("numCpus")]
        public Input<int>? NumCpus { get; set; }

        /// <summary>
        /// The amount of time, in seconds, that we will be trying to power on a VM
        /// </summary>
        [Input("poweronTimeout")]
        public Input<int>? PoweronTimeout { get; set; }

        /// <summary>
        /// Value internal to Terraform used to determine if a configuration set change requires a reboot.
        /// </summary>
        [Input("rebootRequired")]
        public Input<bool>? RebootRequired { get; set; }

        /// <summary>
        /// The [managed object reference
        /// ID][docs-about-morefs] of the resource pool to put this virtual machine in.
        /// See the section on virtual machine migration
        /// for details on changing this value.
        /// </summary>
        [Input("resourcePoolId")]
        public Input<string>? ResourcePoolId { get; set; }

        /// <summary>
        /// Enable the execution of
        /// post-power-on scripts when VMware tools is installed. Default: `true`.
        /// </summary>
        [Input("runToolsScriptsAfterPowerOn")]
        public Input<bool>? RunToolsScriptsAfterPowerOn { get; set; }

        /// <summary>
        /// Enable the execution of
        /// post-resume scripts when VMware tools is installed. Default: `true`.
        /// </summary>
        [Input("runToolsScriptsAfterResume")]
        public Input<bool>? RunToolsScriptsAfterResume { get; set; }

        /// <summary>
        /// Enable the execution of
        /// pre-reboot scripts when VMware tools is installed. Default: `false`.
        /// </summary>
        [Input("runToolsScriptsBeforeGuestReboot")]
        public Input<bool>? RunToolsScriptsBeforeGuestReboot { get; set; }

        /// <summary>
        /// Enable the execution
        /// of pre-shutdown scripts when VMware tools is installed. Default: `true`.
        /// </summary>
        [Input("runToolsScriptsBeforeGuestShutdown")]
        public Input<bool>? RunToolsScriptsBeforeGuestShutdown { get; set; }

        /// <summary>
        /// Enable the execution of
        /// pre-standby scripts when VMware tools is installed. Default: `true`.
        /// </summary>
        [Input("runToolsScriptsBeforeGuestStandby")]
        public Input<bool>? RunToolsScriptsBeforeGuestStandby { get; set; }

        /// <summary>
        /// Mode for sharing the SCSI bus. The modes are
        /// physicalSharing, virtualSharing, and noSharing. Default: `noSharing`.
        /// </summary>
        [Input("scsiBusSharing")]
        public Input<string>? ScsiBusSharing { get; set; }

        /// <summary>
        /// The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
        /// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
        /// controllers.
        /// </summary>
        [Input("scsiControllerCount")]
        public Input<int>? ScsiControllerCount { get; set; }

        /// <summary>
        /// The type of SCSI bus this virtual machine will have.
        /// Can be one of lsilogic (LSI Logic Parallel), lsilogic-sas (LSI Logic SAS) or
        /// pvscsi (VMware Paravirtual). Defualt: `pvscsi`.
        /// </summary>
        [Input("scsiType")]
        public Input<string>? ScsiType { get; set; }

        /// <summary>
        /// The amount of time, in minutes, to wait
        /// for a graceful guest shutdown when making necessary updates to the virtual
        /// machine. If `force_power_off` is set to true, the VM will be force powered-off
        /// after this timeout, otherwise an error is returned. Default: 3 minutes.
        /// </summary>
        [Input("shutdownWaitTimeout")]
        public Input<int>? ShutdownWaitTimeout { get; set; }

        /// <summary>
        /// The UUID of the storage policy to assign to this disk.
        /// </summary>
        [Input("storagePolicyId")]
        public Input<string>? StoragePolicyId { get; set; }

        /// <summary>
        /// The swap file placement policy for this
        /// virtual machine. Can be one of `inherit`, `hostLocal`, or `vmDirectory`.
        /// Default: `inherit`.
        /// </summary>
        [Input("swapPlacementPolicy")]
        public Input<string>? SwapPlacementPolicy { get; set; }

        /// <summary>
        /// Enable guest clock synchronization with
        /// the host. Requires VMware tools to be installed. Default: `false`.
        /// </summary>
        [Input("syncTimeWithHost")]
        public Input<bool>? SyncTimeWithHost { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The IDs of any tags to attach to this resource. See
        /// [here][docs-applying-tags] for a reference on how to apply tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The UUID of the virtual disk's VMDK file. This is used to track the
        /// virtual disk on the virtual machine.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        /// <summary>
        /// Optional vApp configuration. The only sub-key available
        /// is `properties`, which is a key/value map of properties for virtual machines
        /// imported from OVF or OVA files. See Using vApp properties to supply OVF/OVA
        /// configuration for
        /// more details.
        /// </summary>
        [Input("vapp")]
        public Input<Inputs.VirtualMachineVappGetArgs>? Vapp { get; set; }

        [Input("vappTransports")]
        private InputList<string>? _vappTransports;

        /// <summary>
        /// Computed value which is only valid for cloned virtual
        /// machines. A list of vApp transport methods supported by the source virtual
        /// machine or template.
        /// </summary>
        public InputList<string> VappTransports
        {
            get => _vappTransports ?? (_vappTransports = new InputList<string>());
            set => _vappTransports = value;
        }

        /// <summary>
        /// The state of VMware tools in the guest. This will
        /// determine the proper course of action for some device operations.
        /// </summary>
        [Input("vmwareToolsStatus")]
        public Input<string>? VmwareToolsStatus { get; set; }

        /// <summary>
        /// The path of the virtual machine's configuration file in the VM's
        /// datastore.
        /// </summary>
        [Input("vmxPath")]
        public Input<string>? VmxPath { get; set; }

        /// <summary>
        /// The amount of time, in minutes, to
        /// wait for an available guest IP address on this virtual machine. This should
        /// only be used if your version of VMware Tools does not allow the
        /// `wait_for_guest_net_timeout` waiter to be
        /// used. A value less than 1 disables the waiter. Default: 0.
        /// </summary>
        [Input("waitForGuestIpTimeout")]
        public Input<int>? WaitForGuestIpTimeout { get; set; }

        /// <summary>
        /// Controls whether or not the guest
        /// network waiter waits for a routable address. When `false`, the waiter does
        /// not wait for a default gateway, nor are IP addresses checked against any
        /// discovered default gateways as part of its success criteria. This property is
        /// ignored if the `wait_for_guest_ip_timeout`
        /// waiter is used. Default: `true`.
        /// </summary>
        [Input("waitForGuestNetRoutable")]
        public Input<bool>? WaitForGuestNetRoutable { get; set; }

        /// <summary>
        /// The amount of time, in minutes, to
        /// wait for an available IP address on this virtual machine's NICs. Older
        /// versions of VMware Tools do not populate this property. In those cases, this
        /// waiter can be disabled and the
        /// `wait_for_guest_ip_timeout` waiter can be used
        /// instead. A value less than 1 disables the waiter. Default: 5 minutes.
        /// </summary>
        [Input("waitForGuestNetTimeout")]
        public Input<int>? WaitForGuestNetTimeout { get; set; }

        public VirtualMachineState()
        {
        }
    }
}
