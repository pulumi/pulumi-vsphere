// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.VSphere
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("vsphere");

        private static readonly __Value<bool?> _allowUnverifiedSsl = new __Value<bool?>(() => __config.GetBoolean("allowUnverifiedSsl") ?? Utilities.GetEnvBoolean("VSPHERE_ALLOW_UNVERIFIED_SSL"));
        /// <summary>
        /// If set, VMware vSphere client will permit unverifiable SSL certificates.
        /// </summary>
        public static bool? AllowUnverifiedSsl
        {
            get => _allowUnverifiedSsl.Get();
            set => _allowUnverifiedSsl.Set(value);
        }

        private static readonly __Value<int?> _apiTimeout = new __Value<int?>(() => __config.GetInt32("apiTimeout"));
        /// <summary>
        /// API timeout in minutes (Default: 5)
        /// </summary>
        public static int? ApiTimeout
        {
            get => _apiTimeout.Get();
            set => _apiTimeout.Set(value);
        }

        private static readonly __Value<bool?> _clientDebug = new __Value<bool?>(() => __config.GetBoolean("clientDebug") ?? Utilities.GetEnvBoolean("VSPHERE_CLIENT_DEBUG"));
        /// <summary>
        /// govmomi debug
        /// </summary>
        public static bool? ClientDebug
        {
            get => _clientDebug.Get();
            set => _clientDebug.Set(value);
        }

        private static readonly __Value<string?> _clientDebugPath = new __Value<string?>(() => __config.Get("clientDebugPath") ?? Utilities.GetEnv("VSPHERE_CLIENT_DEBUG_PATH"));
        /// <summary>
        /// govmomi debug path for debug
        /// </summary>
        public static string? ClientDebugPath
        {
            get => _clientDebugPath.Get();
            set => _clientDebugPath.Set(value);
        }

        private static readonly __Value<string?> _clientDebugPathRun = new __Value<string?>(() => __config.Get("clientDebugPathRun") ?? Utilities.GetEnv("VSPHERE_CLIENT_DEBUG_PATH_RUN"));
        /// <summary>
        /// govmomi debug path for a single run
        /// </summary>
        public static string? ClientDebugPathRun
        {
            get => _clientDebugPathRun.Get();
            set => _clientDebugPathRun.Set(value);
        }

        private static readonly __Value<string?> _password = new __Value<string?>(() => __config.Get("password"));
        /// <summary>
        /// The user password for vSphere API operations.
        /// </summary>
        public static string? Password
        {
            get => _password.Get();
            set => _password.Set(value);
        }

        private static readonly __Value<bool?> _persistSession = new __Value<bool?>(() => __config.GetBoolean("persistSession") ?? Utilities.GetEnvBoolean("VSPHERE_PERSIST_SESSION"));
        /// <summary>
        /// Persist vSphere client sessions to disk
        /// </summary>
        public static bool? PersistSession
        {
            get => _persistSession.Get();
            set => _persistSession.Set(value);
        }

        private static readonly __Value<string?> _restSessionPath = new __Value<string?>(() => __config.Get("restSessionPath") ?? Utilities.GetEnv("VSPHERE_REST_SESSION_PATH"));
        /// <summary>
        /// The directory to save vSphere REST API sessions to
        /// </summary>
        public static string? RestSessionPath
        {
            get => _restSessionPath.Get();
            set => _restSessionPath.Set(value);
        }

        private static readonly __Value<string?> _user = new __Value<string?>(() => __config.Get("user"));
        /// <summary>
        /// The user name for vSphere API operations.
        /// </summary>
        public static string? User
        {
            get => _user.Get();
            set => _user.Set(value);
        }

        private static readonly __Value<string?> _vcenterServer = new __Value<string?>(() => __config.Get("vcenterServer"));
        public static string? VcenterServer
        {
            get => _vcenterServer.Get();
            set => _vcenterServer.Set(value);
        }

        private static readonly __Value<int?> _vimKeepAlive = new __Value<int?>(() => __config.GetInt32("vimKeepAlive") ?? Utilities.GetEnvInt32("VSPHERE_VIM_KEEP_ALIVE"));
        /// <summary>
        /// Keep alive interval for the VIM session in minutes
        /// </summary>
        public static int? VimKeepAlive
        {
            get => _vimKeepAlive.Get();
            set => _vimKeepAlive.Set(value);
        }

        private static readonly __Value<string?> _vimSessionPath = new __Value<string?>(() => __config.Get("vimSessionPath") ?? Utilities.GetEnv("VSPHERE_VIM_SESSION_PATH"));
        /// <summary>
        /// The directory to save vSphere SOAP API sessions to
        /// </summary>
        public static string? VimSessionPath
        {
            get => _vimSessionPath.Get();
            set => _vimSessionPath.Set(value);
        }

        private static readonly __Value<string?> _vsphereServer = new __Value<string?>(() => __config.Get("vsphereServer"));
        /// <summary>
        /// The vSphere Server name for vSphere API operations.
        /// </summary>
        public static string? VsphereServer
        {
            get => _vsphereServer.Get();
            set => _vsphereServer.Set(value);
        }

    }
}
