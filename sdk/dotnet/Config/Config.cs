// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;

namespace Pulumi.VSphere
{
    public static class Config
    {
        private static readonly Pulumi.Config __config = new Pulumi.Config("vsphere");

        /// <summary>
        /// If set, VMware vSphere client will permit unverifiable SSL certificates.
        /// </summary>
        public static bool? AllowUnverifiedSsl { get; set; } = __config.GetBoolean("allowUnverifiedSsl");

        /// <summary>
        /// govmomi debug
        /// </summary>
        public static bool? ClientDebug { get; set; } = __config.GetBoolean("clientDebug");

        /// <summary>
        /// govmomi debug path for debug
        /// </summary>
        public static string? ClientDebugPath { get; set; } = __config.Get("clientDebugPath");

        /// <summary>
        /// govmomi debug path for a single run
        /// </summary>
        public static string? ClientDebugPathRun { get; set; } = __config.Get("clientDebugPathRun");

        /// <summary>
        /// The user password for vSphere API operations.
        /// </summary>
        public static string? Password { get; set; } = __config.Get("password");

        /// <summary>
        /// Persist vSphere client sessions to disk
        /// </summary>
        public static bool? PersistSession { get; set; } = __config.GetBoolean("persistSession");

        /// <summary>
        /// The directory to save vSphere REST API sessions to
        /// </summary>
        public static string? RestSessionPath { get; set; } = __config.Get("restSessionPath");

        /// <summary>
        /// The user name for vSphere API operations.
        /// </summary>
        public static string? User { get; set; } = __config.Get("user");

        public static string? VcenterServer { get; set; } = __config.Get("vcenterServer");

        /// <summary>
        /// Keep alive interval for the VIM session in minutes
        /// </summary>
        public static int? VimKeepAlive { get; set; } = __config.GetInt32("vimKeepAlive");

        /// <summary>
        /// The directory to save vSphere SOAP API sessions to
        /// </summary>
        public static string? VimSessionPath { get; set; } = __config.Get("vimSessionPath");

        /// <summary>
        /// The vSphere Server name for vSphere API operations.
        /// </summary>
        public static string? VsphereServer { get; set; } = __config.Get("vsphereServer");

    }
    namespace ConfigTypes
    {
    }
}
