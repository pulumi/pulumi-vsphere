// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    /// <summary>
    /// The `vsphere.Tag` resource can be used to create and manage tags, which allow
    /// you to attach metadata to objects in the vSphere inventory to make these
    /// objects more sortable and searchable.
    /// 
    /// For more information about tags, click [here][ext-tags-general].
    /// 
    /// [ext-tags-general]: https://techdocs.broadcom.com/us/en/vmware-cis/vsphere/vsphere/8-0/vsphere-tags-and-attributes.html
    /// 
    /// ## Example Usage
    /// 
    /// This example creates a tag named `test-tag`. This tag is assigned the
    /// `test-category` category, which was created by the
    /// `vsphere.TagCategory` resource. The resulting
    /// tag can be assigned to VMs and datastores only, and can be the only value in
    /// the category that can be assigned, as per the restrictions defined by the
    /// category.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using VSphere = Pulumi.VSphere;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var category = new VSphere.TagCategory("category", new()
    ///     {
    ///         Name = "test-category",
    ///         Cardinality = "SINGLE",
    ///         Description = "Managed by Pulumi",
    ///         AssociableTypes = new[]
    ///         {
    ///             "VirtualMachine",
    ///             "Datastore",
    ///         },
    ///     });
    /// 
    ///     var tag = new VSphere.Tag("tag", new()
    ///     {
    ///         Name = "test-tag",
    ///         CategoryId = category.Id,
    ///         Description = "Managed by Pulumi",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Using Tags in a Supported Resource
    /// 
    /// Tags can be applied to vSphere resources via the `Tags` argument
    /// in any supported resource.
    /// 
    /// The following example builds on the above example by creating a
    /// `vsphere.VirtualMachine` and applying the
    /// created tag to it:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using VSphere = Pulumi.VSphere;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var category = new VSphere.TagCategory("category", new()
    ///     {
    ///         Name = "test-category",
    ///         Cardinality = "SINGLE",
    ///         Description = "Managed by Pulumi",
    ///         AssociableTypes = new[]
    ///         {
    ///             "VirtualMachine",
    ///             "Datastore",
    ///         },
    ///     });
    /// 
    ///     var tag = new VSphere.Tag("tag", new()
    ///     {
    ///         Name = "test-tag",
    ///         CategoryId = category.Id,
    ///         Description = "Managed by Pulumi",
    ///     });
    /// 
    ///     var web = new VSphere.VirtualMachine("web", new()
    ///     {
    ///         Tags = new[]
    ///         {
    ///             tag.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing tag can be imported into this resource by supplying
    /// 
    /// both the tag's category name and the name of the tag as a JSON string to
    /// 
    /// `pulumi import`, as per the example below:
    /// 
    /// [docs-import]: https://developer.hashicorp.com/terraform/cli/import
    /// 
    /// ```sh
    /// $ pulumi import vsphere:index/tag:Tag tag \
    /// ```
    /// 
    ///   '{"category_name": "pulumi-test-category", "tag_name": "pulumi-test-tag"}'
    /// </summary>
    [VSphereResourceType("vsphere:index/tag:Tag")]
    public partial class Tag : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The unique identifier of the parent category in
        /// which this tag will be created. Forces a new resource if changed.
        /// </summary>
        [Output("categoryId")]
        public Output<string> CategoryId { get; private set; } = null!;

        /// <summary>
        /// A description for the tag.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of the tag. The name must be unique
        /// within its category.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Tag resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Tag(string name, TagArgs args, CustomResourceOptions? options = null)
            : base("vsphere:index/tag:Tag", name, args ?? new TagArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Tag(string name, Input<string> id, TagState? state = null, CustomResourceOptions? options = null)
            : base("vsphere:index/tag:Tag", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Tag resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Tag Get(string name, Input<string> id, TagState? state = null, CustomResourceOptions? options = null)
        {
            return new Tag(name, id, state, options);
        }
    }

    public sealed class TagArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique identifier of the parent category in
        /// which this tag will be created. Forces a new resource if changed.
        /// </summary>
        [Input("categoryId", required: true)]
        public Input<string> CategoryId { get; set; } = null!;

        /// <summary>
        /// A description for the tag.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the tag. The name must be unique
        /// within its category.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public TagArgs()
        {
        }
        public static new TagArgs Empty => new TagArgs();
    }

    public sealed class TagState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique identifier of the parent category in
        /// which this tag will be created. Forces a new resource if changed.
        /// </summary>
        [Input("categoryId")]
        public Input<string>? CategoryId { get; set; }

        /// <summary>
        /// A description for the tag.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the tag. The name must be unique
        /// within its category.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public TagState()
        {
        }
        public static new TagState Empty => new TagState();
    }
}
