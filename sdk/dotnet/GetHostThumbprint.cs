// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    public static class GetHostThumbprint
    {
        /// <summary>
        /// The `vsphere_thumbprint` data source can be used to discover the host
        /// thumbprint of an ESXi host. This can be used when adding the `vsphere.Host`
        /// resource. If the host is using a certificate chain, the first one returned
        /// will be used to generate the thumbprint.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var thumbprint = Output.Create(VSphere.GetHostThumbprint.InvokeAsync(new VSphere.GetHostThumbprintArgs
        ///         {
        ///             Address = "esxi.example.internal",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetHostThumbprintResult> InvokeAsync(GetHostThumbprintArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetHostThumbprintResult>("vsphere:index/getHostThumbprint:getHostThumbprint", args ?? new GetHostThumbprintArgs(), options.WithDefaults());

        /// <summary>
        /// The `vsphere_thumbprint` data source can be used to discover the host
        /// thumbprint of an ESXi host. This can be used when adding the `vsphere.Host`
        /// resource. If the host is using a certificate chain, the first one returned
        /// will be used to generate the thumbprint.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var thumbprint = Output.Create(VSphere.GetHostThumbprint.InvokeAsync(new VSphere.GetHostThumbprintArgs
        ///         {
        ///             Address = "esxi.example.internal",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetHostThumbprintResult> Invoke(GetHostThumbprintInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetHostThumbprintResult>("vsphere:index/getHostThumbprint:getHostThumbprint", args ?? new GetHostThumbprintInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHostThumbprintArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The address of the ESXi host to retrieve the
        /// thumbprint from.
        /// </summary>
        [Input("address", required: true)]
        public string Address { get; set; } = null!;

        /// <summary>
        /// Boolean that can be set to true to disable SSL 
        /// certificate verification. Default: false
        /// </summary>
        [Input("insecure")]
        public bool? Insecure { get; set; }

        /// <summary>
        /// The port to use connecting to the ESXi host. Default: 443
        /// </summary>
        [Input("port")]
        public string? Port { get; set; }

        public GetHostThumbprintArgs()
        {
        }
    }

    public sealed class GetHostThumbprintInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The address of the ESXi host to retrieve the
        /// thumbprint from.
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// Boolean that can be set to true to disable SSL 
        /// certificate verification. Default: false
        /// </summary>
        [Input("insecure")]
        public Input<bool>? Insecure { get; set; }

        /// <summary>
        /// The port to use connecting to the ESXi host. Default: 443
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        public GetHostThumbprintInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetHostThumbprintResult
    {
        public readonly string Address;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? Insecure;
        public readonly string? Port;

        [OutputConstructor]
        private GetHostThumbprintResult(
            string address,

            string id,

            bool? insecure,

            string? port)
        {
            Address = address;
            Id = id;
            Insecure = insecure;
            Port = port;
        }
    }
}
