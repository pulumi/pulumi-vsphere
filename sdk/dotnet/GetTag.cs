// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    public static class GetTag
    {
        /// <summary>
        /// The `vsphere.Tag` data source can be used to reference tags that are not
        /// managed by this provider. Its attributes are exactly the same as the `vsphere.Tag`
        /// resource, and, like importing, the data source takes a name and
        /// category to search on. The `Id` and other attributes are then populated with
        /// the data found by the search.
        /// 
        /// &gt; **NOTE:** Tagging is not supported on direct ESXi hosts connections and
        /// requires vCenter Server.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var category = VSphere.GetTagCategory.Invoke(new()
        ///     {
        ///         Name = "example-category",
        ///     });
        /// 
        ///     var tag = VSphere.GetTag.Invoke(new()
        ///     {
        ///         Name = "example-tag",
        ///         CategoryId = category.Apply(getTagCategoryResult =&gt; getTagCategoryResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTagResult> InvokeAsync(GetTagArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTagResult>("vsphere:index/getTag:getTag", args ?? new GetTagArgs(), options.WithDefaults());

        /// <summary>
        /// The `vsphere.Tag` data source can be used to reference tags that are not
        /// managed by this provider. Its attributes are exactly the same as the `vsphere.Tag`
        /// resource, and, like importing, the data source takes a name and
        /// category to search on. The `Id` and other attributes are then populated with
        /// the data found by the search.
        /// 
        /// &gt; **NOTE:** Tagging is not supported on direct ESXi hosts connections and
        /// requires vCenter Server.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var category = VSphere.GetTagCategory.Invoke(new()
        ///     {
        ///         Name = "example-category",
        ///     });
        /// 
        ///     var tag = VSphere.GetTag.Invoke(new()
        ///     {
        ///         Name = "example-tag",
        ///         CategoryId = category.Apply(getTagCategoryResult =&gt; getTagCategoryResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTagResult> Invoke(GetTagInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTagResult>("vsphere:index/getTag:getTag", args ?? new GetTagInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `vsphere.Tag` data source can be used to reference tags that are not
        /// managed by this provider. Its attributes are exactly the same as the `vsphere.Tag`
        /// resource, and, like importing, the data source takes a name and
        /// category to search on. The `Id` and other attributes are then populated with
        /// the data found by the search.
        /// 
        /// &gt; **NOTE:** Tagging is not supported on direct ESXi hosts connections and
        /// requires vCenter Server.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var category = VSphere.GetTagCategory.Invoke(new()
        ///     {
        ///         Name = "example-category",
        ///     });
        /// 
        ///     var tag = VSphere.GetTag.Invoke(new()
        ///     {
        ///         Name = "example-tag",
        ///         CategoryId = category.Apply(getTagCategoryResult =&gt; getTagCategoryResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTagResult> Invoke(GetTagInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTagResult>("vsphere:index/getTag:getTag", args ?? new GetTagInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTagArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the tag category in which the tag is
        /// located.
        /// </summary>
        [Input("categoryId", required: true)]
        public string CategoryId { get; set; } = null!;

        /// <summary>
        /// The name of the tag.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetTagArgs()
        {
        }
        public static new GetTagArgs Empty => new GetTagArgs();
    }

    public sealed class GetTagInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the tag category in which the tag is
        /// located.
        /// </summary>
        [Input("categoryId", required: true)]
        public Input<string> CategoryId { get; set; } = null!;

        /// <summary>
        /// The name of the tag.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetTagInvokeArgs()
        {
        }
        public static new GetTagInvokeArgs Empty => new GetTagInvokeArgs();
    }


    [OutputType]
    public sealed class GetTagResult
    {
        public readonly string CategoryId;
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;

        [OutputConstructor]
        private GetTagResult(
            string categoryId,

            string description,

            string id,

            string name)
        {
            CategoryId = categoryId;
            Description = description;
            Id = id;
            Name = name;
        }
    }
}
