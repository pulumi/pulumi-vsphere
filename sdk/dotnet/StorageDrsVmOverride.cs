// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    /// <summary>
    /// The `vsphere.StorageDrsVmOverride` resource can be used to add a Storage DRS
    /// override to a datastore cluster for a specific virtual machine. With this
    /// resource, one can enable or disable Storage DRS, and control the automation
    /// level and disk affinity for a single virtual machine without affecting the rest
    /// of the datastore cluster.
    /// 
    /// For more information on vSphere datastore clusters and Storage DRS, see [this
    /// page][ref-vsphere-datastore-clusters].
    /// 
    /// [ref-vsphere-datastore-clusters]: https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-resource-management/GUID-598DF695-107E-406B-9C95-0AF961FC227A.html
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using VSphere = Pulumi.VSphere;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
    ///     {
    ///         Name = "dc-01",
    ///     });
    /// 
    ///     var datastoreCluster = VSphere.GetDatastoreCluster.Invoke(new()
    ///     {
    ///         Name = "datastore-cluster1",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var memberDatastore = VSphere.GetDatastore.Invoke(new()
    ///     {
    ///         Name = "datastore-cluster1-member1",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var pool = VSphere.GetResourcePool.Invoke(new()
    ///     {
    ///         Name = "cluster1/Resources",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var network = VSphere.GetNetwork.Invoke(new()
    ///     {
    ///         Name = "public",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var vm = new VSphere.VirtualMachine("vm", new()
    ///     {
    ///         Name = "test",
    ///         ResourcePoolId = pool.Apply(getResourcePoolResult =&gt; getResourcePoolResult.Id),
    ///         DatastoreId = memberDatastore.Apply(getDatastoreResult =&gt; getDatastoreResult.Id),
    ///         NumCpus = 2,
    ///         Memory = 1024,
    ///         GuestId = "otherLinux64Guest",
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new VSphere.Inputs.VirtualMachineNetworkInterfaceArgs
    ///             {
    ///                 NetworkId = network.Apply(getNetworkResult =&gt; getNetworkResult.Id),
    ///             },
    ///         },
    ///         Disks = new[]
    ///         {
    ///             new VSphere.Inputs.VirtualMachineDiskArgs
    ///             {
    ///                 Label = "disk0",
    ///                 Size = 20,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var drsVmOverride = new VSphere.StorageDrsVmOverride("drs_vm_override", new()
    ///     {
    ///         DatastoreClusterId = datastoreCluster.Apply(getDatastoreClusterResult =&gt; getDatastoreClusterResult.Id),
    ///         VirtualMachineId = vm.Id,
    ///         SdrsEnabled = "false",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing override can be imported into this resource by
    /// 
    /// supplying both the path to the datastore cluster and the path to the virtual
    /// 
    /// machine to `pulumi import`. If no override exists, an error will be given.
    /// 
    /// An example is below:
    /// 
    /// ```sh
    /// $ pulumi import vsphere:index/storageDrsVmOverride:StorageDrsVmOverride drs_vm_override \
    /// ```
    /// 
    ///   '{"datastore_cluster_path": "/dc1/datastore/ds-cluster", \
    /// 
    ///   "virtual_machine_path": "/dc1/vm/srv1"}'
    /// </summary>
    [VSphereResourceType("vsphere:index/storageDrsVmOverride:StorageDrsVmOverride")]
    public partial class StorageDrsVmOverride : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The managed object reference
        /// ID of the datastore cluster to put the override in.
        /// Forces a new resource if changed.
        /// </summary>
        [Output("datastoreClusterId")]
        public Output<string> DatastoreClusterId { get; private set; } = null!;

        /// <summary>
        /// Overrides any Storage DRS automation
        /// levels for this virtual machine. Can be one of `automated` or `manual`. When
        /// not specified, the datastore cluster's settings are used according to the
        /// specific SDRS subsystem.
        /// </summary>
        [Output("sdrsAutomationLevel")]
        public Output<string?> SdrsAutomationLevel { get; private set; } = null!;

        /// <summary>
        /// Overrides the default Storage DRS setting for
        /// this virtual machine. When not specified, the datastore cluster setting is
        /// used.
        /// </summary>
        [Output("sdrsEnabled")]
        public Output<string?> SdrsEnabled { get; private set; } = null!;

        /// <summary>
        /// Overrides the intra-VM affinity setting
        /// for this virtual machine. When `true`, all disks for this virtual machine
        /// will be kept on the same datastore. When `false`, Storage DRS may locate
        /// individual disks on different datastores if it helps satisfy cluster
        /// requirements. When not specified, the datastore cluster's settings are used.
        /// </summary>
        [Output("sdrsIntraVmAffinity")]
        public Output<string?> SdrsIntraVmAffinity { get; private set; } = null!;

        /// <summary>
        /// The UUID of the virtual machine to create
        /// the override for.  Forces a new resource if changed.
        /// </summary>
        [Output("virtualMachineId")]
        public Output<string> VirtualMachineId { get; private set; } = null!;


        /// <summary>
        /// Create a StorageDrsVmOverride resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StorageDrsVmOverride(string name, StorageDrsVmOverrideArgs args, CustomResourceOptions? options = null)
            : base("vsphere:index/storageDrsVmOverride:StorageDrsVmOverride", name, args ?? new StorageDrsVmOverrideArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StorageDrsVmOverride(string name, Input<string> id, StorageDrsVmOverrideState? state = null, CustomResourceOptions? options = null)
            : base("vsphere:index/storageDrsVmOverride:StorageDrsVmOverride", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StorageDrsVmOverride resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StorageDrsVmOverride Get(string name, Input<string> id, StorageDrsVmOverrideState? state = null, CustomResourceOptions? options = null)
        {
            return new StorageDrsVmOverride(name, id, state, options);
        }
    }

    public sealed class StorageDrsVmOverrideArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The managed object reference
        /// ID of the datastore cluster to put the override in.
        /// Forces a new resource if changed.
        /// </summary>
        [Input("datastoreClusterId", required: true)]
        public Input<string> DatastoreClusterId { get; set; } = null!;

        /// <summary>
        /// Overrides any Storage DRS automation
        /// levels for this virtual machine. Can be one of `automated` or `manual`. When
        /// not specified, the datastore cluster's settings are used according to the
        /// specific SDRS subsystem.
        /// </summary>
        [Input("sdrsAutomationLevel")]
        public Input<string>? SdrsAutomationLevel { get; set; }

        /// <summary>
        /// Overrides the default Storage DRS setting for
        /// this virtual machine. When not specified, the datastore cluster setting is
        /// used.
        /// </summary>
        [Input("sdrsEnabled")]
        public Input<string>? SdrsEnabled { get; set; }

        /// <summary>
        /// Overrides the intra-VM affinity setting
        /// for this virtual machine. When `true`, all disks for this virtual machine
        /// will be kept on the same datastore. When `false`, Storage DRS may locate
        /// individual disks on different datastores if it helps satisfy cluster
        /// requirements. When not specified, the datastore cluster's settings are used.
        /// </summary>
        [Input("sdrsIntraVmAffinity")]
        public Input<string>? SdrsIntraVmAffinity { get; set; }

        /// <summary>
        /// The UUID of the virtual machine to create
        /// the override for.  Forces a new resource if changed.
        /// </summary>
        [Input("virtualMachineId", required: true)]
        public Input<string> VirtualMachineId { get; set; } = null!;

        public StorageDrsVmOverrideArgs()
        {
        }
        public static new StorageDrsVmOverrideArgs Empty => new StorageDrsVmOverrideArgs();
    }

    public sealed class StorageDrsVmOverrideState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The managed object reference
        /// ID of the datastore cluster to put the override in.
        /// Forces a new resource if changed.
        /// </summary>
        [Input("datastoreClusterId")]
        public Input<string>? DatastoreClusterId { get; set; }

        /// <summary>
        /// Overrides any Storage DRS automation
        /// levels for this virtual machine. Can be one of `automated` or `manual`. When
        /// not specified, the datastore cluster's settings are used according to the
        /// specific SDRS subsystem.
        /// </summary>
        [Input("sdrsAutomationLevel")]
        public Input<string>? SdrsAutomationLevel { get; set; }

        /// <summary>
        /// Overrides the default Storage DRS setting for
        /// this virtual machine. When not specified, the datastore cluster setting is
        /// used.
        /// </summary>
        [Input("sdrsEnabled")]
        public Input<string>? SdrsEnabled { get; set; }

        /// <summary>
        /// Overrides the intra-VM affinity setting
        /// for this virtual machine. When `true`, all disks for this virtual machine
        /// will be kept on the same datastore. When `false`, Storage DRS may locate
        /// individual disks on different datastores if it helps satisfy cluster
        /// requirements. When not specified, the datastore cluster's settings are used.
        /// </summary>
        [Input("sdrsIntraVmAffinity")]
        public Input<string>? SdrsIntraVmAffinity { get; set; }

        /// <summary>
        /// The UUID of the virtual machine to create
        /// the override for.  Forces a new resource if changed.
        /// </summary>
        [Input("virtualMachineId")]
        public Input<string>? VirtualMachineId { get; set; }

        public StorageDrsVmOverrideState()
        {
        }
        public static new StorageDrsVmOverrideState Empty => new StorageDrsVmOverrideState();
    }
}
