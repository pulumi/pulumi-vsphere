// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    /// <summary>
    /// The `vsphere.ComputeClusterVmGroup` resource can be used to manage groups of
    /// virtual machines in a cluster, either created by the
    /// [`vsphere.ComputeCluster`][tf-vsphere-cluster-resource] resource or looked up
    /// by the [`vsphere.ComputeCluster`][tf-vsphere-cluster-data-source] data source.
    /// 
    /// [tf-vsphere-cluster-resource]: /docs/providers/vsphere/r/compute_cluster.html
    /// [tf-vsphere-cluster-data-source]: /docs/providers/vsphere/d/compute_cluster.html
    /// 
    /// This resource mainly serves as an input to the
    /// [`vsphere.ComputeClusterVmDependencyRule`][tf-vsphere-cluster-vm-dependency-rule-resource]
    /// and
    /// [`vsphere.ComputeClusterVmHostRule`][tf-vsphere-cluster-vm-host-rule-resource]
    /// resources. See the individual resource documentation pages for more information.
    /// 
    /// [tf-vsphere-cluster-vm-dependency-rule-resource]: /docs/providers/vsphere/r/compute_cluster_vm_dependency_rule.html
    /// [tf-vsphere-cluster-vm-host-rule-resource]: /docs/providers/vsphere/r/compute_cluster_vm_host_rule.html
    /// 
    /// &gt; **NOTE:** This resource requires vCenter and is not available on direct ESXi
    /// connections.
    /// 
    /// ## Example Usage
    /// 
    /// The example below creates two virtual machines in a cluster using the
    /// `vsphere.VirtualMachine` resource, creating the
    /// virtual machine in the cluster looked up by the
    /// `vsphere.ComputeCluster` data source. It
    /// then creates a group from these two virtual machines.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using VSphere = Pulumi.VSphere;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
    ///     {
    ///         Name = "dc-01",
    ///     });
    /// 
    ///     var datastore = VSphere.GetDatastore.Invoke(new()
    ///     {
    ///         Name = "datastore1",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var cluster = VSphere.GetComputeCluster.Invoke(new()
    ///     {
    ///         Name = "cluster-01",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var network = VSphere.GetNetwork.Invoke(new()
    ///     {
    ///         Name = "network1",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var vm = new List&lt;VSphere.VirtualMachine&gt;();
    ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
    ///     {
    ///         var range = new { Value = rangeIndex };
    ///         vm.Add(new VSphere.VirtualMachine($"vm-{range.Value}", new()
    ///         {
    ///             Name = $"test-{range.Value}",
    ///             ResourcePoolId = cluster.Apply(getComputeClusterResult =&gt; getComputeClusterResult.ResourcePoolId),
    ///             DatastoreId = datastore.Apply(getDatastoreResult =&gt; getDatastoreResult.Id),
    ///             NumCpus = 2,
    ///             Memory = 2048,
    ///             GuestId = "otherLinux64Guest",
    ///             NetworkInterfaces = new[]
    ///             {
    ///                 new VSphere.Inputs.VirtualMachineNetworkInterfaceArgs
    ///                 {
    ///                     NetworkId = network.Apply(getNetworkResult =&gt; getNetworkResult.Id),
    ///                 },
    ///             },
    ///             Disks = new[]
    ///             {
    ///                 new VSphere.Inputs.VirtualMachineDiskArgs
    ///                 {
    ///                     Label = "disk0",
    ///                     Size = 20,
    ///                 },
    ///             },
    ///         }));
    ///     }
    ///     var clusterVmGroup = new VSphere.ComputeClusterVmGroup("cluster_vm_group", new()
    ///     {
    ///         Name = "test-cluster-vm-group",
    ///         ComputeClusterId = cluster.Apply(getComputeClusterResult =&gt; getComputeClusterResult.Id),
    ///         VirtualMachineIds = new[]
    ///         {
    ///             vm.Select(__item =&gt; __item.Id).ToList(),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing group can be imported into this resource by
    /// 
    /// supplying both the path to the cluster, and the name of the VM group. If the
    /// 
    /// name or cluster is not found, or if the group is of a different type, an error
    /// 
    /// will be returned. An example is below:
    /// 
    /// ```sh
    /// $ pulumi import vsphere:index/computeClusterVmGroup:ComputeClusterVmGroup cluster_vm_group \
    /// ```
    /// 
    ///   '{"compute_cluster_path": "/dc1/host/cluster1", \
    /// 
    ///   "name": "pulumi-test-cluster-vm-group"}'
    /// </summary>
    [VSphereResourceType("vsphere:index/computeClusterVmGroup:ComputeClusterVmGroup")]
    public partial class ComputeClusterVmGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The managed object reference
        /// ID of the cluster to put the group in.  Forces a new
        /// resource if changed.
        /// </summary>
        [Output("computeClusterId")]
        public Output<string> ComputeClusterId { get; private set; } = null!;

        /// <summary>
        /// The name of the VM group. This must be unique in the
        /// cluster. Forces a new resource if changed.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The UUIDs of the virtual machines in this
        /// group.
        /// 
        /// &gt; **NOTE:** The namespace for cluster names on this resource (defined by the
        /// `name` argument) is shared with the
        /// `vsphere.ComputeClusterHostGroup`
        /// resource. Make sure your names are unique across both resources.
        /// 
        /// &gt; **NOTE:** To update a existing VM group, you must first import the group with `import` command in
        /// import section. When importing a VM group, validate that all virtual machines that
        /// need to be in the group are included in the `virtual_machine_ids`; otherwise, any virtual machines
        /// that are not in `virtual_machine_ids` the included will be removed from the group.
        /// </summary>
        [Output("virtualMachineIds")]
        public Output<ImmutableArray<string>> VirtualMachineIds { get; private set; } = null!;


        /// <summary>
        /// Create a ComputeClusterVmGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ComputeClusterVmGroup(string name, ComputeClusterVmGroupArgs args, CustomResourceOptions? options = null)
            : base("vsphere:index/computeClusterVmGroup:ComputeClusterVmGroup", name, args ?? new ComputeClusterVmGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ComputeClusterVmGroup(string name, Input<string> id, ComputeClusterVmGroupState? state = null, CustomResourceOptions? options = null)
            : base("vsphere:index/computeClusterVmGroup:ComputeClusterVmGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ComputeClusterVmGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ComputeClusterVmGroup Get(string name, Input<string> id, ComputeClusterVmGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ComputeClusterVmGroup(name, id, state, options);
        }
    }

    public sealed class ComputeClusterVmGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The managed object reference
        /// ID of the cluster to put the group in.  Forces a new
        /// resource if changed.
        /// </summary>
        [Input("computeClusterId", required: true)]
        public Input<string> ComputeClusterId { get; set; } = null!;

        /// <summary>
        /// The name of the VM group. This must be unique in the
        /// cluster. Forces a new resource if changed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("virtualMachineIds")]
        private InputList<string>? _virtualMachineIds;

        /// <summary>
        /// The UUIDs of the virtual machines in this
        /// group.
        /// 
        /// &gt; **NOTE:** The namespace for cluster names on this resource (defined by the
        /// `name` argument) is shared with the
        /// `vsphere.ComputeClusterHostGroup`
        /// resource. Make sure your names are unique across both resources.
        /// 
        /// &gt; **NOTE:** To update a existing VM group, you must first import the group with `import` command in
        /// import section. When importing a VM group, validate that all virtual machines that
        /// need to be in the group are included in the `virtual_machine_ids`; otherwise, any virtual machines
        /// that are not in `virtual_machine_ids` the included will be removed from the group.
        /// </summary>
        public InputList<string> VirtualMachineIds
        {
            get => _virtualMachineIds ?? (_virtualMachineIds = new InputList<string>());
            set => _virtualMachineIds = value;
        }

        public ComputeClusterVmGroupArgs()
        {
        }
        public static new ComputeClusterVmGroupArgs Empty => new ComputeClusterVmGroupArgs();
    }

    public sealed class ComputeClusterVmGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The managed object reference
        /// ID of the cluster to put the group in.  Forces a new
        /// resource if changed.
        /// </summary>
        [Input("computeClusterId")]
        public Input<string>? ComputeClusterId { get; set; }

        /// <summary>
        /// The name of the VM group. This must be unique in the
        /// cluster. Forces a new resource if changed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("virtualMachineIds")]
        private InputList<string>? _virtualMachineIds;

        /// <summary>
        /// The UUIDs of the virtual machines in this
        /// group.
        /// 
        /// &gt; **NOTE:** The namespace for cluster names on this resource (defined by the
        /// `name` argument) is shared with the
        /// `vsphere.ComputeClusterHostGroup`
        /// resource. Make sure your names are unique across both resources.
        /// 
        /// &gt; **NOTE:** To update a existing VM group, you must first import the group with `import` command in
        /// import section. When importing a VM group, validate that all virtual machines that
        /// need to be in the group are included in the `virtual_machine_ids`; otherwise, any virtual machines
        /// that are not in `virtual_machine_ids` the included will be removed from the group.
        /// </summary>
        public InputList<string> VirtualMachineIds
        {
            get => _virtualMachineIds ?? (_virtualMachineIds = new InputList<string>());
            set => _virtualMachineIds = value;
        }

        public ComputeClusterVmGroupState()
        {
        }
        public static new ComputeClusterVmGroupState Empty => new ComputeClusterVmGroupState();
    }
}
