// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    /// <summary>
    /// The `vsphere.VmStoragePolicy` resource can be used to create and manage storage
    /// policies. Using this storage policy, tag based placement rules can be created to
    /// place a VM on a particular tagged datastore.
    /// 
    /// ## Example Usage
    /// 
    /// This example creates a storage policy with tag_rule having cat1 as tag_category and
    /// tag1, tag2 as the tags. While creating a VM, this policy can be referenced to place
    /// the VM in any of the compatible datastore tagged with these tags.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using VSphere = Pulumi.VSphere;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var dc = Output.Create(VSphere.GetDatacenter.InvokeAsync(new VSphere.GetDatacenterArgs
    ///         {
    ///             Name = "DC",
    ///         }));
    ///         var tagCategory = Output.Create(VSphere.GetTagCategory.InvokeAsync(new VSphere.GetTagCategoryArgs
    ///         {
    ///             Name = "cat1",
    ///         }));
    ///         var tag1 = tagCategory.Apply(tagCategory =&gt; Output.Create(VSphere.GetTag.InvokeAsync(new VSphere.GetTagArgs
    ///         {
    ///             Name = "tag1",
    ///             CategoryId = tagCategory.Id,
    ///         })));
    ///         var tag2 = tagCategory.Apply(tagCategory =&gt; Output.Create(VSphere.GetTag.InvokeAsync(new VSphere.GetTagArgs
    ///         {
    ///             Name = "tag2",
    ///             CategoryId = tagCategory.Id,
    ///         })));
    ///         var policyTagBasedPlacement = new VSphere.VmStoragePolicy("policyTagBasedPlacement", new VSphere.VmStoragePolicyArgs
    ///         {
    ///             Description = "description",
    ///             TagRules = 
    ///             {
    ///                 new VSphere.Inputs.VmStoragePolicyTagRuleArgs
    ///                 {
    ///                     TagCategory = tagCategory.Apply(tagCategory =&gt; tagCategory.Name),
    ///                     Tags = 
    ///                     {
    ///                         tag1.Apply(tag1 =&gt; tag1.Name),
    ///                         tag2.Apply(tag2 =&gt; tag2.Name),
    ///                     },
    ///                     IncludeDatastoresWithTags = true,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class VmStoragePolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the storage policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the storage policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of tag rules. The tag category and tags to be associated to this storage policy.
        /// </summary>
        [Output("tagRules")]
        public Output<ImmutableArray<Outputs.VmStoragePolicyTagRule>> TagRules { get; private set; } = null!;


        /// <summary>
        /// Create a VmStoragePolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VmStoragePolicy(string name, VmStoragePolicyArgs args, CustomResourceOptions? options = null)
            : base("vsphere:index/vmStoragePolicy:VmStoragePolicy", name, args ?? new VmStoragePolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VmStoragePolicy(string name, Input<string> id, VmStoragePolicyState? state = null, CustomResourceOptions? options = null)
            : base("vsphere:index/vmStoragePolicy:VmStoragePolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VmStoragePolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VmStoragePolicy Get(string name, Input<string> id, VmStoragePolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new VmStoragePolicy(name, id, state, options);
        }
    }

    public sealed class VmStoragePolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the storage policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the storage policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tagRules", required: true)]
        private InputList<Inputs.VmStoragePolicyTagRuleArgs>? _tagRules;

        /// <summary>
        /// List of tag rules. The tag category and tags to be associated to this storage policy.
        /// </summary>
        public InputList<Inputs.VmStoragePolicyTagRuleArgs> TagRules
        {
            get => _tagRules ?? (_tagRules = new InputList<Inputs.VmStoragePolicyTagRuleArgs>());
            set => _tagRules = value;
        }

        public VmStoragePolicyArgs()
        {
        }
    }

    public sealed class VmStoragePolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the storage policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the storage policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tagRules")]
        private InputList<Inputs.VmStoragePolicyTagRuleGetArgs>? _tagRules;

        /// <summary>
        /// List of tag rules. The tag category and tags to be associated to this storage policy.
        /// </summary>
        public InputList<Inputs.VmStoragePolicyTagRuleGetArgs> TagRules
        {
            get => _tagRules ?? (_tagRules = new InputList<Inputs.VmStoragePolicyTagRuleGetArgs>());
            set => _tagRules = value;
        }

        public VmStoragePolicyState()
        {
        }
    }
}
