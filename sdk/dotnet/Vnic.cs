// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    /// <summary>
    /// Provides a VMware vSphere vnic resource.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-vsphere/blob/master/website/docs/r/vnic.html.markdown.
    /// </summary>
    public partial class Vnic : Pulumi.CustomResource
    {
        /// <summary>
        /// Key of the distributed portgroup the nic will connect to. 
        /// </summary>
        [Output("distributedPortGroup")]
        public Output<string?> DistributedPortGroup { get; private set; } = null!;

        /// <summary>
        /// UUID of the DVSwitch the nic will be attached to. Do not set if you set portgroup.
        /// </summary>
        [Output("distributedSwitchPort")]
        public Output<string?> DistributedSwitchPort { get; private set; } = null!;

        /// <summary>
        /// ESX host the interface belongs to
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// IPv4 settings. Either this or `ipv6` needs to be set. See  ipv4 options below.
        /// </summary>
        [Output("ipv4")]
        public Output<Outputs.VnicIpv4?> Ipv4 { get; private set; } = null!;

        /// <summary>
        /// IPv6 settings. Either this or `ipv6` needs to be set. See  ipv6 options below.
        /// </summary>
        [Output("ipv6")]
        public Output<Outputs.VnicIpv6?> Ipv6 { get; private set; } = null!;

        /// <summary>
        /// MAC address of the interface.
        /// </summary>
        [Output("mac")]
        public Output<string> Mac { get; private set; } = null!;

        /// <summary>
        /// MTU of the interface.
        /// </summary>
        [Output("mtu")]
        public Output<int> Mtu { get; private set; } = null!;

        /// <summary>
        /// TCP/IP stack setting for this interface. Possible values are 'defaultTcpipStack', 'vmotion', 'vSphereProvisioning'. Changing this will force the creation of a new interface since it's not possible to change the stack once it gets created. (Default: `defaultTcpipStack`)
        /// </summary>
        [Output("netstack")]
        public Output<string?> Netstack { get; private set; } = null!;

        /// <summary>
        /// Portgroup to attach the nic to. Do not set if you set distributed_switch_port.
        /// </summary>
        [Output("portgroup")]
        public Output<string?> Portgroup { get; private set; } = null!;


        /// <summary>
        /// Create a Vnic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vnic(string name, VnicArgs args, CustomResourceOptions? options = null)
            : base("vsphere:index/vnic:Vnic", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Vnic(string name, Input<string> id, VnicState? state = null, CustomResourceOptions? options = null)
            : base("vsphere:index/vnic:Vnic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vnic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vnic Get(string name, Input<string> id, VnicState? state = null, CustomResourceOptions? options = null)
        {
            return new Vnic(name, id, state, options);
        }
    }

    public sealed class VnicArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Key of the distributed portgroup the nic will connect to. 
        /// </summary>
        [Input("distributedPortGroup")]
        public Input<string>? DistributedPortGroup { get; set; }

        /// <summary>
        /// UUID of the DVSwitch the nic will be attached to. Do not set if you set portgroup.
        /// </summary>
        [Input("distributedSwitchPort")]
        public Input<string>? DistributedSwitchPort { get; set; }

        /// <summary>
        /// ESX host the interface belongs to
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// IPv4 settings. Either this or `ipv6` needs to be set. See  ipv4 options below.
        /// </summary>
        [Input("ipv4")]
        public Input<Inputs.VnicIpv4Args>? Ipv4 { get; set; }

        /// <summary>
        /// IPv6 settings. Either this or `ipv6` needs to be set. See  ipv6 options below.
        /// </summary>
        [Input("ipv6")]
        public Input<Inputs.VnicIpv6Args>? Ipv6 { get; set; }

        /// <summary>
        /// MAC address of the interface.
        /// </summary>
        [Input("mac")]
        public Input<string>? Mac { get; set; }

        /// <summary>
        /// MTU of the interface.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// TCP/IP stack setting for this interface. Possible values are 'defaultTcpipStack', 'vmotion', 'vSphereProvisioning'. Changing this will force the creation of a new interface since it's not possible to change the stack once it gets created. (Default: `defaultTcpipStack`)
        /// </summary>
        [Input("netstack")]
        public Input<string>? Netstack { get; set; }

        /// <summary>
        /// Portgroup to attach the nic to. Do not set if you set distributed_switch_port.
        /// </summary>
        [Input("portgroup")]
        public Input<string>? Portgroup { get; set; }

        public VnicArgs()
        {
        }
    }

    public sealed class VnicState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Key of the distributed portgroup the nic will connect to. 
        /// </summary>
        [Input("distributedPortGroup")]
        public Input<string>? DistributedPortGroup { get; set; }

        /// <summary>
        /// UUID of the DVSwitch the nic will be attached to. Do not set if you set portgroup.
        /// </summary>
        [Input("distributedSwitchPort")]
        public Input<string>? DistributedSwitchPort { get; set; }

        /// <summary>
        /// ESX host the interface belongs to
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// IPv4 settings. Either this or `ipv6` needs to be set. See  ipv4 options below.
        /// </summary>
        [Input("ipv4")]
        public Input<Inputs.VnicIpv4GetArgs>? Ipv4 { get; set; }

        /// <summary>
        /// IPv6 settings. Either this or `ipv6` needs to be set. See  ipv6 options below.
        /// </summary>
        [Input("ipv6")]
        public Input<Inputs.VnicIpv6GetArgs>? Ipv6 { get; set; }

        /// <summary>
        /// MAC address of the interface.
        /// </summary>
        [Input("mac")]
        public Input<string>? Mac { get; set; }

        /// <summary>
        /// MTU of the interface.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// TCP/IP stack setting for this interface. Possible values are 'defaultTcpipStack', 'vmotion', 'vSphereProvisioning'. Changing this will force the creation of a new interface since it's not possible to change the stack once it gets created. (Default: `defaultTcpipStack`)
        /// </summary>
        [Input("netstack")]
        public Input<string>? Netstack { get; set; }

        /// <summary>
        /// Portgroup to attach the nic to. Do not set if you set distributed_switch_port.
        /// </summary>
        [Input("portgroup")]
        public Input<string>? Portgroup { get; set; }

        public VnicState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class VnicIpv4Args : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Use DHCP to configure the interface's IPv4 stack.
        /// </summary>
        [Input("dhcp")]
        public Input<bool>? Dhcp { get; set; }

        /// <summary>
        /// IP address of the default gateway, if DHCP or autoconfig is not set.
        /// </summary>
        [Input("gw")]
        public Input<string>? Gw { get; set; }

        /// <summary>
        /// Address of the interface, if DHCP is not set.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Netmask of the interface, if DHCP is not set.
        /// </summary>
        [Input("netmask")]
        public Input<string>? Netmask { get; set; }

        public VnicIpv4Args()
        {
        }
    }

    public sealed class VnicIpv4GetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Use DHCP to configure the interface's IPv4 stack.
        /// </summary>
        [Input("dhcp")]
        public Input<bool>? Dhcp { get; set; }

        /// <summary>
        /// IP address of the default gateway, if DHCP or autoconfig is not set.
        /// </summary>
        [Input("gw")]
        public Input<string>? Gw { get; set; }

        /// <summary>
        /// Address of the interface, if DHCP is not set.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Netmask of the interface, if DHCP is not set.
        /// </summary>
        [Input("netmask")]
        public Input<string>? Netmask { get; set; }

        public VnicIpv4GetArgs()
        {
        }
    }

    public sealed class VnicIpv6Args : Pulumi.ResourceArgs
    {
        [Input("addresses")]
        private InputList<string>? _addresses;

        /// <summary>
        /// List of IPv6 addresses
        /// </summary>
        public InputList<string> Addresses
        {
            get => _addresses ?? (_addresses = new InputList<string>());
            set => _addresses = value;
        }

        /// <summary>
        /// Use IPv6 Autoconfiguration (RFC2462).
        /// </summary>
        [Input("autoconfig")]
        public Input<bool>? Autoconfig { get; set; }

        /// <summary>
        /// Use DHCP to configure the interface's IPv4 stack.
        /// </summary>
        [Input("dhcp")]
        public Input<bool>? Dhcp { get; set; }

        /// <summary>
        /// IP address of the default gateway, if DHCP or autoconfig is not set.
        /// </summary>
        [Input("gw")]
        public Input<string>? Gw { get; set; }

        public VnicIpv6Args()
        {
        }
    }

    public sealed class VnicIpv6GetArgs : Pulumi.ResourceArgs
    {
        [Input("addresses")]
        private InputList<string>? _addresses;

        /// <summary>
        /// List of IPv6 addresses
        /// </summary>
        public InputList<string> Addresses
        {
            get => _addresses ?? (_addresses = new InputList<string>());
            set => _addresses = value;
        }

        /// <summary>
        /// Use IPv6 Autoconfiguration (RFC2462).
        /// </summary>
        [Input("autoconfig")]
        public Input<bool>? Autoconfig { get; set; }

        /// <summary>
        /// Use DHCP to configure the interface's IPv4 stack.
        /// </summary>
        [Input("dhcp")]
        public Input<bool>? Dhcp { get; set; }

        /// <summary>
        /// IP address of the default gateway, if DHCP or autoconfig is not set.
        /// </summary>
        [Input("gw")]
        public Input<string>? Gw { get; set; }

        public VnicIpv6GetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class VnicIpv4
    {
        /// <summary>
        /// Use DHCP to configure the interface's IPv4 stack.
        /// </summary>
        public readonly bool? Dhcp;
        /// <summary>
        /// IP address of the default gateway, if DHCP or autoconfig is not set.
        /// </summary>
        public readonly string? Gw;
        /// <summary>
        /// Address of the interface, if DHCP is not set.
        /// </summary>
        public readonly string? Ip;
        /// <summary>
        /// Netmask of the interface, if DHCP is not set.
        /// </summary>
        public readonly string? Netmask;

        [OutputConstructor]
        private VnicIpv4(
            bool? dhcp,
            string? gw,
            string? ip,
            string? netmask)
        {
            Dhcp = dhcp;
            Gw = gw;
            Ip = ip;
            Netmask = netmask;
        }
    }

    [OutputType]
    public sealed class VnicIpv6
    {
        /// <summary>
        /// List of IPv6 addresses
        /// </summary>
        public readonly ImmutableArray<string> Addresses;
        /// <summary>
        /// Use IPv6 Autoconfiguration (RFC2462).
        /// </summary>
        public readonly bool? Autoconfig;
        /// <summary>
        /// Use DHCP to configure the interface's IPv4 stack.
        /// </summary>
        public readonly bool? Dhcp;
        /// <summary>
        /// IP address of the default gateway, if DHCP or autoconfig is not set.
        /// </summary>
        public readonly string? Gw;

        [OutputConstructor]
        private VnicIpv6(
            ImmutableArray<string> addresses,
            bool? autoconfig,
            bool? dhcp,
            string? gw)
        {
            Addresses = addresses;
            Autoconfig = autoconfig;
            Dhcp = dhcp;
            Gw = gw;
        }
    }
    }
}
