// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    /// <summary>
    /// The `vsphere.ContentLibrary` resource can be used to manage content libraries.
    /// 
    /// &gt; **NOTE:** This resource requires a vCenter Server instance and is not available on direct ESXi host connections.
    /// 
    /// ## Example Usage
    /// 
    /// The following example creates a publishing content library using the datastore named `publisher-datastore` as the storage backing.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using VSphere = Pulumi.VSphere;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datacenterA = VSphere.GetDatacenter.Invoke(new()
    ///     {
    ///         Name = "dc-01-a",
    ///     });
    /// 
    ///     var publisherDatastore = VSphere.GetDatastore.Invoke(new()
    ///     {
    ///         Name = "publisher-datastore",
    ///         DatacenterId = datacenterA.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var publisherContentLibrary = new VSphere.ContentLibrary("publisher_content_library", new()
    ///     {
    ///         Name = "Publisher Content Library",
    ///         Description = "A publishing content library.",
    ///         StorageBackings = new[]
    ///         {
    ///             publisherDatastore.Apply(getDatastoreResult =&gt; getDatastoreResult.Id),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// The next example creates a subscribed content library using the URL of the publisher content library as the source and the datastore named `subscriber-datastore` as the storage backing.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using VSphere = Pulumi.VSphere;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datacenterB = VSphere.GetDatacenter.Invoke(new()
    ///     {
    ///         Name = "dc-01-b",
    ///     });
    /// 
    ///     var subscriberDatastore = VSphere.GetDatastore.Invoke(new()
    ///     {
    ///         Name = "subscriber-datastore",
    ///         DatacenterId = datacenterB.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var subscriberContentLibrary = new VSphere.ContentLibrary("subscriber_content_library", new()
    ///     {
    ///         Name = "Subscriber Content Library",
    ///         Description = "A subscribing content library.",
    ///         StorageBackings = new[]
    ///         {
    ///             subscriberDatastore.Apply(getDatastoreResult =&gt; getDatastoreResult.Id),
    ///         },
    ///         Subscription = new VSphere.Inputs.ContentLibrarySubscriptionArgs
    ///         {
    ///             SubscriptionUrl = "https://vc-01-a.example.com:443/cls/vcsp/lib/f42a4b25-844a-44ec-9063-a3a5e9cc88c7/lib.json",
    ///             AutomaticSync = true,
    ///             OnDemand = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing content library can be imported into this resource by supplying the content library ID. For example:
    /// 
    /// [docs-import]: https://developer.hashicorp.com/terraform/cli/import
    /// 
    /// ```sh
    /// $ pulumi import vsphere:index/contentLibrary:ContentLibrary vsphere_content_library publisher_content_library f42a4b25-844a-44ec-9063-a3a5e9cc88c7
    /// ```
    /// </summary>
    [VSphereResourceType("vsphere:index/contentLibrary:ContentLibrary")]
    public partial class ContentLibrary : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A description for the content library.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the content library.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Options to publish a local content library.
        /// </summary>
        [Output("publication")]
        public Output<Outputs.ContentLibraryPublication> Publication { get; private set; } = null!;

        /// <summary>
        /// The managed object reference ID of the datastore on which to store the content library items.
        /// </summary>
        [Output("storageBackings")]
        public Output<ImmutableArray<string>> StorageBackings { get; private set; } = null!;

        /// <summary>
        /// Options subscribe to a published content library.
        /// </summary>
        [Output("subscription")]
        public Output<Outputs.ContentLibrarySubscription?> Subscription { get; private set; } = null!;


        /// <summary>
        /// Create a ContentLibrary resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContentLibrary(string name, ContentLibraryArgs args, CustomResourceOptions? options = null)
            : base("vsphere:index/contentLibrary:ContentLibrary", name, args ?? new ContentLibraryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContentLibrary(string name, Input<string> id, ContentLibraryState? state = null, CustomResourceOptions? options = null)
            : base("vsphere:index/contentLibrary:ContentLibrary", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContentLibrary resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContentLibrary Get(string name, Input<string> id, ContentLibraryState? state = null, CustomResourceOptions? options = null)
        {
            return new ContentLibrary(name, id, state, options);
        }
    }

    public sealed class ContentLibraryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the content library.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the content library.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Options to publish a local content library.
        /// </summary>
        [Input("publication")]
        public Input<Inputs.ContentLibraryPublicationArgs>? Publication { get; set; }

        [Input("storageBackings", required: true)]
        private InputList<string>? _storageBackings;

        /// <summary>
        /// The managed object reference ID of the datastore on which to store the content library items.
        /// </summary>
        public InputList<string> StorageBackings
        {
            get => _storageBackings ?? (_storageBackings = new InputList<string>());
            set => _storageBackings = value;
        }

        /// <summary>
        /// Options subscribe to a published content library.
        /// </summary>
        [Input("subscription")]
        public Input<Inputs.ContentLibrarySubscriptionArgs>? Subscription { get; set; }

        public ContentLibraryArgs()
        {
        }
        public static new ContentLibraryArgs Empty => new ContentLibraryArgs();
    }

    public sealed class ContentLibraryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the content library.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the content library.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Options to publish a local content library.
        /// </summary>
        [Input("publication")]
        public Input<Inputs.ContentLibraryPublicationGetArgs>? Publication { get; set; }

        [Input("storageBackings")]
        private InputList<string>? _storageBackings;

        /// <summary>
        /// The managed object reference ID of the datastore on which to store the content library items.
        /// </summary>
        public InputList<string> StorageBackings
        {
            get => _storageBackings ?? (_storageBackings = new InputList<string>());
            set => _storageBackings = value;
        }

        /// <summary>
        /// Options subscribe to a published content library.
        /// </summary>
        [Input("subscription")]
        public Input<Inputs.ContentLibrarySubscriptionGetArgs>? Subscription { get; set; }

        public ContentLibraryState()
        {
        }
        public static new ContentLibraryState Empty => new ContentLibraryState();
    }
}
