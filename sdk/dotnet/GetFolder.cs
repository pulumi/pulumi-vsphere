// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    public static class GetFolder
    {
        /// <summary>
        /// The `vsphere.Folder` data source can be used to get the general attributes of a
        /// vSphere inventory folder. The data source supports creating folders of the 5
        /// major types - datacenter folders, host and cluster folders, virtual machine
        /// folders, storage folders, and network folders.
        /// 
        /// Paths are absolute and must include the datacenter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var datacenterFolderFolder = new VSphere.Folder("datacenter_folder", new()
        ///     {
        ///         Path = "example-datacenter-folder",
        ///         Type = "datacenter",
        ///     });
        /// 
        ///     var datacenterFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}",
        ///     });
        /// 
        ///     var datacenterDatacenter = new VSphere.Datacenter("datacenter", new()
        ///     {
        ///         Name = "example-datacenter",
        ///         Folder = datacenterFolder.Apply(getFolderResult =&gt; getFolderResult.Path),
        ///     }, new CustomResourceOptions
        ///     {
        ///         DependsOn =
        ///         {
        ///             datacenterFolder,
        ///         },
        ///     });
        /// 
        ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
        ///     {
        ///         Name = datacenterDatacenter.Name,
        ///     });
        /// 
        ///     var vmFolderFolder = new VSphere.Folder("vm_folder", new()
        ///     {
        ///         Path = "example-vm-folder",
        ///         Type = "vm",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var datastoreFolderFolder = new VSphere.Folder("datastore_folder", new()
        ///     {
        ///         Path = "example-datastore-folder",
        ///         Type = "datastore",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var networkFolderFolder = new VSphere.Folder("network_folder", new()
        ///     {
        ///         Path = "example-network-folder",
        ///         Type = "network",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var hostFolderFolder = new VSphere.Folder("host_folder", new()
        ///     {
        ///         Path = "example-host-folder",
        ///         Type = "host",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var vmFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}/{datacenterDatacenter.Name}/vm/{vmFolderFolder.Path}",
        ///     });
        /// 
        ///     var datastoreFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}/{datacenterDatacenter.Name}/datastore/{datastoreFolderFolder.Path}",
        ///     });
        /// 
        ///     var networkFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}/{datacenterDatacenter.Name}/network/{networkFolderFolder.Path}",
        ///     });
        /// 
        ///     var hostFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}/{datacenterDatacenter.Name}/host/{hostFolderFolder.Path}",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vmFolderId"] = vmFolder.Apply(getFolderResult =&gt; getFolderResult.Id),
        ///         ["datastoreFolderId"] = datastoreFolder.Apply(getFolderResult =&gt; getFolderResult.Id),
        ///         ["networkFolderId"] = networkFolder.Apply(getFolderResult =&gt; getFolderResult.Id),
        ///         ["hostFolderId"] = hostFolder.Apply(getFolderResult =&gt; getFolderResult.Id),
        ///         ["datacenterId"] = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///         ["datacenterFolderPath"] = datacenterFolderFolder.Path,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetFolderResult> InvokeAsync(GetFolderArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFolderResult>("vsphere:index/getFolder:getFolder", args ?? new GetFolderArgs(), options.WithDefaults());

        /// <summary>
        /// The `vsphere.Folder` data source can be used to get the general attributes of a
        /// vSphere inventory folder. The data source supports creating folders of the 5
        /// major types - datacenter folders, host and cluster folders, virtual machine
        /// folders, storage folders, and network folders.
        /// 
        /// Paths are absolute and must include the datacenter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var datacenterFolderFolder = new VSphere.Folder("datacenter_folder", new()
        ///     {
        ///         Path = "example-datacenter-folder",
        ///         Type = "datacenter",
        ///     });
        /// 
        ///     var datacenterFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}",
        ///     });
        /// 
        ///     var datacenterDatacenter = new VSphere.Datacenter("datacenter", new()
        ///     {
        ///         Name = "example-datacenter",
        ///         Folder = datacenterFolder.Apply(getFolderResult =&gt; getFolderResult.Path),
        ///     }, new CustomResourceOptions
        ///     {
        ///         DependsOn =
        ///         {
        ///             datacenterFolder,
        ///         },
        ///     });
        /// 
        ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
        ///     {
        ///         Name = datacenterDatacenter.Name,
        ///     });
        /// 
        ///     var vmFolderFolder = new VSphere.Folder("vm_folder", new()
        ///     {
        ///         Path = "example-vm-folder",
        ///         Type = "vm",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var datastoreFolderFolder = new VSphere.Folder("datastore_folder", new()
        ///     {
        ///         Path = "example-datastore-folder",
        ///         Type = "datastore",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var networkFolderFolder = new VSphere.Folder("network_folder", new()
        ///     {
        ///         Path = "example-network-folder",
        ///         Type = "network",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var hostFolderFolder = new VSphere.Folder("host_folder", new()
        ///     {
        ///         Path = "example-host-folder",
        ///         Type = "host",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var vmFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}/{datacenterDatacenter.Name}/vm/{vmFolderFolder.Path}",
        ///     });
        /// 
        ///     var datastoreFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}/{datacenterDatacenter.Name}/datastore/{datastoreFolderFolder.Path}",
        ///     });
        /// 
        ///     var networkFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}/{datacenterDatacenter.Name}/network/{networkFolderFolder.Path}",
        ///     });
        /// 
        ///     var hostFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}/{datacenterDatacenter.Name}/host/{hostFolderFolder.Path}",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vmFolderId"] = vmFolder.Apply(getFolderResult =&gt; getFolderResult.Id),
        ///         ["datastoreFolderId"] = datastoreFolder.Apply(getFolderResult =&gt; getFolderResult.Id),
        ///         ["networkFolderId"] = networkFolder.Apply(getFolderResult =&gt; getFolderResult.Id),
        ///         ["hostFolderId"] = hostFolder.Apply(getFolderResult =&gt; getFolderResult.Id),
        ///         ["datacenterId"] = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///         ["datacenterFolderPath"] = datacenterFolderFolder.Path,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetFolderResult> Invoke(GetFolderInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFolderResult>("vsphere:index/getFolder:getFolder", args ?? new GetFolderInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `vsphere.Folder` data source can be used to get the general attributes of a
        /// vSphere inventory folder. The data source supports creating folders of the 5
        /// major types - datacenter folders, host and cluster folders, virtual machine
        /// folders, storage folders, and network folders.
        /// 
        /// Paths are absolute and must include the datacenter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var datacenterFolderFolder = new VSphere.Folder("datacenter_folder", new()
        ///     {
        ///         Path = "example-datacenter-folder",
        ///         Type = "datacenter",
        ///     });
        /// 
        ///     var datacenterFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}",
        ///     });
        /// 
        ///     var datacenterDatacenter = new VSphere.Datacenter("datacenter", new()
        ///     {
        ///         Name = "example-datacenter",
        ///         Folder = datacenterFolder.Apply(getFolderResult =&gt; getFolderResult.Path),
        ///     }, new CustomResourceOptions
        ///     {
        ///         DependsOn =
        ///         {
        ///             datacenterFolder,
        ///         },
        ///     });
        /// 
        ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
        ///     {
        ///         Name = datacenterDatacenter.Name,
        ///     });
        /// 
        ///     var vmFolderFolder = new VSphere.Folder("vm_folder", new()
        ///     {
        ///         Path = "example-vm-folder",
        ///         Type = "vm",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var datastoreFolderFolder = new VSphere.Folder("datastore_folder", new()
        ///     {
        ///         Path = "example-datastore-folder",
        ///         Type = "datastore",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var networkFolderFolder = new VSphere.Folder("network_folder", new()
        ///     {
        ///         Path = "example-network-folder",
        ///         Type = "network",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var hostFolderFolder = new VSphere.Folder("host_folder", new()
        ///     {
        ///         Path = "example-host-folder",
        ///         Type = "host",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var vmFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}/{datacenterDatacenter.Name}/vm/{vmFolderFolder.Path}",
        ///     });
        /// 
        ///     var datastoreFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}/{datacenterDatacenter.Name}/datastore/{datastoreFolderFolder.Path}",
        ///     });
        /// 
        ///     var networkFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}/{datacenterDatacenter.Name}/network/{networkFolderFolder.Path}",
        ///     });
        /// 
        ///     var hostFolder = VSphere.GetFolder.Invoke(new()
        ///     {
        ///         Path = $"/{datacenterFolderFolder.Path}/{datacenterDatacenter.Name}/host/{hostFolderFolder.Path}",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vmFolderId"] = vmFolder.Apply(getFolderResult =&gt; getFolderResult.Id),
        ///         ["datastoreFolderId"] = datastoreFolder.Apply(getFolderResult =&gt; getFolderResult.Id),
        ///         ["networkFolderId"] = networkFolder.Apply(getFolderResult =&gt; getFolderResult.Id),
        ///         ["hostFolderId"] = hostFolder.Apply(getFolderResult =&gt; getFolderResult.Id),
        ///         ["datacenterId"] = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///         ["datacenterFolderPath"] = datacenterFolderFolder.Path,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetFolderResult> Invoke(GetFolderInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFolderResult>("vsphere:index/getFolder:getFolder", args ?? new GetFolderInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFolderArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The absolute path of the folder. For example, given a
        /// default datacenter of `default-dc`, a folder of type `vm`, and a folder name
        /// of `example-vm-folder`, the resulting `path` would be
        /// `/default-dc/vm/example-vm-folder`.
        /// 
        /// For nested datacenters, include the full hierarchy in the path. For example, if datacenter
        /// `default-dc` is inside folder `parent-folder`, the path to a VM folder would be
        /// `/parent-folder/default-dc/vm/example-vm-folder`.
        /// 
        /// The valid folder types to be used in a `path` are: `vm`, `host`, `datacenter`, `datastore`, or `network`.
        /// 
        /// Always include a leading slash in the `path`.
        /// </summary>
        [Input("path", required: true)]
        public string Path { get; set; } = null!;

        public GetFolderArgs()
        {
        }
        public static new GetFolderArgs Empty => new GetFolderArgs();
    }

    public sealed class GetFolderInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The absolute path of the folder. For example, given a
        /// default datacenter of `default-dc`, a folder of type `vm`, and a folder name
        /// of `example-vm-folder`, the resulting `path` would be
        /// `/default-dc/vm/example-vm-folder`.
        /// 
        /// For nested datacenters, include the full hierarchy in the path. For example, if datacenter
        /// `default-dc` is inside folder `parent-folder`, the path to a VM folder would be
        /// `/parent-folder/default-dc/vm/example-vm-folder`.
        /// 
        /// The valid folder types to be used in a `path` are: `vm`, `host`, `datacenter`, `datastore`, or `network`.
        /// 
        /// Always include a leading slash in the `path`.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        public GetFolderInvokeArgs()
        {
        }
        public static new GetFolderInvokeArgs Empty => new GetFolderInvokeArgs();
    }


    [OutputType]
    public sealed class GetFolderResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Path;

        [OutputConstructor]
        private GetFolderResult(
            string id,

            string path)
        {
            Id = id;
            Path = path;
        }
    }
}
