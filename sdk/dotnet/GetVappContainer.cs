// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    public static class GetVappContainer
    {
        /// <summary>
        /// The `vsphere.VappContainer` data source can be used to discover the ID of a
        /// vApp container in vSphere. This is useful to return the ID of a vApp container
        /// that you want to use to create virtual machines in using the
        /// `vsphere.VirtualMachine` resource.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
        ///     {
        ///         Name = "dc-01",
        ///     });
        /// 
        ///     var pool = VSphere.GetVappContainer.Invoke(new()
        ///     {
        ///         Name = "vapp-container-01",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVappContainerResult> InvokeAsync(GetVappContainerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVappContainerResult>("vsphere:index/getVappContainer:getVappContainer", args ?? new GetVappContainerArgs(), options.WithDefaults());

        /// <summary>
        /// The `vsphere.VappContainer` data source can be used to discover the ID of a
        /// vApp container in vSphere. This is useful to return the ID of a vApp container
        /// that you want to use to create virtual machines in using the
        /// `vsphere.VirtualMachine` resource.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
        ///     {
        ///         Name = "dc-01",
        ///     });
        /// 
        ///     var pool = VSphere.GetVappContainer.Invoke(new()
        ///     {
        ///         Name = "vapp-container-01",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVappContainerResult> Invoke(GetVappContainerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVappContainerResult>("vsphere:index/getVappContainer:getVappContainer", args ?? new GetVappContainerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVappContainerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The managed object reference ID
        /// of the datacenter in which the vApp container is located.
        /// </summary>
        [Input("datacenterId", required: true)]
        public string DatacenterId { get; set; } = null!;

        /// <summary>
        /// The name of the vApp container. This can be a name or
        /// path.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetVappContainerArgs()
        {
        }
        public static new GetVappContainerArgs Empty => new GetVappContainerArgs();
    }

    public sealed class GetVappContainerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The managed object reference ID
        /// of the datacenter in which the vApp container is located.
        /// </summary>
        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        /// <summary>
        /// The name of the vApp container. This can be a name or
        /// path.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetVappContainerInvokeArgs()
        {
        }
        public static new GetVappContainerInvokeArgs Empty => new GetVappContainerInvokeArgs();
    }


    [OutputType]
    public sealed class GetVappContainerResult
    {
        public readonly string DatacenterId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;

        [OutputConstructor]
        private GetVappContainerResult(
            string datacenterId,

            string id,

            string name)
        {
            DatacenterId = datacenterId;
            Id = id;
            Name = name;
        }
    }
}
