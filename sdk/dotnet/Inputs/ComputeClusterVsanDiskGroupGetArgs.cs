// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere.Inputs
{

    public sealed class ComputeClusterVsanDiskGroupGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The canonical name of the disk to use for vSAN cache.
        /// </summary>
        [Input("cache")]
        public Input<string>? Cache { get; set; }

        [Input("storages")]
        private InputList<string>? _storages;

        /// <summary>
        /// An array of disk canonical names for vSAN storage.
        /// 
        /// &gt; **NOTE:** You must disable vSphere HA before you enable vSAN on the cluster.
        /// You can enable or re-enable vSphere HA after vSAN is configured.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var computeCluster = new VSphere.ComputeCluster("computeCluster", new()
        ///     {
        ///         DatacenterId = data.Vsphere_datacenter.Datacenter.Id,
        ///         HostSystemIds = new[]
        ///         {
        ///             data.Vsphere_host.Host.Select(__item =&gt; __item.Id).ToList(),
        ///         },
        ///         DrsEnabled = true,
        ///         DrsAutomationLevel = "fullyAutomated",
        ///         HaEnabled = false,
        ///         VsanEnabled = true,
        ///         VsanDedupEnabled = true,
        ///         VsanCompressionEnabled = true,
        ///         VsanPerformanceEnabled = true,
        ///         VsanVerboseModeEnabled = true,
        ///         VsanNetworkDiagnosticModeEnabled = true,
        ///         VsanUnmapEnabled = true,
        ///         VsanDitEncryptionEnabled = true,
        ///         VsanDitRekeyInterval = 1800,
        ///         VsanDiskGroups = new[]
        ///         {
        ///             new VSphere.Inputs.ComputeClusterVsanDiskGroupArgs
        ///             {
        ///                 Cache = data.Vsphere_vmfs_disks.Cache_disks[0],
        ///                 Storages = data.Vsphere_vmfs_disks.Storage_disks,
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public InputList<string> Storages
        {
            get => _storages ?? (_storages = new InputList<string>());
            set => _storages = value;
        }

        public ComputeClusterVsanDiskGroupGetArgs()
        {
        }
        public static new ComputeClusterVsanDiskGroupGetArgs Empty => new ComputeClusterVsanDiskGroupGetArgs();
    }
}
