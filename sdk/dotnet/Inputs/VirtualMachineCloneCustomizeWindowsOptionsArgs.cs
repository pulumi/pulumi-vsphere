// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere.Inputs
{

    public sealed class VirtualMachineCloneCustomizeWindowsOptionsArgs : global::Pulumi.ResourceArgs
    {
        [Input("adminPassword")]
        private Input<string>? _adminPassword;

        /// <summary>
        /// The new administrator password for this virtual machine.
        /// </summary>
        public Input<string>? AdminPassword
        {
            get => _adminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies whether or not the VM automatically logs on as Administrator.
        /// </summary>
        [Input("autoLogon")]
        public Input<bool>? AutoLogon { get; set; }

        /// <summary>
        /// Specifies how many times the VM should auto-logon the Administrator account when AutoLogon is true.
        /// </summary>
        [Input("autoLogonCount")]
        public Input<int>? AutoLogonCount { get; set; }

        /// <summary>
        /// The host name for this virtual machine.
        /// </summary>
        [Input("computerName", required: true)]
        public Input<string> ComputerName { get; set; } = null!;

        [Input("domainAdminPassword")]
        private Input<string>? _domainAdminPassword;

        /// <summary>
        /// The password of the domain administrator used to join this virtual machine to the domain.
        /// </summary>
        public Input<string>? DomainAdminPassword
        {
            get => _domainAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _domainAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The user account of the domain administrator used to join this virtual machine to the domain.
        /// </summary>
        [Input("domainAdminUser")]
        public Input<string>? DomainAdminUser { get; set; }

        /// <summary>
        /// The MachineObjectOU which specifies the full LDAP path name of the OU to which the virtual machine belongs.
        /// </summary>
        [Input("domainOu")]
        public Input<string>? DomainOu { get; set; }

        /// <summary>
        /// The full name of the user of this virtual machine.
        /// </summary>
        [Input("fullName")]
        public Input<string>? FullName { get; set; }

        /// <summary>
        /// The domain that the virtual machine should join.
        /// </summary>
        [Input("joinDomain")]
        public Input<string>? JoinDomain { get; set; }

        /// <summary>
        /// The organization name this virtual machine is being installed for.
        /// </summary>
        [Input("organizationName")]
        public Input<string>? OrganizationName { get; set; }

        [Input("productKey")]
        private Input<string>? _productKey;

        /// <summary>
        /// The product key for this virtual machine.
        /// </summary>
        public Input<string>? ProductKey
        {
            get => _productKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _productKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("runOnceCommandLists")]
        private InputList<string>? _runOnceCommandLists;

        /// <summary>
        /// A list of commands to run at first user logon, after guest customization.
        /// </summary>
        public InputList<string> RunOnceCommandLists
        {
            get => _runOnceCommandLists ?? (_runOnceCommandLists = new InputList<string>());
            set => _runOnceCommandLists = value;
        }

        /// <summary>
        /// The new time zone for the virtual machine. This is a sysprep-dictated timezone code.
        /// </summary>
        [Input("timeZone")]
        public Input<int>? TimeZone { get; set; }

        /// <summary>
        /// The workgroup for this virtual machine if not joining a domain.
        /// </summary>
        [Input("workgroup")]
        public Input<string>? Workgroup { get; set; }

        public VirtualMachineCloneCustomizeWindowsOptionsArgs()
        {
        }
        public static new VirtualMachineCloneCustomizeWindowsOptionsArgs Empty => new VirtualMachineCloneCustomizeWindowsOptionsArgs();
    }
}
