// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    /// <summary>
    /// The `vsphere.DrsVmOverride` resource can be used to add a DRS override to a
    /// cluster for a specific virtual machine. With this resource, one can enable or
    /// disable DRS and control the automation level for a single virtual machine
    /// without affecting the rest of the cluster.
    /// 
    /// For more information on vSphere clusters and DRS, see [this
    /// page][ref-vsphere-drs-clusters].
    /// 
    /// [ref-vsphere-drs-clusters]: https://techdocs.broadcom.com/us/en/vmware-cis/vsphere/vsphere/8-0/vsphere-resource-management-8-0/creating-a-drs-cluster.html
    /// 
    /// &gt; **NOTE:** This resource requires vCenter and is not available on direct ESXi
    /// connections.
    /// 
    /// ## Example Usage
    /// 
    /// The example below creates a virtual machine in a cluster using the
    /// `vsphere.VirtualMachine` resource, creating the
    /// virtual machine in the cluster looked up by the
    /// `vsphere.ComputeCluster` data source, but also
    /// pinning the VM to a host defined by the
    /// `vsphere.Host` data source, which is assumed to
    /// be a host within the cluster. To ensure that the VM stays on this host and does
    /// not need to be migrated back at any point in time, an override is entered using
    /// the `vsphere.DrsVmOverride` resource that disables DRS for this virtual
    /// machine, ensuring that it does not move.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using VSphere = Pulumi.VSphere;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
    ///     {
    ///         Name = "dc-01",
    ///     });
    /// 
    ///     var datastore = VSphere.GetDatastore.Invoke(new()
    ///     {
    ///         Name = "datastore1",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var cluster = VSphere.GetComputeCluster.Invoke(new()
    ///     {
    ///         Name = "cluster-01",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var host = VSphere.GetHost.Invoke(new()
    ///     {
    ///         Name = "esxi-01.example.com",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var network = VSphere.GetNetwork.Invoke(new()
    ///     {
    ///         Name = "network1",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var vm = new VSphere.VirtualMachine("vm", new()
    ///     {
    ///         Name = "test",
    ///         ResourcePoolId = cluster.Apply(getComputeClusterResult =&gt; getComputeClusterResult.ResourcePoolId),
    ///         HostSystemId = host.Apply(getHostResult =&gt; getHostResult.Id),
    ///         DatastoreId = datastore.Apply(getDatastoreResult =&gt; getDatastoreResult.Id),
    ///         NumCpus = 2,
    ///         Memory = 2048,
    ///         GuestId = "otherLinux64Guest",
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new VSphere.Inputs.VirtualMachineNetworkInterfaceArgs
    ///             {
    ///                 NetworkId = network.Apply(getNetworkResult =&gt; getNetworkResult.Id),
    ///             },
    ///         },
    ///         Disks = new[]
    ///         {
    ///             new VSphere.Inputs.VirtualMachineDiskArgs
    ///             {
    ///                 Label = "disk0",
    ///                 Size = 20,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var drsVmOverride = new VSphere.DrsVmOverride("drs_vm_override", new()
    ///     {
    ///         ComputeClusterId = cluster.Apply(getComputeClusterResult =&gt; getComputeClusterResult.Id),
    ///         VirtualMachineId = vm.Id,
    ///         DrsEnabled = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing override can be imported into this resource by
    /// 
    /// supplying both the path to the cluster, and the path to the virtual machine, to
    /// 
    /// `pulumi import`. If no override exists, an error will be given.  An example
    /// 
    /// is below:
    /// 
    /// [docs-import]: https://developer.hashicorp.com/terraform/cli/import
    /// 
    /// ```sh
    /// $ pulumi import vsphere:index/drsVmOverride:DrsVmOverride drs_vm_override \
    /// ```
    /// 
    ///   '{"compute_cluster_path": "/dc1/host/cluster1", \
    /// 
    ///   "virtual_machine_path": "/dc1/vm/srv1"}'
    /// </summary>
    [VSphereResourceType("vsphere:index/drsVmOverride:DrsVmOverride")]
    public partial class DrsVmOverride : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The managed object reference
        /// ID of the cluster to put the override in.  Forces a new
        /// resource if changed.
        /// </summary>
        [Output("computeClusterId")]
        public Output<string> ComputeClusterId { get; private set; } = null!;

        /// <summary>
        /// Overrides the automation level for this virtual
        /// machine in the cluster. Can be one of `manual`, `partiallyAutomated`, or
        /// `fullyAutomated`. Default: `manual`.
        /// 
        /// &gt; **NOTE:** Using this resource _always_ implies an override, even if one of
        /// `drs_enabled` or `drs_automation_level` is omitted. Take note of the defaults
        /// for both options.
        /// </summary>
        [Output("drsAutomationLevel")]
        public Output<string?> DrsAutomationLevel { get; private set; } = null!;

        /// <summary>
        /// Overrides the default DRS setting for this virtual
        /// machine. Can be either `true` or `false`. Default: `false`.
        /// </summary>
        [Output("drsEnabled")]
        public Output<bool?> DrsEnabled { get; private set; } = null!;

        /// <summary>
        /// The UUID of the virtual machine to create
        /// the override for.  Forces a new resource if changed.
        /// </summary>
        [Output("virtualMachineId")]
        public Output<string> VirtualMachineId { get; private set; } = null!;


        /// <summary>
        /// Create a DrsVmOverride resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DrsVmOverride(string name, DrsVmOverrideArgs args, CustomResourceOptions? options = null)
            : base("vsphere:index/drsVmOverride:DrsVmOverride", name, args ?? new DrsVmOverrideArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DrsVmOverride(string name, Input<string> id, DrsVmOverrideState? state = null, CustomResourceOptions? options = null)
            : base("vsphere:index/drsVmOverride:DrsVmOverride", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DrsVmOverride resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DrsVmOverride Get(string name, Input<string> id, DrsVmOverrideState? state = null, CustomResourceOptions? options = null)
        {
            return new DrsVmOverride(name, id, state, options);
        }
    }

    public sealed class DrsVmOverrideArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The managed object reference
        /// ID of the cluster to put the override in.  Forces a new
        /// resource if changed.
        /// </summary>
        [Input("computeClusterId", required: true)]
        public Input<string> ComputeClusterId { get; set; } = null!;

        /// <summary>
        /// Overrides the automation level for this virtual
        /// machine in the cluster. Can be one of `manual`, `partiallyAutomated`, or
        /// `fullyAutomated`. Default: `manual`.
        /// 
        /// &gt; **NOTE:** Using this resource _always_ implies an override, even if one of
        /// `drs_enabled` or `drs_automation_level` is omitted. Take note of the defaults
        /// for both options.
        /// </summary>
        [Input("drsAutomationLevel")]
        public Input<string>? DrsAutomationLevel { get; set; }

        /// <summary>
        /// Overrides the default DRS setting for this virtual
        /// machine. Can be either `true` or `false`. Default: `false`.
        /// </summary>
        [Input("drsEnabled")]
        public Input<bool>? DrsEnabled { get; set; }

        /// <summary>
        /// The UUID of the virtual machine to create
        /// the override for.  Forces a new resource if changed.
        /// </summary>
        [Input("virtualMachineId", required: true)]
        public Input<string> VirtualMachineId { get; set; } = null!;

        public DrsVmOverrideArgs()
        {
        }
        public static new DrsVmOverrideArgs Empty => new DrsVmOverrideArgs();
    }

    public sealed class DrsVmOverrideState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The managed object reference
        /// ID of the cluster to put the override in.  Forces a new
        /// resource if changed.
        /// </summary>
        [Input("computeClusterId")]
        public Input<string>? ComputeClusterId { get; set; }

        /// <summary>
        /// Overrides the automation level for this virtual
        /// machine in the cluster. Can be one of `manual`, `partiallyAutomated`, or
        /// `fullyAutomated`. Default: `manual`.
        /// 
        /// &gt; **NOTE:** Using this resource _always_ implies an override, even if one of
        /// `drs_enabled` or `drs_automation_level` is omitted. Take note of the defaults
        /// for both options.
        /// </summary>
        [Input("drsAutomationLevel")]
        public Input<string>? DrsAutomationLevel { get; set; }

        /// <summary>
        /// Overrides the default DRS setting for this virtual
        /// machine. Can be either `true` or `false`. Default: `false`.
        /// </summary>
        [Input("drsEnabled")]
        public Input<bool>? DrsEnabled { get; set; }

        /// <summary>
        /// The UUID of the virtual machine to create
        /// the override for.  Forces a new resource if changed.
        /// </summary>
        [Input("virtualMachineId")]
        public Input<string>? VirtualMachineId { get; set; }

        public DrsVmOverrideState()
        {
        }
        public static new DrsVmOverrideState Empty => new DrsVmOverrideState();
    }
}
