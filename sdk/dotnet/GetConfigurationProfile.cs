// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    public static class GetConfigurationProfile
    {
        /// <summary>
        /// The `vsphere.ConfigurationProfile` data source can be used to export the configuration and schema
        /// of a cluster that is already managed via configuration profiles.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
        ///     {
        ///         Name = "dc-01",
        ///     });
        /// 
        ///     var computeCluster = VSphere.GetComputeCluster.Invoke(new()
        ///     {
        ///         Name = "cluster-01",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var profile = VSphere.GetConfigurationProfile.Invoke(new()
        ///     {
        ///         ClusterId = computeCluster.Apply(getComputeClusterResult =&gt; getComputeClusterResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetConfigurationProfileResult> InvokeAsync(GetConfigurationProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConfigurationProfileResult>("vsphere:index/getConfigurationProfile:getConfigurationProfile", args ?? new GetConfigurationProfileArgs(), options.WithDefaults());

        /// <summary>
        /// The `vsphere.ConfigurationProfile` data source can be used to export the configuration and schema
        /// of a cluster that is already managed via configuration profiles.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
        ///     {
        ///         Name = "dc-01",
        ///     });
        /// 
        ///     var computeCluster = VSphere.GetComputeCluster.Invoke(new()
        ///     {
        ///         Name = "cluster-01",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var profile = VSphere.GetConfigurationProfile.Invoke(new()
        ///     {
        ///         ClusterId = computeCluster.Apply(getComputeClusterResult =&gt; getComputeClusterResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConfigurationProfileResult> Invoke(GetConfigurationProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConfigurationProfileResult>("vsphere:index/getConfigurationProfile:getConfigurationProfile", args ?? new GetConfigurationProfileInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `vsphere.ConfigurationProfile` data source can be used to export the configuration and schema
        /// of a cluster that is already managed via configuration profiles.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
        ///     {
        ///         Name = "dc-01",
        ///     });
        /// 
        ///     var computeCluster = VSphere.GetComputeCluster.Invoke(new()
        ///     {
        ///         Name = "cluster-01",
        ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
        ///     });
        /// 
        ///     var profile = VSphere.GetConfigurationProfile.Invoke(new()
        ///     {
        ///         ClusterId = computeCluster.Apply(getComputeClusterResult =&gt; getComputeClusterResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConfigurationProfileResult> Invoke(GetConfigurationProfileInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetConfigurationProfileResult>("vsphere:index/getConfigurationProfile:getConfigurationProfile", args ?? new GetConfigurationProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConfigurationProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identifier of the compute cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        public GetConfigurationProfileArgs()
        {
        }
        public static new GetConfigurationProfileArgs Empty => new GetConfigurationProfileArgs();
    }

    public sealed class GetConfigurationProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identifier of the compute cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        public GetConfigurationProfileInvokeArgs()
        {
        }
        public static new GetConfigurationProfileInvokeArgs Empty => new GetConfigurationProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetConfigurationProfileResult
    {
        public readonly string ClusterId;
        /// <summary>
        /// The current configuration which is active on the cluster.
        /// </summary>
        public readonly string Configuration;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The JSON schema for the profile.
        /// </summary>
        public readonly string Schema;

        [OutputConstructor]
        private GetConfigurationProfileResult(
            string clusterId,

            string configuration,

            string id,

            string schema)
        {
            ClusterId = clusterId;
            Configuration = configuration;
            Id = id;
            Schema = schema;
        }
    }
}
