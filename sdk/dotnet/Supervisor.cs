// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    /// <summary>
    /// Provides a resource for configuring Workload Management.
    /// 
    /// ## Example Usage
    /// </summary>
    [VSphereResourceType("vsphere:index/supervisor:Supervisor")]
    public partial class Supervisor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The identifier of the compute cluster.
        /// </summary>
        [Output("cluster")]
        public Output<string> Cluster { get; private set; } = null!;

        /// <summary>
        /// The identifier of the subscribed content library.
        /// </summary>
        [Output("contentLibrary")]
        public Output<string> ContentLibrary { get; private set; } = null!;

        /// <summary>
        /// The UUID of the distributed switch.
        /// </summary>
        [Output("dvsUuid")]
        public Output<string> DvsUuid { get; private set; } = null!;

        /// <summary>
        /// The identifier of the NSX Edge Cluster.
        /// </summary>
        [Output("edgeCluster")]
        public Output<string> EdgeCluster { get; private set; } = null!;

        /// <summary>
        /// CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.
        /// </summary>
        [Output("egressCidrs")]
        public Output<ImmutableArray<Outputs.SupervisorEgressCidr>> EgressCidrs { get; private set; } = null!;

        /// <summary>
        /// CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.
        /// </summary>
        [Output("ingressCidrs")]
        public Output<ImmutableArray<Outputs.SupervisorIngressCidr>> IngressCidrs { get; private set; } = null!;

        /// <summary>
        /// The list of addresses of the primary DNS servers.
        /// </summary>
        [Output("mainDns")]
        public Output<ImmutableArray<string>> MainDns { get; private set; } = null!;

        /// <summary>
        /// The configuration for the management network which the control plane VMs will be connected to.
        /// * * `network` - ID of the network. (e.g. a distributed port group).
        /// * * `starting_address` - Starting address of the management network range.
        /// * * `subnet_mask` - Subnet mask.
        /// * * `gateway` - Gateway IP address.
        /// * * `address_count` - Number of addresses to allocate. Starts from `starting_address`
        /// </summary>
        [Output("managementNetwork")]
        public Output<Outputs.SupervisorManagementNetwork> ManagementNetwork { get; private set; } = null!;

        /// <summary>
        /// The list of namespaces to create in the Supervisor cluster
        /// </summary>
        [Output("namespaces")]
        public Output<ImmutableArray<Outputs.SupervisorNamespace>> Namespaces { get; private set; } = null!;

        /// <summary>
        /// CIDR blocks from which Kubernetes allocates pod IP addresses. Minimum subnet size is 23.
        /// </summary>
        [Output("podCidrs")]
        public Output<ImmutableArray<Outputs.SupervisorPodCidr>> PodCidrs { get; private set; } = null!;

        /// <summary>
        /// List of DNS search domains.
        /// </summary>
        [Output("searchDomains")]
        public Output<string> SearchDomains { get; private set; } = null!;

        /// <summary>
        /// CIDR block from which Kubernetes allocates service cluster IP addresses.
        /// </summary>
        [Output("serviceCidr")]
        public Output<Outputs.SupervisorServiceCidr> ServiceCidr { get; private set; } = null!;

        /// <summary>
        /// The size of the Kubernetes API server.
        /// </summary>
        [Output("sizingHint")]
        public Output<string> SizingHint { get; private set; } = null!;

        /// <summary>
        /// The name of the storage policy.
        /// </summary>
        [Output("storagePolicy")]
        public Output<string> StoragePolicy { get; private set; } = null!;

        /// <summary>
        /// The list of addresses of the DNS servers to use for the worker nodes.
        /// </summary>
        [Output("workerDns")]
        public Output<ImmutableArray<string>> WorkerDns { get; private set; } = null!;


        /// <summary>
        /// Create a Supervisor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Supervisor(string name, SupervisorArgs args, CustomResourceOptions? options = null)
            : base("vsphere:index/supervisor:Supervisor", name, args ?? new SupervisorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Supervisor(string name, Input<string> id, SupervisorState? state = null, CustomResourceOptions? options = null)
            : base("vsphere:index/supervisor:Supervisor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Supervisor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Supervisor Get(string name, Input<string> id, SupervisorState? state = null, CustomResourceOptions? options = null)
        {
            return new Supervisor(name, id, state, options);
        }
    }

    public sealed class SupervisorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The identifier of the compute cluster.
        /// </summary>
        [Input("cluster", required: true)]
        public Input<string> Cluster { get; set; } = null!;

        /// <summary>
        /// The identifier of the subscribed content library.
        /// </summary>
        [Input("contentLibrary", required: true)]
        public Input<string> ContentLibrary { get; set; } = null!;

        /// <summary>
        /// The UUID of the distributed switch.
        /// </summary>
        [Input("dvsUuid", required: true)]
        public Input<string> DvsUuid { get; set; } = null!;

        /// <summary>
        /// The identifier of the NSX Edge Cluster.
        /// </summary>
        [Input("edgeCluster", required: true)]
        public Input<string> EdgeCluster { get; set; } = null!;

        [Input("egressCidrs", required: true)]
        private InputList<Inputs.SupervisorEgressCidrArgs>? _egressCidrs;

        /// <summary>
        /// CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.
        /// </summary>
        public InputList<Inputs.SupervisorEgressCidrArgs> EgressCidrs
        {
            get => _egressCidrs ?? (_egressCidrs = new InputList<Inputs.SupervisorEgressCidrArgs>());
            set => _egressCidrs = value;
        }

        [Input("ingressCidrs", required: true)]
        private InputList<Inputs.SupervisorIngressCidrArgs>? _ingressCidrs;

        /// <summary>
        /// CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.
        /// </summary>
        public InputList<Inputs.SupervisorIngressCidrArgs> IngressCidrs
        {
            get => _ingressCidrs ?? (_ingressCidrs = new InputList<Inputs.SupervisorIngressCidrArgs>());
            set => _ingressCidrs = value;
        }

        [Input("mainDns", required: true)]
        private InputList<string>? _mainDns;

        /// <summary>
        /// The list of addresses of the primary DNS servers.
        /// </summary>
        public InputList<string> MainDns
        {
            get => _mainDns ?? (_mainDns = new InputList<string>());
            set => _mainDns = value;
        }

        /// <summary>
        /// The configuration for the management network which the control plane VMs will be connected to.
        /// * * `network` - ID of the network. (e.g. a distributed port group).
        /// * * `starting_address` - Starting address of the management network range.
        /// * * `subnet_mask` - Subnet mask.
        /// * * `gateway` - Gateway IP address.
        /// * * `address_count` - Number of addresses to allocate. Starts from `starting_address`
        /// </summary>
        [Input("managementNetwork", required: true)]
        public Input<Inputs.SupervisorManagementNetworkArgs> ManagementNetwork { get; set; } = null!;

        [Input("namespaces")]
        private InputList<Inputs.SupervisorNamespaceArgs>? _namespaces;

        /// <summary>
        /// The list of namespaces to create in the Supervisor cluster
        /// </summary>
        public InputList<Inputs.SupervisorNamespaceArgs> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<Inputs.SupervisorNamespaceArgs>());
            set => _namespaces = value;
        }

        [Input("podCidrs", required: true)]
        private InputList<Inputs.SupervisorPodCidrArgs>? _podCidrs;

        /// <summary>
        /// CIDR blocks from which Kubernetes allocates pod IP addresses. Minimum subnet size is 23.
        /// </summary>
        public InputList<Inputs.SupervisorPodCidrArgs> PodCidrs
        {
            get => _podCidrs ?? (_podCidrs = new InputList<Inputs.SupervisorPodCidrArgs>());
            set => _podCidrs = value;
        }

        /// <summary>
        /// List of DNS search domains.
        /// </summary>
        [Input("searchDomains", required: true)]
        public Input<string> SearchDomains { get; set; } = null!;

        /// <summary>
        /// CIDR block from which Kubernetes allocates service cluster IP addresses.
        /// </summary>
        [Input("serviceCidr", required: true)]
        public Input<Inputs.SupervisorServiceCidrArgs> ServiceCidr { get; set; } = null!;

        /// <summary>
        /// The size of the Kubernetes API server.
        /// </summary>
        [Input("sizingHint", required: true)]
        public Input<string> SizingHint { get; set; } = null!;

        /// <summary>
        /// The name of the storage policy.
        /// </summary>
        [Input("storagePolicy", required: true)]
        public Input<string> StoragePolicy { get; set; } = null!;

        [Input("workerDns", required: true)]
        private InputList<string>? _workerDns;

        /// <summary>
        /// The list of addresses of the DNS servers to use for the worker nodes.
        /// </summary>
        public InputList<string> WorkerDns
        {
            get => _workerDns ?? (_workerDns = new InputList<string>());
            set => _workerDns = value;
        }

        public SupervisorArgs()
        {
        }
        public static new SupervisorArgs Empty => new SupervisorArgs();
    }

    public sealed class SupervisorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The identifier of the compute cluster.
        /// </summary>
        [Input("cluster")]
        public Input<string>? Cluster { get; set; }

        /// <summary>
        /// The identifier of the subscribed content library.
        /// </summary>
        [Input("contentLibrary")]
        public Input<string>? ContentLibrary { get; set; }

        /// <summary>
        /// The UUID of the distributed switch.
        /// </summary>
        [Input("dvsUuid")]
        public Input<string>? DvsUuid { get; set; }

        /// <summary>
        /// The identifier of the NSX Edge Cluster.
        /// </summary>
        [Input("edgeCluster")]
        public Input<string>? EdgeCluster { get; set; }

        [Input("egressCidrs")]
        private InputList<Inputs.SupervisorEgressCidrGetArgs>? _egressCidrs;

        /// <summary>
        /// CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.
        /// </summary>
        public InputList<Inputs.SupervisorEgressCidrGetArgs> EgressCidrs
        {
            get => _egressCidrs ?? (_egressCidrs = new InputList<Inputs.SupervisorEgressCidrGetArgs>());
            set => _egressCidrs = value;
        }

        [Input("ingressCidrs")]
        private InputList<Inputs.SupervisorIngressCidrGetArgs>? _ingressCidrs;

        /// <summary>
        /// CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.
        /// </summary>
        public InputList<Inputs.SupervisorIngressCidrGetArgs> IngressCidrs
        {
            get => _ingressCidrs ?? (_ingressCidrs = new InputList<Inputs.SupervisorIngressCidrGetArgs>());
            set => _ingressCidrs = value;
        }

        [Input("mainDns")]
        private InputList<string>? _mainDns;

        /// <summary>
        /// The list of addresses of the primary DNS servers.
        /// </summary>
        public InputList<string> MainDns
        {
            get => _mainDns ?? (_mainDns = new InputList<string>());
            set => _mainDns = value;
        }

        /// <summary>
        /// The configuration for the management network which the control plane VMs will be connected to.
        /// * * `network` - ID of the network. (e.g. a distributed port group).
        /// * * `starting_address` - Starting address of the management network range.
        /// * * `subnet_mask` - Subnet mask.
        /// * * `gateway` - Gateway IP address.
        /// * * `address_count` - Number of addresses to allocate. Starts from `starting_address`
        /// </summary>
        [Input("managementNetwork")]
        public Input<Inputs.SupervisorManagementNetworkGetArgs>? ManagementNetwork { get; set; }

        [Input("namespaces")]
        private InputList<Inputs.SupervisorNamespaceGetArgs>? _namespaces;

        /// <summary>
        /// The list of namespaces to create in the Supervisor cluster
        /// </summary>
        public InputList<Inputs.SupervisorNamespaceGetArgs> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<Inputs.SupervisorNamespaceGetArgs>());
            set => _namespaces = value;
        }

        [Input("podCidrs")]
        private InputList<Inputs.SupervisorPodCidrGetArgs>? _podCidrs;

        /// <summary>
        /// CIDR blocks from which Kubernetes allocates pod IP addresses. Minimum subnet size is 23.
        /// </summary>
        public InputList<Inputs.SupervisorPodCidrGetArgs> PodCidrs
        {
            get => _podCidrs ?? (_podCidrs = new InputList<Inputs.SupervisorPodCidrGetArgs>());
            set => _podCidrs = value;
        }

        /// <summary>
        /// List of DNS search domains.
        /// </summary>
        [Input("searchDomains")]
        public Input<string>? SearchDomains { get; set; }

        /// <summary>
        /// CIDR block from which Kubernetes allocates service cluster IP addresses.
        /// </summary>
        [Input("serviceCidr")]
        public Input<Inputs.SupervisorServiceCidrGetArgs>? ServiceCidr { get; set; }

        /// <summary>
        /// The size of the Kubernetes API server.
        /// </summary>
        [Input("sizingHint")]
        public Input<string>? SizingHint { get; set; }

        /// <summary>
        /// The name of the storage policy.
        /// </summary>
        [Input("storagePolicy")]
        public Input<string>? StoragePolicy { get; set; }

        [Input("workerDns")]
        private InputList<string>? _workerDns;

        /// <summary>
        /// The list of addresses of the DNS servers to use for the worker nodes.
        /// </summary>
        public InputList<string> WorkerDns
        {
            get => _workerDns ?? (_workerDns = new InputList<string>());
            set => _workerDns = value;
        }

        public SupervisorState()
        {
        }
        public static new SupervisorState Empty => new SupervisorState();
    }
}
