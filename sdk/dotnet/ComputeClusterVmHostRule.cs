// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    /// <summary>
    /// The `vsphere.ComputeClusterVmHostRule` resource can be used to manage
    /// VM-to-host rules in a cluster, either created by the
    /// `vsphere.ComputeCluster` resource or looked up
    /// by the `vsphere.ComputeCluster` data source.
    /// 
    /// This resource can create both _affinity rules_, where virtual machines run on
    /// specified hosts, or _anti-affinity_ rules, where virtual machines run on hosts
    /// outside of the ones specified in the rule. Virtual machines and hosts are
    /// supplied via groups, which can be managed via the
    /// `vsphere.ComputeClusterVmGroup` and
    /// `vsphere.ComputeClusterHostGroup`
    /// resources.
    /// 
    /// &gt; **NOTE:** This resource requires vCenter and is not available on direct ESXi
    /// connections.
    /// 
    /// ## Example Usage
    /// 
    /// The example below creates a virtual machine in a cluster using the
    /// `vsphere.VirtualMachine` resource in a cluster
    /// looked up by the `vsphere.ComputeCluster`
    /// data source. It then creates a group with this virtual machine. It also creates
    /// a host group off of the host looked up via the
    /// `vsphere.Host` data source. Finally, this
    /// virtual machine is configured to run specifically on that host via a
    /// `vsphere.ComputeClusterVmHostRule` resource.
    /// 
    /// &gt; Note how `vm_group_name` and
    /// `affinity_host_group_name` are sourced off of the
    /// `name` attributes from the
    /// `vsphere.ComputeClusterVmGroup` and
    /// `vsphere.ComputeClusterHostGroup`
    /// resources. This is to ensure that the rule is not created before the groups
    /// exist, which may not possibly happen in the event that the names came from a
    /// "static" source such as a variable.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using VSphere = Pulumi.VSphere;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datacenter = VSphere.GetDatacenter.Invoke(new()
    ///     {
    ///         Name = "dc-01",
    ///     });
    /// 
    ///     var datastore = VSphere.GetDatastore.Invoke(new()
    ///     {
    ///         Name = "datastore1",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var cluster = VSphere.GetComputeCluster.Invoke(new()
    ///     {
    ///         Name = "cluster-01",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var host = VSphere.GetHost.Invoke(new()
    ///     {
    ///         Name = "esxi-01.example.com",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var network = VSphere.GetNetwork.Invoke(new()
    ///     {
    ///         Name = "network1",
    ///         DatacenterId = datacenter.Apply(getDatacenterResult =&gt; getDatacenterResult.Id),
    ///     });
    /// 
    ///     var vm = new VSphere.VirtualMachine("vm", new()
    ///     {
    ///         Name = "test",
    ///         ResourcePoolId = cluster.Apply(getComputeClusterResult =&gt; getComputeClusterResult.ResourcePoolId),
    ///         DatastoreId = datastore.Apply(getDatastoreResult =&gt; getDatastoreResult.Id),
    ///         NumCpus = 2,
    ///         Memory = 2048,
    ///         GuestId = "otherLinux64Guest",
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new VSphere.Inputs.VirtualMachineNetworkInterfaceArgs
    ///             {
    ///                 NetworkId = network.Apply(getNetworkResult =&gt; getNetworkResult.Id),
    ///             },
    ///         },
    ///         Disks = new[]
    ///         {
    ///             new VSphere.Inputs.VirtualMachineDiskArgs
    ///             {
    ///                 Label = "disk0",
    ///                 Size = 20,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var clusterVmGroup = new VSphere.ComputeClusterVmGroup("cluster_vm_group", new()
    ///     {
    ///         Name = "test-cluster-vm-group",
    ///         ComputeClusterId = cluster.Apply(getComputeClusterResult =&gt; getComputeClusterResult.Id),
    ///         VirtualMachineIds = new[]
    ///         {
    ///             vm.Id,
    ///         },
    ///     });
    /// 
    ///     var clusterHostGroup = new VSphere.ComputeClusterHostGroup("cluster_host_group", new()
    ///     {
    ///         Name = "test-cluster-vm-group",
    ///         ComputeClusterId = cluster.Apply(getComputeClusterResult =&gt; getComputeClusterResult.Id),
    ///         HostSystemIds = new[]
    ///         {
    ///             host.Apply(getHostResult =&gt; getHostResult.Id),
    ///         },
    ///     });
    /// 
    ///     var clusterVmHostRule = new VSphere.ComputeClusterVmHostRule("cluster_vm_host_rule", new()
    ///     {
    ///         ComputeClusterId = cluster.Apply(getComputeClusterResult =&gt; getComputeClusterResult.Id),
    ///         Name = "test-cluster-vm-host-rule",
    ///         VmGroupName = clusterVmGroup.Name,
    ///         AffinityHostGroupName = clusterHostGroup.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing rule can be imported into this resource by supplying
    /// 
    /// both the path to the cluster, and the name the rule. If the name or cluster is
    /// 
    /// not found, or if the rule is of a different type, an error will be returned. An
    /// 
    /// example is below:
    /// 
    /// [docs-import]: https://developer.hashicorp.com/terraform/cli/import
    /// 
    /// ```sh
    /// $ pulumi import vsphere:index/computeClusterVmHostRule:ComputeClusterVmHostRule cluster_vm_host_rule \
    /// ```
    /// 
    ///   '{"compute_cluster_path": "/dc1/host/cluster1", \
    /// 
    ///   "name": "pulumi-test-cluster-vm-host-rule"}'
    /// </summary>
    [VSphereResourceType("vsphere:index/computeClusterVmHostRule:ComputeClusterVmHostRule")]
    public partial class ComputeClusterVmHostRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When this field is used, the virtual
        /// machines defined in `vm_group_name` will be run on the
        /// hosts defined in this host group.
        /// </summary>
        [Output("affinityHostGroupName")]
        public Output<string?> AffinityHostGroupName { get; private set; } = null!;

        /// <summary>
        /// When this field is used, the
        /// virtual machines defined in `vm_group_name` will _not_ be
        /// run on the hosts defined in this host group.
        /// </summary>
        [Output("antiAffinityHostGroupName")]
        public Output<string?> AntiAffinityHostGroupName { get; private set; } = null!;

        /// <summary>
        /// The managed object reference
        /// ID of the cluster to put the group in.  Forces a new
        /// resource if changed.
        /// </summary>
        [Output("computeClusterId")]
        public Output<string> ComputeClusterId { get; private set; } = null!;

        /// <summary>
        /// Enable this rule in the cluster. Default: `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// When this value is `true`, prevents any virtual
        /// machine operations that may violate this rule. Default: `false`.
        /// 
        /// &gt; **NOTE:** One of `affinity_host_group_name` or
        /// `anti_affinity_host_group_name` must be
        /// defined, but not both.
        /// 
        /// &gt; **NOTE:** The namespace for rule names on this resource (defined by the
        /// `name` argument) is shared with all rules in the cluster - consider
        /// this when naming your rules.
        /// </summary>
        [Output("mandatory")]
        public Output<bool?> Mandatory { get; private set; } = null!;

        /// <summary>
        /// The name of the rule. This must be unique in the
        /// cluster.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the virtual machine group to use
        /// with this rule.
        /// </summary>
        [Output("vmGroupName")]
        public Output<string> VmGroupName { get; private set; } = null!;


        /// <summary>
        /// Create a ComputeClusterVmHostRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ComputeClusterVmHostRule(string name, ComputeClusterVmHostRuleArgs args, CustomResourceOptions? options = null)
            : base("vsphere:index/computeClusterVmHostRule:ComputeClusterVmHostRule", name, args ?? new ComputeClusterVmHostRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ComputeClusterVmHostRule(string name, Input<string> id, ComputeClusterVmHostRuleState? state = null, CustomResourceOptions? options = null)
            : base("vsphere:index/computeClusterVmHostRule:ComputeClusterVmHostRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ComputeClusterVmHostRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ComputeClusterVmHostRule Get(string name, Input<string> id, ComputeClusterVmHostRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new ComputeClusterVmHostRule(name, id, state, options);
        }
    }

    public sealed class ComputeClusterVmHostRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When this field is used, the virtual
        /// machines defined in `vm_group_name` will be run on the
        /// hosts defined in this host group.
        /// </summary>
        [Input("affinityHostGroupName")]
        public Input<string>? AffinityHostGroupName { get; set; }

        /// <summary>
        /// When this field is used, the
        /// virtual machines defined in `vm_group_name` will _not_ be
        /// run on the hosts defined in this host group.
        /// </summary>
        [Input("antiAffinityHostGroupName")]
        public Input<string>? AntiAffinityHostGroupName { get; set; }

        /// <summary>
        /// The managed object reference
        /// ID of the cluster to put the group in.  Forces a new
        /// resource if changed.
        /// </summary>
        [Input("computeClusterId", required: true)]
        public Input<string> ComputeClusterId { get; set; } = null!;

        /// <summary>
        /// Enable this rule in the cluster. Default: `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// When this value is `true`, prevents any virtual
        /// machine operations that may violate this rule. Default: `false`.
        /// 
        /// &gt; **NOTE:** One of `affinity_host_group_name` or
        /// `anti_affinity_host_group_name` must be
        /// defined, but not both.
        /// 
        /// &gt; **NOTE:** The namespace for rule names on this resource (defined by the
        /// `name` argument) is shared with all rules in the cluster - consider
        /// this when naming your rules.
        /// </summary>
        [Input("mandatory")]
        public Input<bool>? Mandatory { get; set; }

        /// <summary>
        /// The name of the rule. This must be unique in the
        /// cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the virtual machine group to use
        /// with this rule.
        /// </summary>
        [Input("vmGroupName", required: true)]
        public Input<string> VmGroupName { get; set; } = null!;

        public ComputeClusterVmHostRuleArgs()
        {
        }
        public static new ComputeClusterVmHostRuleArgs Empty => new ComputeClusterVmHostRuleArgs();
    }

    public sealed class ComputeClusterVmHostRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When this field is used, the virtual
        /// machines defined in `vm_group_name` will be run on the
        /// hosts defined in this host group.
        /// </summary>
        [Input("affinityHostGroupName")]
        public Input<string>? AffinityHostGroupName { get; set; }

        /// <summary>
        /// When this field is used, the
        /// virtual machines defined in `vm_group_name` will _not_ be
        /// run on the hosts defined in this host group.
        /// </summary>
        [Input("antiAffinityHostGroupName")]
        public Input<string>? AntiAffinityHostGroupName { get; set; }

        /// <summary>
        /// The managed object reference
        /// ID of the cluster to put the group in.  Forces a new
        /// resource if changed.
        /// </summary>
        [Input("computeClusterId")]
        public Input<string>? ComputeClusterId { get; set; }

        /// <summary>
        /// Enable this rule in the cluster. Default: `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// When this value is `true`, prevents any virtual
        /// machine operations that may violate this rule. Default: `false`.
        /// 
        /// &gt; **NOTE:** One of `affinity_host_group_name` or
        /// `anti_affinity_host_group_name` must be
        /// defined, but not both.
        /// 
        /// &gt; **NOTE:** The namespace for rule names on this resource (defined by the
        /// `name` argument) is shared with all rules in the cluster - consider
        /// this when naming your rules.
        /// </summary>
        [Input("mandatory")]
        public Input<bool>? Mandatory { get; set; }

        /// <summary>
        /// The name of the rule. This must be unique in the
        /// cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the virtual machine group to use
        /// with this rule.
        /// </summary>
        [Input("vmGroupName")]
        public Input<string>? VmGroupName { get; set; }

        public ComputeClusterVmHostRuleState()
        {
        }
        public static new ComputeClusterVmHostRuleState Empty => new ComputeClusterVmHostRuleState();
    }
}
