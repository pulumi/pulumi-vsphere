// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    public static class GetDatastore
    {
        /// <summary>
        /// The `vsphere.getDatastore` data source can be used to discover the ID of a
        /// datastore in vSphere. This is useful to fetch the ID of a datastore that you
        /// want to use to create virtual machines in using the
        /// `vsphere.VirtualMachine` resource. 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using VSphere = Pulumi.VSphere;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var datacenter = Output.Create(VSphere.GetDatacenter.InvokeAsync(new VSphere.GetDatacenterArgs
        ///         {
        ///             Name = "dc1",
        ///         }));
        ///         var datastore = datacenter.Apply(datacenter =&gt; Output.Create(VSphere.GetDatastore.InvokeAsync(new VSphere.GetDatastoreArgs
        ///         {
        ///             DatacenterId = datacenter.Id,
        ///             Name = "datastore1",
        ///         })));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDatastoreResult> InvokeAsync(GetDatastoreArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatastoreResult>("vsphere:index/getDatastore:getDatastore", args ?? new GetDatastoreArgs(), options.WithVersion());
    }


    public sealed class GetDatastoreArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The managed object reference
        /// ID of the datacenter the datastore is located in. This
        /// can be omitted if the search path used in `name` is an absolute path. For
        /// default datacenters, use the id attribute from an empty `vsphere.Datacenter`
        /// data source.
        /// </summary>
        [Input("datacenterId")]
        public string? DatacenterId { get; set; }

        /// <summary>
        /// The name of the datastore. This can be a name or path.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetDatastoreArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDatastoreResult
    {
        public readonly string? DatacenterId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;

        [OutputConstructor]
        private GetDatastoreResult(
            string? datacenterId,

            string id,

            string name)
        {
            DatacenterId = datacenterId;
            Id = id;
            Name = name;
        }
    }
}
