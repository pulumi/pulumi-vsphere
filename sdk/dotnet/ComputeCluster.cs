// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.VSphere
{
    public partial class ComputeCluster : Pulumi.CustomResource
    {
        /// <summary>
        /// A map of custom attribute ids to attribute
        /// value strings to set for the datastore cluster.
        /// </summary>
        [Output("customAttributes")]
        public Output<ImmutableDictionary<string, string>?> CustomAttributes { get; private set; } = null!;

        /// <summary>
        /// The managed object ID of
        /// the datacenter to create the cluster in. Forces a new resource if changed.
        /// </summary>
        [Output("datacenterId")]
        public Output<string> DatacenterId { get; private set; } = null!;

        /// <summary>
        /// The automation level for host power
        /// operations in this cluster. Can be one of `manual` or `automated`. Default:
        /// `manual`.
        /// </summary>
        [Output("dpmAutomationLevel")]
        public Output<string?> DpmAutomationLevel { get; private set; } = null!;

        /// <summary>
        /// Enable DPM support for DRS in this cluster.
        /// Requires `drs_enabled` to be `true` in order to be effective.
        /// Default: `false`.
        /// </summary>
        [Output("dpmEnabled")]
        public Output<bool?> DpmEnabled { get; private set; } = null!;

        /// <summary>
        /// A value between `1` and `5` indicating the
        /// threshold of load within the cluster that influences host power operations.
        /// This affects both power on and power off operations - a lower setting will
        /// tolerate more of a surplus/deficit than a higher setting. Default: `3`.
        /// </summary>
        [Output("dpmThreshold")]
        public Output<int?> DpmThreshold { get; private set; } = null!;

        /// <summary>
        /// A key/value map that specifies advanced
        /// options for DRS and DPM.
        /// </summary>
        [Output("drsAdvancedOptions")]
        public Output<ImmutableDictionary<string, string>?> DrsAdvancedOptions { get; private set; } = null!;

        /// <summary>
        /// The default automation level for all
        /// virtual machines in this cluster. Can be one of `manual`,
        /// `partiallyAutomated`, or `fullyAutomated`. Default: `manual`.
        /// </summary>
        [Output("drsAutomationLevel")]
        public Output<string?> DrsAutomationLevel { get; private set; } = null!;

        /// <summary>
        /// When `true`, enables DRS to use data
        /// from [vRealize Operations Manager][ref-vsphere-vro] to make proactive DRS
        /// recommendations. &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("drsEnablePredictiveDrs")]
        public Output<bool?> DrsEnablePredictiveDrs { get; private set; } = null!;

        /// <summary>
        /// Allow individual DRS overrides to be
        /// set for virtual machines in the cluster. Default: `true`.
        /// </summary>
        [Output("drsEnableVmOverrides")]
        public Output<bool?> DrsEnableVmOverrides { get; private set; } = null!;

        /// <summary>
        /// Enable DRS for this cluster. Default: `false`.
        /// </summary>
        [Output("drsEnabled")]
        public Output<bool?> DrsEnabled { get; private set; } = null!;

        /// <summary>
        /// A value between `1` and `5` indicating
        /// the threshold of imbalance tolerated between hosts. A lower setting will
        /// tolerate more imbalance while a higher setting will tolerate less. Default:
        /// `3`.
        /// </summary>
        [Output("drsMigrationThreshold")]
        public Output<int?> DrsMigrationThreshold { get; private set; } = null!;

        /// <summary>
        /// The relative path to a folder to put this cluster in.
        /// This is a path relative to the datacenter you are deploying the cluster to.
        /// Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
        /// The provider will place a cluster named `compute-cluster-test` in a
        /// host folder located at `/dc1/host/foo/bar`, with the final inventory path
        /// being `/dc1/host/foo/bar/datastore-cluster-test`.
        /// </summary>
        [Output("folder")]
        public Output<string?> Folder { get; private set; } = null!;

        /// <summary>
        /// When destroying the resource, setting this to
        /// `true` will auto-remove any hosts that are currently a member of the cluster,
        /// as if they were removed by taking their entry out of `host_system_ids` (see
        /// below). This is an advanced
        /// option and should only be used for testing. Default: `false`.
        /// </summary>
        [Output("forceEvacuateOnDestroy")]
        public Output<bool?> ForceEvacuateOnDestroy { get; private set; } = null!;

        /// <summary>
        /// Defines the
        /// managed object IDs of hosts to use as dedicated failover
        /// hosts. These hosts are kept as available as possible - admission control will
        /// block access to the host, and DRS will ignore the host when making
        /// recommendations.
        /// </summary>
        [Output("haAdmissionControlFailoverHostSystemIds")]
        public Output<ImmutableArray<string>> HaAdmissionControlFailoverHostSystemIds { get; private set; } = null!;

        /// <summary>
        /// The maximum number
        /// of failed hosts that admission control tolerates when making decisions on
        /// whether to permit virtual machine operations. The maximum is one less than
        /// the number of hosts in the cluster. Default: `1`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("haAdmissionControlHostFailureTolerance")]
        public Output<int?> HaAdmissionControlHostFailureTolerance { get; private set; } = null!;

        /// <summary>
        /// The percentage of
        /// resource reduction that a cluster of virtual machines can tolerate in case of
        /// a failover. A value of 0 produces warnings only, whereas a value of 100
        /// disables the setting. Default: `100` (disabled).
        /// </summary>
        [Output("haAdmissionControlPerformanceTolerance")]
        public Output<int?> HaAdmissionControlPerformanceTolerance { get; private set; } = null!;

        /// <summary>
        /// The type of admission control
        /// policy to use with vSphere HA. Can be one of `resourcePercentage`,
        /// `slotPolicy`, `failoverHosts`, or `disabled`. Default: `resourcePercentage`.
        /// </summary>
        [Output("haAdmissionControlPolicy")]
        public Output<string?> HaAdmissionControlPolicy { get; private set; } = null!;

        /// <summary>
        /// Automatically determine available resource percentages by subtracting the
        /// average number of host resources represented by the
        /// `ha_admission_control_host_failure_tolerance`
        /// setting from the total amount of resources in the cluster. Disable to supply
        /// user-defined values. Default: `true`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("haAdmissionControlResourcePercentageAutoCompute")]
        public Output<bool?> HaAdmissionControlResourcePercentageAutoCompute { get; private set; } = null!;

        /// <summary>
        /// Controls the
        /// user-defined percentage of CPU resources in the cluster to reserve for
        /// failover. Default: `100`.
        /// </summary>
        [Output("haAdmissionControlResourcePercentageCpu")]
        public Output<int?> HaAdmissionControlResourcePercentageCpu { get; private set; } = null!;

        /// <summary>
        /// Controls the
        /// user-defined percentage of memory resources in the cluster to reserve for
        /// failover. Default: `100`.
        /// </summary>
        [Output("haAdmissionControlResourcePercentageMemory")]
        public Output<int?> HaAdmissionControlResourcePercentageMemory { get; private set; } = null!;

        /// <summary>
        /// Controls the
        /// user-defined CPU slot size, in MHz. Default: `32`.
        /// </summary>
        [Output("haAdmissionControlSlotPolicyExplicitCpu")]
        public Output<int?> HaAdmissionControlSlotPolicyExplicitCpu { get; private set; } = null!;

        /// <summary>
        /// Controls the
        /// user-defined memory slot size, in MB. Default: `100`.
        /// </summary>
        [Output("haAdmissionControlSlotPolicyExplicitMemory")]
        public Output<int?> HaAdmissionControlSlotPolicyExplicitMemory { get; private set; } = null!;

        /// <summary>
        /// Controls
        /// whether or not you wish to supply explicit values to CPU and memory slot
        /// sizes. The default is `false`, which tells vSphere to gather a automatic
        /// average based on all powered-on virtual machines currently in the cluster.
        /// </summary>
        [Output("haAdmissionControlSlotPolicyUseExplicitSize")]
        public Output<bool?> HaAdmissionControlSlotPolicyUseExplicitSize { get; private set; } = null!;

        /// <summary>
        /// A key/value map that specifies advanced
        /// options for vSphere HA.
        /// </summary>
        [Output("haAdvancedOptions")]
        public Output<ImmutableDictionary<string, string>?> HaAdvancedOptions { get; private set; } = null!;

        /// <summary>
        /// Controls the action to take
        /// on virtual machines if an APD status on an affected datastore clears in the
        /// middle of an APD event. Can be one of `none` or `reset`. Default: `none`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("haDatastoreApdRecoveryAction")]
        public Output<string?> HaDatastoreApdRecoveryAction { get; private set; } = null!;

        /// <summary>
        /// Controls the action to take on
        /// virtual machines when the cluster has detected loss to all paths to a
        /// relevant datastore. Can be one of `disabled`, `warning`,
        /// `restartConservative`, or `restartAggressive`.  Default: `disabled`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("haDatastoreApdResponse")]
        public Output<string?> HaDatastoreApdResponse { get; private set; } = null!;

        /// <summary>
        /// Controls the delay in minutes
        /// to wait after an APD timeout event to execute the response action defined in
        /// `ha_datastore_apd_response`. Default: `3`
        /// minutes. &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("haDatastoreApdResponseDelay")]
        public Output<int?> HaDatastoreApdResponseDelay { get; private set; } = null!;

        /// <summary>
        /// Controls the action to take on
        /// virtual machines when the cluster has detected a permanent device loss to a
        /// relevant datastore. Can be one of `disabled`, `warning`, or
        /// `restartAggressive`. Default: `disabled`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("haDatastorePdlResponse")]
        public Output<string?> HaDatastorePdlResponse { get; private set; } = null!;

        /// <summary>
        /// Enable vSphere HA for this cluster. Default:
        /// `false`.
        /// </summary>
        [Output("haEnabled")]
        public Output<bool?> HaEnabled { get; private set; } = null!;

        /// <summary>
        /// The list of managed object IDs for
        /// preferred datastores to use for HA heartbeating. This setting is only useful
        /// when `ha_heartbeat_datastore_policy` is set
        /// to either `userSelectedDs` or `allFeasibleDsWithUserPreference`.
        /// </summary>
        [Output("haHeartbeatDatastoreIds")]
        public Output<ImmutableArray<string>> HaHeartbeatDatastoreIds { get; private set; } = null!;

        /// <summary>
        /// The selection policy for HA
        /// heartbeat datastores. Can be one of `allFeasibleDs`, `userSelectedDs`, or
        /// `allFeasibleDsWithUserPreference`. Default:
        /// `allFeasibleDsWithUserPreference`.
        /// </summary>
        [Output("haHeartbeatDatastorePolicy")]
        public Output<string?> HaHeartbeatDatastorePolicy { get; private set; } = null!;

        /// <summary>
        /// The action to take on virtual
        /// machines when a host has detected that it has been isolated from the rest of
        /// the cluster. Can be one of `none`, `powerOff`, or `shutdown`. Default:
        /// `none`.
        /// </summary>
        [Output("haHostIsolationResponse")]
        public Output<string?> HaHostIsolationResponse { get; private set; } = null!;

        /// <summary>
        /// Global setting that controls whether
        /// vSphere HA remediates virtual machines on host failure. Can be one of `enabled`
        /// or `disabled`. Default: `enabled`.
        /// </summary>
        [Output("haHostMonitoring")]
        public Output<string?> HaHostMonitoring { get; private set; } = null!;

        /// <summary>
        /// Controls vSphere VM component
        /// protection for virtual machines in this cluster. Can be one of `enabled` or
        /// `disabled`. Default: `enabled`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("haVmComponentProtection")]
        public Output<string?> HaVmComponentProtection { get; private set; } = null!;

        /// <summary>
        /// The condition used to
        /// determine whether or not virtual machines in a certain restart priority class
        /// are online, allowing HA to move on to restarting virtual machines on the next
        /// priority. Can be one of `none`, `poweredOn`, `guestHbStatusGreen`, or
        /// `appHbStatusGreen`. The default is `none`, which means that a virtual machine
        /// is considered ready immediately after a host is found to start it on.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("haVmDependencyRestartCondition")]
        public Output<string?> HaVmDependencyRestartCondition { get; private set; } = null!;

        /// <summary>
        /// If a heartbeat from a virtual machine
        /// is not received within this configured interval, the virtual machine is
        /// marked as failed. The value is in seconds. Default: `30`.
        /// </summary>
        [Output("haVmFailureInterval")]
        public Output<int?> HaVmFailureInterval { get; private set; } = null!;

        /// <summary>
        /// The length of the reset window in
        /// which `ha_vm_maximum_resets` can operate. When this
        /// window expires, no more resets are attempted regardless of the setting
        /// configured in `ha_vm_maximum_resets`. `-1` means no window, meaning an
        /// unlimited reset time is allotted. The value is specified in seconds. Default:
        /// `-1` (no window).
        /// </summary>
        [Output("haVmMaximumFailureWindow")]
        public Output<int?> HaVmMaximumFailureWindow { get; private set; } = null!;

        /// <summary>
        /// The maximum number of resets that HA will
        /// perform to a virtual machine when responding to a failure event. Default: `3`
        /// </summary>
        [Output("haVmMaximumResets")]
        public Output<int?> HaVmMaximumResets { get; private set; } = null!;

        /// <summary>
        /// The time, in seconds, that HA waits after
        /// powering on a virtual machine before monitoring for heartbeats. Default:
        /// `120` (2 minutes).
        /// </summary>
        [Output("haVmMinimumUptime")]
        public Output<int?> HaVmMinimumUptime { get; private set; } = null!;

        /// <summary>
        /// The type of virtual machine monitoring to use
        /// when HA is enabled in the cluster. Can be one of `vmMonitoringDisabled`,
        /// `vmMonitoringOnly`, or `vmAndAppMonitoring`. Default: `vmMonitoringDisabled`.
        /// </summary>
        [Output("haVmMonitoring")]
        public Output<string?> HaVmMonitoring { get; private set; } = null!;

        /// <summary>
        /// Additional delay in seconds
        /// after ready condition is met. A VM is considered ready at this point.
        /// Default: `0` (no delay). &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("haVmRestartAdditionalDelay")]
        public Output<int?> HaVmRestartAdditionalDelay { get; private set; } = null!;

        /// <summary>
        /// The default restart priority
        /// for affected virtual machines when vSphere detects a host failure. Can be one
        /// of `lowest`, `low`, `medium`, `high`, or `highest`. Default: `medium`.
        /// </summary>
        [Output("haVmRestartPriority")]
        public Output<string?> HaVmRestartPriority { get; private set; } = null!;

        /// <summary>
        /// The maximum time, in seconds,
        /// that vSphere HA will wait for virtual machines in one priority to be ready
        /// before proceeding with the next priority. Default: `600` (10 minutes).
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("haVmRestartTimeout")]
        public Output<int?> HaVmRestartTimeout { get; private set; } = null!;

        /// <summary>
        /// The timeout for each host maintenance mode
        /// operation when removing hosts from a cluster. The value is specified in
        /// seconds. Default: `3600` (1 hour).
        /// </summary>
        [Output("hostClusterExitTimeout")]
        public Output<int?> HostClusterExitTimeout { get; private set; } = null!;

        /// <summary>
        /// Can be set to `true` if compute cluster
        /// membership will be managed through the `host` resource rather than the
        /// `compute_cluster` resource. Conflicts with: `host_system_ids`.
        /// &gt;&gt;&gt;&gt;&gt;&gt;&gt; v1.18.3
        /// </summary>
        [Output("hostManaged")]
        public Output<bool?> HostManaged { get; private set; } = null!;

        /// <summary>
        /// The [managed object IDs][docs-about-morefs] of
        /// the hosts to put in the cluster. Conflicts with: `host_managed`.
        /// </summary>
        [Output("hostSystemIds")]
        public Output<ImmutableArray<string>> HostSystemIds { get; private set; } = null!;

        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Determines how the host
        /// quarantine, maintenance mode, or virtual machine migration recommendations
        /// made by proactive HA are to be handled. Can be one of `Automated` or
        /// `Manual`. Default: `Manual`. &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("proactiveHaAutomationLevel")]
        public Output<string?> ProactiveHaAutomationLevel { get; private set; } = null!;

        /// <summary>
        /// Enables Proactive HA. Default: `false`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("proactiveHaEnabled")]
        public Output<bool?> ProactiveHaEnabled { get; private set; } = null!;

        /// <summary>
        /// The configured remediation
        /// for moderately degraded hosts. Can be one of `MaintenanceMode` or
        /// `QuarantineMode`. Note that this cannot be set to `MaintenanceMode` when
        /// `proactive_ha_severe_remediation` is set
        /// to `QuarantineMode`. Default: `QuarantineMode`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("proactiveHaModerateRemediation")]
        public Output<string?> ProactiveHaModerateRemediation { get; private set; } = null!;

        /// <summary>
        /// The list of IDs for health update
        /// providers configured for this cluster.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("proactiveHaProviderIds")]
        public Output<ImmutableArray<string>> ProactiveHaProviderIds { get; private set; } = null!;

        /// <summary>
        /// The configured remediation for
        /// severely degraded hosts. Can be one of `MaintenanceMode` or `QuarantineMode`.
        /// Note that this cannot be set to `QuarantineMode` when
        /// `proactive_ha_moderate_remediation` is
        /// set to `MaintenanceMode`. Default: `QuarantineMode`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Output("proactiveHaSevereRemediation")]
        public Output<string?> ProactiveHaSevereRemediation { get; private set; } = null!;

        /// <summary>
        /// The managed object ID of the cluster's root resource pool.
        /// </summary>
        [Output("resourcePoolId")]
        public Output<string> ResourcePoolId { get; private set; } = null!;

        /// <summary>
        /// The IDs of any tags to attach to this resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a ComputeCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ComputeCluster(string name, ComputeClusterArgs args, CustomResourceOptions? options = null)
            : base("vsphere:index/computeCluster:ComputeCluster", name, args ?? new ComputeClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ComputeCluster(string name, Input<string> id, ComputeClusterState? state = null, CustomResourceOptions? options = null)
            : base("vsphere:index/computeCluster:ComputeCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ComputeCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ComputeCluster Get(string name, Input<string> id, ComputeClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new ComputeCluster(name, id, state, options);
        }
    }

    public sealed class ComputeClusterArgs : Pulumi.ResourceArgs
    {
        [Input("customAttributes")]
        private InputMap<string>? _customAttributes;

        /// <summary>
        /// A map of custom attribute ids to attribute
        /// value strings to set for the datastore cluster.
        /// </summary>
        public InputMap<string> CustomAttributes
        {
            get => _customAttributes ?? (_customAttributes = new InputMap<string>());
            set => _customAttributes = value;
        }

        /// <summary>
        /// The managed object ID of
        /// the datacenter to create the cluster in. Forces a new resource if changed.
        /// </summary>
        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        /// <summary>
        /// The automation level for host power
        /// operations in this cluster. Can be one of `manual` or `automated`. Default:
        /// `manual`.
        /// </summary>
        [Input("dpmAutomationLevel")]
        public Input<string>? DpmAutomationLevel { get; set; }

        /// <summary>
        /// Enable DPM support for DRS in this cluster.
        /// Requires `drs_enabled` to be `true` in order to be effective.
        /// Default: `false`.
        /// </summary>
        [Input("dpmEnabled")]
        public Input<bool>? DpmEnabled { get; set; }

        /// <summary>
        /// A value between `1` and `5` indicating the
        /// threshold of load within the cluster that influences host power operations.
        /// This affects both power on and power off operations - a lower setting will
        /// tolerate more of a surplus/deficit than a higher setting. Default: `3`.
        /// </summary>
        [Input("dpmThreshold")]
        public Input<int>? DpmThreshold { get; set; }

        [Input("drsAdvancedOptions")]
        private InputMap<string>? _drsAdvancedOptions;

        /// <summary>
        /// A key/value map that specifies advanced
        /// options for DRS and DPM.
        /// </summary>
        public InputMap<string> DrsAdvancedOptions
        {
            get => _drsAdvancedOptions ?? (_drsAdvancedOptions = new InputMap<string>());
            set => _drsAdvancedOptions = value;
        }

        /// <summary>
        /// The default automation level for all
        /// virtual machines in this cluster. Can be one of `manual`,
        /// `partiallyAutomated`, or `fullyAutomated`. Default: `manual`.
        /// </summary>
        [Input("drsAutomationLevel")]
        public Input<string>? DrsAutomationLevel { get; set; }

        /// <summary>
        /// When `true`, enables DRS to use data
        /// from [vRealize Operations Manager][ref-vsphere-vro] to make proactive DRS
        /// recommendations. &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("drsEnablePredictiveDrs")]
        public Input<bool>? DrsEnablePredictiveDrs { get; set; }

        /// <summary>
        /// Allow individual DRS overrides to be
        /// set for virtual machines in the cluster. Default: `true`.
        /// </summary>
        [Input("drsEnableVmOverrides")]
        public Input<bool>? DrsEnableVmOverrides { get; set; }

        /// <summary>
        /// Enable DRS for this cluster. Default: `false`.
        /// </summary>
        [Input("drsEnabled")]
        public Input<bool>? DrsEnabled { get; set; }

        /// <summary>
        /// A value between `1` and `5` indicating
        /// the threshold of imbalance tolerated between hosts. A lower setting will
        /// tolerate more imbalance while a higher setting will tolerate less. Default:
        /// `3`.
        /// </summary>
        [Input("drsMigrationThreshold")]
        public Input<int>? DrsMigrationThreshold { get; set; }

        /// <summary>
        /// The relative path to a folder to put this cluster in.
        /// This is a path relative to the datacenter you are deploying the cluster to.
        /// Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
        /// The provider will place a cluster named `compute-cluster-test` in a
        /// host folder located at `/dc1/host/foo/bar`, with the final inventory path
        /// being `/dc1/host/foo/bar/datastore-cluster-test`.
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// When destroying the resource, setting this to
        /// `true` will auto-remove any hosts that are currently a member of the cluster,
        /// as if they were removed by taking their entry out of `host_system_ids` (see
        /// below). This is an advanced
        /// option and should only be used for testing. Default: `false`.
        /// </summary>
        [Input("forceEvacuateOnDestroy")]
        public Input<bool>? ForceEvacuateOnDestroy { get; set; }

        [Input("haAdmissionControlFailoverHostSystemIds")]
        private InputList<string>? _haAdmissionControlFailoverHostSystemIds;

        /// <summary>
        /// Defines the
        /// managed object IDs of hosts to use as dedicated failover
        /// hosts. These hosts are kept as available as possible - admission control will
        /// block access to the host, and DRS will ignore the host when making
        /// recommendations.
        /// </summary>
        public InputList<string> HaAdmissionControlFailoverHostSystemIds
        {
            get => _haAdmissionControlFailoverHostSystemIds ?? (_haAdmissionControlFailoverHostSystemIds = new InputList<string>());
            set => _haAdmissionControlFailoverHostSystemIds = value;
        }

        /// <summary>
        /// The maximum number
        /// of failed hosts that admission control tolerates when making decisions on
        /// whether to permit virtual machine operations. The maximum is one less than
        /// the number of hosts in the cluster. Default: `1`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haAdmissionControlHostFailureTolerance")]
        public Input<int>? HaAdmissionControlHostFailureTolerance { get; set; }

        /// <summary>
        /// The percentage of
        /// resource reduction that a cluster of virtual machines can tolerate in case of
        /// a failover. A value of 0 produces warnings only, whereas a value of 100
        /// disables the setting. Default: `100` (disabled).
        /// </summary>
        [Input("haAdmissionControlPerformanceTolerance")]
        public Input<int>? HaAdmissionControlPerformanceTolerance { get; set; }

        /// <summary>
        /// The type of admission control
        /// policy to use with vSphere HA. Can be one of `resourcePercentage`,
        /// `slotPolicy`, `failoverHosts`, or `disabled`. Default: `resourcePercentage`.
        /// </summary>
        [Input("haAdmissionControlPolicy")]
        public Input<string>? HaAdmissionControlPolicy { get; set; }

        /// <summary>
        /// Automatically determine available resource percentages by subtracting the
        /// average number of host resources represented by the
        /// `ha_admission_control_host_failure_tolerance`
        /// setting from the total amount of resources in the cluster. Disable to supply
        /// user-defined values. Default: `true`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haAdmissionControlResourcePercentageAutoCompute")]
        public Input<bool>? HaAdmissionControlResourcePercentageAutoCompute { get; set; }

        /// <summary>
        /// Controls the
        /// user-defined percentage of CPU resources in the cluster to reserve for
        /// failover. Default: `100`.
        /// </summary>
        [Input("haAdmissionControlResourcePercentageCpu")]
        public Input<int>? HaAdmissionControlResourcePercentageCpu { get; set; }

        /// <summary>
        /// Controls the
        /// user-defined percentage of memory resources in the cluster to reserve for
        /// failover. Default: `100`.
        /// </summary>
        [Input("haAdmissionControlResourcePercentageMemory")]
        public Input<int>? HaAdmissionControlResourcePercentageMemory { get; set; }

        /// <summary>
        /// Controls the
        /// user-defined CPU slot size, in MHz. Default: `32`.
        /// </summary>
        [Input("haAdmissionControlSlotPolicyExplicitCpu")]
        public Input<int>? HaAdmissionControlSlotPolicyExplicitCpu { get; set; }

        /// <summary>
        /// Controls the
        /// user-defined memory slot size, in MB. Default: `100`.
        /// </summary>
        [Input("haAdmissionControlSlotPolicyExplicitMemory")]
        public Input<int>? HaAdmissionControlSlotPolicyExplicitMemory { get; set; }

        /// <summary>
        /// Controls
        /// whether or not you wish to supply explicit values to CPU and memory slot
        /// sizes. The default is `false`, which tells vSphere to gather a automatic
        /// average based on all powered-on virtual machines currently in the cluster.
        /// </summary>
        [Input("haAdmissionControlSlotPolicyUseExplicitSize")]
        public Input<bool>? HaAdmissionControlSlotPolicyUseExplicitSize { get; set; }

        [Input("haAdvancedOptions")]
        private InputMap<string>? _haAdvancedOptions;

        /// <summary>
        /// A key/value map that specifies advanced
        /// options for vSphere HA.
        /// </summary>
        public InputMap<string> HaAdvancedOptions
        {
            get => _haAdvancedOptions ?? (_haAdvancedOptions = new InputMap<string>());
            set => _haAdvancedOptions = value;
        }

        /// <summary>
        /// Controls the action to take
        /// on virtual machines if an APD status on an affected datastore clears in the
        /// middle of an APD event. Can be one of `none` or `reset`. Default: `none`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haDatastoreApdRecoveryAction")]
        public Input<string>? HaDatastoreApdRecoveryAction { get; set; }

        /// <summary>
        /// Controls the action to take on
        /// virtual machines when the cluster has detected loss to all paths to a
        /// relevant datastore. Can be one of `disabled`, `warning`,
        /// `restartConservative`, or `restartAggressive`.  Default: `disabled`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haDatastoreApdResponse")]
        public Input<string>? HaDatastoreApdResponse { get; set; }

        /// <summary>
        /// Controls the delay in minutes
        /// to wait after an APD timeout event to execute the response action defined in
        /// `ha_datastore_apd_response`. Default: `3`
        /// minutes. &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haDatastoreApdResponseDelay")]
        public Input<int>? HaDatastoreApdResponseDelay { get; set; }

        /// <summary>
        /// Controls the action to take on
        /// virtual machines when the cluster has detected a permanent device loss to a
        /// relevant datastore. Can be one of `disabled`, `warning`, or
        /// `restartAggressive`. Default: `disabled`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haDatastorePdlResponse")]
        public Input<string>? HaDatastorePdlResponse { get; set; }

        /// <summary>
        /// Enable vSphere HA for this cluster. Default:
        /// `false`.
        /// </summary>
        [Input("haEnabled")]
        public Input<bool>? HaEnabled { get; set; }

        [Input("haHeartbeatDatastoreIds")]
        private InputList<string>? _haHeartbeatDatastoreIds;

        /// <summary>
        /// The list of managed object IDs for
        /// preferred datastores to use for HA heartbeating. This setting is only useful
        /// when `ha_heartbeat_datastore_policy` is set
        /// to either `userSelectedDs` or `allFeasibleDsWithUserPreference`.
        /// </summary>
        public InputList<string> HaHeartbeatDatastoreIds
        {
            get => _haHeartbeatDatastoreIds ?? (_haHeartbeatDatastoreIds = new InputList<string>());
            set => _haHeartbeatDatastoreIds = value;
        }

        /// <summary>
        /// The selection policy for HA
        /// heartbeat datastores. Can be one of `allFeasibleDs`, `userSelectedDs`, or
        /// `allFeasibleDsWithUserPreference`. Default:
        /// `allFeasibleDsWithUserPreference`.
        /// </summary>
        [Input("haHeartbeatDatastorePolicy")]
        public Input<string>? HaHeartbeatDatastorePolicy { get; set; }

        /// <summary>
        /// The action to take on virtual
        /// machines when a host has detected that it has been isolated from the rest of
        /// the cluster. Can be one of `none`, `powerOff`, or `shutdown`. Default:
        /// `none`.
        /// </summary>
        [Input("haHostIsolationResponse")]
        public Input<string>? HaHostIsolationResponse { get; set; }

        /// <summary>
        /// Global setting that controls whether
        /// vSphere HA remediates virtual machines on host failure. Can be one of `enabled`
        /// or `disabled`. Default: `enabled`.
        /// </summary>
        [Input("haHostMonitoring")]
        public Input<string>? HaHostMonitoring { get; set; }

        /// <summary>
        /// Controls vSphere VM component
        /// protection for virtual machines in this cluster. Can be one of `enabled` or
        /// `disabled`. Default: `enabled`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haVmComponentProtection")]
        public Input<string>? HaVmComponentProtection { get; set; }

        /// <summary>
        /// The condition used to
        /// determine whether or not virtual machines in a certain restart priority class
        /// are online, allowing HA to move on to restarting virtual machines on the next
        /// priority. Can be one of `none`, `poweredOn`, `guestHbStatusGreen`, or
        /// `appHbStatusGreen`. The default is `none`, which means that a virtual machine
        /// is considered ready immediately after a host is found to start it on.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haVmDependencyRestartCondition")]
        public Input<string>? HaVmDependencyRestartCondition { get; set; }

        /// <summary>
        /// If a heartbeat from a virtual machine
        /// is not received within this configured interval, the virtual machine is
        /// marked as failed. The value is in seconds. Default: `30`.
        /// </summary>
        [Input("haVmFailureInterval")]
        public Input<int>? HaVmFailureInterval { get; set; }

        /// <summary>
        /// The length of the reset window in
        /// which `ha_vm_maximum_resets` can operate. When this
        /// window expires, no more resets are attempted regardless of the setting
        /// configured in `ha_vm_maximum_resets`. `-1` means no window, meaning an
        /// unlimited reset time is allotted. The value is specified in seconds. Default:
        /// `-1` (no window).
        /// </summary>
        [Input("haVmMaximumFailureWindow")]
        public Input<int>? HaVmMaximumFailureWindow { get; set; }

        /// <summary>
        /// The maximum number of resets that HA will
        /// perform to a virtual machine when responding to a failure event. Default: `3`
        /// </summary>
        [Input("haVmMaximumResets")]
        public Input<int>? HaVmMaximumResets { get; set; }

        /// <summary>
        /// The time, in seconds, that HA waits after
        /// powering on a virtual machine before monitoring for heartbeats. Default:
        /// `120` (2 minutes).
        /// </summary>
        [Input("haVmMinimumUptime")]
        public Input<int>? HaVmMinimumUptime { get; set; }

        /// <summary>
        /// The type of virtual machine monitoring to use
        /// when HA is enabled in the cluster. Can be one of `vmMonitoringDisabled`,
        /// `vmMonitoringOnly`, or `vmAndAppMonitoring`. Default: `vmMonitoringDisabled`.
        /// </summary>
        [Input("haVmMonitoring")]
        public Input<string>? HaVmMonitoring { get; set; }

        /// <summary>
        /// Additional delay in seconds
        /// after ready condition is met. A VM is considered ready at this point.
        /// Default: `0` (no delay). &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haVmRestartAdditionalDelay")]
        public Input<int>? HaVmRestartAdditionalDelay { get; set; }

        /// <summary>
        /// The default restart priority
        /// for affected virtual machines when vSphere detects a host failure. Can be one
        /// of `lowest`, `low`, `medium`, `high`, or `highest`. Default: `medium`.
        /// </summary>
        [Input("haVmRestartPriority")]
        public Input<string>? HaVmRestartPriority { get; set; }

        /// <summary>
        /// The maximum time, in seconds,
        /// that vSphere HA will wait for virtual machines in one priority to be ready
        /// before proceeding with the next priority. Default: `600` (10 minutes).
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haVmRestartTimeout")]
        public Input<int>? HaVmRestartTimeout { get; set; }

        /// <summary>
        /// The timeout for each host maintenance mode
        /// operation when removing hosts from a cluster. The value is specified in
        /// seconds. Default: `3600` (1 hour).
        /// </summary>
        [Input("hostClusterExitTimeout")]
        public Input<int>? HostClusterExitTimeout { get; set; }

        /// <summary>
        /// Can be set to `true` if compute cluster
        /// membership will be managed through the `host` resource rather than the
        /// `compute_cluster` resource. Conflicts with: `host_system_ids`.
        /// &gt;&gt;&gt;&gt;&gt;&gt;&gt; v1.18.3
        /// </summary>
        [Input("hostManaged")]
        public Input<bool>? HostManaged { get; set; }

        [Input("hostSystemIds")]
        private InputList<string>? _hostSystemIds;

        /// <summary>
        /// The [managed object IDs][docs-about-morefs] of
        /// the hosts to put in the cluster. Conflicts with: `host_managed`.
        /// </summary>
        public InputList<string> HostSystemIds
        {
            get => _hostSystemIds ?? (_hostSystemIds = new InputList<string>());
            set => _hostSystemIds = value;
        }

        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Determines how the host
        /// quarantine, maintenance mode, or virtual machine migration recommendations
        /// made by proactive HA are to be handled. Can be one of `Automated` or
        /// `Manual`. Default: `Manual`. &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("proactiveHaAutomationLevel")]
        public Input<string>? ProactiveHaAutomationLevel { get; set; }

        /// <summary>
        /// Enables Proactive HA. Default: `false`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("proactiveHaEnabled")]
        public Input<bool>? ProactiveHaEnabled { get; set; }

        /// <summary>
        /// The configured remediation
        /// for moderately degraded hosts. Can be one of `MaintenanceMode` or
        /// `QuarantineMode`. Note that this cannot be set to `MaintenanceMode` when
        /// `proactive_ha_severe_remediation` is set
        /// to `QuarantineMode`. Default: `QuarantineMode`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("proactiveHaModerateRemediation")]
        public Input<string>? ProactiveHaModerateRemediation { get; set; }

        [Input("proactiveHaProviderIds")]
        private InputList<string>? _proactiveHaProviderIds;

        /// <summary>
        /// The list of IDs for health update
        /// providers configured for this cluster.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        public InputList<string> ProactiveHaProviderIds
        {
            get => _proactiveHaProviderIds ?? (_proactiveHaProviderIds = new InputList<string>());
            set => _proactiveHaProviderIds = value;
        }

        /// <summary>
        /// The configured remediation for
        /// severely degraded hosts. Can be one of `MaintenanceMode` or `QuarantineMode`.
        /// Note that this cannot be set to `QuarantineMode` when
        /// `proactive_ha_moderate_remediation` is
        /// set to `MaintenanceMode`. Default: `QuarantineMode`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("proactiveHaSevereRemediation")]
        public Input<string>? ProactiveHaSevereRemediation { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The IDs of any tags to attach to this resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ComputeClusterArgs()
        {
        }
    }

    public sealed class ComputeClusterState : Pulumi.ResourceArgs
    {
        [Input("customAttributes")]
        private InputMap<string>? _customAttributes;

        /// <summary>
        /// A map of custom attribute ids to attribute
        /// value strings to set for the datastore cluster.
        /// </summary>
        public InputMap<string> CustomAttributes
        {
            get => _customAttributes ?? (_customAttributes = new InputMap<string>());
            set => _customAttributes = value;
        }

        /// <summary>
        /// The managed object ID of
        /// the datacenter to create the cluster in. Forces a new resource if changed.
        /// </summary>
        [Input("datacenterId")]
        public Input<string>? DatacenterId { get; set; }

        /// <summary>
        /// The automation level for host power
        /// operations in this cluster. Can be one of `manual` or `automated`. Default:
        /// `manual`.
        /// </summary>
        [Input("dpmAutomationLevel")]
        public Input<string>? DpmAutomationLevel { get; set; }

        /// <summary>
        /// Enable DPM support for DRS in this cluster.
        /// Requires `drs_enabled` to be `true` in order to be effective.
        /// Default: `false`.
        /// </summary>
        [Input("dpmEnabled")]
        public Input<bool>? DpmEnabled { get; set; }

        /// <summary>
        /// A value between `1` and `5` indicating the
        /// threshold of load within the cluster that influences host power operations.
        /// This affects both power on and power off operations - a lower setting will
        /// tolerate more of a surplus/deficit than a higher setting. Default: `3`.
        /// </summary>
        [Input("dpmThreshold")]
        public Input<int>? DpmThreshold { get; set; }

        [Input("drsAdvancedOptions")]
        private InputMap<string>? _drsAdvancedOptions;

        /// <summary>
        /// A key/value map that specifies advanced
        /// options for DRS and DPM.
        /// </summary>
        public InputMap<string> DrsAdvancedOptions
        {
            get => _drsAdvancedOptions ?? (_drsAdvancedOptions = new InputMap<string>());
            set => _drsAdvancedOptions = value;
        }

        /// <summary>
        /// The default automation level for all
        /// virtual machines in this cluster. Can be one of `manual`,
        /// `partiallyAutomated`, or `fullyAutomated`. Default: `manual`.
        /// </summary>
        [Input("drsAutomationLevel")]
        public Input<string>? DrsAutomationLevel { get; set; }

        /// <summary>
        /// When `true`, enables DRS to use data
        /// from [vRealize Operations Manager][ref-vsphere-vro] to make proactive DRS
        /// recommendations. &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("drsEnablePredictiveDrs")]
        public Input<bool>? DrsEnablePredictiveDrs { get; set; }

        /// <summary>
        /// Allow individual DRS overrides to be
        /// set for virtual machines in the cluster. Default: `true`.
        /// </summary>
        [Input("drsEnableVmOverrides")]
        public Input<bool>? DrsEnableVmOverrides { get; set; }

        /// <summary>
        /// Enable DRS for this cluster. Default: `false`.
        /// </summary>
        [Input("drsEnabled")]
        public Input<bool>? DrsEnabled { get; set; }

        /// <summary>
        /// A value between `1` and `5` indicating
        /// the threshold of imbalance tolerated between hosts. A lower setting will
        /// tolerate more imbalance while a higher setting will tolerate less. Default:
        /// `3`.
        /// </summary>
        [Input("drsMigrationThreshold")]
        public Input<int>? DrsMigrationThreshold { get; set; }

        /// <summary>
        /// The relative path to a folder to put this cluster in.
        /// This is a path relative to the datacenter you are deploying the cluster to.
        /// Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
        /// The provider will place a cluster named `compute-cluster-test` in a
        /// host folder located at `/dc1/host/foo/bar`, with the final inventory path
        /// being `/dc1/host/foo/bar/datastore-cluster-test`.
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// When destroying the resource, setting this to
        /// `true` will auto-remove any hosts that are currently a member of the cluster,
        /// as if they were removed by taking their entry out of `host_system_ids` (see
        /// below). This is an advanced
        /// option and should only be used for testing. Default: `false`.
        /// </summary>
        [Input("forceEvacuateOnDestroy")]
        public Input<bool>? ForceEvacuateOnDestroy { get; set; }

        [Input("haAdmissionControlFailoverHostSystemIds")]
        private InputList<string>? _haAdmissionControlFailoverHostSystemIds;

        /// <summary>
        /// Defines the
        /// managed object IDs of hosts to use as dedicated failover
        /// hosts. These hosts are kept as available as possible - admission control will
        /// block access to the host, and DRS will ignore the host when making
        /// recommendations.
        /// </summary>
        public InputList<string> HaAdmissionControlFailoverHostSystemIds
        {
            get => _haAdmissionControlFailoverHostSystemIds ?? (_haAdmissionControlFailoverHostSystemIds = new InputList<string>());
            set => _haAdmissionControlFailoverHostSystemIds = value;
        }

        /// <summary>
        /// The maximum number
        /// of failed hosts that admission control tolerates when making decisions on
        /// whether to permit virtual machine operations. The maximum is one less than
        /// the number of hosts in the cluster. Default: `1`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haAdmissionControlHostFailureTolerance")]
        public Input<int>? HaAdmissionControlHostFailureTolerance { get; set; }

        /// <summary>
        /// The percentage of
        /// resource reduction that a cluster of virtual machines can tolerate in case of
        /// a failover. A value of 0 produces warnings only, whereas a value of 100
        /// disables the setting. Default: `100` (disabled).
        /// </summary>
        [Input("haAdmissionControlPerformanceTolerance")]
        public Input<int>? HaAdmissionControlPerformanceTolerance { get; set; }

        /// <summary>
        /// The type of admission control
        /// policy to use with vSphere HA. Can be one of `resourcePercentage`,
        /// `slotPolicy`, `failoverHosts`, or `disabled`. Default: `resourcePercentage`.
        /// </summary>
        [Input("haAdmissionControlPolicy")]
        public Input<string>? HaAdmissionControlPolicy { get; set; }

        /// <summary>
        /// Automatically determine available resource percentages by subtracting the
        /// average number of host resources represented by the
        /// `ha_admission_control_host_failure_tolerance`
        /// setting from the total amount of resources in the cluster. Disable to supply
        /// user-defined values. Default: `true`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haAdmissionControlResourcePercentageAutoCompute")]
        public Input<bool>? HaAdmissionControlResourcePercentageAutoCompute { get; set; }

        /// <summary>
        /// Controls the
        /// user-defined percentage of CPU resources in the cluster to reserve for
        /// failover. Default: `100`.
        /// </summary>
        [Input("haAdmissionControlResourcePercentageCpu")]
        public Input<int>? HaAdmissionControlResourcePercentageCpu { get; set; }

        /// <summary>
        /// Controls the
        /// user-defined percentage of memory resources in the cluster to reserve for
        /// failover. Default: `100`.
        /// </summary>
        [Input("haAdmissionControlResourcePercentageMemory")]
        public Input<int>? HaAdmissionControlResourcePercentageMemory { get; set; }

        /// <summary>
        /// Controls the
        /// user-defined CPU slot size, in MHz. Default: `32`.
        /// </summary>
        [Input("haAdmissionControlSlotPolicyExplicitCpu")]
        public Input<int>? HaAdmissionControlSlotPolicyExplicitCpu { get; set; }

        /// <summary>
        /// Controls the
        /// user-defined memory slot size, in MB. Default: `100`.
        /// </summary>
        [Input("haAdmissionControlSlotPolicyExplicitMemory")]
        public Input<int>? HaAdmissionControlSlotPolicyExplicitMemory { get; set; }

        /// <summary>
        /// Controls
        /// whether or not you wish to supply explicit values to CPU and memory slot
        /// sizes. The default is `false`, which tells vSphere to gather a automatic
        /// average based on all powered-on virtual machines currently in the cluster.
        /// </summary>
        [Input("haAdmissionControlSlotPolicyUseExplicitSize")]
        public Input<bool>? HaAdmissionControlSlotPolicyUseExplicitSize { get; set; }

        [Input("haAdvancedOptions")]
        private InputMap<string>? _haAdvancedOptions;

        /// <summary>
        /// A key/value map that specifies advanced
        /// options for vSphere HA.
        /// </summary>
        public InputMap<string> HaAdvancedOptions
        {
            get => _haAdvancedOptions ?? (_haAdvancedOptions = new InputMap<string>());
            set => _haAdvancedOptions = value;
        }

        /// <summary>
        /// Controls the action to take
        /// on virtual machines if an APD status on an affected datastore clears in the
        /// middle of an APD event. Can be one of `none` or `reset`. Default: `none`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haDatastoreApdRecoveryAction")]
        public Input<string>? HaDatastoreApdRecoveryAction { get; set; }

        /// <summary>
        /// Controls the action to take on
        /// virtual machines when the cluster has detected loss to all paths to a
        /// relevant datastore. Can be one of `disabled`, `warning`,
        /// `restartConservative`, or `restartAggressive`.  Default: `disabled`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haDatastoreApdResponse")]
        public Input<string>? HaDatastoreApdResponse { get; set; }

        /// <summary>
        /// Controls the delay in minutes
        /// to wait after an APD timeout event to execute the response action defined in
        /// `ha_datastore_apd_response`. Default: `3`
        /// minutes. &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haDatastoreApdResponseDelay")]
        public Input<int>? HaDatastoreApdResponseDelay { get; set; }

        /// <summary>
        /// Controls the action to take on
        /// virtual machines when the cluster has detected a permanent device loss to a
        /// relevant datastore. Can be one of `disabled`, `warning`, or
        /// `restartAggressive`. Default: `disabled`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haDatastorePdlResponse")]
        public Input<string>? HaDatastorePdlResponse { get; set; }

        /// <summary>
        /// Enable vSphere HA for this cluster. Default:
        /// `false`.
        /// </summary>
        [Input("haEnabled")]
        public Input<bool>? HaEnabled { get; set; }

        [Input("haHeartbeatDatastoreIds")]
        private InputList<string>? _haHeartbeatDatastoreIds;

        /// <summary>
        /// The list of managed object IDs for
        /// preferred datastores to use for HA heartbeating. This setting is only useful
        /// when `ha_heartbeat_datastore_policy` is set
        /// to either `userSelectedDs` or `allFeasibleDsWithUserPreference`.
        /// </summary>
        public InputList<string> HaHeartbeatDatastoreIds
        {
            get => _haHeartbeatDatastoreIds ?? (_haHeartbeatDatastoreIds = new InputList<string>());
            set => _haHeartbeatDatastoreIds = value;
        }

        /// <summary>
        /// The selection policy for HA
        /// heartbeat datastores. Can be one of `allFeasibleDs`, `userSelectedDs`, or
        /// `allFeasibleDsWithUserPreference`. Default:
        /// `allFeasibleDsWithUserPreference`.
        /// </summary>
        [Input("haHeartbeatDatastorePolicy")]
        public Input<string>? HaHeartbeatDatastorePolicy { get; set; }

        /// <summary>
        /// The action to take on virtual
        /// machines when a host has detected that it has been isolated from the rest of
        /// the cluster. Can be one of `none`, `powerOff`, or `shutdown`. Default:
        /// `none`.
        /// </summary>
        [Input("haHostIsolationResponse")]
        public Input<string>? HaHostIsolationResponse { get; set; }

        /// <summary>
        /// Global setting that controls whether
        /// vSphere HA remediates virtual machines on host failure. Can be one of `enabled`
        /// or `disabled`. Default: `enabled`.
        /// </summary>
        [Input("haHostMonitoring")]
        public Input<string>? HaHostMonitoring { get; set; }

        /// <summary>
        /// Controls vSphere VM component
        /// protection for virtual machines in this cluster. Can be one of `enabled` or
        /// `disabled`. Default: `enabled`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haVmComponentProtection")]
        public Input<string>? HaVmComponentProtection { get; set; }

        /// <summary>
        /// The condition used to
        /// determine whether or not virtual machines in a certain restart priority class
        /// are online, allowing HA to move on to restarting virtual machines on the next
        /// priority. Can be one of `none`, `poweredOn`, `guestHbStatusGreen`, or
        /// `appHbStatusGreen`. The default is `none`, which means that a virtual machine
        /// is considered ready immediately after a host is found to start it on.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haVmDependencyRestartCondition")]
        public Input<string>? HaVmDependencyRestartCondition { get; set; }

        /// <summary>
        /// If a heartbeat from a virtual machine
        /// is not received within this configured interval, the virtual machine is
        /// marked as failed. The value is in seconds. Default: `30`.
        /// </summary>
        [Input("haVmFailureInterval")]
        public Input<int>? HaVmFailureInterval { get; set; }

        /// <summary>
        /// The length of the reset window in
        /// which `ha_vm_maximum_resets` can operate. When this
        /// window expires, no more resets are attempted regardless of the setting
        /// configured in `ha_vm_maximum_resets`. `-1` means no window, meaning an
        /// unlimited reset time is allotted. The value is specified in seconds. Default:
        /// `-1` (no window).
        /// </summary>
        [Input("haVmMaximumFailureWindow")]
        public Input<int>? HaVmMaximumFailureWindow { get; set; }

        /// <summary>
        /// The maximum number of resets that HA will
        /// perform to a virtual machine when responding to a failure event. Default: `3`
        /// </summary>
        [Input("haVmMaximumResets")]
        public Input<int>? HaVmMaximumResets { get; set; }

        /// <summary>
        /// The time, in seconds, that HA waits after
        /// powering on a virtual machine before monitoring for heartbeats. Default:
        /// `120` (2 minutes).
        /// </summary>
        [Input("haVmMinimumUptime")]
        public Input<int>? HaVmMinimumUptime { get; set; }

        /// <summary>
        /// The type of virtual machine monitoring to use
        /// when HA is enabled in the cluster. Can be one of `vmMonitoringDisabled`,
        /// `vmMonitoringOnly`, or `vmAndAppMonitoring`. Default: `vmMonitoringDisabled`.
        /// </summary>
        [Input("haVmMonitoring")]
        public Input<string>? HaVmMonitoring { get; set; }

        /// <summary>
        /// Additional delay in seconds
        /// after ready condition is met. A VM is considered ready at this point.
        /// Default: `0` (no delay). &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haVmRestartAdditionalDelay")]
        public Input<int>? HaVmRestartAdditionalDelay { get; set; }

        /// <summary>
        /// The default restart priority
        /// for affected virtual machines when vSphere detects a host failure. Can be one
        /// of `lowest`, `low`, `medium`, `high`, or `highest`. Default: `medium`.
        /// </summary>
        [Input("haVmRestartPriority")]
        public Input<string>? HaVmRestartPriority { get; set; }

        /// <summary>
        /// The maximum time, in seconds,
        /// that vSphere HA will wait for virtual machines in one priority to be ready
        /// before proceeding with the next priority. Default: `600` (10 minutes).
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("haVmRestartTimeout")]
        public Input<int>? HaVmRestartTimeout { get; set; }

        /// <summary>
        /// The timeout for each host maintenance mode
        /// operation when removing hosts from a cluster. The value is specified in
        /// seconds. Default: `3600` (1 hour).
        /// </summary>
        [Input("hostClusterExitTimeout")]
        public Input<int>? HostClusterExitTimeout { get; set; }

        /// <summary>
        /// Can be set to `true` if compute cluster
        /// membership will be managed through the `host` resource rather than the
        /// `compute_cluster` resource. Conflicts with: `host_system_ids`.
        /// &gt;&gt;&gt;&gt;&gt;&gt;&gt; v1.18.3
        /// </summary>
        [Input("hostManaged")]
        public Input<bool>? HostManaged { get; set; }

        [Input("hostSystemIds")]
        private InputList<string>? _hostSystemIds;

        /// <summary>
        /// The [managed object IDs][docs-about-morefs] of
        /// the hosts to put in the cluster. Conflicts with: `host_managed`.
        /// </summary>
        public InputList<string> HostSystemIds
        {
            get => _hostSystemIds ?? (_hostSystemIds = new InputList<string>());
            set => _hostSystemIds = value;
        }

        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Determines how the host
        /// quarantine, maintenance mode, or virtual machine migration recommendations
        /// made by proactive HA are to be handled. Can be one of `Automated` or
        /// `Manual`. Default: `Manual`. &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("proactiveHaAutomationLevel")]
        public Input<string>? ProactiveHaAutomationLevel { get; set; }

        /// <summary>
        /// Enables Proactive HA. Default: `false`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("proactiveHaEnabled")]
        public Input<bool>? ProactiveHaEnabled { get; set; }

        /// <summary>
        /// The configured remediation
        /// for moderately degraded hosts. Can be one of `MaintenanceMode` or
        /// `QuarantineMode`. Note that this cannot be set to `MaintenanceMode` when
        /// `proactive_ha_severe_remediation` is set
        /// to `QuarantineMode`. Default: `QuarantineMode`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("proactiveHaModerateRemediation")]
        public Input<string>? ProactiveHaModerateRemediation { get; set; }

        [Input("proactiveHaProviderIds")]
        private InputList<string>? _proactiveHaProviderIds;

        /// <summary>
        /// The list of IDs for health update
        /// providers configured for this cluster.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        public InputList<string> ProactiveHaProviderIds
        {
            get => _proactiveHaProviderIds ?? (_proactiveHaProviderIds = new InputList<string>());
            set => _proactiveHaProviderIds = value;
        }

        /// <summary>
        /// The configured remediation for
        /// severely degraded hosts. Can be one of `MaintenanceMode` or `QuarantineMode`.
        /// Note that this cannot be set to `QuarantineMode` when
        /// `proactive_ha_moderate_remediation` is
        /// set to `MaintenanceMode`. Default: `QuarantineMode`.
        /// &lt;sup&gt;\*&lt;/sup&gt;
        /// </summary>
        [Input("proactiveHaSevereRemediation")]
        public Input<string>? ProactiveHaSevereRemediation { get; set; }

        /// <summary>
        /// The managed object ID of the cluster's root resource pool.
        /// </summary>
        [Input("resourcePoolId")]
        public Input<string>? ResourcePoolId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The IDs of any tags to attach to this resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ComputeClusterState()
        {
        }
    }
}
