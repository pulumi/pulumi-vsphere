// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ComputeCluster struct {
	pulumi.CustomResourceState

	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	CustomAttributes pulumi.StringMapOutput `pulumi:"customAttributes"`
	// The [managed object ID][docs-about-morefs] of
	// the datacenter to create the cluster in. Forces a new resource if changed.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// The automation level for host power
	// operations in this cluster. Can be one of `manual` or `automated`. Default:
	// `manual`.
	DpmAutomationLevel pulumi.StringPtrOutput `pulumi:"dpmAutomationLevel"`
	// Enable DPM support for DRS in this cluster.
	// Requires `drsEnabled` to be `true` in order to be effective.
	// Default: `false`.
	DpmEnabled pulumi.BoolPtrOutput `pulumi:"dpmEnabled"`
	// A value between `1` and `5` indicating the
	// threshold of load within the cluster that influences host power operations.
	// This affects both power on and power off operations - a lower setting will
	// tolerate more of a surplus/deficit than a higher setting. Default: `3`.
	DpmThreshold pulumi.IntPtrOutput `pulumi:"dpmThreshold"`
	// A key/value map that specifies advanced
	// options for DRS and DPM.
	DrsAdvancedOptions pulumi.StringMapOutput `pulumi:"drsAdvancedOptions"`
	// The default automation level for all
	// virtual machines in this cluster. Can be one of `manual`,
	// `partiallyAutomated`, or `fullyAutomated`. Default: `manual`.
	DrsAutomationLevel pulumi.StringPtrOutput `pulumi:"drsAutomationLevel"`
	// When `true`, enables DRS to use data
	// from [vRealize Operations Manager][ref-vsphere-vro] to make proactive DRS
	// recommendations. <sup>\*</sup>
	DrsEnablePredictiveDrs pulumi.BoolPtrOutput `pulumi:"drsEnablePredictiveDrs"`
	// Allow individual DRS overrides to be
	// set for virtual machines in the cluster. Default: `true`.
	DrsEnableVmOverrides pulumi.BoolPtrOutput `pulumi:"drsEnableVmOverrides"`
	// Enable DRS for this cluster. Default: `false`.
	DrsEnabled pulumi.BoolPtrOutput `pulumi:"drsEnabled"`
	// A value between `1` and `5` indicating
	// the threshold of imbalance tolerated between hosts. A lower setting will
	// tolerate more imbalance while a higher setting will tolerate less. Default:
	// `3`.
	DrsMigrationThreshold pulumi.IntPtrOutput `pulumi:"drsMigrationThreshold"`
	// The name of the folder to locate the cluster in.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// Force removal of all hosts in the cluster during destroy and make them standalone hosts. Use of this flag mainly exists
	// for testing and is not recommended in normal use.
	ForceEvacuateOnDestroy pulumi.BoolPtrOutput `pulumi:"forceEvacuateOnDestroy"`
	// Defines the
	// [managed object IDs][docs-about-morefs] of hosts to use as dedicated failover
	// hosts. These hosts are kept as available as possible - admission control will
	// block access to the host, and DRS will ignore the host when making
	// recommendations.
	HaAdmissionControlFailoverHostSystemIds pulumi.StringArrayOutput `pulumi:"haAdmissionControlFailoverHostSystemIds"`
	// The maximum number
	// of failed hosts that admission control tolerates when making decisions on
	// whether to permit virtual machine operations. The maximum is one less than
	// the number of hosts in the cluster. Default: `1`.
	// <sup>\*</sup>
	HaAdmissionControlHostFailureTolerance pulumi.IntPtrOutput `pulumi:"haAdmissionControlHostFailureTolerance"`
	// The percentage of
	// resource reduction that a cluster of virtual machines can tolerate in case of
	// a failover. A value of 0 produces warnings only, whereas a value of 100
	// disables the setting. Default: `100` (disabled).
	HaAdmissionControlPerformanceTolerance pulumi.IntPtrOutput `pulumi:"haAdmissionControlPerformanceTolerance"`
	// The type of admission control
	// policy to use with vSphere HA. Can be one of `resourcePercentage`,
	// `slotPolicy`, `failoverHosts`, or `disabled`. Default: `resourcePercentage`.
	HaAdmissionControlPolicy pulumi.StringPtrOutput `pulumi:"haAdmissionControlPolicy"`
	//
	// Automatically determine available resource percentages by subtracting the
	// average number of host resources represented by the
	// `haAdmissionControlHostFailureTolerance`
	// setting from the total amount of resources in the cluster. Disable to supply
	// user-defined values. Default: `true`.
	// <sup>\*</sup>
	HaAdmissionControlResourcePercentageAutoCompute pulumi.BoolPtrOutput `pulumi:"haAdmissionControlResourcePercentageAutoCompute"`
	// Controls the
	// user-defined percentage of CPU resources in the cluster to reserve for
	// failover. Default: `100`.
	HaAdmissionControlResourcePercentageCpu pulumi.IntPtrOutput `pulumi:"haAdmissionControlResourcePercentageCpu"`
	// Controls the
	// user-defined percentage of memory resources in the cluster to reserve for
	// failover. Default: `100`.
	HaAdmissionControlResourcePercentageMemory pulumi.IntPtrOutput `pulumi:"haAdmissionControlResourcePercentageMemory"`
	// Controls the
	// user-defined CPU slot size, in MHz. Default: `32`.
	HaAdmissionControlSlotPolicyExplicitCpu pulumi.IntPtrOutput `pulumi:"haAdmissionControlSlotPolicyExplicitCpu"`
	// Controls the
	// user-defined memory slot size, in MB. Default: `100`.
	HaAdmissionControlSlotPolicyExplicitMemory pulumi.IntPtrOutput `pulumi:"haAdmissionControlSlotPolicyExplicitMemory"`
	// Controls
	// whether or not you wish to supply explicit values to CPU and memory slot
	// sizes. The default is `false`, which tells vSphere to gather a automatic
	// average based on all powered-on virtual machines currently in the cluster.
	HaAdmissionControlSlotPolicyUseExplicitSize pulumi.BoolPtrOutput `pulumi:"haAdmissionControlSlotPolicyUseExplicitSize"`
	// A key/value map that specifies advanced
	// options for vSphere HA.
	HaAdvancedOptions pulumi.StringMapOutput `pulumi:"haAdvancedOptions"`
	// Controls the action to take
	// on virtual machines if an APD status on an affected datastore clears in the
	// middle of an APD event. Can be one of `none` or `reset`. Default: `none`.
	// <sup>\*</sup>
	HaDatastoreApdRecoveryAction pulumi.StringPtrOutput `pulumi:"haDatastoreApdRecoveryAction"`
	// Controls the action to take on
	// virtual machines when the cluster has detected loss to all paths to a
	// relevant datastore. Can be one of `disabled`, `warning`,
	// `restartConservative`, or `restartAggressive`.  Default: `disabled`.
	// <sup>\*</sup>
	HaDatastoreApdResponse pulumi.StringPtrOutput `pulumi:"haDatastoreApdResponse"`
	// Controls the delay in minutes
	// to wait after an APD timeout event to execute the response action defined in
	// `haDatastoreApdResponse`. Default: `3`
	// minutes. <sup>\*</sup>
	HaDatastoreApdResponseDelay pulumi.IntPtrOutput `pulumi:"haDatastoreApdResponseDelay"`
	// Controls the action to take on
	// virtual machines when the cluster has detected a permanent device loss to a
	// relevant datastore. Can be one of `disabled`, `warning`, or
	// `restartAggressive`. Default: `disabled`.
	// <sup>\*</sup>
	HaDatastorePdlResponse pulumi.StringPtrOutput `pulumi:"haDatastorePdlResponse"`
	// Enable vSphere HA for this cluster. Default:
	// `false`.
	HaEnabled pulumi.BoolPtrOutput `pulumi:"haEnabled"`
	// The list of managed object IDs for
	// preferred datastores to use for HA heartbeating. This setting is only useful
	// when `haHeartbeatDatastorePolicy` is set
	// to either `userSelectedDs` or `allFeasibleDsWithUserPreference`.
	HaHeartbeatDatastoreIds pulumi.StringArrayOutput `pulumi:"haHeartbeatDatastoreIds"`
	// The selection policy for HA
	// heartbeat datastores. Can be one of `allFeasibleDs`, `userSelectedDs`, or
	// `allFeasibleDsWithUserPreference`. Default:
	// `allFeasibleDsWithUserPreference`.
	HaHeartbeatDatastorePolicy pulumi.StringPtrOutput `pulumi:"haHeartbeatDatastorePolicy"`
	// The action to take on virtual
	// machines when a host has detected that it has been isolated from the rest of
	// the cluster. Can be one of `none`, `powerOff`, or `shutdown`. Default:
	// `none`.
	HaHostIsolationResponse pulumi.StringPtrOutput `pulumi:"haHostIsolationResponse"`
	// Global setting that controls whether
	// vSphere HA remediates virtual machines on host failure. Can be one of `enabled`
	// or `disabled`. Default: `enabled`.
	HaHostMonitoring pulumi.StringPtrOutput `pulumi:"haHostMonitoring"`
	// Controls vSphere VM component
	// protection for virtual machines in this cluster. Can be one of `enabled` or
	// `disabled`. Default: `enabled`.
	// <sup>\*</sup>
	HaVmComponentProtection pulumi.StringPtrOutput `pulumi:"haVmComponentProtection"`
	// The condition used to
	// determine whether or not virtual machines in a certain restart priority class
	// are online, allowing HA to move on to restarting virtual machines on the next
	// priority. Can be one of `none`, `poweredOn`, `guestHbStatusGreen`, or
	// `appHbStatusGreen`. The default is `none`, which means that a virtual machine
	// is considered ready immediately after a host is found to start it on.
	// <sup>\*</sup>
	HaVmDependencyRestartCondition pulumi.StringPtrOutput `pulumi:"haVmDependencyRestartCondition"`
	// If a heartbeat from a virtual machine
	// is not received within this configured interval, the virtual machine is
	// marked as failed. The value is in seconds. Default: `30`.
	HaVmFailureInterval pulumi.IntPtrOutput `pulumi:"haVmFailureInterval"`
	// The length of the reset window in
	// which `haVmMaximumResets` can operate. When this
	// window expires, no more resets are attempted regardless of the setting
	// configured in `haVmMaximumResets`. `-1` means no window, meaning an
	// unlimited reset time is allotted. The value is specified in seconds. Default:
	// `-1` (no window).
	HaVmMaximumFailureWindow pulumi.IntPtrOutput `pulumi:"haVmMaximumFailureWindow"`
	// The maximum number of resets that HA will
	// perform to a virtual machine when responding to a failure event. Default: `3`
	HaVmMaximumResets pulumi.IntPtrOutput `pulumi:"haVmMaximumResets"`
	// The time, in seconds, that HA waits after
	// powering on a virtual machine before monitoring for heartbeats. Default:
	// `120` (2 minutes).
	HaVmMinimumUptime pulumi.IntPtrOutput `pulumi:"haVmMinimumUptime"`
	// The type of virtual machine monitoring to use
	// when HA is enabled in the cluster. Can be one of `vmMonitoringDisabled`,
	// `vmMonitoringOnly`, or `vmAndAppMonitoring`. Default: `vmMonitoringDisabled`.
	HaVmMonitoring pulumi.StringPtrOutput `pulumi:"haVmMonitoring"`
	// Additional delay in seconds
	// after ready condition is met. A VM is considered ready at this point.
	// Default: `0` (no delay). <sup>\*</sup>
	HaVmRestartAdditionalDelay pulumi.IntPtrOutput `pulumi:"haVmRestartAdditionalDelay"`
	// The default restart priority
	// for affected virtual machines when vSphere detects a host failure. Can be one
	// of `lowest`, `low`, `medium`, `high`, or `highest`. Default: `medium`.
	HaVmRestartPriority pulumi.StringPtrOutput `pulumi:"haVmRestartPriority"`
	// The maximum time, in seconds,
	// that vSphere HA will wait for virtual machines in one priority to be ready
	// before proceeding with the next priority. Default: `600` (10 minutes).
	// <sup>\*</sup>
	HaVmRestartTimeout pulumi.IntPtrOutput `pulumi:"haVmRestartTimeout"`
	// The timeout for each host maintenance mode
	// operation when removing hosts from a cluster. The value is specified in
	// seconds. Default: `3600` (1 hour).
	HostClusterExitTimeout pulumi.IntPtrOutput `pulumi:"hostClusterExitTimeout"`
	// The [managed object IDs][docs-about-morefs] of
	// the hosts to put in the cluster.
	HostSystemIds pulumi.StringArrayOutput `pulumi:"hostSystemIds"`
	// The name of the cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// Determines how the host
	// quarantine, maintenance mode, or virtual machine migration recommendations
	// made by proactive HA are to be handled. Can be one of `Automated` or
	// `Manual`. Default: `Manual`. <sup>\*</sup>
	ProactiveHaAutomationLevel pulumi.StringPtrOutput `pulumi:"proactiveHaAutomationLevel"`
	// Enables Proactive HA. Default: `false`.
	// <sup>\*</sup>
	ProactiveHaEnabled pulumi.BoolPtrOutput `pulumi:"proactiveHaEnabled"`
	// The configured remediation
	// for moderately degraded hosts. Can be one of `MaintenanceMode` or
	// `QuarantineMode`. Note that this cannot be set to `MaintenanceMode` when
	// `proactiveHaSevereRemediation` is set
	// to `QuarantineMode`. Default: `QuarantineMode`.
	// <sup>\*</sup>
	ProactiveHaModerateRemediation pulumi.StringPtrOutput `pulumi:"proactiveHaModerateRemediation"`
	// The list of IDs for health update
	// providers configured for this cluster.
	// <sup>\*</sup>
	ProactiveHaProviderIds pulumi.StringArrayOutput `pulumi:"proactiveHaProviderIds"`
	// The configured remediation for
	// severely degraded hosts. Can be one of `MaintenanceMode` or `QuarantineMode`.
	// Note that this cannot be set to `QuarantineMode` when
	// `proactiveHaModerateRemediation` is
	// set to `MaintenanceMode`. Default: `QuarantineMode`.
	// <sup>\*</sup>
	ProactiveHaSevereRemediation pulumi.StringPtrOutput `pulumi:"proactiveHaSevereRemediation"`
	// The managed object ID of the cluster's root resource pool.
	ResourcePoolId pulumi.StringOutput `pulumi:"resourcePoolId"`
	// The IDs of any tags to attach to this resource. See
	// [here][docs-applying-tags] for a reference on how to apply tags.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewComputeCluster registers a new resource with the given unique name, arguments, and options.
func NewComputeCluster(ctx *pulumi.Context,
	name string, args *ComputeClusterArgs, opts ...pulumi.ResourceOption) (*ComputeCluster, error) {
	if args == nil || args.DatacenterId == nil {
		return nil, errors.New("missing required argument 'DatacenterId'")
	}
	if args == nil {
		args = &ComputeClusterArgs{}
	}
	var resource ComputeCluster
	err := ctx.RegisterResource("vsphere:index/computeCluster:ComputeCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeCluster gets an existing ComputeCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeClusterState, opts ...pulumi.ResourceOption) (*ComputeCluster, error) {
	var resource ComputeCluster
	err := ctx.ReadResource("vsphere:index/computeCluster:ComputeCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeCluster resources.
type computeClusterState struct {
	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// The [managed object ID][docs-about-morefs] of
	// the datacenter to create the cluster in. Forces a new resource if changed.
	DatacenterId *string `pulumi:"datacenterId"`
	// The automation level for host power
	// operations in this cluster. Can be one of `manual` or `automated`. Default:
	// `manual`.
	DpmAutomationLevel *string `pulumi:"dpmAutomationLevel"`
	// Enable DPM support for DRS in this cluster.
	// Requires `drsEnabled` to be `true` in order to be effective.
	// Default: `false`.
	DpmEnabled *bool `pulumi:"dpmEnabled"`
	// A value between `1` and `5` indicating the
	// threshold of load within the cluster that influences host power operations.
	// This affects both power on and power off operations - a lower setting will
	// tolerate more of a surplus/deficit than a higher setting. Default: `3`.
	DpmThreshold *int `pulumi:"dpmThreshold"`
	// A key/value map that specifies advanced
	// options for DRS and DPM.
	DrsAdvancedOptions map[string]string `pulumi:"drsAdvancedOptions"`
	// The default automation level for all
	// virtual machines in this cluster. Can be one of `manual`,
	// `partiallyAutomated`, or `fullyAutomated`. Default: `manual`.
	DrsAutomationLevel *string `pulumi:"drsAutomationLevel"`
	// When `true`, enables DRS to use data
	// from [vRealize Operations Manager][ref-vsphere-vro] to make proactive DRS
	// recommendations. <sup>\*</sup>
	DrsEnablePredictiveDrs *bool `pulumi:"drsEnablePredictiveDrs"`
	// Allow individual DRS overrides to be
	// set for virtual machines in the cluster. Default: `true`.
	DrsEnableVmOverrides *bool `pulumi:"drsEnableVmOverrides"`
	// Enable DRS for this cluster. Default: `false`.
	DrsEnabled *bool `pulumi:"drsEnabled"`
	// A value between `1` and `5` indicating
	// the threshold of imbalance tolerated between hosts. A lower setting will
	// tolerate more imbalance while a higher setting will tolerate less. Default:
	// `3`.
	DrsMigrationThreshold *int `pulumi:"drsMigrationThreshold"`
	// The name of the folder to locate the cluster in.
	Folder *string `pulumi:"folder"`
	// Force removal of all hosts in the cluster during destroy and make them standalone hosts. Use of this flag mainly exists
	// for testing and is not recommended in normal use.
	ForceEvacuateOnDestroy *bool `pulumi:"forceEvacuateOnDestroy"`
	// Defines the
	// [managed object IDs][docs-about-morefs] of hosts to use as dedicated failover
	// hosts. These hosts are kept as available as possible - admission control will
	// block access to the host, and DRS will ignore the host when making
	// recommendations.
	HaAdmissionControlFailoverHostSystemIds []string `pulumi:"haAdmissionControlFailoverHostSystemIds"`
	// The maximum number
	// of failed hosts that admission control tolerates when making decisions on
	// whether to permit virtual machine operations. The maximum is one less than
	// the number of hosts in the cluster. Default: `1`.
	// <sup>\*</sup>
	HaAdmissionControlHostFailureTolerance *int `pulumi:"haAdmissionControlHostFailureTolerance"`
	// The percentage of
	// resource reduction that a cluster of virtual machines can tolerate in case of
	// a failover. A value of 0 produces warnings only, whereas a value of 100
	// disables the setting. Default: `100` (disabled).
	HaAdmissionControlPerformanceTolerance *int `pulumi:"haAdmissionControlPerformanceTolerance"`
	// The type of admission control
	// policy to use with vSphere HA. Can be one of `resourcePercentage`,
	// `slotPolicy`, `failoverHosts`, or `disabled`. Default: `resourcePercentage`.
	HaAdmissionControlPolicy *string `pulumi:"haAdmissionControlPolicy"`
	//
	// Automatically determine available resource percentages by subtracting the
	// average number of host resources represented by the
	// `haAdmissionControlHostFailureTolerance`
	// setting from the total amount of resources in the cluster. Disable to supply
	// user-defined values. Default: `true`.
	// <sup>\*</sup>
	HaAdmissionControlResourcePercentageAutoCompute *bool `pulumi:"haAdmissionControlResourcePercentageAutoCompute"`
	// Controls the
	// user-defined percentage of CPU resources in the cluster to reserve for
	// failover. Default: `100`.
	HaAdmissionControlResourcePercentageCpu *int `pulumi:"haAdmissionControlResourcePercentageCpu"`
	// Controls the
	// user-defined percentage of memory resources in the cluster to reserve for
	// failover. Default: `100`.
	HaAdmissionControlResourcePercentageMemory *int `pulumi:"haAdmissionControlResourcePercentageMemory"`
	// Controls the
	// user-defined CPU slot size, in MHz. Default: `32`.
	HaAdmissionControlSlotPolicyExplicitCpu *int `pulumi:"haAdmissionControlSlotPolicyExplicitCpu"`
	// Controls the
	// user-defined memory slot size, in MB. Default: `100`.
	HaAdmissionControlSlotPolicyExplicitMemory *int `pulumi:"haAdmissionControlSlotPolicyExplicitMemory"`
	// Controls
	// whether or not you wish to supply explicit values to CPU and memory slot
	// sizes. The default is `false`, which tells vSphere to gather a automatic
	// average based on all powered-on virtual machines currently in the cluster.
	HaAdmissionControlSlotPolicyUseExplicitSize *bool `pulumi:"haAdmissionControlSlotPolicyUseExplicitSize"`
	// A key/value map that specifies advanced
	// options for vSphere HA.
	HaAdvancedOptions map[string]string `pulumi:"haAdvancedOptions"`
	// Controls the action to take
	// on virtual machines if an APD status on an affected datastore clears in the
	// middle of an APD event. Can be one of `none` or `reset`. Default: `none`.
	// <sup>\*</sup>
	HaDatastoreApdRecoveryAction *string `pulumi:"haDatastoreApdRecoveryAction"`
	// Controls the action to take on
	// virtual machines when the cluster has detected loss to all paths to a
	// relevant datastore. Can be one of `disabled`, `warning`,
	// `restartConservative`, or `restartAggressive`.  Default: `disabled`.
	// <sup>\*</sup>
	HaDatastoreApdResponse *string `pulumi:"haDatastoreApdResponse"`
	// Controls the delay in minutes
	// to wait after an APD timeout event to execute the response action defined in
	// `haDatastoreApdResponse`. Default: `3`
	// minutes. <sup>\*</sup>
	HaDatastoreApdResponseDelay *int `pulumi:"haDatastoreApdResponseDelay"`
	// Controls the action to take on
	// virtual machines when the cluster has detected a permanent device loss to a
	// relevant datastore. Can be one of `disabled`, `warning`, or
	// `restartAggressive`. Default: `disabled`.
	// <sup>\*</sup>
	HaDatastorePdlResponse *string `pulumi:"haDatastorePdlResponse"`
	// Enable vSphere HA for this cluster. Default:
	// `false`.
	HaEnabled *bool `pulumi:"haEnabled"`
	// The list of managed object IDs for
	// preferred datastores to use for HA heartbeating. This setting is only useful
	// when `haHeartbeatDatastorePolicy` is set
	// to either `userSelectedDs` or `allFeasibleDsWithUserPreference`.
	HaHeartbeatDatastoreIds []string `pulumi:"haHeartbeatDatastoreIds"`
	// The selection policy for HA
	// heartbeat datastores. Can be one of `allFeasibleDs`, `userSelectedDs`, or
	// `allFeasibleDsWithUserPreference`. Default:
	// `allFeasibleDsWithUserPreference`.
	HaHeartbeatDatastorePolicy *string `pulumi:"haHeartbeatDatastorePolicy"`
	// The action to take on virtual
	// machines when a host has detected that it has been isolated from the rest of
	// the cluster. Can be one of `none`, `powerOff`, or `shutdown`. Default:
	// `none`.
	HaHostIsolationResponse *string `pulumi:"haHostIsolationResponse"`
	// Global setting that controls whether
	// vSphere HA remediates virtual machines on host failure. Can be one of `enabled`
	// or `disabled`. Default: `enabled`.
	HaHostMonitoring *string `pulumi:"haHostMonitoring"`
	// Controls vSphere VM component
	// protection for virtual machines in this cluster. Can be one of `enabled` or
	// `disabled`. Default: `enabled`.
	// <sup>\*</sup>
	HaVmComponentProtection *string `pulumi:"haVmComponentProtection"`
	// The condition used to
	// determine whether or not virtual machines in a certain restart priority class
	// are online, allowing HA to move on to restarting virtual machines on the next
	// priority. Can be one of `none`, `poweredOn`, `guestHbStatusGreen`, or
	// `appHbStatusGreen`. The default is `none`, which means that a virtual machine
	// is considered ready immediately after a host is found to start it on.
	// <sup>\*</sup>
	HaVmDependencyRestartCondition *string `pulumi:"haVmDependencyRestartCondition"`
	// If a heartbeat from a virtual machine
	// is not received within this configured interval, the virtual machine is
	// marked as failed. The value is in seconds. Default: `30`.
	HaVmFailureInterval *int `pulumi:"haVmFailureInterval"`
	// The length of the reset window in
	// which `haVmMaximumResets` can operate. When this
	// window expires, no more resets are attempted regardless of the setting
	// configured in `haVmMaximumResets`. `-1` means no window, meaning an
	// unlimited reset time is allotted. The value is specified in seconds. Default:
	// `-1` (no window).
	HaVmMaximumFailureWindow *int `pulumi:"haVmMaximumFailureWindow"`
	// The maximum number of resets that HA will
	// perform to a virtual machine when responding to a failure event. Default: `3`
	HaVmMaximumResets *int `pulumi:"haVmMaximumResets"`
	// The time, in seconds, that HA waits after
	// powering on a virtual machine before monitoring for heartbeats. Default:
	// `120` (2 minutes).
	HaVmMinimumUptime *int `pulumi:"haVmMinimumUptime"`
	// The type of virtual machine monitoring to use
	// when HA is enabled in the cluster. Can be one of `vmMonitoringDisabled`,
	// `vmMonitoringOnly`, or `vmAndAppMonitoring`. Default: `vmMonitoringDisabled`.
	HaVmMonitoring *string `pulumi:"haVmMonitoring"`
	// Additional delay in seconds
	// after ready condition is met. A VM is considered ready at this point.
	// Default: `0` (no delay). <sup>\*</sup>
	HaVmRestartAdditionalDelay *int `pulumi:"haVmRestartAdditionalDelay"`
	// The default restart priority
	// for affected virtual machines when vSphere detects a host failure. Can be one
	// of `lowest`, `low`, `medium`, `high`, or `highest`. Default: `medium`.
	HaVmRestartPriority *string `pulumi:"haVmRestartPriority"`
	// The maximum time, in seconds,
	// that vSphere HA will wait for virtual machines in one priority to be ready
	// before proceeding with the next priority. Default: `600` (10 minutes).
	// <sup>\*</sup>
	HaVmRestartTimeout *int `pulumi:"haVmRestartTimeout"`
	// The timeout for each host maintenance mode
	// operation when removing hosts from a cluster. The value is specified in
	// seconds. Default: `3600` (1 hour).
	HostClusterExitTimeout *int `pulumi:"hostClusterExitTimeout"`
	// The [managed object IDs][docs-about-morefs] of
	// the hosts to put in the cluster.
	HostSystemIds []string `pulumi:"hostSystemIds"`
	// The name of the cluster.
	Name *string `pulumi:"name"`
	// Determines how the host
	// quarantine, maintenance mode, or virtual machine migration recommendations
	// made by proactive HA are to be handled. Can be one of `Automated` or
	// `Manual`. Default: `Manual`. <sup>\*</sup>
	ProactiveHaAutomationLevel *string `pulumi:"proactiveHaAutomationLevel"`
	// Enables Proactive HA. Default: `false`.
	// <sup>\*</sup>
	ProactiveHaEnabled *bool `pulumi:"proactiveHaEnabled"`
	// The configured remediation
	// for moderately degraded hosts. Can be one of `MaintenanceMode` or
	// `QuarantineMode`. Note that this cannot be set to `MaintenanceMode` when
	// `proactiveHaSevereRemediation` is set
	// to `QuarantineMode`. Default: `QuarantineMode`.
	// <sup>\*</sup>
	ProactiveHaModerateRemediation *string `pulumi:"proactiveHaModerateRemediation"`
	// The list of IDs for health update
	// providers configured for this cluster.
	// <sup>\*</sup>
	ProactiveHaProviderIds []string `pulumi:"proactiveHaProviderIds"`
	// The configured remediation for
	// severely degraded hosts. Can be one of `MaintenanceMode` or `QuarantineMode`.
	// Note that this cannot be set to `QuarantineMode` when
	// `proactiveHaModerateRemediation` is
	// set to `MaintenanceMode`. Default: `QuarantineMode`.
	// <sup>\*</sup>
	ProactiveHaSevereRemediation *string `pulumi:"proactiveHaSevereRemediation"`
	// The managed object ID of the cluster's root resource pool.
	ResourcePoolId *string `pulumi:"resourcePoolId"`
	// The IDs of any tags to attach to this resource. See
	// [here][docs-applying-tags] for a reference on how to apply tags.
	Tags []string `pulumi:"tags"`
}

type ComputeClusterState struct {
	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	CustomAttributes pulumi.StringMapInput
	// The [managed object ID][docs-about-morefs] of
	// the datacenter to create the cluster in. Forces a new resource if changed.
	DatacenterId pulumi.StringPtrInput
	// The automation level for host power
	// operations in this cluster. Can be one of `manual` or `automated`. Default:
	// `manual`.
	DpmAutomationLevel pulumi.StringPtrInput
	// Enable DPM support for DRS in this cluster.
	// Requires `drsEnabled` to be `true` in order to be effective.
	// Default: `false`.
	DpmEnabled pulumi.BoolPtrInput
	// A value between `1` and `5` indicating the
	// threshold of load within the cluster that influences host power operations.
	// This affects both power on and power off operations - a lower setting will
	// tolerate more of a surplus/deficit than a higher setting. Default: `3`.
	DpmThreshold pulumi.IntPtrInput
	// A key/value map that specifies advanced
	// options for DRS and DPM.
	DrsAdvancedOptions pulumi.StringMapInput
	// The default automation level for all
	// virtual machines in this cluster. Can be one of `manual`,
	// `partiallyAutomated`, or `fullyAutomated`. Default: `manual`.
	DrsAutomationLevel pulumi.StringPtrInput
	// When `true`, enables DRS to use data
	// from [vRealize Operations Manager][ref-vsphere-vro] to make proactive DRS
	// recommendations. <sup>\*</sup>
	DrsEnablePredictiveDrs pulumi.BoolPtrInput
	// Allow individual DRS overrides to be
	// set for virtual machines in the cluster. Default: `true`.
	DrsEnableVmOverrides pulumi.BoolPtrInput
	// Enable DRS for this cluster. Default: `false`.
	DrsEnabled pulumi.BoolPtrInput
	// A value between `1` and `5` indicating
	// the threshold of imbalance tolerated between hosts. A lower setting will
	// tolerate more imbalance while a higher setting will tolerate less. Default:
	// `3`.
	DrsMigrationThreshold pulumi.IntPtrInput
	// The name of the folder to locate the cluster in.
	Folder pulumi.StringPtrInput
	// Force removal of all hosts in the cluster during destroy and make them standalone hosts. Use of this flag mainly exists
	// for testing and is not recommended in normal use.
	ForceEvacuateOnDestroy pulumi.BoolPtrInput
	// Defines the
	// [managed object IDs][docs-about-morefs] of hosts to use as dedicated failover
	// hosts. These hosts are kept as available as possible - admission control will
	// block access to the host, and DRS will ignore the host when making
	// recommendations.
	HaAdmissionControlFailoverHostSystemIds pulumi.StringArrayInput
	// The maximum number
	// of failed hosts that admission control tolerates when making decisions on
	// whether to permit virtual machine operations. The maximum is one less than
	// the number of hosts in the cluster. Default: `1`.
	// <sup>\*</sup>
	HaAdmissionControlHostFailureTolerance pulumi.IntPtrInput
	// The percentage of
	// resource reduction that a cluster of virtual machines can tolerate in case of
	// a failover. A value of 0 produces warnings only, whereas a value of 100
	// disables the setting. Default: `100` (disabled).
	HaAdmissionControlPerformanceTolerance pulumi.IntPtrInput
	// The type of admission control
	// policy to use with vSphere HA. Can be one of `resourcePercentage`,
	// `slotPolicy`, `failoverHosts`, or `disabled`. Default: `resourcePercentage`.
	HaAdmissionControlPolicy pulumi.StringPtrInput
	//
	// Automatically determine available resource percentages by subtracting the
	// average number of host resources represented by the
	// `haAdmissionControlHostFailureTolerance`
	// setting from the total amount of resources in the cluster. Disable to supply
	// user-defined values. Default: `true`.
	// <sup>\*</sup>
	HaAdmissionControlResourcePercentageAutoCompute pulumi.BoolPtrInput
	// Controls the
	// user-defined percentage of CPU resources in the cluster to reserve for
	// failover. Default: `100`.
	HaAdmissionControlResourcePercentageCpu pulumi.IntPtrInput
	// Controls the
	// user-defined percentage of memory resources in the cluster to reserve for
	// failover. Default: `100`.
	HaAdmissionControlResourcePercentageMemory pulumi.IntPtrInput
	// Controls the
	// user-defined CPU slot size, in MHz. Default: `32`.
	HaAdmissionControlSlotPolicyExplicitCpu pulumi.IntPtrInput
	// Controls the
	// user-defined memory slot size, in MB. Default: `100`.
	HaAdmissionControlSlotPolicyExplicitMemory pulumi.IntPtrInput
	// Controls
	// whether or not you wish to supply explicit values to CPU and memory slot
	// sizes. The default is `false`, which tells vSphere to gather a automatic
	// average based on all powered-on virtual machines currently in the cluster.
	HaAdmissionControlSlotPolicyUseExplicitSize pulumi.BoolPtrInput
	// A key/value map that specifies advanced
	// options for vSphere HA.
	HaAdvancedOptions pulumi.StringMapInput
	// Controls the action to take
	// on virtual machines if an APD status on an affected datastore clears in the
	// middle of an APD event. Can be one of `none` or `reset`. Default: `none`.
	// <sup>\*</sup>
	HaDatastoreApdRecoveryAction pulumi.StringPtrInput
	// Controls the action to take on
	// virtual machines when the cluster has detected loss to all paths to a
	// relevant datastore. Can be one of `disabled`, `warning`,
	// `restartConservative`, or `restartAggressive`.  Default: `disabled`.
	// <sup>\*</sup>
	HaDatastoreApdResponse pulumi.StringPtrInput
	// Controls the delay in minutes
	// to wait after an APD timeout event to execute the response action defined in
	// `haDatastoreApdResponse`. Default: `3`
	// minutes. <sup>\*</sup>
	HaDatastoreApdResponseDelay pulumi.IntPtrInput
	// Controls the action to take on
	// virtual machines when the cluster has detected a permanent device loss to a
	// relevant datastore. Can be one of `disabled`, `warning`, or
	// `restartAggressive`. Default: `disabled`.
	// <sup>\*</sup>
	HaDatastorePdlResponse pulumi.StringPtrInput
	// Enable vSphere HA for this cluster. Default:
	// `false`.
	HaEnabled pulumi.BoolPtrInput
	// The list of managed object IDs for
	// preferred datastores to use for HA heartbeating. This setting is only useful
	// when `haHeartbeatDatastorePolicy` is set
	// to either `userSelectedDs` or `allFeasibleDsWithUserPreference`.
	HaHeartbeatDatastoreIds pulumi.StringArrayInput
	// The selection policy for HA
	// heartbeat datastores. Can be one of `allFeasibleDs`, `userSelectedDs`, or
	// `allFeasibleDsWithUserPreference`. Default:
	// `allFeasibleDsWithUserPreference`.
	HaHeartbeatDatastorePolicy pulumi.StringPtrInput
	// The action to take on virtual
	// machines when a host has detected that it has been isolated from the rest of
	// the cluster. Can be one of `none`, `powerOff`, or `shutdown`. Default:
	// `none`.
	HaHostIsolationResponse pulumi.StringPtrInput
	// Global setting that controls whether
	// vSphere HA remediates virtual machines on host failure. Can be one of `enabled`
	// or `disabled`. Default: `enabled`.
	HaHostMonitoring pulumi.StringPtrInput
	// Controls vSphere VM component
	// protection for virtual machines in this cluster. Can be one of `enabled` or
	// `disabled`. Default: `enabled`.
	// <sup>\*</sup>
	HaVmComponentProtection pulumi.StringPtrInput
	// The condition used to
	// determine whether or not virtual machines in a certain restart priority class
	// are online, allowing HA to move on to restarting virtual machines on the next
	// priority. Can be one of `none`, `poweredOn`, `guestHbStatusGreen`, or
	// `appHbStatusGreen`. The default is `none`, which means that a virtual machine
	// is considered ready immediately after a host is found to start it on.
	// <sup>\*</sup>
	HaVmDependencyRestartCondition pulumi.StringPtrInput
	// If a heartbeat from a virtual machine
	// is not received within this configured interval, the virtual machine is
	// marked as failed. The value is in seconds. Default: `30`.
	HaVmFailureInterval pulumi.IntPtrInput
	// The length of the reset window in
	// which `haVmMaximumResets` can operate. When this
	// window expires, no more resets are attempted regardless of the setting
	// configured in `haVmMaximumResets`. `-1` means no window, meaning an
	// unlimited reset time is allotted. The value is specified in seconds. Default:
	// `-1` (no window).
	HaVmMaximumFailureWindow pulumi.IntPtrInput
	// The maximum number of resets that HA will
	// perform to a virtual machine when responding to a failure event. Default: `3`
	HaVmMaximumResets pulumi.IntPtrInput
	// The time, in seconds, that HA waits after
	// powering on a virtual machine before monitoring for heartbeats. Default:
	// `120` (2 minutes).
	HaVmMinimumUptime pulumi.IntPtrInput
	// The type of virtual machine monitoring to use
	// when HA is enabled in the cluster. Can be one of `vmMonitoringDisabled`,
	// `vmMonitoringOnly`, or `vmAndAppMonitoring`. Default: `vmMonitoringDisabled`.
	HaVmMonitoring pulumi.StringPtrInput
	// Additional delay in seconds
	// after ready condition is met. A VM is considered ready at this point.
	// Default: `0` (no delay). <sup>\*</sup>
	HaVmRestartAdditionalDelay pulumi.IntPtrInput
	// The default restart priority
	// for affected virtual machines when vSphere detects a host failure. Can be one
	// of `lowest`, `low`, `medium`, `high`, or `highest`. Default: `medium`.
	HaVmRestartPriority pulumi.StringPtrInput
	// The maximum time, in seconds,
	// that vSphere HA will wait for virtual machines in one priority to be ready
	// before proceeding with the next priority. Default: `600` (10 minutes).
	// <sup>\*</sup>
	HaVmRestartTimeout pulumi.IntPtrInput
	// The timeout for each host maintenance mode
	// operation when removing hosts from a cluster. The value is specified in
	// seconds. Default: `3600` (1 hour).
	HostClusterExitTimeout pulumi.IntPtrInput
	// The [managed object IDs][docs-about-morefs] of
	// the hosts to put in the cluster.
	HostSystemIds pulumi.StringArrayInput
	// The name of the cluster.
	Name pulumi.StringPtrInput
	// Determines how the host
	// quarantine, maintenance mode, or virtual machine migration recommendations
	// made by proactive HA are to be handled. Can be one of `Automated` or
	// `Manual`. Default: `Manual`. <sup>\*</sup>
	ProactiveHaAutomationLevel pulumi.StringPtrInput
	// Enables Proactive HA. Default: `false`.
	// <sup>\*</sup>
	ProactiveHaEnabled pulumi.BoolPtrInput
	// The configured remediation
	// for moderately degraded hosts. Can be one of `MaintenanceMode` or
	// `QuarantineMode`. Note that this cannot be set to `MaintenanceMode` when
	// `proactiveHaSevereRemediation` is set
	// to `QuarantineMode`. Default: `QuarantineMode`.
	// <sup>\*</sup>
	ProactiveHaModerateRemediation pulumi.StringPtrInput
	// The list of IDs for health update
	// providers configured for this cluster.
	// <sup>\*</sup>
	ProactiveHaProviderIds pulumi.StringArrayInput
	// The configured remediation for
	// severely degraded hosts. Can be one of `MaintenanceMode` or `QuarantineMode`.
	// Note that this cannot be set to `QuarantineMode` when
	// `proactiveHaModerateRemediation` is
	// set to `MaintenanceMode`. Default: `QuarantineMode`.
	// <sup>\*</sup>
	ProactiveHaSevereRemediation pulumi.StringPtrInput
	// The managed object ID of the cluster's root resource pool.
	ResourcePoolId pulumi.StringPtrInput
	// The IDs of any tags to attach to this resource. See
	// [here][docs-applying-tags] for a reference on how to apply tags.
	Tags pulumi.StringArrayInput
}

func (ComputeClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeClusterState)(nil)).Elem()
}

type computeClusterArgs struct {
	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// The [managed object ID][docs-about-morefs] of
	// the datacenter to create the cluster in. Forces a new resource if changed.
	DatacenterId string `pulumi:"datacenterId"`
	// The automation level for host power
	// operations in this cluster. Can be one of `manual` or `automated`. Default:
	// `manual`.
	DpmAutomationLevel *string `pulumi:"dpmAutomationLevel"`
	// Enable DPM support for DRS in this cluster.
	// Requires `drsEnabled` to be `true` in order to be effective.
	// Default: `false`.
	DpmEnabled *bool `pulumi:"dpmEnabled"`
	// A value between `1` and `5` indicating the
	// threshold of load within the cluster that influences host power operations.
	// This affects both power on and power off operations - a lower setting will
	// tolerate more of a surplus/deficit than a higher setting. Default: `3`.
	DpmThreshold *int `pulumi:"dpmThreshold"`
	// A key/value map that specifies advanced
	// options for DRS and DPM.
	DrsAdvancedOptions map[string]string `pulumi:"drsAdvancedOptions"`
	// The default automation level for all
	// virtual machines in this cluster. Can be one of `manual`,
	// `partiallyAutomated`, or `fullyAutomated`. Default: `manual`.
	DrsAutomationLevel *string `pulumi:"drsAutomationLevel"`
	// When `true`, enables DRS to use data
	// from [vRealize Operations Manager][ref-vsphere-vro] to make proactive DRS
	// recommendations. <sup>\*</sup>
	DrsEnablePredictiveDrs *bool `pulumi:"drsEnablePredictiveDrs"`
	// Allow individual DRS overrides to be
	// set for virtual machines in the cluster. Default: `true`.
	DrsEnableVmOverrides *bool `pulumi:"drsEnableVmOverrides"`
	// Enable DRS for this cluster. Default: `false`.
	DrsEnabled *bool `pulumi:"drsEnabled"`
	// A value between `1` and `5` indicating
	// the threshold of imbalance tolerated between hosts. A lower setting will
	// tolerate more imbalance while a higher setting will tolerate less. Default:
	// `3`.
	DrsMigrationThreshold *int `pulumi:"drsMigrationThreshold"`
	// The name of the folder to locate the cluster in.
	Folder *string `pulumi:"folder"`
	// Force removal of all hosts in the cluster during destroy and make them standalone hosts. Use of this flag mainly exists
	// for testing and is not recommended in normal use.
	ForceEvacuateOnDestroy *bool `pulumi:"forceEvacuateOnDestroy"`
	// Defines the
	// [managed object IDs][docs-about-morefs] of hosts to use as dedicated failover
	// hosts. These hosts are kept as available as possible - admission control will
	// block access to the host, and DRS will ignore the host when making
	// recommendations.
	HaAdmissionControlFailoverHostSystemIds []string `pulumi:"haAdmissionControlFailoverHostSystemIds"`
	// The maximum number
	// of failed hosts that admission control tolerates when making decisions on
	// whether to permit virtual machine operations. The maximum is one less than
	// the number of hosts in the cluster. Default: `1`.
	// <sup>\*</sup>
	HaAdmissionControlHostFailureTolerance *int `pulumi:"haAdmissionControlHostFailureTolerance"`
	// The percentage of
	// resource reduction that a cluster of virtual machines can tolerate in case of
	// a failover. A value of 0 produces warnings only, whereas a value of 100
	// disables the setting. Default: `100` (disabled).
	HaAdmissionControlPerformanceTolerance *int `pulumi:"haAdmissionControlPerformanceTolerance"`
	// The type of admission control
	// policy to use with vSphere HA. Can be one of `resourcePercentage`,
	// `slotPolicy`, `failoverHosts`, or `disabled`. Default: `resourcePercentage`.
	HaAdmissionControlPolicy *string `pulumi:"haAdmissionControlPolicy"`
	//
	// Automatically determine available resource percentages by subtracting the
	// average number of host resources represented by the
	// `haAdmissionControlHostFailureTolerance`
	// setting from the total amount of resources in the cluster. Disable to supply
	// user-defined values. Default: `true`.
	// <sup>\*</sup>
	HaAdmissionControlResourcePercentageAutoCompute *bool `pulumi:"haAdmissionControlResourcePercentageAutoCompute"`
	// Controls the
	// user-defined percentage of CPU resources in the cluster to reserve for
	// failover. Default: `100`.
	HaAdmissionControlResourcePercentageCpu *int `pulumi:"haAdmissionControlResourcePercentageCpu"`
	// Controls the
	// user-defined percentage of memory resources in the cluster to reserve for
	// failover. Default: `100`.
	HaAdmissionControlResourcePercentageMemory *int `pulumi:"haAdmissionControlResourcePercentageMemory"`
	// Controls the
	// user-defined CPU slot size, in MHz. Default: `32`.
	HaAdmissionControlSlotPolicyExplicitCpu *int `pulumi:"haAdmissionControlSlotPolicyExplicitCpu"`
	// Controls the
	// user-defined memory slot size, in MB. Default: `100`.
	HaAdmissionControlSlotPolicyExplicitMemory *int `pulumi:"haAdmissionControlSlotPolicyExplicitMemory"`
	// Controls
	// whether or not you wish to supply explicit values to CPU and memory slot
	// sizes. The default is `false`, which tells vSphere to gather a automatic
	// average based on all powered-on virtual machines currently in the cluster.
	HaAdmissionControlSlotPolicyUseExplicitSize *bool `pulumi:"haAdmissionControlSlotPolicyUseExplicitSize"`
	// A key/value map that specifies advanced
	// options for vSphere HA.
	HaAdvancedOptions map[string]string `pulumi:"haAdvancedOptions"`
	// Controls the action to take
	// on virtual machines if an APD status on an affected datastore clears in the
	// middle of an APD event. Can be one of `none` or `reset`. Default: `none`.
	// <sup>\*</sup>
	HaDatastoreApdRecoveryAction *string `pulumi:"haDatastoreApdRecoveryAction"`
	// Controls the action to take on
	// virtual machines when the cluster has detected loss to all paths to a
	// relevant datastore. Can be one of `disabled`, `warning`,
	// `restartConservative`, or `restartAggressive`.  Default: `disabled`.
	// <sup>\*</sup>
	HaDatastoreApdResponse *string `pulumi:"haDatastoreApdResponse"`
	// Controls the delay in minutes
	// to wait after an APD timeout event to execute the response action defined in
	// `haDatastoreApdResponse`. Default: `3`
	// minutes. <sup>\*</sup>
	HaDatastoreApdResponseDelay *int `pulumi:"haDatastoreApdResponseDelay"`
	// Controls the action to take on
	// virtual machines when the cluster has detected a permanent device loss to a
	// relevant datastore. Can be one of `disabled`, `warning`, or
	// `restartAggressive`. Default: `disabled`.
	// <sup>\*</sup>
	HaDatastorePdlResponse *string `pulumi:"haDatastorePdlResponse"`
	// Enable vSphere HA for this cluster. Default:
	// `false`.
	HaEnabled *bool `pulumi:"haEnabled"`
	// The list of managed object IDs for
	// preferred datastores to use for HA heartbeating. This setting is only useful
	// when `haHeartbeatDatastorePolicy` is set
	// to either `userSelectedDs` or `allFeasibleDsWithUserPreference`.
	HaHeartbeatDatastoreIds []string `pulumi:"haHeartbeatDatastoreIds"`
	// The selection policy for HA
	// heartbeat datastores. Can be one of `allFeasibleDs`, `userSelectedDs`, or
	// `allFeasibleDsWithUserPreference`. Default:
	// `allFeasibleDsWithUserPreference`.
	HaHeartbeatDatastorePolicy *string `pulumi:"haHeartbeatDatastorePolicy"`
	// The action to take on virtual
	// machines when a host has detected that it has been isolated from the rest of
	// the cluster. Can be one of `none`, `powerOff`, or `shutdown`. Default:
	// `none`.
	HaHostIsolationResponse *string `pulumi:"haHostIsolationResponse"`
	// Global setting that controls whether
	// vSphere HA remediates virtual machines on host failure. Can be one of `enabled`
	// or `disabled`. Default: `enabled`.
	HaHostMonitoring *string `pulumi:"haHostMonitoring"`
	// Controls vSphere VM component
	// protection for virtual machines in this cluster. Can be one of `enabled` or
	// `disabled`. Default: `enabled`.
	// <sup>\*</sup>
	HaVmComponentProtection *string `pulumi:"haVmComponentProtection"`
	// The condition used to
	// determine whether or not virtual machines in a certain restart priority class
	// are online, allowing HA to move on to restarting virtual machines on the next
	// priority. Can be one of `none`, `poweredOn`, `guestHbStatusGreen`, or
	// `appHbStatusGreen`. The default is `none`, which means that a virtual machine
	// is considered ready immediately after a host is found to start it on.
	// <sup>\*</sup>
	HaVmDependencyRestartCondition *string `pulumi:"haVmDependencyRestartCondition"`
	// If a heartbeat from a virtual machine
	// is not received within this configured interval, the virtual machine is
	// marked as failed. The value is in seconds. Default: `30`.
	HaVmFailureInterval *int `pulumi:"haVmFailureInterval"`
	// The length of the reset window in
	// which `haVmMaximumResets` can operate. When this
	// window expires, no more resets are attempted regardless of the setting
	// configured in `haVmMaximumResets`. `-1` means no window, meaning an
	// unlimited reset time is allotted. The value is specified in seconds. Default:
	// `-1` (no window).
	HaVmMaximumFailureWindow *int `pulumi:"haVmMaximumFailureWindow"`
	// The maximum number of resets that HA will
	// perform to a virtual machine when responding to a failure event. Default: `3`
	HaVmMaximumResets *int `pulumi:"haVmMaximumResets"`
	// The time, in seconds, that HA waits after
	// powering on a virtual machine before monitoring for heartbeats. Default:
	// `120` (2 minutes).
	HaVmMinimumUptime *int `pulumi:"haVmMinimumUptime"`
	// The type of virtual machine monitoring to use
	// when HA is enabled in the cluster. Can be one of `vmMonitoringDisabled`,
	// `vmMonitoringOnly`, or `vmAndAppMonitoring`. Default: `vmMonitoringDisabled`.
	HaVmMonitoring *string `pulumi:"haVmMonitoring"`
	// Additional delay in seconds
	// after ready condition is met. A VM is considered ready at this point.
	// Default: `0` (no delay). <sup>\*</sup>
	HaVmRestartAdditionalDelay *int `pulumi:"haVmRestartAdditionalDelay"`
	// The default restart priority
	// for affected virtual machines when vSphere detects a host failure. Can be one
	// of `lowest`, `low`, `medium`, `high`, or `highest`. Default: `medium`.
	HaVmRestartPriority *string `pulumi:"haVmRestartPriority"`
	// The maximum time, in seconds,
	// that vSphere HA will wait for virtual machines in one priority to be ready
	// before proceeding with the next priority. Default: `600` (10 minutes).
	// <sup>\*</sup>
	HaVmRestartTimeout *int `pulumi:"haVmRestartTimeout"`
	// The timeout for each host maintenance mode
	// operation when removing hosts from a cluster. The value is specified in
	// seconds. Default: `3600` (1 hour).
	HostClusterExitTimeout *int `pulumi:"hostClusterExitTimeout"`
	// The [managed object IDs][docs-about-morefs] of
	// the hosts to put in the cluster.
	HostSystemIds []string `pulumi:"hostSystemIds"`
	// The name of the cluster.
	Name *string `pulumi:"name"`
	// Determines how the host
	// quarantine, maintenance mode, or virtual machine migration recommendations
	// made by proactive HA are to be handled. Can be one of `Automated` or
	// `Manual`. Default: `Manual`. <sup>\*</sup>
	ProactiveHaAutomationLevel *string `pulumi:"proactiveHaAutomationLevel"`
	// Enables Proactive HA. Default: `false`.
	// <sup>\*</sup>
	ProactiveHaEnabled *bool `pulumi:"proactiveHaEnabled"`
	// The configured remediation
	// for moderately degraded hosts. Can be one of `MaintenanceMode` or
	// `QuarantineMode`. Note that this cannot be set to `MaintenanceMode` when
	// `proactiveHaSevereRemediation` is set
	// to `QuarantineMode`. Default: `QuarantineMode`.
	// <sup>\*</sup>
	ProactiveHaModerateRemediation *string `pulumi:"proactiveHaModerateRemediation"`
	// The list of IDs for health update
	// providers configured for this cluster.
	// <sup>\*</sup>
	ProactiveHaProviderIds []string `pulumi:"proactiveHaProviderIds"`
	// The configured remediation for
	// severely degraded hosts. Can be one of `MaintenanceMode` or `QuarantineMode`.
	// Note that this cannot be set to `QuarantineMode` when
	// `proactiveHaModerateRemediation` is
	// set to `MaintenanceMode`. Default: `QuarantineMode`.
	// <sup>\*</sup>
	ProactiveHaSevereRemediation *string `pulumi:"proactiveHaSevereRemediation"`
	// The IDs of any tags to attach to this resource. See
	// [here][docs-applying-tags] for a reference on how to apply tags.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ComputeCluster resource.
type ComputeClusterArgs struct {
	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	CustomAttributes pulumi.StringMapInput
	// The [managed object ID][docs-about-morefs] of
	// the datacenter to create the cluster in. Forces a new resource if changed.
	DatacenterId pulumi.StringInput
	// The automation level for host power
	// operations in this cluster. Can be one of `manual` or `automated`. Default:
	// `manual`.
	DpmAutomationLevel pulumi.StringPtrInput
	// Enable DPM support for DRS in this cluster.
	// Requires `drsEnabled` to be `true` in order to be effective.
	// Default: `false`.
	DpmEnabled pulumi.BoolPtrInput
	// A value between `1` and `5` indicating the
	// threshold of load within the cluster that influences host power operations.
	// This affects both power on and power off operations - a lower setting will
	// tolerate more of a surplus/deficit than a higher setting. Default: `3`.
	DpmThreshold pulumi.IntPtrInput
	// A key/value map that specifies advanced
	// options for DRS and DPM.
	DrsAdvancedOptions pulumi.StringMapInput
	// The default automation level for all
	// virtual machines in this cluster. Can be one of `manual`,
	// `partiallyAutomated`, or `fullyAutomated`. Default: `manual`.
	DrsAutomationLevel pulumi.StringPtrInput
	// When `true`, enables DRS to use data
	// from [vRealize Operations Manager][ref-vsphere-vro] to make proactive DRS
	// recommendations. <sup>\*</sup>
	DrsEnablePredictiveDrs pulumi.BoolPtrInput
	// Allow individual DRS overrides to be
	// set for virtual machines in the cluster. Default: `true`.
	DrsEnableVmOverrides pulumi.BoolPtrInput
	// Enable DRS for this cluster. Default: `false`.
	DrsEnabled pulumi.BoolPtrInput
	// A value between `1` and `5` indicating
	// the threshold of imbalance tolerated between hosts. A lower setting will
	// tolerate more imbalance while a higher setting will tolerate less. Default:
	// `3`.
	DrsMigrationThreshold pulumi.IntPtrInput
	// The name of the folder to locate the cluster in.
	Folder pulumi.StringPtrInput
	// Force removal of all hosts in the cluster during destroy and make them standalone hosts. Use of this flag mainly exists
	// for testing and is not recommended in normal use.
	ForceEvacuateOnDestroy pulumi.BoolPtrInput
	// Defines the
	// [managed object IDs][docs-about-morefs] of hosts to use as dedicated failover
	// hosts. These hosts are kept as available as possible - admission control will
	// block access to the host, and DRS will ignore the host when making
	// recommendations.
	HaAdmissionControlFailoverHostSystemIds pulumi.StringArrayInput
	// The maximum number
	// of failed hosts that admission control tolerates when making decisions on
	// whether to permit virtual machine operations. The maximum is one less than
	// the number of hosts in the cluster. Default: `1`.
	// <sup>\*</sup>
	HaAdmissionControlHostFailureTolerance pulumi.IntPtrInput
	// The percentage of
	// resource reduction that a cluster of virtual machines can tolerate in case of
	// a failover. A value of 0 produces warnings only, whereas a value of 100
	// disables the setting. Default: `100` (disabled).
	HaAdmissionControlPerformanceTolerance pulumi.IntPtrInput
	// The type of admission control
	// policy to use with vSphere HA. Can be one of `resourcePercentage`,
	// `slotPolicy`, `failoverHosts`, or `disabled`. Default: `resourcePercentage`.
	HaAdmissionControlPolicy pulumi.StringPtrInput
	//
	// Automatically determine available resource percentages by subtracting the
	// average number of host resources represented by the
	// `haAdmissionControlHostFailureTolerance`
	// setting from the total amount of resources in the cluster. Disable to supply
	// user-defined values. Default: `true`.
	// <sup>\*</sup>
	HaAdmissionControlResourcePercentageAutoCompute pulumi.BoolPtrInput
	// Controls the
	// user-defined percentage of CPU resources in the cluster to reserve for
	// failover. Default: `100`.
	HaAdmissionControlResourcePercentageCpu pulumi.IntPtrInput
	// Controls the
	// user-defined percentage of memory resources in the cluster to reserve for
	// failover. Default: `100`.
	HaAdmissionControlResourcePercentageMemory pulumi.IntPtrInput
	// Controls the
	// user-defined CPU slot size, in MHz. Default: `32`.
	HaAdmissionControlSlotPolicyExplicitCpu pulumi.IntPtrInput
	// Controls the
	// user-defined memory slot size, in MB. Default: `100`.
	HaAdmissionControlSlotPolicyExplicitMemory pulumi.IntPtrInput
	// Controls
	// whether or not you wish to supply explicit values to CPU and memory slot
	// sizes. The default is `false`, which tells vSphere to gather a automatic
	// average based on all powered-on virtual machines currently in the cluster.
	HaAdmissionControlSlotPolicyUseExplicitSize pulumi.BoolPtrInput
	// A key/value map that specifies advanced
	// options for vSphere HA.
	HaAdvancedOptions pulumi.StringMapInput
	// Controls the action to take
	// on virtual machines if an APD status on an affected datastore clears in the
	// middle of an APD event. Can be one of `none` or `reset`. Default: `none`.
	// <sup>\*</sup>
	HaDatastoreApdRecoveryAction pulumi.StringPtrInput
	// Controls the action to take on
	// virtual machines when the cluster has detected loss to all paths to a
	// relevant datastore. Can be one of `disabled`, `warning`,
	// `restartConservative`, or `restartAggressive`.  Default: `disabled`.
	// <sup>\*</sup>
	HaDatastoreApdResponse pulumi.StringPtrInput
	// Controls the delay in minutes
	// to wait after an APD timeout event to execute the response action defined in
	// `haDatastoreApdResponse`. Default: `3`
	// minutes. <sup>\*</sup>
	HaDatastoreApdResponseDelay pulumi.IntPtrInput
	// Controls the action to take on
	// virtual machines when the cluster has detected a permanent device loss to a
	// relevant datastore. Can be one of `disabled`, `warning`, or
	// `restartAggressive`. Default: `disabled`.
	// <sup>\*</sup>
	HaDatastorePdlResponse pulumi.StringPtrInput
	// Enable vSphere HA for this cluster. Default:
	// `false`.
	HaEnabled pulumi.BoolPtrInput
	// The list of managed object IDs for
	// preferred datastores to use for HA heartbeating. This setting is only useful
	// when `haHeartbeatDatastorePolicy` is set
	// to either `userSelectedDs` or `allFeasibleDsWithUserPreference`.
	HaHeartbeatDatastoreIds pulumi.StringArrayInput
	// The selection policy for HA
	// heartbeat datastores. Can be one of `allFeasibleDs`, `userSelectedDs`, or
	// `allFeasibleDsWithUserPreference`. Default:
	// `allFeasibleDsWithUserPreference`.
	HaHeartbeatDatastorePolicy pulumi.StringPtrInput
	// The action to take on virtual
	// machines when a host has detected that it has been isolated from the rest of
	// the cluster. Can be one of `none`, `powerOff`, or `shutdown`. Default:
	// `none`.
	HaHostIsolationResponse pulumi.StringPtrInput
	// Global setting that controls whether
	// vSphere HA remediates virtual machines on host failure. Can be one of `enabled`
	// or `disabled`. Default: `enabled`.
	HaHostMonitoring pulumi.StringPtrInput
	// Controls vSphere VM component
	// protection for virtual machines in this cluster. Can be one of `enabled` or
	// `disabled`. Default: `enabled`.
	// <sup>\*</sup>
	HaVmComponentProtection pulumi.StringPtrInput
	// The condition used to
	// determine whether or not virtual machines in a certain restart priority class
	// are online, allowing HA to move on to restarting virtual machines on the next
	// priority. Can be one of `none`, `poweredOn`, `guestHbStatusGreen`, or
	// `appHbStatusGreen`. The default is `none`, which means that a virtual machine
	// is considered ready immediately after a host is found to start it on.
	// <sup>\*</sup>
	HaVmDependencyRestartCondition pulumi.StringPtrInput
	// If a heartbeat from a virtual machine
	// is not received within this configured interval, the virtual machine is
	// marked as failed. The value is in seconds. Default: `30`.
	HaVmFailureInterval pulumi.IntPtrInput
	// The length of the reset window in
	// which `haVmMaximumResets` can operate. When this
	// window expires, no more resets are attempted regardless of the setting
	// configured in `haVmMaximumResets`. `-1` means no window, meaning an
	// unlimited reset time is allotted. The value is specified in seconds. Default:
	// `-1` (no window).
	HaVmMaximumFailureWindow pulumi.IntPtrInput
	// The maximum number of resets that HA will
	// perform to a virtual machine when responding to a failure event. Default: `3`
	HaVmMaximumResets pulumi.IntPtrInput
	// The time, in seconds, that HA waits after
	// powering on a virtual machine before monitoring for heartbeats. Default:
	// `120` (2 minutes).
	HaVmMinimumUptime pulumi.IntPtrInput
	// The type of virtual machine monitoring to use
	// when HA is enabled in the cluster. Can be one of `vmMonitoringDisabled`,
	// `vmMonitoringOnly`, or `vmAndAppMonitoring`. Default: `vmMonitoringDisabled`.
	HaVmMonitoring pulumi.StringPtrInput
	// Additional delay in seconds
	// after ready condition is met. A VM is considered ready at this point.
	// Default: `0` (no delay). <sup>\*</sup>
	HaVmRestartAdditionalDelay pulumi.IntPtrInput
	// The default restart priority
	// for affected virtual machines when vSphere detects a host failure. Can be one
	// of `lowest`, `low`, `medium`, `high`, or `highest`. Default: `medium`.
	HaVmRestartPriority pulumi.StringPtrInput
	// The maximum time, in seconds,
	// that vSphere HA will wait for virtual machines in one priority to be ready
	// before proceeding with the next priority. Default: `600` (10 minutes).
	// <sup>\*</sup>
	HaVmRestartTimeout pulumi.IntPtrInput
	// The timeout for each host maintenance mode
	// operation when removing hosts from a cluster. The value is specified in
	// seconds. Default: `3600` (1 hour).
	HostClusterExitTimeout pulumi.IntPtrInput
	// The [managed object IDs][docs-about-morefs] of
	// the hosts to put in the cluster.
	HostSystemIds pulumi.StringArrayInput
	// The name of the cluster.
	Name pulumi.StringPtrInput
	// Determines how the host
	// quarantine, maintenance mode, or virtual machine migration recommendations
	// made by proactive HA are to be handled. Can be one of `Automated` or
	// `Manual`. Default: `Manual`. <sup>\*</sup>
	ProactiveHaAutomationLevel pulumi.StringPtrInput
	// Enables Proactive HA. Default: `false`.
	// <sup>\*</sup>
	ProactiveHaEnabled pulumi.BoolPtrInput
	// The configured remediation
	// for moderately degraded hosts. Can be one of `MaintenanceMode` or
	// `QuarantineMode`. Note that this cannot be set to `MaintenanceMode` when
	// `proactiveHaSevereRemediation` is set
	// to `QuarantineMode`. Default: `QuarantineMode`.
	// <sup>\*</sup>
	ProactiveHaModerateRemediation pulumi.StringPtrInput
	// The list of IDs for health update
	// providers configured for this cluster.
	// <sup>\*</sup>
	ProactiveHaProviderIds pulumi.StringArrayInput
	// The configured remediation for
	// severely degraded hosts. Can be one of `MaintenanceMode` or `QuarantineMode`.
	// Note that this cannot be set to `QuarantineMode` when
	// `proactiveHaModerateRemediation` is
	// set to `MaintenanceMode`. Default: `QuarantineMode`.
	// <sup>\*</sup>
	ProactiveHaSevereRemediation pulumi.StringPtrInput
	// The IDs of any tags to attach to this resource. See
	// [here][docs-applying-tags] for a reference on how to apply tags.
	Tags pulumi.StringArrayInput
}

func (ComputeClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeClusterArgs)(nil)).Elem()
}
