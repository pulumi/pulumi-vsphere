// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **A note on the naming of this resource:** VMware refers to clusters of
// hosts in the UI and documentation as _clusters_, _HA clusters_, or _DRS
// clusters_. All of these refer to the same kind of resource (with the latter two
// referring to specific features of clustering). We use
// `ComputeCluster` to differentiate host clusters from _datastore
// clusters_, which are clusters of datastores that can be used to distribute load
// and ensure fault tolerance via distribution of virtual machines. Datastore
// clusters can also be managed through the provider, via the
// `DatastoreCluster` resource.
//
// The `ComputeCluster` resource can be used to create and manage
// clusters of hosts allowing for resource control of compute resources, load
// balancing through DRS, and high availability through vSphere HA.
//
// For more information on vSphere clusters and DRS, see [this
// page][ref-vsphere-drs-clusters]. For more information on vSphere HA, see [this
// page][ref-vsphere-ha-clusters].
//
// > **NOTE:** This resource requires vCenter and is not available on
// direct ESXi connections.
//
// ## Import
//
// # An existing cluster can be imported into this resource via the
//
// path to the cluster, via the following command:
//
// hcl
//
// variable "datacenter" {
//
//	default = "dc-01"
//
// }
//
// data "vsphere_datacenter" "datacenter" {
//
//	name = var.datacenter
//
// }
//
// resource "vsphere_compute_cluster" "compute_cluster" {
//
//	name            = "cluster-01"
//
//	datacenter_id   = data.vsphere_datacenter.datacenter.id
//
// }
//
// hcl
//
// resource "vsphere_compute_cluster" "compute_cluster" {
//
//	name                      = "cluster-01"
//
//	datacenter_id             = data.vsphere_datacenter.datacenter.id
//
//	vsan_enabled              = true
//
//	vsan_performance_enabled  = true
//
//	host_system_ids           = [for host in data.vsphere_host.host : host.id]
//
//	dpm_automation_level      = "automated"
//
//	drs_automation_level      = "fullyAutomated"
//
//	drs_enabled               = true
//
//	ha_datastore_apd_response = "restartConservative"
//
//	ha_datastore_pdl_response = "restartAggressive"
//
//	... etc.
//
// console
//
// ```sh
// $ pulumi import vsphere:index/computeCluster:ComputeCluster compute_cluster /dc-01/host/cluster-01
// ```
//
// # The above would import the cluster named `cluster-01` that is located in
//
// the `dc-01` datacenter.
//
// [ref-vsphere-drs-clusters]: https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-resource-management/GUID-8ACF3502-5314-469F-8CC9-4A9BD5925BC2.html
// [ref-vsphere-ha-clusters]: https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-availability/GUID-5432CA24-14F1-44E3-87FB-61D937831CF6.html
type ComputeCluster struct {
	pulumi.CustomResourceState

	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster.
	//
	// > **NOTE:** Custom attributes are unsupported on direct ESXi connections
	// and require vCenter Server.
	CustomAttributes pulumi.StringMapOutput `pulumi:"customAttributes"`
	// The managed object ID of
	// the datacenter to create the cluster in. Forces a new resource if changed.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// The automation level for host power operations in this cluster. Can be one of manual or automated.
	DpmAutomationLevel pulumi.StringPtrOutput `pulumi:"dpmAutomationLevel"`
	// Enable DPM support for DRS. This allows you to dynamically control the power of hosts depending on the needs of virtual
	// machines in the cluster. Requires that DRS be enabled.
	DpmEnabled pulumi.BoolPtrOutput `pulumi:"dpmEnabled"`
	// A value between 1 and 5 indicating the threshold of load within the cluster that influences host power operations. This
	// affects both power on and power off operations - a lower setting will tolerate more of a surplus/deficit than a higher
	// setting.
	DpmThreshold pulumi.IntPtrOutput `pulumi:"dpmThreshold"`
	// Advanced configuration options for DRS and DPM.
	DrsAdvancedOptions pulumi.StringMapOutput `pulumi:"drsAdvancedOptions"`
	// The default automation level for all virtual machines in this cluster. Can be one of manual, partiallyAutomated, or
	// fullyAutomated.
	DrsAutomationLevel pulumi.StringPtrOutput `pulumi:"drsAutomationLevel"`
	// When true, enables DRS to use data from vRealize Operations Manager to make proactive DRS recommendations.
	DrsEnablePredictiveDrs pulumi.BoolPtrOutput `pulumi:"drsEnablePredictiveDrs"`
	// When true, allows individual VM overrides within this cluster to be set.
	DrsEnableVmOverrides pulumi.BoolPtrOutput `pulumi:"drsEnableVmOverrides"`
	// Enable DRS for this cluster.
	DrsEnabled pulumi.BoolPtrOutput `pulumi:"drsEnabled"`
	// A value between 1 and 5 indicating the threshold of imbalance tolerated between hosts. A lower setting will tolerate
	// more imbalance while a higher setting will tolerate less.
	DrsMigrationThreshold pulumi.IntPtrOutput `pulumi:"drsMigrationThreshold"`
	// Enable scalable shares for all descendants of this cluster.
	DrsScaleDescendantsShares pulumi.StringPtrOutput `pulumi:"drsScaleDescendantsShares"`
	// The relative path to a folder to put this cluster in.
	// This is a path relative to the datacenter you are deploying the cluster to.
	// Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
	// The provider will place a cluster named `compute-cluster-test` in a
	// host folder located at `/dc1/host/foo/bar`, with the final inventory path
	// being `/dc1/host/foo/bar/datastore-cluster-test`.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// Force removal of all hosts in the cluster during destroy and make them standalone hosts. Use of this flag mainly exists
	// for testing and is not recommended in normal use.
	ForceEvacuateOnDestroy pulumi.BoolPtrOutput `pulumi:"forceEvacuateOnDestroy"`
	// When haAdmissionControlPolicy is failoverHosts, this defines the managed object IDs of hosts to use as dedicated
	// failover hosts. These hosts are kept as available as possible - admission control will block access to the host, and DRS
	// will ignore the host when making recommendations.
	HaAdmissionControlFailoverHostSystemIds pulumi.StringArrayOutput `pulumi:"haAdmissionControlFailoverHostSystemIds"`
	// The maximum number of failed hosts that admission control tolerates when making decisions on whether to permit virtual
	// machine operations. The maximum is one less than the number of hosts in the cluster.
	HaAdmissionControlHostFailureTolerance pulumi.IntPtrOutput `pulumi:"haAdmissionControlHostFailureTolerance"`
	// The percentage of resource reduction that a cluster of VMs can tolerate in case of a failover. A value of 0 produces
	// warnings only, whereas a value of 100 disables the setting.
	HaAdmissionControlPerformanceTolerance pulumi.IntPtrOutput `pulumi:"haAdmissionControlPerformanceTolerance"`
	// The type of admission control policy to use with vSphere HA, which controls whether or not specific VM operations are
	// permitted in the cluster in order to protect the reliability of the cluster. Can be one of resourcePercentage,
	// slotPolicy, failoverHosts, or disabled. Note that disabling admission control is not recommended and can lead to service
	// issues.
	HaAdmissionControlPolicy pulumi.StringPtrOutput `pulumi:"haAdmissionControlPolicy"`
	// When haAdmissionControlPolicy is resourcePercentage, automatically determine available resource percentages by
	// subtracting the average number of host resources represented by the haAdmissionControlHostFailureTolerance setting from
	// the total amount of resources in the cluster. Disable to supply user-defined values.
	HaAdmissionControlResourcePercentageAutoCompute pulumi.BoolPtrOutput `pulumi:"haAdmissionControlResourcePercentageAutoCompute"`
	// When haAdmissionControlPolicy is resourcePercentage, this controls the user-defined percentage of CPU resources in the
	// cluster to reserve for failover.
	HaAdmissionControlResourcePercentageCpu pulumi.IntPtrOutput `pulumi:"haAdmissionControlResourcePercentageCpu"`
	// When haAdmissionControlPolicy is resourcePercentage, this controls the user-defined percentage of memory resources in
	// the cluster to reserve for failover.
	HaAdmissionControlResourcePercentageMemory pulumi.IntPtrOutput `pulumi:"haAdmissionControlResourcePercentageMemory"`
	// When haAdmissionControlPolicy is slotPolicy, this controls the user-defined CPU slot size, in MHz.
	HaAdmissionControlSlotPolicyExplicitCpu pulumi.IntPtrOutput `pulumi:"haAdmissionControlSlotPolicyExplicitCpu"`
	// When haAdmissionControlPolicy is slotPolicy, this controls the user-defined memory slot size, in MB.
	HaAdmissionControlSlotPolicyExplicitMemory pulumi.IntPtrOutput `pulumi:"haAdmissionControlSlotPolicyExplicitMemory"`
	// When haAdmissionControlPolicy is slotPolicy, this setting controls whether or not you wish to supply explicit values to
	// CPU and memory slot sizes. The default is to gather a automatic average based on all powered-on virtual machines
	// currently in the cluster.
	HaAdmissionControlSlotPolicyUseExplicitSize pulumi.BoolPtrOutput `pulumi:"haAdmissionControlSlotPolicyUseExplicitSize"`
	// Advanced configuration options for vSphere HA.
	HaAdvancedOptions pulumi.StringMapOutput `pulumi:"haAdvancedOptions"`
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines if an APD status on an affected
	// datastore clears in the middle of an APD event. Can be one of none or reset.
	HaDatastoreApdRecoveryAction pulumi.StringPtrOutput `pulumi:"haDatastoreApdRecoveryAction"`
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines when the cluster has detected
	// loss to all paths to a relevant datastore. Can be one of disabled, warning, restartConservative, or restartAggressive.
	HaDatastoreApdResponse pulumi.StringPtrOutput `pulumi:"haDatastoreApdResponse"`
	// When haVmComponentProtection is enabled, controls the delay in seconds to wait after an APD timeout event to execute the
	// response action defined in ha_datastore_apd_response.
	HaDatastoreApdResponseDelay pulumi.IntPtrOutput `pulumi:"haDatastoreApdResponseDelay"`
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines when the cluster has detected a
	// permanent device loss to a relevant datastore. Can be one of disabled, warning, or restartAggressive.
	HaDatastorePdlResponse pulumi.StringPtrOutput `pulumi:"haDatastorePdlResponse"`
	// Enable vSphere HA for this cluster.
	HaEnabled pulumi.BoolPtrOutput `pulumi:"haEnabled"`
	// The list of managed object IDs for preferred datastores to use for HA heartbeating. This setting is only useful when
	// haHeartbeatDatastorePolicy is set to either userSelectedDs or allFeasibleDsWithUserPreference.
	HaHeartbeatDatastoreIds pulumi.StringArrayOutput `pulumi:"haHeartbeatDatastoreIds"`
	// The selection policy for HA heartbeat datastores. Can be one of allFeasibleDs, userSelectedDs, or
	// allFeasibleDsWithUserPreference.
	HaHeartbeatDatastorePolicy pulumi.StringPtrOutput `pulumi:"haHeartbeatDatastorePolicy"`
	// The action to take on virtual machines when a host has detected that it has been isolated from the rest of the cluster.
	// Can be one of none, powerOff, or shutdown.
	HaHostIsolationResponse pulumi.StringPtrOutput `pulumi:"haHostIsolationResponse"`
	// Global setting that controls whether vSphere HA remediates VMs on host failure. Can be one of enabled or disabled.
	HaHostMonitoring pulumi.StringPtrOutput `pulumi:"haHostMonitoring"`
	// Controls vSphere VM component protection for virtual machines in this cluster. This allows vSphere HA to react to
	// failures between hosts and specific virtual machine components, such as datastores. Can be one of enabled or disabled.
	HaVmComponentProtection pulumi.StringPtrOutput `pulumi:"haVmComponentProtection"`
	// The condition used to determine whether or not VMs in a certain restart priority class are online, allowing HA to move
	// on to restarting VMs on the next priority. Can be one of none, poweredOn, guestHbStatusGreen, or appHbStatusGreen.
	HaVmDependencyRestartCondition pulumi.StringPtrOutput `pulumi:"haVmDependencyRestartCondition"`
	// If a heartbeat from a virtual machine is not received within this configured interval, the virtual machine is marked as
	// failed. The value is in seconds.
	HaVmFailureInterval pulumi.IntPtrOutput `pulumi:"haVmFailureInterval"`
	// The length of the reset window in which haVmMaximumResets can operate. When this window expires, no more resets are
	// attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset
	// time is allotted.
	HaVmMaximumFailureWindow pulumi.IntPtrOutput `pulumi:"haVmMaximumFailureWindow"`
	// The maximum number of resets that HA will perform to a virtual machine when responding to a failure event.
	HaVmMaximumResets pulumi.IntPtrOutput `pulumi:"haVmMaximumResets"`
	// The time, in seconds, that HA waits after powering on a virtual machine before monitoring for heartbeats.
	HaVmMinimumUptime pulumi.IntPtrOutput `pulumi:"haVmMinimumUptime"`
	// The type of virtual machine monitoring to use when HA is enabled in the cluster. Can be one of vmMonitoringDisabled,
	// vmMonitoringOnly, or vmAndAppMonitoring.
	HaVmMonitoring pulumi.StringPtrOutput `pulumi:"haVmMonitoring"`
	// Additional delay in seconds after ready condition is met. A VM is considered ready at this point.
	HaVmRestartAdditionalDelay pulumi.IntPtrOutput `pulumi:"haVmRestartAdditionalDelay"`
	// The default restart priority for affected VMs when vSphere detects a host failure. Can be one of lowest, low, medium,
	// high, or highest.
	HaVmRestartPriority pulumi.StringPtrOutput `pulumi:"haVmRestartPriority"`
	// The maximum time, in seconds, that vSphere HA will wait for virtual machines in one priority to be ready before
	// proceeding with the next priority.
	HaVmRestartTimeout pulumi.IntPtrOutput `pulumi:"haVmRestartTimeout"`
	// The timeout for each host maintenance mode operation when removing hosts from a cluster.
	HostClusterExitTimeout pulumi.IntPtrOutput `pulumi:"hostClusterExitTimeout"`
	// Details about the host image which should be applied to the cluster.
	HostImage ComputeClusterHostImagePtrOutput `pulumi:"hostImage"`
	// Must be set if cluster enrollment is managed from host resource.
	HostManaged pulumi.BoolPtrOutput `pulumi:"hostManaged"`
	// The managed object IDs of the hosts to put in the cluster.
	HostSystemIds pulumi.StringArrayOutput `pulumi:"hostSystemIds"`
	// The name of the cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// The DRS behavior for proactive HA recommendations. Can be one of Automated or Manual.
	ProactiveHaAutomationLevel pulumi.StringPtrOutput `pulumi:"proactiveHaAutomationLevel"`
	// Enables proactive HA, allowing for vSphere to get HA data from external providers and use DRS to perform remediation.
	ProactiveHaEnabled pulumi.BoolPtrOutput `pulumi:"proactiveHaEnabled"`
	// The configured remediation for moderately degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that
	// this cannot be set to MaintenanceMode when proactiveHaSevereRemediation is set to QuarantineMode.
	ProactiveHaModerateRemediation pulumi.StringPtrOutput `pulumi:"proactiveHaModerateRemediation"`
	// The list of IDs for health update providers configured for this cluster.
	ProactiveHaProviderIds pulumi.StringArrayOutput `pulumi:"proactiveHaProviderIds"`
	// The configured remediation for severely degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that this
	// cannot be set to QuarantineMode when proactiveHaModerateRemediation is set to MaintenanceMode.
	ProactiveHaSevereRemediation pulumi.StringPtrOutput `pulumi:"proactiveHaSevereRemediation"`
	// The managed object ID of the primary
	// resource pool for this cluster. This can be passed directly to the
	// `resourcePoolId`
	// attribute of the
	// `VirtualMachine` resource.
	ResourcePoolId pulumi.StringOutput `pulumi:"resourcePoolId"`
	// The IDs of any tags to attach to this resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Whether the vSAN compression service is enabled for the cluster.
	VsanCompressionEnabled pulumi.BoolPtrOutput `pulumi:"vsanCompressionEnabled"`
	// Whether the vSAN deduplication service is enabled for the cluster.
	VsanDedupEnabled pulumi.BoolPtrOutput `pulumi:"vsanDedupEnabled"`
	// A list of disk UUIDs to add to the vSAN cluster.
	VsanDiskGroups ComputeClusterVsanDiskGroupArrayOutput `pulumi:"vsanDiskGroups"`
	// Whether the vSAN data-in-transit encryption is enabled for the cluster.
	VsanDitEncryptionEnabled pulumi.BoolPtrOutput `pulumi:"vsanDitEncryptionEnabled"`
	// When vsanDitEncryptionEnabled is enabled, sets the rekey interval of data-in-transit encryption (in minutes).
	VsanDitRekeyInterval pulumi.IntOutput `pulumi:"vsanDitRekeyInterval"`
	// Whether the vSAN service is enabled for the cluster.
	VsanEnabled pulumi.BoolPtrOutput `pulumi:"vsanEnabled"`
	// Whether the vSAN ESA service is enabled for the cluster.
	VsanEsaEnabled pulumi.BoolPtrOutput `pulumi:"vsanEsaEnabled"`
	// The configuration for vSAN fault domains.
	VsanFaultDomains ComputeClusterVsanFaultDomainArrayOutput `pulumi:"vsanFaultDomains"`
	// Whether the vSAN network diagnostic mode is enabled for the cluster.
	VsanNetworkDiagnosticModeEnabled pulumi.BoolPtrOutput `pulumi:"vsanNetworkDiagnosticModeEnabled"`
	// Whether the vSAN performance service is enabled for the cluster.
	VsanPerformanceEnabled pulumi.BoolPtrOutput `pulumi:"vsanPerformanceEnabled"`
	// The managed object IDs of the vSAN datastore to be mounted on the cluster.
	VsanRemoteDatastoreIds pulumi.StringArrayOutput `pulumi:"vsanRemoteDatastoreIds"`
	// The configuration for stretched cluster.
	VsanStretchedCluster ComputeClusterVsanStretchedClusterPtrOutput `pulumi:"vsanStretchedCluster"`
	// Whether the vSAN unmap service is enabled for the cluster.
	VsanUnmapEnabled pulumi.BoolPtrOutput `pulumi:"vsanUnmapEnabled"`
	// Whether the vSAN verbose mode is enabled for the cluster.
	VsanVerboseModeEnabled pulumi.BoolPtrOutput `pulumi:"vsanVerboseModeEnabled"`
}

// NewComputeCluster registers a new resource with the given unique name, arguments, and options.
func NewComputeCluster(ctx *pulumi.Context,
	name string, args *ComputeClusterArgs, opts ...pulumi.ResourceOption) (*ComputeCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComputeCluster
	err := ctx.RegisterResource("vsphere:index/computeCluster:ComputeCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeCluster gets an existing ComputeCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeClusterState, opts ...pulumi.ResourceOption) (*ComputeCluster, error) {
	var resource ComputeCluster
	err := ctx.ReadResource("vsphere:index/computeCluster:ComputeCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeCluster resources.
type computeClusterState struct {
	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster.
	//
	// > **NOTE:** Custom attributes are unsupported on direct ESXi connections
	// and require vCenter Server.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// The managed object ID of
	// the datacenter to create the cluster in. Forces a new resource if changed.
	DatacenterId *string `pulumi:"datacenterId"`
	// The automation level for host power operations in this cluster. Can be one of manual or automated.
	DpmAutomationLevel *string `pulumi:"dpmAutomationLevel"`
	// Enable DPM support for DRS. This allows you to dynamically control the power of hosts depending on the needs of virtual
	// machines in the cluster. Requires that DRS be enabled.
	DpmEnabled *bool `pulumi:"dpmEnabled"`
	// A value between 1 and 5 indicating the threshold of load within the cluster that influences host power operations. This
	// affects both power on and power off operations - a lower setting will tolerate more of a surplus/deficit than a higher
	// setting.
	DpmThreshold *int `pulumi:"dpmThreshold"`
	// Advanced configuration options for DRS and DPM.
	DrsAdvancedOptions map[string]string `pulumi:"drsAdvancedOptions"`
	// The default automation level for all virtual machines in this cluster. Can be one of manual, partiallyAutomated, or
	// fullyAutomated.
	DrsAutomationLevel *string `pulumi:"drsAutomationLevel"`
	// When true, enables DRS to use data from vRealize Operations Manager to make proactive DRS recommendations.
	DrsEnablePredictiveDrs *bool `pulumi:"drsEnablePredictiveDrs"`
	// When true, allows individual VM overrides within this cluster to be set.
	DrsEnableVmOverrides *bool `pulumi:"drsEnableVmOverrides"`
	// Enable DRS for this cluster.
	DrsEnabled *bool `pulumi:"drsEnabled"`
	// A value between 1 and 5 indicating the threshold of imbalance tolerated between hosts. A lower setting will tolerate
	// more imbalance while a higher setting will tolerate less.
	DrsMigrationThreshold *int `pulumi:"drsMigrationThreshold"`
	// Enable scalable shares for all descendants of this cluster.
	DrsScaleDescendantsShares *string `pulumi:"drsScaleDescendantsShares"`
	// The relative path to a folder to put this cluster in.
	// This is a path relative to the datacenter you are deploying the cluster to.
	// Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
	// The provider will place a cluster named `compute-cluster-test` in a
	// host folder located at `/dc1/host/foo/bar`, with the final inventory path
	// being `/dc1/host/foo/bar/datastore-cluster-test`.
	Folder *string `pulumi:"folder"`
	// Force removal of all hosts in the cluster during destroy and make them standalone hosts. Use of this flag mainly exists
	// for testing and is not recommended in normal use.
	ForceEvacuateOnDestroy *bool `pulumi:"forceEvacuateOnDestroy"`
	// When haAdmissionControlPolicy is failoverHosts, this defines the managed object IDs of hosts to use as dedicated
	// failover hosts. These hosts are kept as available as possible - admission control will block access to the host, and DRS
	// will ignore the host when making recommendations.
	HaAdmissionControlFailoverHostSystemIds []string `pulumi:"haAdmissionControlFailoverHostSystemIds"`
	// The maximum number of failed hosts that admission control tolerates when making decisions on whether to permit virtual
	// machine operations. The maximum is one less than the number of hosts in the cluster.
	HaAdmissionControlHostFailureTolerance *int `pulumi:"haAdmissionControlHostFailureTolerance"`
	// The percentage of resource reduction that a cluster of VMs can tolerate in case of a failover. A value of 0 produces
	// warnings only, whereas a value of 100 disables the setting.
	HaAdmissionControlPerformanceTolerance *int `pulumi:"haAdmissionControlPerformanceTolerance"`
	// The type of admission control policy to use with vSphere HA, which controls whether or not specific VM operations are
	// permitted in the cluster in order to protect the reliability of the cluster. Can be one of resourcePercentage,
	// slotPolicy, failoverHosts, or disabled. Note that disabling admission control is not recommended and can lead to service
	// issues.
	HaAdmissionControlPolicy *string `pulumi:"haAdmissionControlPolicy"`
	// When haAdmissionControlPolicy is resourcePercentage, automatically determine available resource percentages by
	// subtracting the average number of host resources represented by the haAdmissionControlHostFailureTolerance setting from
	// the total amount of resources in the cluster. Disable to supply user-defined values.
	HaAdmissionControlResourcePercentageAutoCompute *bool `pulumi:"haAdmissionControlResourcePercentageAutoCompute"`
	// When haAdmissionControlPolicy is resourcePercentage, this controls the user-defined percentage of CPU resources in the
	// cluster to reserve for failover.
	HaAdmissionControlResourcePercentageCpu *int `pulumi:"haAdmissionControlResourcePercentageCpu"`
	// When haAdmissionControlPolicy is resourcePercentage, this controls the user-defined percentage of memory resources in
	// the cluster to reserve for failover.
	HaAdmissionControlResourcePercentageMemory *int `pulumi:"haAdmissionControlResourcePercentageMemory"`
	// When haAdmissionControlPolicy is slotPolicy, this controls the user-defined CPU slot size, in MHz.
	HaAdmissionControlSlotPolicyExplicitCpu *int `pulumi:"haAdmissionControlSlotPolicyExplicitCpu"`
	// When haAdmissionControlPolicy is slotPolicy, this controls the user-defined memory slot size, in MB.
	HaAdmissionControlSlotPolicyExplicitMemory *int `pulumi:"haAdmissionControlSlotPolicyExplicitMemory"`
	// When haAdmissionControlPolicy is slotPolicy, this setting controls whether or not you wish to supply explicit values to
	// CPU and memory slot sizes. The default is to gather a automatic average based on all powered-on virtual machines
	// currently in the cluster.
	HaAdmissionControlSlotPolicyUseExplicitSize *bool `pulumi:"haAdmissionControlSlotPolicyUseExplicitSize"`
	// Advanced configuration options for vSphere HA.
	HaAdvancedOptions map[string]string `pulumi:"haAdvancedOptions"`
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines if an APD status on an affected
	// datastore clears in the middle of an APD event. Can be one of none or reset.
	HaDatastoreApdRecoveryAction *string `pulumi:"haDatastoreApdRecoveryAction"`
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines when the cluster has detected
	// loss to all paths to a relevant datastore. Can be one of disabled, warning, restartConservative, or restartAggressive.
	HaDatastoreApdResponse *string `pulumi:"haDatastoreApdResponse"`
	// When haVmComponentProtection is enabled, controls the delay in seconds to wait after an APD timeout event to execute the
	// response action defined in ha_datastore_apd_response.
	HaDatastoreApdResponseDelay *int `pulumi:"haDatastoreApdResponseDelay"`
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines when the cluster has detected a
	// permanent device loss to a relevant datastore. Can be one of disabled, warning, or restartAggressive.
	HaDatastorePdlResponse *string `pulumi:"haDatastorePdlResponse"`
	// Enable vSphere HA for this cluster.
	HaEnabled *bool `pulumi:"haEnabled"`
	// The list of managed object IDs for preferred datastores to use for HA heartbeating. This setting is only useful when
	// haHeartbeatDatastorePolicy is set to either userSelectedDs or allFeasibleDsWithUserPreference.
	HaHeartbeatDatastoreIds []string `pulumi:"haHeartbeatDatastoreIds"`
	// The selection policy for HA heartbeat datastores. Can be one of allFeasibleDs, userSelectedDs, or
	// allFeasibleDsWithUserPreference.
	HaHeartbeatDatastorePolicy *string `pulumi:"haHeartbeatDatastorePolicy"`
	// The action to take on virtual machines when a host has detected that it has been isolated from the rest of the cluster.
	// Can be one of none, powerOff, or shutdown.
	HaHostIsolationResponse *string `pulumi:"haHostIsolationResponse"`
	// Global setting that controls whether vSphere HA remediates VMs on host failure. Can be one of enabled or disabled.
	HaHostMonitoring *string `pulumi:"haHostMonitoring"`
	// Controls vSphere VM component protection for virtual machines in this cluster. This allows vSphere HA to react to
	// failures between hosts and specific virtual machine components, such as datastores. Can be one of enabled or disabled.
	HaVmComponentProtection *string `pulumi:"haVmComponentProtection"`
	// The condition used to determine whether or not VMs in a certain restart priority class are online, allowing HA to move
	// on to restarting VMs on the next priority. Can be one of none, poweredOn, guestHbStatusGreen, or appHbStatusGreen.
	HaVmDependencyRestartCondition *string `pulumi:"haVmDependencyRestartCondition"`
	// If a heartbeat from a virtual machine is not received within this configured interval, the virtual machine is marked as
	// failed. The value is in seconds.
	HaVmFailureInterval *int `pulumi:"haVmFailureInterval"`
	// The length of the reset window in which haVmMaximumResets can operate. When this window expires, no more resets are
	// attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset
	// time is allotted.
	HaVmMaximumFailureWindow *int `pulumi:"haVmMaximumFailureWindow"`
	// The maximum number of resets that HA will perform to a virtual machine when responding to a failure event.
	HaVmMaximumResets *int `pulumi:"haVmMaximumResets"`
	// The time, in seconds, that HA waits after powering on a virtual machine before monitoring for heartbeats.
	HaVmMinimumUptime *int `pulumi:"haVmMinimumUptime"`
	// The type of virtual machine monitoring to use when HA is enabled in the cluster. Can be one of vmMonitoringDisabled,
	// vmMonitoringOnly, or vmAndAppMonitoring.
	HaVmMonitoring *string `pulumi:"haVmMonitoring"`
	// Additional delay in seconds after ready condition is met. A VM is considered ready at this point.
	HaVmRestartAdditionalDelay *int `pulumi:"haVmRestartAdditionalDelay"`
	// The default restart priority for affected VMs when vSphere detects a host failure. Can be one of lowest, low, medium,
	// high, or highest.
	HaVmRestartPriority *string `pulumi:"haVmRestartPriority"`
	// The maximum time, in seconds, that vSphere HA will wait for virtual machines in one priority to be ready before
	// proceeding with the next priority.
	HaVmRestartTimeout *int `pulumi:"haVmRestartTimeout"`
	// The timeout for each host maintenance mode operation when removing hosts from a cluster.
	HostClusterExitTimeout *int `pulumi:"hostClusterExitTimeout"`
	// Details about the host image which should be applied to the cluster.
	HostImage *ComputeClusterHostImage `pulumi:"hostImage"`
	// Must be set if cluster enrollment is managed from host resource.
	HostManaged *bool `pulumi:"hostManaged"`
	// The managed object IDs of the hosts to put in the cluster.
	HostSystemIds []string `pulumi:"hostSystemIds"`
	// The name of the cluster.
	Name *string `pulumi:"name"`
	// The DRS behavior for proactive HA recommendations. Can be one of Automated or Manual.
	ProactiveHaAutomationLevel *string `pulumi:"proactiveHaAutomationLevel"`
	// Enables proactive HA, allowing for vSphere to get HA data from external providers and use DRS to perform remediation.
	ProactiveHaEnabled *bool `pulumi:"proactiveHaEnabled"`
	// The configured remediation for moderately degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that
	// this cannot be set to MaintenanceMode when proactiveHaSevereRemediation is set to QuarantineMode.
	ProactiveHaModerateRemediation *string `pulumi:"proactiveHaModerateRemediation"`
	// The list of IDs for health update providers configured for this cluster.
	ProactiveHaProviderIds []string `pulumi:"proactiveHaProviderIds"`
	// The configured remediation for severely degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that this
	// cannot be set to QuarantineMode when proactiveHaModerateRemediation is set to MaintenanceMode.
	ProactiveHaSevereRemediation *string `pulumi:"proactiveHaSevereRemediation"`
	// The managed object ID of the primary
	// resource pool for this cluster. This can be passed directly to the
	// `resourcePoolId`
	// attribute of the
	// `VirtualMachine` resource.
	ResourcePoolId *string `pulumi:"resourcePoolId"`
	// The IDs of any tags to attach to this resource.
	Tags []string `pulumi:"tags"`
	// Whether the vSAN compression service is enabled for the cluster.
	VsanCompressionEnabled *bool `pulumi:"vsanCompressionEnabled"`
	// Whether the vSAN deduplication service is enabled for the cluster.
	VsanDedupEnabled *bool `pulumi:"vsanDedupEnabled"`
	// A list of disk UUIDs to add to the vSAN cluster.
	VsanDiskGroups []ComputeClusterVsanDiskGroup `pulumi:"vsanDiskGroups"`
	// Whether the vSAN data-in-transit encryption is enabled for the cluster.
	VsanDitEncryptionEnabled *bool `pulumi:"vsanDitEncryptionEnabled"`
	// When vsanDitEncryptionEnabled is enabled, sets the rekey interval of data-in-transit encryption (in minutes).
	VsanDitRekeyInterval *int `pulumi:"vsanDitRekeyInterval"`
	// Whether the vSAN service is enabled for the cluster.
	VsanEnabled *bool `pulumi:"vsanEnabled"`
	// Whether the vSAN ESA service is enabled for the cluster.
	VsanEsaEnabled *bool `pulumi:"vsanEsaEnabled"`
	// The configuration for vSAN fault domains.
	VsanFaultDomains []ComputeClusterVsanFaultDomain `pulumi:"vsanFaultDomains"`
	// Whether the vSAN network diagnostic mode is enabled for the cluster.
	VsanNetworkDiagnosticModeEnabled *bool `pulumi:"vsanNetworkDiagnosticModeEnabled"`
	// Whether the vSAN performance service is enabled for the cluster.
	VsanPerformanceEnabled *bool `pulumi:"vsanPerformanceEnabled"`
	// The managed object IDs of the vSAN datastore to be mounted on the cluster.
	VsanRemoteDatastoreIds []string `pulumi:"vsanRemoteDatastoreIds"`
	// The configuration for stretched cluster.
	VsanStretchedCluster *ComputeClusterVsanStretchedCluster `pulumi:"vsanStretchedCluster"`
	// Whether the vSAN unmap service is enabled for the cluster.
	VsanUnmapEnabled *bool `pulumi:"vsanUnmapEnabled"`
	// Whether the vSAN verbose mode is enabled for the cluster.
	VsanVerboseModeEnabled *bool `pulumi:"vsanVerboseModeEnabled"`
}

type ComputeClusterState struct {
	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster.
	//
	// > **NOTE:** Custom attributes are unsupported on direct ESXi connections
	// and require vCenter Server.
	CustomAttributes pulumi.StringMapInput
	// The managed object ID of
	// the datacenter to create the cluster in. Forces a new resource if changed.
	DatacenterId pulumi.StringPtrInput
	// The automation level for host power operations in this cluster. Can be one of manual or automated.
	DpmAutomationLevel pulumi.StringPtrInput
	// Enable DPM support for DRS. This allows you to dynamically control the power of hosts depending on the needs of virtual
	// machines in the cluster. Requires that DRS be enabled.
	DpmEnabled pulumi.BoolPtrInput
	// A value between 1 and 5 indicating the threshold of load within the cluster that influences host power operations. This
	// affects both power on and power off operations - a lower setting will tolerate more of a surplus/deficit than a higher
	// setting.
	DpmThreshold pulumi.IntPtrInput
	// Advanced configuration options for DRS and DPM.
	DrsAdvancedOptions pulumi.StringMapInput
	// The default automation level for all virtual machines in this cluster. Can be one of manual, partiallyAutomated, or
	// fullyAutomated.
	DrsAutomationLevel pulumi.StringPtrInput
	// When true, enables DRS to use data from vRealize Operations Manager to make proactive DRS recommendations.
	DrsEnablePredictiveDrs pulumi.BoolPtrInput
	// When true, allows individual VM overrides within this cluster to be set.
	DrsEnableVmOverrides pulumi.BoolPtrInput
	// Enable DRS for this cluster.
	DrsEnabled pulumi.BoolPtrInput
	// A value between 1 and 5 indicating the threshold of imbalance tolerated between hosts. A lower setting will tolerate
	// more imbalance while a higher setting will tolerate less.
	DrsMigrationThreshold pulumi.IntPtrInput
	// Enable scalable shares for all descendants of this cluster.
	DrsScaleDescendantsShares pulumi.StringPtrInput
	// The relative path to a folder to put this cluster in.
	// This is a path relative to the datacenter you are deploying the cluster to.
	// Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
	// The provider will place a cluster named `compute-cluster-test` in a
	// host folder located at `/dc1/host/foo/bar`, with the final inventory path
	// being `/dc1/host/foo/bar/datastore-cluster-test`.
	Folder pulumi.StringPtrInput
	// Force removal of all hosts in the cluster during destroy and make them standalone hosts. Use of this flag mainly exists
	// for testing and is not recommended in normal use.
	ForceEvacuateOnDestroy pulumi.BoolPtrInput
	// When haAdmissionControlPolicy is failoverHosts, this defines the managed object IDs of hosts to use as dedicated
	// failover hosts. These hosts are kept as available as possible - admission control will block access to the host, and DRS
	// will ignore the host when making recommendations.
	HaAdmissionControlFailoverHostSystemIds pulumi.StringArrayInput
	// The maximum number of failed hosts that admission control tolerates when making decisions on whether to permit virtual
	// machine operations. The maximum is one less than the number of hosts in the cluster.
	HaAdmissionControlHostFailureTolerance pulumi.IntPtrInput
	// The percentage of resource reduction that a cluster of VMs can tolerate in case of a failover. A value of 0 produces
	// warnings only, whereas a value of 100 disables the setting.
	HaAdmissionControlPerformanceTolerance pulumi.IntPtrInput
	// The type of admission control policy to use with vSphere HA, which controls whether or not specific VM operations are
	// permitted in the cluster in order to protect the reliability of the cluster. Can be one of resourcePercentage,
	// slotPolicy, failoverHosts, or disabled. Note that disabling admission control is not recommended and can lead to service
	// issues.
	HaAdmissionControlPolicy pulumi.StringPtrInput
	// When haAdmissionControlPolicy is resourcePercentage, automatically determine available resource percentages by
	// subtracting the average number of host resources represented by the haAdmissionControlHostFailureTolerance setting from
	// the total amount of resources in the cluster. Disable to supply user-defined values.
	HaAdmissionControlResourcePercentageAutoCompute pulumi.BoolPtrInput
	// When haAdmissionControlPolicy is resourcePercentage, this controls the user-defined percentage of CPU resources in the
	// cluster to reserve for failover.
	HaAdmissionControlResourcePercentageCpu pulumi.IntPtrInput
	// When haAdmissionControlPolicy is resourcePercentage, this controls the user-defined percentage of memory resources in
	// the cluster to reserve for failover.
	HaAdmissionControlResourcePercentageMemory pulumi.IntPtrInput
	// When haAdmissionControlPolicy is slotPolicy, this controls the user-defined CPU slot size, in MHz.
	HaAdmissionControlSlotPolicyExplicitCpu pulumi.IntPtrInput
	// When haAdmissionControlPolicy is slotPolicy, this controls the user-defined memory slot size, in MB.
	HaAdmissionControlSlotPolicyExplicitMemory pulumi.IntPtrInput
	// When haAdmissionControlPolicy is slotPolicy, this setting controls whether or not you wish to supply explicit values to
	// CPU and memory slot sizes. The default is to gather a automatic average based on all powered-on virtual machines
	// currently in the cluster.
	HaAdmissionControlSlotPolicyUseExplicitSize pulumi.BoolPtrInput
	// Advanced configuration options for vSphere HA.
	HaAdvancedOptions pulumi.StringMapInput
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines if an APD status on an affected
	// datastore clears in the middle of an APD event. Can be one of none or reset.
	HaDatastoreApdRecoveryAction pulumi.StringPtrInput
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines when the cluster has detected
	// loss to all paths to a relevant datastore. Can be one of disabled, warning, restartConservative, or restartAggressive.
	HaDatastoreApdResponse pulumi.StringPtrInput
	// When haVmComponentProtection is enabled, controls the delay in seconds to wait after an APD timeout event to execute the
	// response action defined in ha_datastore_apd_response.
	HaDatastoreApdResponseDelay pulumi.IntPtrInput
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines when the cluster has detected a
	// permanent device loss to a relevant datastore. Can be one of disabled, warning, or restartAggressive.
	HaDatastorePdlResponse pulumi.StringPtrInput
	// Enable vSphere HA for this cluster.
	HaEnabled pulumi.BoolPtrInput
	// The list of managed object IDs for preferred datastores to use for HA heartbeating. This setting is only useful when
	// haHeartbeatDatastorePolicy is set to either userSelectedDs or allFeasibleDsWithUserPreference.
	HaHeartbeatDatastoreIds pulumi.StringArrayInput
	// The selection policy for HA heartbeat datastores. Can be one of allFeasibleDs, userSelectedDs, or
	// allFeasibleDsWithUserPreference.
	HaHeartbeatDatastorePolicy pulumi.StringPtrInput
	// The action to take on virtual machines when a host has detected that it has been isolated from the rest of the cluster.
	// Can be one of none, powerOff, or shutdown.
	HaHostIsolationResponse pulumi.StringPtrInput
	// Global setting that controls whether vSphere HA remediates VMs on host failure. Can be one of enabled or disabled.
	HaHostMonitoring pulumi.StringPtrInput
	// Controls vSphere VM component protection for virtual machines in this cluster. This allows vSphere HA to react to
	// failures between hosts and specific virtual machine components, such as datastores. Can be one of enabled or disabled.
	HaVmComponentProtection pulumi.StringPtrInput
	// The condition used to determine whether or not VMs in a certain restart priority class are online, allowing HA to move
	// on to restarting VMs on the next priority. Can be one of none, poweredOn, guestHbStatusGreen, or appHbStatusGreen.
	HaVmDependencyRestartCondition pulumi.StringPtrInput
	// If a heartbeat from a virtual machine is not received within this configured interval, the virtual machine is marked as
	// failed. The value is in seconds.
	HaVmFailureInterval pulumi.IntPtrInput
	// The length of the reset window in which haVmMaximumResets can operate. When this window expires, no more resets are
	// attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset
	// time is allotted.
	HaVmMaximumFailureWindow pulumi.IntPtrInput
	// The maximum number of resets that HA will perform to a virtual machine when responding to a failure event.
	HaVmMaximumResets pulumi.IntPtrInput
	// The time, in seconds, that HA waits after powering on a virtual machine before monitoring for heartbeats.
	HaVmMinimumUptime pulumi.IntPtrInput
	// The type of virtual machine monitoring to use when HA is enabled in the cluster. Can be one of vmMonitoringDisabled,
	// vmMonitoringOnly, or vmAndAppMonitoring.
	HaVmMonitoring pulumi.StringPtrInput
	// Additional delay in seconds after ready condition is met. A VM is considered ready at this point.
	HaVmRestartAdditionalDelay pulumi.IntPtrInput
	// The default restart priority for affected VMs when vSphere detects a host failure. Can be one of lowest, low, medium,
	// high, or highest.
	HaVmRestartPriority pulumi.StringPtrInput
	// The maximum time, in seconds, that vSphere HA will wait for virtual machines in one priority to be ready before
	// proceeding with the next priority.
	HaVmRestartTimeout pulumi.IntPtrInput
	// The timeout for each host maintenance mode operation when removing hosts from a cluster.
	HostClusterExitTimeout pulumi.IntPtrInput
	// Details about the host image which should be applied to the cluster.
	HostImage ComputeClusterHostImagePtrInput
	// Must be set if cluster enrollment is managed from host resource.
	HostManaged pulumi.BoolPtrInput
	// The managed object IDs of the hosts to put in the cluster.
	HostSystemIds pulumi.StringArrayInput
	// The name of the cluster.
	Name pulumi.StringPtrInput
	// The DRS behavior for proactive HA recommendations. Can be one of Automated or Manual.
	ProactiveHaAutomationLevel pulumi.StringPtrInput
	// Enables proactive HA, allowing for vSphere to get HA data from external providers and use DRS to perform remediation.
	ProactiveHaEnabled pulumi.BoolPtrInput
	// The configured remediation for moderately degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that
	// this cannot be set to MaintenanceMode when proactiveHaSevereRemediation is set to QuarantineMode.
	ProactiveHaModerateRemediation pulumi.StringPtrInput
	// The list of IDs for health update providers configured for this cluster.
	ProactiveHaProviderIds pulumi.StringArrayInput
	// The configured remediation for severely degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that this
	// cannot be set to QuarantineMode when proactiveHaModerateRemediation is set to MaintenanceMode.
	ProactiveHaSevereRemediation pulumi.StringPtrInput
	// The managed object ID of the primary
	// resource pool for this cluster. This can be passed directly to the
	// `resourcePoolId`
	// attribute of the
	// `VirtualMachine` resource.
	ResourcePoolId pulumi.StringPtrInput
	// The IDs of any tags to attach to this resource.
	Tags pulumi.StringArrayInput
	// Whether the vSAN compression service is enabled for the cluster.
	VsanCompressionEnabled pulumi.BoolPtrInput
	// Whether the vSAN deduplication service is enabled for the cluster.
	VsanDedupEnabled pulumi.BoolPtrInput
	// A list of disk UUIDs to add to the vSAN cluster.
	VsanDiskGroups ComputeClusterVsanDiskGroupArrayInput
	// Whether the vSAN data-in-transit encryption is enabled for the cluster.
	VsanDitEncryptionEnabled pulumi.BoolPtrInput
	// When vsanDitEncryptionEnabled is enabled, sets the rekey interval of data-in-transit encryption (in minutes).
	VsanDitRekeyInterval pulumi.IntPtrInput
	// Whether the vSAN service is enabled for the cluster.
	VsanEnabled pulumi.BoolPtrInput
	// Whether the vSAN ESA service is enabled for the cluster.
	VsanEsaEnabled pulumi.BoolPtrInput
	// The configuration for vSAN fault domains.
	VsanFaultDomains ComputeClusterVsanFaultDomainArrayInput
	// Whether the vSAN network diagnostic mode is enabled for the cluster.
	VsanNetworkDiagnosticModeEnabled pulumi.BoolPtrInput
	// Whether the vSAN performance service is enabled for the cluster.
	VsanPerformanceEnabled pulumi.BoolPtrInput
	// The managed object IDs of the vSAN datastore to be mounted on the cluster.
	VsanRemoteDatastoreIds pulumi.StringArrayInput
	// The configuration for stretched cluster.
	VsanStretchedCluster ComputeClusterVsanStretchedClusterPtrInput
	// Whether the vSAN unmap service is enabled for the cluster.
	VsanUnmapEnabled pulumi.BoolPtrInput
	// Whether the vSAN verbose mode is enabled for the cluster.
	VsanVerboseModeEnabled pulumi.BoolPtrInput
}

func (ComputeClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeClusterState)(nil)).Elem()
}

type computeClusterArgs struct {
	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster.
	//
	// > **NOTE:** Custom attributes are unsupported on direct ESXi connections
	// and require vCenter Server.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// The managed object ID of
	// the datacenter to create the cluster in. Forces a new resource if changed.
	DatacenterId string `pulumi:"datacenterId"`
	// The automation level for host power operations in this cluster. Can be one of manual or automated.
	DpmAutomationLevel *string `pulumi:"dpmAutomationLevel"`
	// Enable DPM support for DRS. This allows you to dynamically control the power of hosts depending on the needs of virtual
	// machines in the cluster. Requires that DRS be enabled.
	DpmEnabled *bool `pulumi:"dpmEnabled"`
	// A value between 1 and 5 indicating the threshold of load within the cluster that influences host power operations. This
	// affects both power on and power off operations - a lower setting will tolerate more of a surplus/deficit than a higher
	// setting.
	DpmThreshold *int `pulumi:"dpmThreshold"`
	// Advanced configuration options for DRS and DPM.
	DrsAdvancedOptions map[string]string `pulumi:"drsAdvancedOptions"`
	// The default automation level for all virtual machines in this cluster. Can be one of manual, partiallyAutomated, or
	// fullyAutomated.
	DrsAutomationLevel *string `pulumi:"drsAutomationLevel"`
	// When true, enables DRS to use data from vRealize Operations Manager to make proactive DRS recommendations.
	DrsEnablePredictiveDrs *bool `pulumi:"drsEnablePredictiveDrs"`
	// When true, allows individual VM overrides within this cluster to be set.
	DrsEnableVmOverrides *bool `pulumi:"drsEnableVmOverrides"`
	// Enable DRS for this cluster.
	DrsEnabled *bool `pulumi:"drsEnabled"`
	// A value between 1 and 5 indicating the threshold of imbalance tolerated between hosts. A lower setting will tolerate
	// more imbalance while a higher setting will tolerate less.
	DrsMigrationThreshold *int `pulumi:"drsMigrationThreshold"`
	// Enable scalable shares for all descendants of this cluster.
	DrsScaleDescendantsShares *string `pulumi:"drsScaleDescendantsShares"`
	// The relative path to a folder to put this cluster in.
	// This is a path relative to the datacenter you are deploying the cluster to.
	// Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
	// The provider will place a cluster named `compute-cluster-test` in a
	// host folder located at `/dc1/host/foo/bar`, with the final inventory path
	// being `/dc1/host/foo/bar/datastore-cluster-test`.
	Folder *string `pulumi:"folder"`
	// Force removal of all hosts in the cluster during destroy and make them standalone hosts. Use of this flag mainly exists
	// for testing and is not recommended in normal use.
	ForceEvacuateOnDestroy *bool `pulumi:"forceEvacuateOnDestroy"`
	// When haAdmissionControlPolicy is failoverHosts, this defines the managed object IDs of hosts to use as dedicated
	// failover hosts. These hosts are kept as available as possible - admission control will block access to the host, and DRS
	// will ignore the host when making recommendations.
	HaAdmissionControlFailoverHostSystemIds []string `pulumi:"haAdmissionControlFailoverHostSystemIds"`
	// The maximum number of failed hosts that admission control tolerates when making decisions on whether to permit virtual
	// machine operations. The maximum is one less than the number of hosts in the cluster.
	HaAdmissionControlHostFailureTolerance *int `pulumi:"haAdmissionControlHostFailureTolerance"`
	// The percentage of resource reduction that a cluster of VMs can tolerate in case of a failover. A value of 0 produces
	// warnings only, whereas a value of 100 disables the setting.
	HaAdmissionControlPerformanceTolerance *int `pulumi:"haAdmissionControlPerformanceTolerance"`
	// The type of admission control policy to use with vSphere HA, which controls whether or not specific VM operations are
	// permitted in the cluster in order to protect the reliability of the cluster. Can be one of resourcePercentage,
	// slotPolicy, failoverHosts, or disabled. Note that disabling admission control is not recommended and can lead to service
	// issues.
	HaAdmissionControlPolicy *string `pulumi:"haAdmissionControlPolicy"`
	// When haAdmissionControlPolicy is resourcePercentage, automatically determine available resource percentages by
	// subtracting the average number of host resources represented by the haAdmissionControlHostFailureTolerance setting from
	// the total amount of resources in the cluster. Disable to supply user-defined values.
	HaAdmissionControlResourcePercentageAutoCompute *bool `pulumi:"haAdmissionControlResourcePercentageAutoCompute"`
	// When haAdmissionControlPolicy is resourcePercentage, this controls the user-defined percentage of CPU resources in the
	// cluster to reserve for failover.
	HaAdmissionControlResourcePercentageCpu *int `pulumi:"haAdmissionControlResourcePercentageCpu"`
	// When haAdmissionControlPolicy is resourcePercentage, this controls the user-defined percentage of memory resources in
	// the cluster to reserve for failover.
	HaAdmissionControlResourcePercentageMemory *int `pulumi:"haAdmissionControlResourcePercentageMemory"`
	// When haAdmissionControlPolicy is slotPolicy, this controls the user-defined CPU slot size, in MHz.
	HaAdmissionControlSlotPolicyExplicitCpu *int `pulumi:"haAdmissionControlSlotPolicyExplicitCpu"`
	// When haAdmissionControlPolicy is slotPolicy, this controls the user-defined memory slot size, in MB.
	HaAdmissionControlSlotPolicyExplicitMemory *int `pulumi:"haAdmissionControlSlotPolicyExplicitMemory"`
	// When haAdmissionControlPolicy is slotPolicy, this setting controls whether or not you wish to supply explicit values to
	// CPU and memory slot sizes. The default is to gather a automatic average based on all powered-on virtual machines
	// currently in the cluster.
	HaAdmissionControlSlotPolicyUseExplicitSize *bool `pulumi:"haAdmissionControlSlotPolicyUseExplicitSize"`
	// Advanced configuration options for vSphere HA.
	HaAdvancedOptions map[string]string `pulumi:"haAdvancedOptions"`
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines if an APD status on an affected
	// datastore clears in the middle of an APD event. Can be one of none or reset.
	HaDatastoreApdRecoveryAction *string `pulumi:"haDatastoreApdRecoveryAction"`
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines when the cluster has detected
	// loss to all paths to a relevant datastore. Can be one of disabled, warning, restartConservative, or restartAggressive.
	HaDatastoreApdResponse *string `pulumi:"haDatastoreApdResponse"`
	// When haVmComponentProtection is enabled, controls the delay in seconds to wait after an APD timeout event to execute the
	// response action defined in ha_datastore_apd_response.
	HaDatastoreApdResponseDelay *int `pulumi:"haDatastoreApdResponseDelay"`
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines when the cluster has detected a
	// permanent device loss to a relevant datastore. Can be one of disabled, warning, or restartAggressive.
	HaDatastorePdlResponse *string `pulumi:"haDatastorePdlResponse"`
	// Enable vSphere HA for this cluster.
	HaEnabled *bool `pulumi:"haEnabled"`
	// The list of managed object IDs for preferred datastores to use for HA heartbeating. This setting is only useful when
	// haHeartbeatDatastorePolicy is set to either userSelectedDs or allFeasibleDsWithUserPreference.
	HaHeartbeatDatastoreIds []string `pulumi:"haHeartbeatDatastoreIds"`
	// The selection policy for HA heartbeat datastores. Can be one of allFeasibleDs, userSelectedDs, or
	// allFeasibleDsWithUserPreference.
	HaHeartbeatDatastorePolicy *string `pulumi:"haHeartbeatDatastorePolicy"`
	// The action to take on virtual machines when a host has detected that it has been isolated from the rest of the cluster.
	// Can be one of none, powerOff, or shutdown.
	HaHostIsolationResponse *string `pulumi:"haHostIsolationResponse"`
	// Global setting that controls whether vSphere HA remediates VMs on host failure. Can be one of enabled or disabled.
	HaHostMonitoring *string `pulumi:"haHostMonitoring"`
	// Controls vSphere VM component protection for virtual machines in this cluster. This allows vSphere HA to react to
	// failures between hosts and specific virtual machine components, such as datastores. Can be one of enabled or disabled.
	HaVmComponentProtection *string `pulumi:"haVmComponentProtection"`
	// The condition used to determine whether or not VMs in a certain restart priority class are online, allowing HA to move
	// on to restarting VMs on the next priority. Can be one of none, poweredOn, guestHbStatusGreen, or appHbStatusGreen.
	HaVmDependencyRestartCondition *string `pulumi:"haVmDependencyRestartCondition"`
	// If a heartbeat from a virtual machine is not received within this configured interval, the virtual machine is marked as
	// failed. The value is in seconds.
	HaVmFailureInterval *int `pulumi:"haVmFailureInterval"`
	// The length of the reset window in which haVmMaximumResets can operate. When this window expires, no more resets are
	// attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset
	// time is allotted.
	HaVmMaximumFailureWindow *int `pulumi:"haVmMaximumFailureWindow"`
	// The maximum number of resets that HA will perform to a virtual machine when responding to a failure event.
	HaVmMaximumResets *int `pulumi:"haVmMaximumResets"`
	// The time, in seconds, that HA waits after powering on a virtual machine before monitoring for heartbeats.
	HaVmMinimumUptime *int `pulumi:"haVmMinimumUptime"`
	// The type of virtual machine monitoring to use when HA is enabled in the cluster. Can be one of vmMonitoringDisabled,
	// vmMonitoringOnly, or vmAndAppMonitoring.
	HaVmMonitoring *string `pulumi:"haVmMonitoring"`
	// Additional delay in seconds after ready condition is met. A VM is considered ready at this point.
	HaVmRestartAdditionalDelay *int `pulumi:"haVmRestartAdditionalDelay"`
	// The default restart priority for affected VMs when vSphere detects a host failure. Can be one of lowest, low, medium,
	// high, or highest.
	HaVmRestartPriority *string `pulumi:"haVmRestartPriority"`
	// The maximum time, in seconds, that vSphere HA will wait for virtual machines in one priority to be ready before
	// proceeding with the next priority.
	HaVmRestartTimeout *int `pulumi:"haVmRestartTimeout"`
	// The timeout for each host maintenance mode operation when removing hosts from a cluster.
	HostClusterExitTimeout *int `pulumi:"hostClusterExitTimeout"`
	// Details about the host image which should be applied to the cluster.
	HostImage *ComputeClusterHostImage `pulumi:"hostImage"`
	// Must be set if cluster enrollment is managed from host resource.
	HostManaged *bool `pulumi:"hostManaged"`
	// The managed object IDs of the hosts to put in the cluster.
	HostSystemIds []string `pulumi:"hostSystemIds"`
	// The name of the cluster.
	Name *string `pulumi:"name"`
	// The DRS behavior for proactive HA recommendations. Can be one of Automated or Manual.
	ProactiveHaAutomationLevel *string `pulumi:"proactiveHaAutomationLevel"`
	// Enables proactive HA, allowing for vSphere to get HA data from external providers and use DRS to perform remediation.
	ProactiveHaEnabled *bool `pulumi:"proactiveHaEnabled"`
	// The configured remediation for moderately degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that
	// this cannot be set to MaintenanceMode when proactiveHaSevereRemediation is set to QuarantineMode.
	ProactiveHaModerateRemediation *string `pulumi:"proactiveHaModerateRemediation"`
	// The list of IDs for health update providers configured for this cluster.
	ProactiveHaProviderIds []string `pulumi:"proactiveHaProviderIds"`
	// The configured remediation for severely degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that this
	// cannot be set to QuarantineMode when proactiveHaModerateRemediation is set to MaintenanceMode.
	ProactiveHaSevereRemediation *string `pulumi:"proactiveHaSevereRemediation"`
	// The IDs of any tags to attach to this resource.
	Tags []string `pulumi:"tags"`
	// Whether the vSAN compression service is enabled for the cluster.
	VsanCompressionEnabled *bool `pulumi:"vsanCompressionEnabled"`
	// Whether the vSAN deduplication service is enabled for the cluster.
	VsanDedupEnabled *bool `pulumi:"vsanDedupEnabled"`
	// A list of disk UUIDs to add to the vSAN cluster.
	VsanDiskGroups []ComputeClusterVsanDiskGroup `pulumi:"vsanDiskGroups"`
	// Whether the vSAN data-in-transit encryption is enabled for the cluster.
	VsanDitEncryptionEnabled *bool `pulumi:"vsanDitEncryptionEnabled"`
	// When vsanDitEncryptionEnabled is enabled, sets the rekey interval of data-in-transit encryption (in minutes).
	VsanDitRekeyInterval *int `pulumi:"vsanDitRekeyInterval"`
	// Whether the vSAN service is enabled for the cluster.
	VsanEnabled *bool `pulumi:"vsanEnabled"`
	// Whether the vSAN ESA service is enabled for the cluster.
	VsanEsaEnabled *bool `pulumi:"vsanEsaEnabled"`
	// The configuration for vSAN fault domains.
	VsanFaultDomains []ComputeClusterVsanFaultDomain `pulumi:"vsanFaultDomains"`
	// Whether the vSAN network diagnostic mode is enabled for the cluster.
	VsanNetworkDiagnosticModeEnabled *bool `pulumi:"vsanNetworkDiagnosticModeEnabled"`
	// Whether the vSAN performance service is enabled for the cluster.
	VsanPerformanceEnabled *bool `pulumi:"vsanPerformanceEnabled"`
	// The managed object IDs of the vSAN datastore to be mounted on the cluster.
	VsanRemoteDatastoreIds []string `pulumi:"vsanRemoteDatastoreIds"`
	// The configuration for stretched cluster.
	VsanStretchedCluster *ComputeClusterVsanStretchedCluster `pulumi:"vsanStretchedCluster"`
	// Whether the vSAN unmap service is enabled for the cluster.
	VsanUnmapEnabled *bool `pulumi:"vsanUnmapEnabled"`
	// Whether the vSAN verbose mode is enabled for the cluster.
	VsanVerboseModeEnabled *bool `pulumi:"vsanVerboseModeEnabled"`
}

// The set of arguments for constructing a ComputeCluster resource.
type ComputeClusterArgs struct {
	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster.
	//
	// > **NOTE:** Custom attributes are unsupported on direct ESXi connections
	// and require vCenter Server.
	CustomAttributes pulumi.StringMapInput
	// The managed object ID of
	// the datacenter to create the cluster in. Forces a new resource if changed.
	DatacenterId pulumi.StringInput
	// The automation level for host power operations in this cluster. Can be one of manual or automated.
	DpmAutomationLevel pulumi.StringPtrInput
	// Enable DPM support for DRS. This allows you to dynamically control the power of hosts depending on the needs of virtual
	// machines in the cluster. Requires that DRS be enabled.
	DpmEnabled pulumi.BoolPtrInput
	// A value between 1 and 5 indicating the threshold of load within the cluster that influences host power operations. This
	// affects both power on and power off operations - a lower setting will tolerate more of a surplus/deficit than a higher
	// setting.
	DpmThreshold pulumi.IntPtrInput
	// Advanced configuration options for DRS and DPM.
	DrsAdvancedOptions pulumi.StringMapInput
	// The default automation level for all virtual machines in this cluster. Can be one of manual, partiallyAutomated, or
	// fullyAutomated.
	DrsAutomationLevel pulumi.StringPtrInput
	// When true, enables DRS to use data from vRealize Operations Manager to make proactive DRS recommendations.
	DrsEnablePredictiveDrs pulumi.BoolPtrInput
	// When true, allows individual VM overrides within this cluster to be set.
	DrsEnableVmOverrides pulumi.BoolPtrInput
	// Enable DRS for this cluster.
	DrsEnabled pulumi.BoolPtrInput
	// A value between 1 and 5 indicating the threshold of imbalance tolerated between hosts. A lower setting will tolerate
	// more imbalance while a higher setting will tolerate less.
	DrsMigrationThreshold pulumi.IntPtrInput
	// Enable scalable shares for all descendants of this cluster.
	DrsScaleDescendantsShares pulumi.StringPtrInput
	// The relative path to a folder to put this cluster in.
	// This is a path relative to the datacenter you are deploying the cluster to.
	// Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
	// The provider will place a cluster named `compute-cluster-test` in a
	// host folder located at `/dc1/host/foo/bar`, with the final inventory path
	// being `/dc1/host/foo/bar/datastore-cluster-test`.
	Folder pulumi.StringPtrInput
	// Force removal of all hosts in the cluster during destroy and make them standalone hosts. Use of this flag mainly exists
	// for testing and is not recommended in normal use.
	ForceEvacuateOnDestroy pulumi.BoolPtrInput
	// When haAdmissionControlPolicy is failoverHosts, this defines the managed object IDs of hosts to use as dedicated
	// failover hosts. These hosts are kept as available as possible - admission control will block access to the host, and DRS
	// will ignore the host when making recommendations.
	HaAdmissionControlFailoverHostSystemIds pulumi.StringArrayInput
	// The maximum number of failed hosts that admission control tolerates when making decisions on whether to permit virtual
	// machine operations. The maximum is one less than the number of hosts in the cluster.
	HaAdmissionControlHostFailureTolerance pulumi.IntPtrInput
	// The percentage of resource reduction that a cluster of VMs can tolerate in case of a failover. A value of 0 produces
	// warnings only, whereas a value of 100 disables the setting.
	HaAdmissionControlPerformanceTolerance pulumi.IntPtrInput
	// The type of admission control policy to use with vSphere HA, which controls whether or not specific VM operations are
	// permitted in the cluster in order to protect the reliability of the cluster. Can be one of resourcePercentage,
	// slotPolicy, failoverHosts, or disabled. Note that disabling admission control is not recommended and can lead to service
	// issues.
	HaAdmissionControlPolicy pulumi.StringPtrInput
	// When haAdmissionControlPolicy is resourcePercentage, automatically determine available resource percentages by
	// subtracting the average number of host resources represented by the haAdmissionControlHostFailureTolerance setting from
	// the total amount of resources in the cluster. Disable to supply user-defined values.
	HaAdmissionControlResourcePercentageAutoCompute pulumi.BoolPtrInput
	// When haAdmissionControlPolicy is resourcePercentage, this controls the user-defined percentage of CPU resources in the
	// cluster to reserve for failover.
	HaAdmissionControlResourcePercentageCpu pulumi.IntPtrInput
	// When haAdmissionControlPolicy is resourcePercentage, this controls the user-defined percentage of memory resources in
	// the cluster to reserve for failover.
	HaAdmissionControlResourcePercentageMemory pulumi.IntPtrInput
	// When haAdmissionControlPolicy is slotPolicy, this controls the user-defined CPU slot size, in MHz.
	HaAdmissionControlSlotPolicyExplicitCpu pulumi.IntPtrInput
	// When haAdmissionControlPolicy is slotPolicy, this controls the user-defined memory slot size, in MB.
	HaAdmissionControlSlotPolicyExplicitMemory pulumi.IntPtrInput
	// When haAdmissionControlPolicy is slotPolicy, this setting controls whether or not you wish to supply explicit values to
	// CPU and memory slot sizes. The default is to gather a automatic average based on all powered-on virtual machines
	// currently in the cluster.
	HaAdmissionControlSlotPolicyUseExplicitSize pulumi.BoolPtrInput
	// Advanced configuration options for vSphere HA.
	HaAdvancedOptions pulumi.StringMapInput
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines if an APD status on an affected
	// datastore clears in the middle of an APD event. Can be one of none or reset.
	HaDatastoreApdRecoveryAction pulumi.StringPtrInput
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines when the cluster has detected
	// loss to all paths to a relevant datastore. Can be one of disabled, warning, restartConservative, or restartAggressive.
	HaDatastoreApdResponse pulumi.StringPtrInput
	// When haVmComponentProtection is enabled, controls the delay in seconds to wait after an APD timeout event to execute the
	// response action defined in ha_datastore_apd_response.
	HaDatastoreApdResponseDelay pulumi.IntPtrInput
	// When haVmComponentProtection is enabled, controls the action to take on virtual machines when the cluster has detected a
	// permanent device loss to a relevant datastore. Can be one of disabled, warning, or restartAggressive.
	HaDatastorePdlResponse pulumi.StringPtrInput
	// Enable vSphere HA for this cluster.
	HaEnabled pulumi.BoolPtrInput
	// The list of managed object IDs for preferred datastores to use for HA heartbeating. This setting is only useful when
	// haHeartbeatDatastorePolicy is set to either userSelectedDs or allFeasibleDsWithUserPreference.
	HaHeartbeatDatastoreIds pulumi.StringArrayInput
	// The selection policy for HA heartbeat datastores. Can be one of allFeasibleDs, userSelectedDs, or
	// allFeasibleDsWithUserPreference.
	HaHeartbeatDatastorePolicy pulumi.StringPtrInput
	// The action to take on virtual machines when a host has detected that it has been isolated from the rest of the cluster.
	// Can be one of none, powerOff, or shutdown.
	HaHostIsolationResponse pulumi.StringPtrInput
	// Global setting that controls whether vSphere HA remediates VMs on host failure. Can be one of enabled or disabled.
	HaHostMonitoring pulumi.StringPtrInput
	// Controls vSphere VM component protection for virtual machines in this cluster. This allows vSphere HA to react to
	// failures between hosts and specific virtual machine components, such as datastores. Can be one of enabled or disabled.
	HaVmComponentProtection pulumi.StringPtrInput
	// The condition used to determine whether or not VMs in a certain restart priority class are online, allowing HA to move
	// on to restarting VMs on the next priority. Can be one of none, poweredOn, guestHbStatusGreen, or appHbStatusGreen.
	HaVmDependencyRestartCondition pulumi.StringPtrInput
	// If a heartbeat from a virtual machine is not received within this configured interval, the virtual machine is marked as
	// failed. The value is in seconds.
	HaVmFailureInterval pulumi.IntPtrInput
	// The length of the reset window in which haVmMaximumResets can operate. When this window expires, no more resets are
	// attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset
	// time is allotted.
	HaVmMaximumFailureWindow pulumi.IntPtrInput
	// The maximum number of resets that HA will perform to a virtual machine when responding to a failure event.
	HaVmMaximumResets pulumi.IntPtrInput
	// The time, in seconds, that HA waits after powering on a virtual machine before monitoring for heartbeats.
	HaVmMinimumUptime pulumi.IntPtrInput
	// The type of virtual machine monitoring to use when HA is enabled in the cluster. Can be one of vmMonitoringDisabled,
	// vmMonitoringOnly, or vmAndAppMonitoring.
	HaVmMonitoring pulumi.StringPtrInput
	// Additional delay in seconds after ready condition is met. A VM is considered ready at this point.
	HaVmRestartAdditionalDelay pulumi.IntPtrInput
	// The default restart priority for affected VMs when vSphere detects a host failure. Can be one of lowest, low, medium,
	// high, or highest.
	HaVmRestartPriority pulumi.StringPtrInput
	// The maximum time, in seconds, that vSphere HA will wait for virtual machines in one priority to be ready before
	// proceeding with the next priority.
	HaVmRestartTimeout pulumi.IntPtrInput
	// The timeout for each host maintenance mode operation when removing hosts from a cluster.
	HostClusterExitTimeout pulumi.IntPtrInput
	// Details about the host image which should be applied to the cluster.
	HostImage ComputeClusterHostImagePtrInput
	// Must be set if cluster enrollment is managed from host resource.
	HostManaged pulumi.BoolPtrInput
	// The managed object IDs of the hosts to put in the cluster.
	HostSystemIds pulumi.StringArrayInput
	// The name of the cluster.
	Name pulumi.StringPtrInput
	// The DRS behavior for proactive HA recommendations. Can be one of Automated or Manual.
	ProactiveHaAutomationLevel pulumi.StringPtrInput
	// Enables proactive HA, allowing for vSphere to get HA data from external providers and use DRS to perform remediation.
	ProactiveHaEnabled pulumi.BoolPtrInput
	// The configured remediation for moderately degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that
	// this cannot be set to MaintenanceMode when proactiveHaSevereRemediation is set to QuarantineMode.
	ProactiveHaModerateRemediation pulumi.StringPtrInput
	// The list of IDs for health update providers configured for this cluster.
	ProactiveHaProviderIds pulumi.StringArrayInput
	// The configured remediation for severely degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that this
	// cannot be set to QuarantineMode when proactiveHaModerateRemediation is set to MaintenanceMode.
	ProactiveHaSevereRemediation pulumi.StringPtrInput
	// The IDs of any tags to attach to this resource.
	Tags pulumi.StringArrayInput
	// Whether the vSAN compression service is enabled for the cluster.
	VsanCompressionEnabled pulumi.BoolPtrInput
	// Whether the vSAN deduplication service is enabled for the cluster.
	VsanDedupEnabled pulumi.BoolPtrInput
	// A list of disk UUIDs to add to the vSAN cluster.
	VsanDiskGroups ComputeClusterVsanDiskGroupArrayInput
	// Whether the vSAN data-in-transit encryption is enabled for the cluster.
	VsanDitEncryptionEnabled pulumi.BoolPtrInput
	// When vsanDitEncryptionEnabled is enabled, sets the rekey interval of data-in-transit encryption (in minutes).
	VsanDitRekeyInterval pulumi.IntPtrInput
	// Whether the vSAN service is enabled for the cluster.
	VsanEnabled pulumi.BoolPtrInput
	// Whether the vSAN ESA service is enabled for the cluster.
	VsanEsaEnabled pulumi.BoolPtrInput
	// The configuration for vSAN fault domains.
	VsanFaultDomains ComputeClusterVsanFaultDomainArrayInput
	// Whether the vSAN network diagnostic mode is enabled for the cluster.
	VsanNetworkDiagnosticModeEnabled pulumi.BoolPtrInput
	// Whether the vSAN performance service is enabled for the cluster.
	VsanPerformanceEnabled pulumi.BoolPtrInput
	// The managed object IDs of the vSAN datastore to be mounted on the cluster.
	VsanRemoteDatastoreIds pulumi.StringArrayInput
	// The configuration for stretched cluster.
	VsanStretchedCluster ComputeClusterVsanStretchedClusterPtrInput
	// Whether the vSAN unmap service is enabled for the cluster.
	VsanUnmapEnabled pulumi.BoolPtrInput
	// Whether the vSAN verbose mode is enabled for the cluster.
	VsanVerboseModeEnabled pulumi.BoolPtrInput
}

func (ComputeClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeClusterArgs)(nil)).Elem()
}

type ComputeClusterInput interface {
	pulumi.Input

	ToComputeClusterOutput() ComputeClusterOutput
	ToComputeClusterOutputWithContext(ctx context.Context) ComputeClusterOutput
}

func (*ComputeCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeCluster)(nil)).Elem()
}

func (i *ComputeCluster) ToComputeClusterOutput() ComputeClusterOutput {
	return i.ToComputeClusterOutputWithContext(context.Background())
}

func (i *ComputeCluster) ToComputeClusterOutputWithContext(ctx context.Context) ComputeClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterOutput)
}

// ComputeClusterArrayInput is an input type that accepts ComputeClusterArray and ComputeClusterArrayOutput values.
// You can construct a concrete instance of `ComputeClusterArrayInput` via:
//
//	ComputeClusterArray{ ComputeClusterArgs{...} }
type ComputeClusterArrayInput interface {
	pulumi.Input

	ToComputeClusterArrayOutput() ComputeClusterArrayOutput
	ToComputeClusterArrayOutputWithContext(context.Context) ComputeClusterArrayOutput
}

type ComputeClusterArray []ComputeClusterInput

func (ComputeClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeCluster)(nil)).Elem()
}

func (i ComputeClusterArray) ToComputeClusterArrayOutput() ComputeClusterArrayOutput {
	return i.ToComputeClusterArrayOutputWithContext(context.Background())
}

func (i ComputeClusterArray) ToComputeClusterArrayOutputWithContext(ctx context.Context) ComputeClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterArrayOutput)
}

// ComputeClusterMapInput is an input type that accepts ComputeClusterMap and ComputeClusterMapOutput values.
// You can construct a concrete instance of `ComputeClusterMapInput` via:
//
//	ComputeClusterMap{ "key": ComputeClusterArgs{...} }
type ComputeClusterMapInput interface {
	pulumi.Input

	ToComputeClusterMapOutput() ComputeClusterMapOutput
	ToComputeClusterMapOutputWithContext(context.Context) ComputeClusterMapOutput
}

type ComputeClusterMap map[string]ComputeClusterInput

func (ComputeClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeCluster)(nil)).Elem()
}

func (i ComputeClusterMap) ToComputeClusterMapOutput() ComputeClusterMapOutput {
	return i.ToComputeClusterMapOutputWithContext(context.Background())
}

func (i ComputeClusterMap) ToComputeClusterMapOutputWithContext(ctx context.Context) ComputeClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterMapOutput)
}

type ComputeClusterOutput struct{ *pulumi.OutputState }

func (ComputeClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeCluster)(nil)).Elem()
}

func (o ComputeClusterOutput) ToComputeClusterOutput() ComputeClusterOutput {
	return o
}

func (o ComputeClusterOutput) ToComputeClusterOutputWithContext(ctx context.Context) ComputeClusterOutput {
	return o
}

// A map of custom attribute ids to attribute
// value strings to set for the datastore cluster.
//
// > **NOTE:** Custom attributes are unsupported on direct ESXi connections
// and require vCenter Server.
func (o ComputeClusterOutput) CustomAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringMapOutput { return v.CustomAttributes }).(pulumi.StringMapOutput)
}

// The managed object ID of
// the datacenter to create the cluster in. Forces a new resource if changed.
func (o ComputeClusterOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// The automation level for host power operations in this cluster. Can be one of manual or automated.
func (o ComputeClusterOutput) DpmAutomationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.DpmAutomationLevel }).(pulumi.StringPtrOutput)
}

// Enable DPM support for DRS. This allows you to dynamically control the power of hosts depending on the needs of virtual
// machines in the cluster. Requires that DRS be enabled.
func (o ComputeClusterOutput) DpmEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.DpmEnabled }).(pulumi.BoolPtrOutput)
}

// A value between 1 and 5 indicating the threshold of load within the cluster that influences host power operations. This
// affects both power on and power off operations - a lower setting will tolerate more of a surplus/deficit than a higher
// setting.
func (o ComputeClusterOutput) DpmThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.DpmThreshold }).(pulumi.IntPtrOutput)
}

// Advanced configuration options for DRS and DPM.
func (o ComputeClusterOutput) DrsAdvancedOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringMapOutput { return v.DrsAdvancedOptions }).(pulumi.StringMapOutput)
}

// The default automation level for all virtual machines in this cluster. Can be one of manual, partiallyAutomated, or
// fullyAutomated.
func (o ComputeClusterOutput) DrsAutomationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.DrsAutomationLevel }).(pulumi.StringPtrOutput)
}

// When true, enables DRS to use data from vRealize Operations Manager to make proactive DRS recommendations.
func (o ComputeClusterOutput) DrsEnablePredictiveDrs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.DrsEnablePredictiveDrs }).(pulumi.BoolPtrOutput)
}

// When true, allows individual VM overrides within this cluster to be set.
func (o ComputeClusterOutput) DrsEnableVmOverrides() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.DrsEnableVmOverrides }).(pulumi.BoolPtrOutput)
}

// Enable DRS for this cluster.
func (o ComputeClusterOutput) DrsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.DrsEnabled }).(pulumi.BoolPtrOutput)
}

// A value between 1 and 5 indicating the threshold of imbalance tolerated between hosts. A lower setting will tolerate
// more imbalance while a higher setting will tolerate less.
func (o ComputeClusterOutput) DrsMigrationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.DrsMigrationThreshold }).(pulumi.IntPtrOutput)
}

// Enable scalable shares for all descendants of this cluster.
func (o ComputeClusterOutput) DrsScaleDescendantsShares() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.DrsScaleDescendantsShares }).(pulumi.StringPtrOutput)
}

// The relative path to a folder to put this cluster in.
// This is a path relative to the datacenter you are deploying the cluster to.
// Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
// The provider will place a cluster named `compute-cluster-test` in a
// host folder located at `/dc1/host/foo/bar`, with the final inventory path
// being `/dc1/host/foo/bar/datastore-cluster-test`.
func (o ComputeClusterOutput) Folder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.Folder }).(pulumi.StringPtrOutput)
}

// Force removal of all hosts in the cluster during destroy and make them standalone hosts. Use of this flag mainly exists
// for testing and is not recommended in normal use.
func (o ComputeClusterOutput) ForceEvacuateOnDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.ForceEvacuateOnDestroy }).(pulumi.BoolPtrOutput)
}

// When haAdmissionControlPolicy is failoverHosts, this defines the managed object IDs of hosts to use as dedicated
// failover hosts. These hosts are kept as available as possible - admission control will block access to the host, and DRS
// will ignore the host when making recommendations.
func (o ComputeClusterOutput) HaAdmissionControlFailoverHostSystemIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringArrayOutput { return v.HaAdmissionControlFailoverHostSystemIds }).(pulumi.StringArrayOutput)
}

// The maximum number of failed hosts that admission control tolerates when making decisions on whether to permit virtual
// machine operations. The maximum is one less than the number of hosts in the cluster.
func (o ComputeClusterOutput) HaAdmissionControlHostFailureTolerance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.HaAdmissionControlHostFailureTolerance }).(pulumi.IntPtrOutput)
}

// The percentage of resource reduction that a cluster of VMs can tolerate in case of a failover. A value of 0 produces
// warnings only, whereas a value of 100 disables the setting.
func (o ComputeClusterOutput) HaAdmissionControlPerformanceTolerance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.HaAdmissionControlPerformanceTolerance }).(pulumi.IntPtrOutput)
}

// The type of admission control policy to use with vSphere HA, which controls whether or not specific VM operations are
// permitted in the cluster in order to protect the reliability of the cluster. Can be one of resourcePercentage,
// slotPolicy, failoverHosts, or disabled. Note that disabling admission control is not recommended and can lead to service
// issues.
func (o ComputeClusterOutput) HaAdmissionControlPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.HaAdmissionControlPolicy }).(pulumi.StringPtrOutput)
}

// When haAdmissionControlPolicy is resourcePercentage, automatically determine available resource percentages by
// subtracting the average number of host resources represented by the haAdmissionControlHostFailureTolerance setting from
// the total amount of resources in the cluster. Disable to supply user-defined values.
func (o ComputeClusterOutput) HaAdmissionControlResourcePercentageAutoCompute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.HaAdmissionControlResourcePercentageAutoCompute }).(pulumi.BoolPtrOutput)
}

// When haAdmissionControlPolicy is resourcePercentage, this controls the user-defined percentage of CPU resources in the
// cluster to reserve for failover.
func (o ComputeClusterOutput) HaAdmissionControlResourcePercentageCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.HaAdmissionControlResourcePercentageCpu }).(pulumi.IntPtrOutput)
}

// When haAdmissionControlPolicy is resourcePercentage, this controls the user-defined percentage of memory resources in
// the cluster to reserve for failover.
func (o ComputeClusterOutput) HaAdmissionControlResourcePercentageMemory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.HaAdmissionControlResourcePercentageMemory }).(pulumi.IntPtrOutput)
}

// When haAdmissionControlPolicy is slotPolicy, this controls the user-defined CPU slot size, in MHz.
func (o ComputeClusterOutput) HaAdmissionControlSlotPolicyExplicitCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.HaAdmissionControlSlotPolicyExplicitCpu }).(pulumi.IntPtrOutput)
}

// When haAdmissionControlPolicy is slotPolicy, this controls the user-defined memory slot size, in MB.
func (o ComputeClusterOutput) HaAdmissionControlSlotPolicyExplicitMemory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.HaAdmissionControlSlotPolicyExplicitMemory }).(pulumi.IntPtrOutput)
}

// When haAdmissionControlPolicy is slotPolicy, this setting controls whether or not you wish to supply explicit values to
// CPU and memory slot sizes. The default is to gather a automatic average based on all powered-on virtual machines
// currently in the cluster.
func (o ComputeClusterOutput) HaAdmissionControlSlotPolicyUseExplicitSize() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.HaAdmissionControlSlotPolicyUseExplicitSize }).(pulumi.BoolPtrOutput)
}

// Advanced configuration options for vSphere HA.
func (o ComputeClusterOutput) HaAdvancedOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringMapOutput { return v.HaAdvancedOptions }).(pulumi.StringMapOutput)
}

// When haVmComponentProtection is enabled, controls the action to take on virtual machines if an APD status on an affected
// datastore clears in the middle of an APD event. Can be one of none or reset.
func (o ComputeClusterOutput) HaDatastoreApdRecoveryAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.HaDatastoreApdRecoveryAction }).(pulumi.StringPtrOutput)
}

// When haVmComponentProtection is enabled, controls the action to take on virtual machines when the cluster has detected
// loss to all paths to a relevant datastore. Can be one of disabled, warning, restartConservative, or restartAggressive.
func (o ComputeClusterOutput) HaDatastoreApdResponse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.HaDatastoreApdResponse }).(pulumi.StringPtrOutput)
}

// When haVmComponentProtection is enabled, controls the delay in seconds to wait after an APD timeout event to execute the
// response action defined in ha_datastore_apd_response.
func (o ComputeClusterOutput) HaDatastoreApdResponseDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.HaDatastoreApdResponseDelay }).(pulumi.IntPtrOutput)
}

// When haVmComponentProtection is enabled, controls the action to take on virtual machines when the cluster has detected a
// permanent device loss to a relevant datastore. Can be one of disabled, warning, or restartAggressive.
func (o ComputeClusterOutput) HaDatastorePdlResponse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.HaDatastorePdlResponse }).(pulumi.StringPtrOutput)
}

// Enable vSphere HA for this cluster.
func (o ComputeClusterOutput) HaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.HaEnabled }).(pulumi.BoolPtrOutput)
}

// The list of managed object IDs for preferred datastores to use for HA heartbeating. This setting is only useful when
// haHeartbeatDatastorePolicy is set to either userSelectedDs or allFeasibleDsWithUserPreference.
func (o ComputeClusterOutput) HaHeartbeatDatastoreIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringArrayOutput { return v.HaHeartbeatDatastoreIds }).(pulumi.StringArrayOutput)
}

// The selection policy for HA heartbeat datastores. Can be one of allFeasibleDs, userSelectedDs, or
// allFeasibleDsWithUserPreference.
func (o ComputeClusterOutput) HaHeartbeatDatastorePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.HaHeartbeatDatastorePolicy }).(pulumi.StringPtrOutput)
}

// The action to take on virtual machines when a host has detected that it has been isolated from the rest of the cluster.
// Can be one of none, powerOff, or shutdown.
func (o ComputeClusterOutput) HaHostIsolationResponse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.HaHostIsolationResponse }).(pulumi.StringPtrOutput)
}

// Global setting that controls whether vSphere HA remediates VMs on host failure. Can be one of enabled or disabled.
func (o ComputeClusterOutput) HaHostMonitoring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.HaHostMonitoring }).(pulumi.StringPtrOutput)
}

// Controls vSphere VM component protection for virtual machines in this cluster. This allows vSphere HA to react to
// failures between hosts and specific virtual machine components, such as datastores. Can be one of enabled or disabled.
func (o ComputeClusterOutput) HaVmComponentProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.HaVmComponentProtection }).(pulumi.StringPtrOutput)
}

// The condition used to determine whether or not VMs in a certain restart priority class are online, allowing HA to move
// on to restarting VMs on the next priority. Can be one of none, poweredOn, guestHbStatusGreen, or appHbStatusGreen.
func (o ComputeClusterOutput) HaVmDependencyRestartCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.HaVmDependencyRestartCondition }).(pulumi.StringPtrOutput)
}

// If a heartbeat from a virtual machine is not received within this configured interval, the virtual machine is marked as
// failed. The value is in seconds.
func (o ComputeClusterOutput) HaVmFailureInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.HaVmFailureInterval }).(pulumi.IntPtrOutput)
}

// The length of the reset window in which haVmMaximumResets can operate. When this window expires, no more resets are
// attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset
// time is allotted.
func (o ComputeClusterOutput) HaVmMaximumFailureWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.HaVmMaximumFailureWindow }).(pulumi.IntPtrOutput)
}

// The maximum number of resets that HA will perform to a virtual machine when responding to a failure event.
func (o ComputeClusterOutput) HaVmMaximumResets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.HaVmMaximumResets }).(pulumi.IntPtrOutput)
}

// The time, in seconds, that HA waits after powering on a virtual machine before monitoring for heartbeats.
func (o ComputeClusterOutput) HaVmMinimumUptime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.HaVmMinimumUptime }).(pulumi.IntPtrOutput)
}

// The type of virtual machine monitoring to use when HA is enabled in the cluster. Can be one of vmMonitoringDisabled,
// vmMonitoringOnly, or vmAndAppMonitoring.
func (o ComputeClusterOutput) HaVmMonitoring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.HaVmMonitoring }).(pulumi.StringPtrOutput)
}

// Additional delay in seconds after ready condition is met. A VM is considered ready at this point.
func (o ComputeClusterOutput) HaVmRestartAdditionalDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.HaVmRestartAdditionalDelay }).(pulumi.IntPtrOutput)
}

// The default restart priority for affected VMs when vSphere detects a host failure. Can be one of lowest, low, medium,
// high, or highest.
func (o ComputeClusterOutput) HaVmRestartPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.HaVmRestartPriority }).(pulumi.StringPtrOutput)
}

// The maximum time, in seconds, that vSphere HA will wait for virtual machines in one priority to be ready before
// proceeding with the next priority.
func (o ComputeClusterOutput) HaVmRestartTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.HaVmRestartTimeout }).(pulumi.IntPtrOutput)
}

// The timeout for each host maintenance mode operation when removing hosts from a cluster.
func (o ComputeClusterOutput) HostClusterExitTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntPtrOutput { return v.HostClusterExitTimeout }).(pulumi.IntPtrOutput)
}

// Details about the host image which should be applied to the cluster.
func (o ComputeClusterOutput) HostImage() ComputeClusterHostImagePtrOutput {
	return o.ApplyT(func(v *ComputeCluster) ComputeClusterHostImagePtrOutput { return v.HostImage }).(ComputeClusterHostImagePtrOutput)
}

// Must be set if cluster enrollment is managed from host resource.
func (o ComputeClusterOutput) HostManaged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.HostManaged }).(pulumi.BoolPtrOutput)
}

// The managed object IDs of the hosts to put in the cluster.
func (o ComputeClusterOutput) HostSystemIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringArrayOutput { return v.HostSystemIds }).(pulumi.StringArrayOutput)
}

// The name of the cluster.
func (o ComputeClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The DRS behavior for proactive HA recommendations. Can be one of Automated or Manual.
func (o ComputeClusterOutput) ProactiveHaAutomationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.ProactiveHaAutomationLevel }).(pulumi.StringPtrOutput)
}

// Enables proactive HA, allowing for vSphere to get HA data from external providers and use DRS to perform remediation.
func (o ComputeClusterOutput) ProactiveHaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.ProactiveHaEnabled }).(pulumi.BoolPtrOutput)
}

// The configured remediation for moderately degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that
// this cannot be set to MaintenanceMode when proactiveHaSevereRemediation is set to QuarantineMode.
func (o ComputeClusterOutput) ProactiveHaModerateRemediation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.ProactiveHaModerateRemediation }).(pulumi.StringPtrOutput)
}

// The list of IDs for health update providers configured for this cluster.
func (o ComputeClusterOutput) ProactiveHaProviderIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringArrayOutput { return v.ProactiveHaProviderIds }).(pulumi.StringArrayOutput)
}

// The configured remediation for severely degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that this
// cannot be set to QuarantineMode when proactiveHaModerateRemediation is set to MaintenanceMode.
func (o ComputeClusterOutput) ProactiveHaSevereRemediation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringPtrOutput { return v.ProactiveHaSevereRemediation }).(pulumi.StringPtrOutput)
}

// The managed object ID of the primary
// resource pool for this cluster. This can be passed directly to the
// `resourcePoolId`
// attribute of the
// `VirtualMachine` resource.
func (o ComputeClusterOutput) ResourcePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringOutput { return v.ResourcePoolId }).(pulumi.StringOutput)
}

// The IDs of any tags to attach to this resource.
func (o ComputeClusterOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Whether the vSAN compression service is enabled for the cluster.
func (o ComputeClusterOutput) VsanCompressionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.VsanCompressionEnabled }).(pulumi.BoolPtrOutput)
}

// Whether the vSAN deduplication service is enabled for the cluster.
func (o ComputeClusterOutput) VsanDedupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.VsanDedupEnabled }).(pulumi.BoolPtrOutput)
}

// A list of disk UUIDs to add to the vSAN cluster.
func (o ComputeClusterOutput) VsanDiskGroups() ComputeClusterVsanDiskGroupArrayOutput {
	return o.ApplyT(func(v *ComputeCluster) ComputeClusterVsanDiskGroupArrayOutput { return v.VsanDiskGroups }).(ComputeClusterVsanDiskGroupArrayOutput)
}

// Whether the vSAN data-in-transit encryption is enabled for the cluster.
func (o ComputeClusterOutput) VsanDitEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.VsanDitEncryptionEnabled }).(pulumi.BoolPtrOutput)
}

// When vsanDitEncryptionEnabled is enabled, sets the rekey interval of data-in-transit encryption (in minutes).
func (o ComputeClusterOutput) VsanDitRekeyInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.IntOutput { return v.VsanDitRekeyInterval }).(pulumi.IntOutput)
}

// Whether the vSAN service is enabled for the cluster.
func (o ComputeClusterOutput) VsanEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.VsanEnabled }).(pulumi.BoolPtrOutput)
}

// Whether the vSAN ESA service is enabled for the cluster.
func (o ComputeClusterOutput) VsanEsaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.VsanEsaEnabled }).(pulumi.BoolPtrOutput)
}

// The configuration for vSAN fault domains.
func (o ComputeClusterOutput) VsanFaultDomains() ComputeClusterVsanFaultDomainArrayOutput {
	return o.ApplyT(func(v *ComputeCluster) ComputeClusterVsanFaultDomainArrayOutput { return v.VsanFaultDomains }).(ComputeClusterVsanFaultDomainArrayOutput)
}

// Whether the vSAN network diagnostic mode is enabled for the cluster.
func (o ComputeClusterOutput) VsanNetworkDiagnosticModeEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.VsanNetworkDiagnosticModeEnabled }).(pulumi.BoolPtrOutput)
}

// Whether the vSAN performance service is enabled for the cluster.
func (o ComputeClusterOutput) VsanPerformanceEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.VsanPerformanceEnabled }).(pulumi.BoolPtrOutput)
}

// The managed object IDs of the vSAN datastore to be mounted on the cluster.
func (o ComputeClusterOutput) VsanRemoteDatastoreIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.StringArrayOutput { return v.VsanRemoteDatastoreIds }).(pulumi.StringArrayOutput)
}

// The configuration for stretched cluster.
func (o ComputeClusterOutput) VsanStretchedCluster() ComputeClusterVsanStretchedClusterPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) ComputeClusterVsanStretchedClusterPtrOutput { return v.VsanStretchedCluster }).(ComputeClusterVsanStretchedClusterPtrOutput)
}

// Whether the vSAN unmap service is enabled for the cluster.
func (o ComputeClusterOutput) VsanUnmapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.VsanUnmapEnabled }).(pulumi.BoolPtrOutput)
}

// Whether the vSAN verbose mode is enabled for the cluster.
func (o ComputeClusterOutput) VsanVerboseModeEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeCluster) pulumi.BoolPtrOutput { return v.VsanVerboseModeEnabled }).(pulumi.BoolPtrOutput)
}

type ComputeClusterArrayOutput struct{ *pulumi.OutputState }

func (ComputeClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeCluster)(nil)).Elem()
}

func (o ComputeClusterArrayOutput) ToComputeClusterArrayOutput() ComputeClusterArrayOutput {
	return o
}

func (o ComputeClusterArrayOutput) ToComputeClusterArrayOutputWithContext(ctx context.Context) ComputeClusterArrayOutput {
	return o
}

func (o ComputeClusterArrayOutput) Index(i pulumi.IntInput) ComputeClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComputeCluster {
		return vs[0].([]*ComputeCluster)[vs[1].(int)]
	}).(ComputeClusterOutput)
}

type ComputeClusterMapOutput struct{ *pulumi.OutputState }

func (ComputeClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeCluster)(nil)).Elem()
}

func (o ComputeClusterMapOutput) ToComputeClusterMapOutput() ComputeClusterMapOutput {
	return o
}

func (o ComputeClusterMapOutput) ToComputeClusterMapOutputWithContext(ctx context.Context) ComputeClusterMapOutput {
	return o
}

func (o ComputeClusterMapOutput) MapIndex(k pulumi.StringInput) ComputeClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComputeCluster {
		return vs[0].(map[string]*ComputeCluster)[vs[1].(string)]
	}).(ComputeClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterInput)(nil)).Elem(), &ComputeCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterArrayInput)(nil)).Elem(), ComputeClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterMapInput)(nil)).Elem(), ComputeClusterMap{})
	pulumi.RegisterOutputType(ComputeClusterOutput{})
	pulumi.RegisterOutputType(ComputeClusterArrayOutput{})
	pulumi.RegisterOutputType(ComputeClusterMapOutput{})
}
