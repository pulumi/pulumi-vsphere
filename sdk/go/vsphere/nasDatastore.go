// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The `vsphere_nas_datastore` resource can be used to create and manage NAS
// datastores on an ESXi host or a set of hosts. The resource supports mounting
// NFS v3 and v4.1 shares to be used as datastores.
// 
// ~> **NOTE:** Unlike [`vsphere_vmfs_datastore`][resource-vmfs-datastore], a NAS
// datastore is only mounted on the hosts you choose to mount it on. To mount on
// multiple hosts, you must specify each host that you want to add in the
// `host_system_ids` argument.
// 
// [resource-vmfs-datastore]: /docs/providers/vsphere/r/vmfs_datastore.html
type NasDatastore struct {
	s *pulumi.ResourceState
}

// NewNasDatastore registers a new resource with the given unique name, arguments, and options.
func NewNasDatastore(ctx *pulumi.Context,
	name string, args *NasDatastoreArgs, opts ...pulumi.ResourceOpt) (*NasDatastore, error) {
	if args == nil || args.HostSystemIds == nil {
		return nil, errors.New("missing required argument 'HostSystemIds'")
	}
	if args == nil || args.RemoteHosts == nil {
		return nil, errors.New("missing required argument 'RemoteHosts'")
	}
	if args == nil || args.RemotePath == nil {
		return nil, errors.New("missing required argument 'RemotePath'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessMode"] = nil
		inputs["customAttributes"] = nil
		inputs["datastoreClusterId"] = nil
		inputs["folder"] = nil
		inputs["hostSystemIds"] = nil
		inputs["name"] = nil
		inputs["remoteHosts"] = nil
		inputs["remotePath"] = nil
		inputs["securityType"] = nil
		inputs["tags"] = nil
		inputs["type"] = nil
	} else {
		inputs["accessMode"] = args.AccessMode
		inputs["customAttributes"] = args.CustomAttributes
		inputs["datastoreClusterId"] = args.DatastoreClusterId
		inputs["folder"] = args.Folder
		inputs["hostSystemIds"] = args.HostSystemIds
		inputs["name"] = args.Name
		inputs["remoteHosts"] = args.RemoteHosts
		inputs["remotePath"] = args.RemotePath
		inputs["securityType"] = args.SecurityType
		inputs["tags"] = args.Tags
		inputs["type"] = args.Type
	}
	inputs["accessible"] = nil
	inputs["capacity"] = nil
	inputs["freeSpace"] = nil
	inputs["maintenanceMode"] = nil
	inputs["multipleHostAccess"] = nil
	inputs["protocolEndpoint"] = nil
	inputs["uncommittedSpace"] = nil
	inputs["url"] = nil
	s, err := ctx.RegisterResource("vsphere:index/nasDatastore:NasDatastore", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NasDatastore{s: s}, nil
}

// GetNasDatastore gets an existing NasDatastore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNasDatastore(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NasDatastoreState, opts ...pulumi.ResourceOpt) (*NasDatastore, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessMode"] = state.AccessMode
		inputs["accessible"] = state.Accessible
		inputs["capacity"] = state.Capacity
		inputs["customAttributes"] = state.CustomAttributes
		inputs["datastoreClusterId"] = state.DatastoreClusterId
		inputs["folder"] = state.Folder
		inputs["freeSpace"] = state.FreeSpace
		inputs["hostSystemIds"] = state.HostSystemIds
		inputs["maintenanceMode"] = state.MaintenanceMode
		inputs["multipleHostAccess"] = state.MultipleHostAccess
		inputs["name"] = state.Name
		inputs["protocolEndpoint"] = state.ProtocolEndpoint
		inputs["remoteHosts"] = state.RemoteHosts
		inputs["remotePath"] = state.RemotePath
		inputs["securityType"] = state.SecurityType
		inputs["tags"] = state.Tags
		inputs["type"] = state.Type
		inputs["uncommittedSpace"] = state.UncommittedSpace
		inputs["url"] = state.Url
	}
	s, err := ctx.ReadResource("vsphere:index/nasDatastore:NasDatastore", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NasDatastore{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NasDatastore) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NasDatastore) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Access mode for the mount point. Can be one of
// `readOnly` or `readWrite`. Note that `readWrite` does not necessarily mean
// that the datastore will be read-write depending on the permissions of the
// actual share. Default: `readWrite`. Forces a new resource if changed.
func (r *NasDatastore) AccessMode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accessMode"])
}

// The connectivity status of the datastore. If this is `false`,
// some other computed attributes may be out of date.
func (r *NasDatastore) Accessible() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["accessible"])
}

// Maximum capacity of the datastore, in megabytes.
func (r *NasDatastore) Capacity() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["capacity"])
}

// Map of custom attribute ids to attribute 
// value strings to set on datasource resource. See
// [here][docs-setting-custom-attributes] for a reference on how to set values
// for custom attributes.
func (r *NasDatastore) CustomAttributes() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["customAttributes"])
}

// The [managed object
// ID][docs-about-morefs] of a datastore cluster to put this datastore in.
// Conflicts with `folder`.
func (r *NasDatastore) DatastoreClusterId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["datastoreClusterId"])
}

// The relative path to a folder to put this datastore in.
// This is a path relative to the datacenter you are deploying the datastore to.
// Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
// Terraform will place a datastore named `terraform-test` in a datastore folder
// located at `/dc1/datastore/foo/bar`, with the final inventory path being
// `/dc1/datastore/foo/bar/terraform-test`. Conflicts with
// `datastore_cluster_id`.
func (r *NasDatastore) Folder() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["folder"])
}

// Available space of this datastore, in megabytes.
func (r *NasDatastore) FreeSpace() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["freeSpace"])
}

// The [managed object IDs][docs-about-morefs] of
// the hosts to mount the datastore on.
func (r *NasDatastore) HostSystemIds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["hostSystemIds"])
}

// The current maintenance mode state of the datastore.
func (r *NasDatastore) MaintenanceMode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["maintenanceMode"])
}

// If `true`, more than one host in the datacenter has
// been configured with access to the datastore.
func (r *NasDatastore) MultipleHostAccess() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["multipleHostAccess"])
}

// The name of the datastore. Forces a new resource if
// changed.
func (r *NasDatastore) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Indicates that this NAS volume is a protocol endpoint.
// This field is only populated if the host supports virtual datastores.
func (r *NasDatastore) ProtocolEndpoint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["protocolEndpoint"])
}

// The hostnames or IP addresses of the remote
// server or servers. Only one element should be present for NFS v3 but multiple
// can be present for NFS v4.1. Forces a new resource if changed.
func (r *NasDatastore) RemoteHosts() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["remoteHosts"])
}

// The remote path of the mount point. Forces a new
// resource if changed.
func (r *NasDatastore) RemotePath() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["remotePath"])
}

// The security type to use when using NFS v4.1.
// Can be one of `AUTH_SYS`, `SEC_KRB5`, or `SEC_KRB5I`. Forces a new resource
// if changed.
func (r *NasDatastore) SecurityType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["securityType"])
}

// The IDs of any tags to attach to this resource. See
// [here][docs-applying-tags] for a reference on how to apply tags.
func (r *NasDatastore) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// The type of NAS volume. Can be one of `NFS` (to denote
// v3) or `NFS41` (to denote NFS v4.1). Default: `NFS`. Forces a new resource if
// changed.
func (r *NasDatastore) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Total additional storage space, in megabytes,
// potentially used by all virtual machines on this datastore.
func (r *NasDatastore) UncommittedSpace() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["uncommittedSpace"])
}

// The unique locator for the datastore.
func (r *NasDatastore) Url() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["url"])
}

// Input properties used for looking up and filtering NasDatastore resources.
type NasDatastoreState struct {
	// Access mode for the mount point. Can be one of
	// `readOnly` or `readWrite`. Note that `readWrite` does not necessarily mean
	// that the datastore will be read-write depending on the permissions of the
	// actual share. Default: `readWrite`. Forces a new resource if changed.
	AccessMode interface{}
	// The connectivity status of the datastore. If this is `false`,
	// some other computed attributes may be out of date.
	Accessible interface{}
	// Maximum capacity of the datastore, in megabytes.
	Capacity interface{}
	// Map of custom attribute ids to attribute 
	// value strings to set on datasource resource. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	CustomAttributes interface{}
	// The [managed object
	// ID][docs-about-morefs] of a datastore cluster to put this datastore in.
	// Conflicts with `folder`.
	DatastoreClusterId interface{}
	// The relative path to a folder to put this datastore in.
	// This is a path relative to the datacenter you are deploying the datastore to.
	// Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
	// Terraform will place a datastore named `terraform-test` in a datastore folder
	// located at `/dc1/datastore/foo/bar`, with the final inventory path being
	// `/dc1/datastore/foo/bar/terraform-test`. Conflicts with
	// `datastore_cluster_id`.
	Folder interface{}
	// Available space of this datastore, in megabytes.
	FreeSpace interface{}
	// The [managed object IDs][docs-about-morefs] of
	// the hosts to mount the datastore on.
	HostSystemIds interface{}
	// The current maintenance mode state of the datastore.
	MaintenanceMode interface{}
	// If `true`, more than one host in the datacenter has
	// been configured with access to the datastore.
	MultipleHostAccess interface{}
	// The name of the datastore. Forces a new resource if
	// changed.
	Name interface{}
	// Indicates that this NAS volume is a protocol endpoint.
	// This field is only populated if the host supports virtual datastores.
	ProtocolEndpoint interface{}
	// The hostnames or IP addresses of the remote
	// server or servers. Only one element should be present for NFS v3 but multiple
	// can be present for NFS v4.1. Forces a new resource if changed.
	RemoteHosts interface{}
	// The remote path of the mount point. Forces a new
	// resource if changed.
	RemotePath interface{}
	// The security type to use when using NFS v4.1.
	// Can be one of `AUTH_SYS`, `SEC_KRB5`, or `SEC_KRB5I`. Forces a new resource
	// if changed.
	SecurityType interface{}
	// The IDs of any tags to attach to this resource. See
	// [here][docs-applying-tags] for a reference on how to apply tags.
	Tags interface{}
	// The type of NAS volume. Can be one of `NFS` (to denote
	// v3) or `NFS41` (to denote NFS v4.1). Default: `NFS`. Forces a new resource if
	// changed.
	Type interface{}
	// Total additional storage space, in megabytes,
	// potentially used by all virtual machines on this datastore.
	UncommittedSpace interface{}
	// The unique locator for the datastore.
	Url interface{}
}

// The set of arguments for constructing a NasDatastore resource.
type NasDatastoreArgs struct {
	// Access mode for the mount point. Can be one of
	// `readOnly` or `readWrite`. Note that `readWrite` does not necessarily mean
	// that the datastore will be read-write depending on the permissions of the
	// actual share. Default: `readWrite`. Forces a new resource if changed.
	AccessMode interface{}
	// Map of custom attribute ids to attribute 
	// value strings to set on datasource resource. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	CustomAttributes interface{}
	// The [managed object
	// ID][docs-about-morefs] of a datastore cluster to put this datastore in.
	// Conflicts with `folder`.
	DatastoreClusterId interface{}
	// The relative path to a folder to put this datastore in.
	// This is a path relative to the datacenter you are deploying the datastore to.
	// Example: for the `dc1` datacenter, and a provided `folder` of `foo/bar`,
	// Terraform will place a datastore named `terraform-test` in a datastore folder
	// located at `/dc1/datastore/foo/bar`, with the final inventory path being
	// `/dc1/datastore/foo/bar/terraform-test`. Conflicts with
	// `datastore_cluster_id`.
	Folder interface{}
	// The [managed object IDs][docs-about-morefs] of
	// the hosts to mount the datastore on.
	HostSystemIds interface{}
	// The name of the datastore. Forces a new resource if
	// changed.
	Name interface{}
	// The hostnames or IP addresses of the remote
	// server or servers. Only one element should be present for NFS v3 but multiple
	// can be present for NFS v4.1. Forces a new resource if changed.
	RemoteHosts interface{}
	// The remote path of the mount point. Forces a new
	// resource if changed.
	RemotePath interface{}
	// The security type to use when using NFS v4.1.
	// Can be one of `AUTH_SYS`, `SEC_KRB5`, or `SEC_KRB5I`. Forces a new resource
	// if changed.
	SecurityType interface{}
	// The IDs of any tags to attach to this resource. See
	// [here][docs-applying-tags] for a reference on how to apply tags.
	Tags interface{}
	// The type of NAS volume. Can be one of `NFS` (to denote
	// v3) or `NFS41` (to denote NFS v4.1). Default: `NFS`. Forces a new resource if
	// changed.
	Type interface{}
}
