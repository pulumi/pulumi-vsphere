// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `StorageDrsVmOverride` resource can be used to add a Storage DRS
// override to a datastore cluster for a specific virtual machine. With this
// resource, one can enable or disable Storage DRS, and control the automation
// level and disk affinity for a single virtual machine without affecting the rest
// of the datastore cluster.
//
// For more information on vSphere datastore clusters and Storage DRS, see [this
// page][ref-vsphere-datastore-clusters].
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			datacenter, err := vsphere.LookupDatacenter(ctx, &vsphere.LookupDatacenterArgs{
//				Name: pulumi.StringRef("dc-01"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			datastoreCluster, err := vsphere.LookupDatastoreCluster(ctx, &vsphere.LookupDatastoreClusterArgs{
//				Name:         "datastore-cluster1",
//				DatacenterId: pulumi.StringRef(datacenter.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			memberDatastore, err := vsphere.GetDatastore(ctx, &vsphere.GetDatastoreArgs{
//				Name:         "datastore-cluster1-member1",
//				DatacenterId: pulumi.StringRef(datacenter.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			pool, err := vsphere.LookupResourcePool(ctx, &vsphere.LookupResourcePoolArgs{
//				Name:         pulumi.StringRef("cluster1/Resources"),
//				DatacenterId: pulumi.StringRef(datacenter.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			network, err := vsphere.GetNetwork(ctx, &vsphere.GetNetworkArgs{
//				Name:         "public",
//				DatacenterId: pulumi.StringRef(datacenter.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vm, err := vsphere.NewVirtualMachine(ctx, "vm", &vsphere.VirtualMachineArgs{
//				Name:           pulumi.String("test"),
//				ResourcePoolId: pulumi.String(pool.Id),
//				DatastoreId:    pulumi.String(memberDatastore.Id),
//				NumCpus:        pulumi.Int(2),
//				Memory:         pulumi.Int(1024),
//				GuestId:        pulumi.String("otherLinux64Guest"),
//				NetworkInterfaces: vsphere.VirtualMachineNetworkInterfaceArray{
//					&vsphere.VirtualMachineNetworkInterfaceArgs{
//						NetworkId: pulumi.String(network.Id),
//					},
//				},
//				Disks: vsphere.VirtualMachineDiskArray{
//					&vsphere.VirtualMachineDiskArgs{
//						Label: pulumi.String("disk0"),
//						Size:  pulumi.Int(20),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vsphere.NewStorageDrsVmOverride(ctx, "drs_vm_override", &vsphere.StorageDrsVmOverrideArgs{
//				DatastoreClusterId: pulumi.String(datastoreCluster.Id),
//				VirtualMachineId:   vm.ID(),
//				SdrsEnabled:        pulumi.String("false"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # An existing override can be imported into this resource by
//
// supplying both the path to the datastore cluster and the path to the virtual
//
// machine to `pulumi import`. If no override exists, an error will be given.
//
// An example is below:
//
// ```sh
// $ pulumi import vsphere:index/storageDrsVmOverride:StorageDrsVmOverride drs_vm_override \
// ```
//
//	'{"datastore_cluster_path": "/dc1/datastore/ds-cluster", \
//
//	"virtual_machine_path": "/dc1/vm/srv1"}'
//
// [ref-vsphere-datastore-clusters]: https://techdocs.broadcom.com/us/en/vmware-cis/vsphere/vsphere/8-0/vsphere-resource-management-8-0/creating-a-datastore-cluster.html
//
// [docs-import]: https://developer.hashicorp.com/terraform/cli/import
type StorageDrsVmOverride struct {
	pulumi.CustomResourceState

	// The managed object reference
	// ID of the datastore cluster to put the override in.
	// Forces a new resource if changed.
	DatastoreClusterId pulumi.StringOutput `pulumi:"datastoreClusterId"`
	// Overrides any Storage DRS automation
	// levels for this virtual machine. Can be one of `automated` or `manual`. When
	// not specified, the datastore cluster's settings are used according to the
	// specific SDRS subsystem.
	SdrsAutomationLevel pulumi.StringPtrOutput `pulumi:"sdrsAutomationLevel"`
	// Overrides the default Storage DRS setting for
	// this virtual machine. When not specified, the datastore cluster setting is
	// used.
	SdrsEnabled pulumi.StringPtrOutput `pulumi:"sdrsEnabled"`
	// Overrides the intra-VM affinity setting
	// for this virtual machine. When `true`, all disks for this virtual machine
	// will be kept on the same datastore. When `false`, Storage DRS may locate
	// individual disks on different datastores if it helps satisfy cluster
	// requirements. When not specified, the datastore cluster's settings are used.
	SdrsIntraVmAffinity pulumi.StringPtrOutput `pulumi:"sdrsIntraVmAffinity"`
	// The UUID of the virtual machine to create
	// the override for.  Forces a new resource if changed.
	VirtualMachineId pulumi.StringOutput `pulumi:"virtualMachineId"`
}

// NewStorageDrsVmOverride registers a new resource with the given unique name, arguments, and options.
func NewStorageDrsVmOverride(ctx *pulumi.Context,
	name string, args *StorageDrsVmOverrideArgs, opts ...pulumi.ResourceOption) (*StorageDrsVmOverride, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatastoreClusterId == nil {
		return nil, errors.New("invalid value for required argument 'DatastoreClusterId'")
	}
	if args.VirtualMachineId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualMachineId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StorageDrsVmOverride
	err := ctx.RegisterResource("vsphere:index/storageDrsVmOverride:StorageDrsVmOverride", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageDrsVmOverride gets an existing StorageDrsVmOverride resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageDrsVmOverride(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageDrsVmOverrideState, opts ...pulumi.ResourceOption) (*StorageDrsVmOverride, error) {
	var resource StorageDrsVmOverride
	err := ctx.ReadResource("vsphere:index/storageDrsVmOverride:StorageDrsVmOverride", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageDrsVmOverride resources.
type storageDrsVmOverrideState struct {
	// The managed object reference
	// ID of the datastore cluster to put the override in.
	// Forces a new resource if changed.
	DatastoreClusterId *string `pulumi:"datastoreClusterId"`
	// Overrides any Storage DRS automation
	// levels for this virtual machine. Can be one of `automated` or `manual`. When
	// not specified, the datastore cluster's settings are used according to the
	// specific SDRS subsystem.
	SdrsAutomationLevel *string `pulumi:"sdrsAutomationLevel"`
	// Overrides the default Storage DRS setting for
	// this virtual machine. When not specified, the datastore cluster setting is
	// used.
	SdrsEnabled *string `pulumi:"sdrsEnabled"`
	// Overrides the intra-VM affinity setting
	// for this virtual machine. When `true`, all disks for this virtual machine
	// will be kept on the same datastore. When `false`, Storage DRS may locate
	// individual disks on different datastores if it helps satisfy cluster
	// requirements. When not specified, the datastore cluster's settings are used.
	SdrsIntraVmAffinity *string `pulumi:"sdrsIntraVmAffinity"`
	// The UUID of the virtual machine to create
	// the override for.  Forces a new resource if changed.
	VirtualMachineId *string `pulumi:"virtualMachineId"`
}

type StorageDrsVmOverrideState struct {
	// The managed object reference
	// ID of the datastore cluster to put the override in.
	// Forces a new resource if changed.
	DatastoreClusterId pulumi.StringPtrInput
	// Overrides any Storage DRS automation
	// levels for this virtual machine. Can be one of `automated` or `manual`. When
	// not specified, the datastore cluster's settings are used according to the
	// specific SDRS subsystem.
	SdrsAutomationLevel pulumi.StringPtrInput
	// Overrides the default Storage DRS setting for
	// this virtual machine. When not specified, the datastore cluster setting is
	// used.
	SdrsEnabled pulumi.StringPtrInput
	// Overrides the intra-VM affinity setting
	// for this virtual machine. When `true`, all disks for this virtual machine
	// will be kept on the same datastore. When `false`, Storage DRS may locate
	// individual disks on different datastores if it helps satisfy cluster
	// requirements. When not specified, the datastore cluster's settings are used.
	SdrsIntraVmAffinity pulumi.StringPtrInput
	// The UUID of the virtual machine to create
	// the override for.  Forces a new resource if changed.
	VirtualMachineId pulumi.StringPtrInput
}

func (StorageDrsVmOverrideState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageDrsVmOverrideState)(nil)).Elem()
}

type storageDrsVmOverrideArgs struct {
	// The managed object reference
	// ID of the datastore cluster to put the override in.
	// Forces a new resource if changed.
	DatastoreClusterId string `pulumi:"datastoreClusterId"`
	// Overrides any Storage DRS automation
	// levels for this virtual machine. Can be one of `automated` or `manual`. When
	// not specified, the datastore cluster's settings are used according to the
	// specific SDRS subsystem.
	SdrsAutomationLevel *string `pulumi:"sdrsAutomationLevel"`
	// Overrides the default Storage DRS setting for
	// this virtual machine. When not specified, the datastore cluster setting is
	// used.
	SdrsEnabled *string `pulumi:"sdrsEnabled"`
	// Overrides the intra-VM affinity setting
	// for this virtual machine. When `true`, all disks for this virtual machine
	// will be kept on the same datastore. When `false`, Storage DRS may locate
	// individual disks on different datastores if it helps satisfy cluster
	// requirements. When not specified, the datastore cluster's settings are used.
	SdrsIntraVmAffinity *string `pulumi:"sdrsIntraVmAffinity"`
	// The UUID of the virtual machine to create
	// the override for.  Forces a new resource if changed.
	VirtualMachineId string `pulumi:"virtualMachineId"`
}

// The set of arguments for constructing a StorageDrsVmOverride resource.
type StorageDrsVmOverrideArgs struct {
	// The managed object reference
	// ID of the datastore cluster to put the override in.
	// Forces a new resource if changed.
	DatastoreClusterId pulumi.StringInput
	// Overrides any Storage DRS automation
	// levels for this virtual machine. Can be one of `automated` or `manual`. When
	// not specified, the datastore cluster's settings are used according to the
	// specific SDRS subsystem.
	SdrsAutomationLevel pulumi.StringPtrInput
	// Overrides the default Storage DRS setting for
	// this virtual machine. When not specified, the datastore cluster setting is
	// used.
	SdrsEnabled pulumi.StringPtrInput
	// Overrides the intra-VM affinity setting
	// for this virtual machine. When `true`, all disks for this virtual machine
	// will be kept on the same datastore. When `false`, Storage DRS may locate
	// individual disks on different datastores if it helps satisfy cluster
	// requirements. When not specified, the datastore cluster's settings are used.
	SdrsIntraVmAffinity pulumi.StringPtrInput
	// The UUID of the virtual machine to create
	// the override for.  Forces a new resource if changed.
	VirtualMachineId pulumi.StringInput
}

func (StorageDrsVmOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageDrsVmOverrideArgs)(nil)).Elem()
}

type StorageDrsVmOverrideInput interface {
	pulumi.Input

	ToStorageDrsVmOverrideOutput() StorageDrsVmOverrideOutput
	ToStorageDrsVmOverrideOutputWithContext(ctx context.Context) StorageDrsVmOverrideOutput
}

func (*StorageDrsVmOverride) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageDrsVmOverride)(nil)).Elem()
}

func (i *StorageDrsVmOverride) ToStorageDrsVmOverrideOutput() StorageDrsVmOverrideOutput {
	return i.ToStorageDrsVmOverrideOutputWithContext(context.Background())
}

func (i *StorageDrsVmOverride) ToStorageDrsVmOverrideOutputWithContext(ctx context.Context) StorageDrsVmOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageDrsVmOverrideOutput)
}

// StorageDrsVmOverrideArrayInput is an input type that accepts StorageDrsVmOverrideArray and StorageDrsVmOverrideArrayOutput values.
// You can construct a concrete instance of `StorageDrsVmOverrideArrayInput` via:
//
//	StorageDrsVmOverrideArray{ StorageDrsVmOverrideArgs{...} }
type StorageDrsVmOverrideArrayInput interface {
	pulumi.Input

	ToStorageDrsVmOverrideArrayOutput() StorageDrsVmOverrideArrayOutput
	ToStorageDrsVmOverrideArrayOutputWithContext(context.Context) StorageDrsVmOverrideArrayOutput
}

type StorageDrsVmOverrideArray []StorageDrsVmOverrideInput

func (StorageDrsVmOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageDrsVmOverride)(nil)).Elem()
}

func (i StorageDrsVmOverrideArray) ToStorageDrsVmOverrideArrayOutput() StorageDrsVmOverrideArrayOutput {
	return i.ToStorageDrsVmOverrideArrayOutputWithContext(context.Background())
}

func (i StorageDrsVmOverrideArray) ToStorageDrsVmOverrideArrayOutputWithContext(ctx context.Context) StorageDrsVmOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageDrsVmOverrideArrayOutput)
}

// StorageDrsVmOverrideMapInput is an input type that accepts StorageDrsVmOverrideMap and StorageDrsVmOverrideMapOutput values.
// You can construct a concrete instance of `StorageDrsVmOverrideMapInput` via:
//
//	StorageDrsVmOverrideMap{ "key": StorageDrsVmOverrideArgs{...} }
type StorageDrsVmOverrideMapInput interface {
	pulumi.Input

	ToStorageDrsVmOverrideMapOutput() StorageDrsVmOverrideMapOutput
	ToStorageDrsVmOverrideMapOutputWithContext(context.Context) StorageDrsVmOverrideMapOutput
}

type StorageDrsVmOverrideMap map[string]StorageDrsVmOverrideInput

func (StorageDrsVmOverrideMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageDrsVmOverride)(nil)).Elem()
}

func (i StorageDrsVmOverrideMap) ToStorageDrsVmOverrideMapOutput() StorageDrsVmOverrideMapOutput {
	return i.ToStorageDrsVmOverrideMapOutputWithContext(context.Background())
}

func (i StorageDrsVmOverrideMap) ToStorageDrsVmOverrideMapOutputWithContext(ctx context.Context) StorageDrsVmOverrideMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageDrsVmOverrideMapOutput)
}

type StorageDrsVmOverrideOutput struct{ *pulumi.OutputState }

func (StorageDrsVmOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageDrsVmOverride)(nil)).Elem()
}

func (o StorageDrsVmOverrideOutput) ToStorageDrsVmOverrideOutput() StorageDrsVmOverrideOutput {
	return o
}

func (o StorageDrsVmOverrideOutput) ToStorageDrsVmOverrideOutputWithContext(ctx context.Context) StorageDrsVmOverrideOutput {
	return o
}

// The managed object reference
// ID of the datastore cluster to put the override in.
// Forces a new resource if changed.
func (o StorageDrsVmOverrideOutput) DatastoreClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageDrsVmOverride) pulumi.StringOutput { return v.DatastoreClusterId }).(pulumi.StringOutput)
}

// Overrides any Storage DRS automation
// levels for this virtual machine. Can be one of `automated` or `manual`. When
// not specified, the datastore cluster's settings are used according to the
// specific SDRS subsystem.
func (o StorageDrsVmOverrideOutput) SdrsAutomationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageDrsVmOverride) pulumi.StringPtrOutput { return v.SdrsAutomationLevel }).(pulumi.StringPtrOutput)
}

// Overrides the default Storage DRS setting for
// this virtual machine. When not specified, the datastore cluster setting is
// used.
func (o StorageDrsVmOverrideOutput) SdrsEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageDrsVmOverride) pulumi.StringPtrOutput { return v.SdrsEnabled }).(pulumi.StringPtrOutput)
}

// Overrides the intra-VM affinity setting
// for this virtual machine. When `true`, all disks for this virtual machine
// will be kept on the same datastore. When `false`, Storage DRS may locate
// individual disks on different datastores if it helps satisfy cluster
// requirements. When not specified, the datastore cluster's settings are used.
func (o StorageDrsVmOverrideOutput) SdrsIntraVmAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageDrsVmOverride) pulumi.StringPtrOutput { return v.SdrsIntraVmAffinity }).(pulumi.StringPtrOutput)
}

// The UUID of the virtual machine to create
// the override for.  Forces a new resource if changed.
func (o StorageDrsVmOverrideOutput) VirtualMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageDrsVmOverride) pulumi.StringOutput { return v.VirtualMachineId }).(pulumi.StringOutput)
}

type StorageDrsVmOverrideArrayOutput struct{ *pulumi.OutputState }

func (StorageDrsVmOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageDrsVmOverride)(nil)).Elem()
}

func (o StorageDrsVmOverrideArrayOutput) ToStorageDrsVmOverrideArrayOutput() StorageDrsVmOverrideArrayOutput {
	return o
}

func (o StorageDrsVmOverrideArrayOutput) ToStorageDrsVmOverrideArrayOutputWithContext(ctx context.Context) StorageDrsVmOverrideArrayOutput {
	return o
}

func (o StorageDrsVmOverrideArrayOutput) Index(i pulumi.IntInput) StorageDrsVmOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StorageDrsVmOverride {
		return vs[0].([]*StorageDrsVmOverride)[vs[1].(int)]
	}).(StorageDrsVmOverrideOutput)
}

type StorageDrsVmOverrideMapOutput struct{ *pulumi.OutputState }

func (StorageDrsVmOverrideMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageDrsVmOverride)(nil)).Elem()
}

func (o StorageDrsVmOverrideMapOutput) ToStorageDrsVmOverrideMapOutput() StorageDrsVmOverrideMapOutput {
	return o
}

func (o StorageDrsVmOverrideMapOutput) ToStorageDrsVmOverrideMapOutputWithContext(ctx context.Context) StorageDrsVmOverrideMapOutput {
	return o
}

func (o StorageDrsVmOverrideMapOutput) MapIndex(k pulumi.StringInput) StorageDrsVmOverrideOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StorageDrsVmOverride {
		return vs[0].(map[string]*StorageDrsVmOverride)[vs[1].(string)]
	}).(StorageDrsVmOverrideOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StorageDrsVmOverrideInput)(nil)).Elem(), &StorageDrsVmOverride{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageDrsVmOverrideArrayInput)(nil)).Elem(), StorageDrsVmOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageDrsVmOverrideMapInput)(nil)).Elem(), StorageDrsVmOverrideMap{})
	pulumi.RegisterOutputType(StorageDrsVmOverrideOutput{})
	pulumi.RegisterOutputType(StorageDrsVmOverrideArrayOutput{})
	pulumi.RegisterOutputType(StorageDrsVmOverrideMapOutput{})
}
