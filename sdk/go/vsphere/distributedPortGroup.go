// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `DistributedPortGroup` resource can be used to manage
// distributed port groups connected to vSphere Distributed Switches (VDS).
// A vSphere Distributed Switch can be managed by the
// `DistributedVirtualSwitch` resource.
//
// Distributed port groups can be used as networks for virtual machines, allowing
// the virtual machines to use the networking supplied by a vSphere Distributed
// Switch, with a set of policies that apply to that individual network, if
// desired.
//
// * For an overview on vSphere networking concepts, refer to the vSphere
// [product documentation][ref-vsphere-net-concepts].
//
// * For more information on distributed port groups, refer to the vSphere
// [product documentation][ref-vsphere-dvportgroup].
//
// > **NOTE:** This resource requires vCenter and is not available on
// direct ESXi host connections.
//
// ### Overriding VDS policies
//
// All of the default port policies available in the
// `DistributedVirtualSwitch` resource can be overridden on the port
// group level by specifying new settings for them.
//
// As an example, we also take this example from the
// `DistributedVirtualSwitch` resource where we manually specify our
// uplink count and uplink order. While the vSphere Distributed Switch has a
// default policy of using the first uplink as an active uplink and the second
// one as a standby, the overridden port group policy means that both uplinks
// will be used as active uplinks in this specific port group.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vds, err := vsphere.NewDistributedVirtualSwitch(ctx, "vds", &vsphere.DistributedVirtualSwitchArgs{
//				Name:         pulumi.String("vds-01"),
//				DatacenterId: pulumi.Any(datacenter.Id),
//				Uplinks: pulumi.StringArray{
//					pulumi.String("uplink1"),
//					pulumi.String("uplink2"),
//				},
//				ActiveUplinks: pulumi.StringArray{
//					pulumi.String("uplink1"),
//				},
//				StandbyUplinks: pulumi.StringArray{
//					pulumi.String("uplink2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vsphere.NewDistributedPortGroup(ctx, "pg", &vsphere.DistributedPortGroupArgs{
//				Name:                         pulumi.String("pg-01"),
//				DistributedVirtualSwitchUuid: vds.ID(),
//				VlanId:                       pulumi.Int(1000),
//				ActiveUplinks: pulumi.StringArray{
//					pulumi.String("uplink1"),
//					pulumi.String("uplink2"),
//				},
//				StandbyUplinks: pulumi.StringArray{},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # An existing port group can be imported into this resource using
//
// the managed object id of the port group, via the following command:
//
// ```sh
// $ pulumi import vsphere:index/distributedPortGroup:DistributedPortGroup pg /dc-01/network/pg-01
// ```
//
// The above would import the port group named `pg-01` that is located in the `dc-01`
//
// datacenter.
//
// [ref-vsphere-net-concepts]: https://techdocs.broadcom.com/us/en/vmware-cis/vsphere/vsphere/8-0/vsphere-networking-8-0/introduction-to-vsphere-networking.html
// [ref-vsphere-dvportgroup]: https://techdocs.broadcom.com/us/en/vmware-cis/vsphere/vsphere/8-0/vsphere-networking-8-0/basic-networking-with-vnetwork-distributed-switches/dvport-groups.html
type DistributedPortGroup struct {
	pulumi.CustomResourceState

	// List of active uplinks used for load balancing, matching the names of the uplinks assigned in the DVS.
	ActiveUplinks pulumi.StringArrayOutput `pulumi:"activeUplinks"`
	// Controls whether or not the virtual network adapter is allowed to send network traffic with a different MAC address than
	// that of its own.
	AllowForgedTransmits pulumi.BoolOutput `pulumi:"allowForgedTransmits"`
	// Controls whether or not the Media Access Control (MAC) address can be changed.
	AllowMacChanges pulumi.BoolOutput `pulumi:"allowMacChanges"`
	// Enable promiscuous mode on the network. This flag indicates whether or not all traffic is seen on a given port.
	AllowPromiscuous pulumi.BoolOutput `pulumi:"allowPromiscuous"`
	// Allows the port group to create additional ports
	// past the limit specified in `numberOfPorts` if necessary. Default: `true`.
	//
	// > **NOTE:** Using `autoExpand` with a statically defined `numberOfPorts`
	// may lead to errors when the port count grows past the amount specified.  If you
	// specify `numberOfPorts`, you may wish to set `autoExpand` to `false`.
	AutoExpand pulumi.BoolPtrOutput `pulumi:"autoExpand"`
	// Indicates whether to block all ports by default.
	BlockAllPorts pulumi.BoolOutput `pulumi:"blockAllPorts"`
	// Allow the blocked setting of an individual port to override the setting in the portgroup.
	BlockOverrideAllowed pulumi.BoolPtrOutput `pulumi:"blockOverrideAllowed"`
	// Enable beacon probing on the ports this policy applies to.
	CheckBeacon pulumi.BoolOutput `pulumi:"checkBeacon"`
	// The current version of the port group configuration,
	// incremented by subsequent updates to the port group.
	ConfigVersion pulumi.StringOutput `pulumi:"configVersion"`
	// Map of custom attribute ids to attribute
	// value string to set for port group.
	//
	// > **NOTE:** Custom attributes are not supported on direct ESXi host
	// connections and require vCenter Server.
	CustomAttributes pulumi.StringMapOutput `pulumi:"customAttributes"`
	// An optional description for the port group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Allow VMDirectPath Gen2 on the ports this policy applies to.
	DirectpathGen2Allowed pulumi.BoolOutput `pulumi:"directpathGen2Allowed"`
	// The ID of the VDS to add the
	// port group to. Forces a new resource if changed.
	DistributedVirtualSwitchUuid pulumi.StringOutput `pulumi:"distributedVirtualSwitchUuid"`
	// The average egress bandwidth in bits per second if egress shaping is enabled on the port.
	EgressShapingAverageBandwidth pulumi.IntOutput `pulumi:"egressShapingAverageBandwidth"`
	// The maximum egress burst size allowed in bytes if egress shaping is enabled on the port.
	EgressShapingBurstSize pulumi.IntOutput `pulumi:"egressShapingBurstSize"`
	// True if the traffic shaper is enabled for egress traffic on the port.
	EgressShapingEnabled pulumi.BoolOutput `pulumi:"egressShapingEnabled"`
	// The peak egress bandwidth during bursts in bits per second if egress traffic shaping is enabled on the port.
	EgressShapingPeakBandwidth pulumi.IntOutput `pulumi:"egressShapingPeakBandwidth"`
	// If true, the teaming policy will re-activate failed interfaces higher in precedence when they come back up.
	Failback pulumi.BoolOutput `pulumi:"failback"`
	// The average ingress bandwidth in bits per second if ingress shaping is enabled on the port.
	IngressShapingAverageBandwidth pulumi.IntOutput `pulumi:"ingressShapingAverageBandwidth"`
	// The maximum ingress burst size allowed in bytes if ingress shaping is enabled on the port.
	IngressShapingBurstSize pulumi.IntOutput `pulumi:"ingressShapingBurstSize"`
	// True if the traffic shaper is enabled for ingress traffic on the port.
	IngressShapingEnabled pulumi.BoolOutput `pulumi:"ingressShapingEnabled"`
	// The peak ingress bandwidth during bursts in bits per second if ingress traffic shaping is enabled on the port.
	IngressShapingPeakBandwidth pulumi.IntOutput `pulumi:"ingressShapingPeakBandwidth"`
	// The generated UUID of the port group.
	Key pulumi.StringOutput `pulumi:"key"`
	// Whether or not to enable LACP on all uplink ports.
	LacpEnabled pulumi.BoolOutput `pulumi:"lacpEnabled"`
	// The uplink LACP mode to use. Can be one of active or passive.
	LacpMode pulumi.StringOutput `pulumi:"lacpMode"`
	// Allow a live port to be moved in and out of the portgroup.
	LivePortMovingAllowed pulumi.BoolPtrOutput `pulumi:"livePortMovingAllowed"`
	// The name of the port group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Indicates whether to enable netflow on all ports.
	NetflowEnabled pulumi.BoolOutput `pulumi:"netflowEnabled"`
	// Allow the enabling or disabling of Netflow on a port, contrary to the policy in the portgroup.
	NetflowOverrideAllowed pulumi.BoolPtrOutput `pulumi:"netflowOverrideAllowed"`
	// The key of a network resource pool
	// to associate with this port group. The default is `-1`, which implies no
	// association.
	NetworkResourcePoolKey pulumi.StringPtrOutput `pulumi:"networkResourcePoolKey"`
	// Allow the network resource pool of an individual port to override the setting in the portgroup.
	NetworkResourcePoolOverrideAllowed pulumi.BoolPtrOutput `pulumi:"networkResourcePoolOverrideAllowed"`
	// If true, the teaming policy will notify the broadcast network of a NIC failover, triggering cache updates.
	NotifySwitches pulumi.BoolOutput `pulumi:"notifySwitches"`
	// The number of ports available on this port
	// group. Cannot be decreased below the amount of used ports on the port group.
	NumberOfPorts pulumi.IntOutput `pulumi:"numberOfPorts"`
	// Reset the setting of any ports in this portgroup back to the default setting when the port disconnects.
	PortConfigResetAtDisconnect pulumi.BoolPtrOutput `pulumi:"portConfigResetAtDisconnect"`
	// An optional formatting policy for naming of
	// the ports in this port group. See the `portNameFormat` attribute listed
	// [here][ext-vsphere-portname-format] for details on the format syntax.
	//
	// [ext-vsphere-portname-format]: https://developer.broadcom.com/xapis/virtual-infrastructure-json-api/latest/data-structures/DVPortgroupConfigInfo/
	PortNameFormat pulumi.StringPtrOutput `pulumi:"portNameFormat"`
	// The secondary VLAN ID for this port.
	PortPrivateSecondaryVlanId pulumi.IntOutput `pulumi:"portPrivateSecondaryVlanId"`
	// Allow security policy settings on a port to override those on the portgroup.
	SecurityPolicyOverrideAllowed pulumi.BoolPtrOutput `pulumi:"securityPolicyOverrideAllowed"`
	// Allow the traffic shaping policies of an individual port to override the settings in the portgroup.
	ShapingOverrideAllowed pulumi.BoolPtrOutput `pulumi:"shapingOverrideAllowed"`
	// List of standby uplinks used for load balancing, matching the names of the uplinks assigned in the DVS.
	StandbyUplinks pulumi.StringArrayOutput `pulumi:"standbyUplinks"`
	// A list of tag IDs to apply to this object.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The network adapter teaming policy. Can be one of loadbalance_ip, loadbalance_srcmac, loadbalance_srcid,
	// failover_explicit, or loadbalance_loadbased.
	TeamingPolicy pulumi.StringOutput `pulumi:"teamingPolicy"`
	// Allow any filter policies set on the individual port to override those in the portgroup.
	TrafficFilterOverrideAllowed pulumi.BoolPtrOutput `pulumi:"trafficFilterOverrideAllowed"`
	// If true, a copy of packets sent to the switch will always be forwarded to an uplink in addition to the regular packet
	// forwarded done by the switch.
	TxUplink pulumi.BoolOutput `pulumi:"txUplink"`
	// The port group type. Can be one of `earlyBinding` (static
	// binding) or `ephemeral`. Default: `earlyBinding`.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// Allow the uplink teaming policies on a port to override those on the portgroup.
	UplinkTeamingOverrideAllowed pulumi.BoolPtrOutput `pulumi:"uplinkTeamingOverrideAllowed"`
	// The VLAN ID for single VLAN mode. 0 denotes no VLAN.
	VlanId pulumi.IntOutput `pulumi:"vlanId"`
	// Allow the VLAN configuration on a port to override those on the portgroup.
	VlanOverrideAllowed pulumi.BoolPtrOutput `pulumi:"vlanOverrideAllowed"`
	// The VLAN ID for single VLAN mode. 0 denotes no VLAN.
	VlanRanges DistributedPortGroupVlanRangeArrayOutput `pulumi:"vlanRanges"`
}

// NewDistributedPortGroup registers a new resource with the given unique name, arguments, and options.
func NewDistributedPortGroup(ctx *pulumi.Context,
	name string, args *DistributedPortGroupArgs, opts ...pulumi.ResourceOption) (*DistributedPortGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DistributedVirtualSwitchUuid == nil {
		return nil, errors.New("invalid value for required argument 'DistributedVirtualSwitchUuid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DistributedPortGroup
	err := ctx.RegisterResource("vsphere:index/distributedPortGroup:DistributedPortGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDistributedPortGroup gets an existing DistributedPortGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDistributedPortGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DistributedPortGroupState, opts ...pulumi.ResourceOption) (*DistributedPortGroup, error) {
	var resource DistributedPortGroup
	err := ctx.ReadResource("vsphere:index/distributedPortGroup:DistributedPortGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DistributedPortGroup resources.
type distributedPortGroupState struct {
	// List of active uplinks used for load balancing, matching the names of the uplinks assigned in the DVS.
	ActiveUplinks []string `pulumi:"activeUplinks"`
	// Controls whether or not the virtual network adapter is allowed to send network traffic with a different MAC address than
	// that of its own.
	AllowForgedTransmits *bool `pulumi:"allowForgedTransmits"`
	// Controls whether or not the Media Access Control (MAC) address can be changed.
	AllowMacChanges *bool `pulumi:"allowMacChanges"`
	// Enable promiscuous mode on the network. This flag indicates whether or not all traffic is seen on a given port.
	AllowPromiscuous *bool `pulumi:"allowPromiscuous"`
	// Allows the port group to create additional ports
	// past the limit specified in `numberOfPorts` if necessary. Default: `true`.
	//
	// > **NOTE:** Using `autoExpand` with a statically defined `numberOfPorts`
	// may lead to errors when the port count grows past the amount specified.  If you
	// specify `numberOfPorts`, you may wish to set `autoExpand` to `false`.
	AutoExpand *bool `pulumi:"autoExpand"`
	// Indicates whether to block all ports by default.
	BlockAllPorts *bool `pulumi:"blockAllPorts"`
	// Allow the blocked setting of an individual port to override the setting in the portgroup.
	BlockOverrideAllowed *bool `pulumi:"blockOverrideAllowed"`
	// Enable beacon probing on the ports this policy applies to.
	CheckBeacon *bool `pulumi:"checkBeacon"`
	// The current version of the port group configuration,
	// incremented by subsequent updates to the port group.
	ConfigVersion *string `pulumi:"configVersion"`
	// Map of custom attribute ids to attribute
	// value string to set for port group.
	//
	// > **NOTE:** Custom attributes are not supported on direct ESXi host
	// connections and require vCenter Server.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// An optional description for the port group.
	Description *string `pulumi:"description"`
	// Allow VMDirectPath Gen2 on the ports this policy applies to.
	DirectpathGen2Allowed *bool `pulumi:"directpathGen2Allowed"`
	// The ID of the VDS to add the
	// port group to. Forces a new resource if changed.
	DistributedVirtualSwitchUuid *string `pulumi:"distributedVirtualSwitchUuid"`
	// The average egress bandwidth in bits per second if egress shaping is enabled on the port.
	EgressShapingAverageBandwidth *int `pulumi:"egressShapingAverageBandwidth"`
	// The maximum egress burst size allowed in bytes if egress shaping is enabled on the port.
	EgressShapingBurstSize *int `pulumi:"egressShapingBurstSize"`
	// True if the traffic shaper is enabled for egress traffic on the port.
	EgressShapingEnabled *bool `pulumi:"egressShapingEnabled"`
	// The peak egress bandwidth during bursts in bits per second if egress traffic shaping is enabled on the port.
	EgressShapingPeakBandwidth *int `pulumi:"egressShapingPeakBandwidth"`
	// If true, the teaming policy will re-activate failed interfaces higher in precedence when they come back up.
	Failback *bool `pulumi:"failback"`
	// The average ingress bandwidth in bits per second if ingress shaping is enabled on the port.
	IngressShapingAverageBandwidth *int `pulumi:"ingressShapingAverageBandwidth"`
	// The maximum ingress burst size allowed in bytes if ingress shaping is enabled on the port.
	IngressShapingBurstSize *int `pulumi:"ingressShapingBurstSize"`
	// True if the traffic shaper is enabled for ingress traffic on the port.
	IngressShapingEnabled *bool `pulumi:"ingressShapingEnabled"`
	// The peak ingress bandwidth during bursts in bits per second if ingress traffic shaping is enabled on the port.
	IngressShapingPeakBandwidth *int `pulumi:"ingressShapingPeakBandwidth"`
	// The generated UUID of the port group.
	Key *string `pulumi:"key"`
	// Whether or not to enable LACP on all uplink ports.
	LacpEnabled *bool `pulumi:"lacpEnabled"`
	// The uplink LACP mode to use. Can be one of active or passive.
	LacpMode *string `pulumi:"lacpMode"`
	// Allow a live port to be moved in and out of the portgroup.
	LivePortMovingAllowed *bool `pulumi:"livePortMovingAllowed"`
	// The name of the port group.
	Name *string `pulumi:"name"`
	// Indicates whether to enable netflow on all ports.
	NetflowEnabled *bool `pulumi:"netflowEnabled"`
	// Allow the enabling or disabling of Netflow on a port, contrary to the policy in the portgroup.
	NetflowOverrideAllowed *bool `pulumi:"netflowOverrideAllowed"`
	// The key of a network resource pool
	// to associate with this port group. The default is `-1`, which implies no
	// association.
	NetworkResourcePoolKey *string `pulumi:"networkResourcePoolKey"`
	// Allow the network resource pool of an individual port to override the setting in the portgroup.
	NetworkResourcePoolOverrideAllowed *bool `pulumi:"networkResourcePoolOverrideAllowed"`
	// If true, the teaming policy will notify the broadcast network of a NIC failover, triggering cache updates.
	NotifySwitches *bool `pulumi:"notifySwitches"`
	// The number of ports available on this port
	// group. Cannot be decreased below the amount of used ports on the port group.
	NumberOfPorts *int `pulumi:"numberOfPorts"`
	// Reset the setting of any ports in this portgroup back to the default setting when the port disconnects.
	PortConfigResetAtDisconnect *bool `pulumi:"portConfigResetAtDisconnect"`
	// An optional formatting policy for naming of
	// the ports in this port group. See the `portNameFormat` attribute listed
	// [here][ext-vsphere-portname-format] for details on the format syntax.
	//
	// [ext-vsphere-portname-format]: https://developer.broadcom.com/xapis/virtual-infrastructure-json-api/latest/data-structures/DVPortgroupConfigInfo/
	PortNameFormat *string `pulumi:"portNameFormat"`
	// The secondary VLAN ID for this port.
	PortPrivateSecondaryVlanId *int `pulumi:"portPrivateSecondaryVlanId"`
	// Allow security policy settings on a port to override those on the portgroup.
	SecurityPolicyOverrideAllowed *bool `pulumi:"securityPolicyOverrideAllowed"`
	// Allow the traffic shaping policies of an individual port to override the settings in the portgroup.
	ShapingOverrideAllowed *bool `pulumi:"shapingOverrideAllowed"`
	// List of standby uplinks used for load balancing, matching the names of the uplinks assigned in the DVS.
	StandbyUplinks []string `pulumi:"standbyUplinks"`
	// A list of tag IDs to apply to this object.
	Tags []string `pulumi:"tags"`
	// The network adapter teaming policy. Can be one of loadbalance_ip, loadbalance_srcmac, loadbalance_srcid,
	// failover_explicit, or loadbalance_loadbased.
	TeamingPolicy *string `pulumi:"teamingPolicy"`
	// Allow any filter policies set on the individual port to override those in the portgroup.
	TrafficFilterOverrideAllowed *bool `pulumi:"trafficFilterOverrideAllowed"`
	// If true, a copy of packets sent to the switch will always be forwarded to an uplink in addition to the regular packet
	// forwarded done by the switch.
	TxUplink *bool `pulumi:"txUplink"`
	// The port group type. Can be one of `earlyBinding` (static
	// binding) or `ephemeral`. Default: `earlyBinding`.
	Type *string `pulumi:"type"`
	// Allow the uplink teaming policies on a port to override those on the portgroup.
	UplinkTeamingOverrideAllowed *bool `pulumi:"uplinkTeamingOverrideAllowed"`
	// The VLAN ID for single VLAN mode. 0 denotes no VLAN.
	VlanId *int `pulumi:"vlanId"`
	// Allow the VLAN configuration on a port to override those on the portgroup.
	VlanOverrideAllowed *bool `pulumi:"vlanOverrideAllowed"`
	// The VLAN ID for single VLAN mode. 0 denotes no VLAN.
	VlanRanges []DistributedPortGroupVlanRange `pulumi:"vlanRanges"`
}

type DistributedPortGroupState struct {
	// List of active uplinks used for load balancing, matching the names of the uplinks assigned in the DVS.
	ActiveUplinks pulumi.StringArrayInput
	// Controls whether or not the virtual network adapter is allowed to send network traffic with a different MAC address than
	// that of its own.
	AllowForgedTransmits pulumi.BoolPtrInput
	// Controls whether or not the Media Access Control (MAC) address can be changed.
	AllowMacChanges pulumi.BoolPtrInput
	// Enable promiscuous mode on the network. This flag indicates whether or not all traffic is seen on a given port.
	AllowPromiscuous pulumi.BoolPtrInput
	// Allows the port group to create additional ports
	// past the limit specified in `numberOfPorts` if necessary. Default: `true`.
	//
	// > **NOTE:** Using `autoExpand` with a statically defined `numberOfPorts`
	// may lead to errors when the port count grows past the amount specified.  If you
	// specify `numberOfPorts`, you may wish to set `autoExpand` to `false`.
	AutoExpand pulumi.BoolPtrInput
	// Indicates whether to block all ports by default.
	BlockAllPorts pulumi.BoolPtrInput
	// Allow the blocked setting of an individual port to override the setting in the portgroup.
	BlockOverrideAllowed pulumi.BoolPtrInput
	// Enable beacon probing on the ports this policy applies to.
	CheckBeacon pulumi.BoolPtrInput
	// The current version of the port group configuration,
	// incremented by subsequent updates to the port group.
	ConfigVersion pulumi.StringPtrInput
	// Map of custom attribute ids to attribute
	// value string to set for port group.
	//
	// > **NOTE:** Custom attributes are not supported on direct ESXi host
	// connections and require vCenter Server.
	CustomAttributes pulumi.StringMapInput
	// An optional description for the port group.
	Description pulumi.StringPtrInput
	// Allow VMDirectPath Gen2 on the ports this policy applies to.
	DirectpathGen2Allowed pulumi.BoolPtrInput
	// The ID of the VDS to add the
	// port group to. Forces a new resource if changed.
	DistributedVirtualSwitchUuid pulumi.StringPtrInput
	// The average egress bandwidth in bits per second if egress shaping is enabled on the port.
	EgressShapingAverageBandwidth pulumi.IntPtrInput
	// The maximum egress burst size allowed in bytes if egress shaping is enabled on the port.
	EgressShapingBurstSize pulumi.IntPtrInput
	// True if the traffic shaper is enabled for egress traffic on the port.
	EgressShapingEnabled pulumi.BoolPtrInput
	// The peak egress bandwidth during bursts in bits per second if egress traffic shaping is enabled on the port.
	EgressShapingPeakBandwidth pulumi.IntPtrInput
	// If true, the teaming policy will re-activate failed interfaces higher in precedence when they come back up.
	Failback pulumi.BoolPtrInput
	// The average ingress bandwidth in bits per second if ingress shaping is enabled on the port.
	IngressShapingAverageBandwidth pulumi.IntPtrInput
	// The maximum ingress burst size allowed in bytes if ingress shaping is enabled on the port.
	IngressShapingBurstSize pulumi.IntPtrInput
	// True if the traffic shaper is enabled for ingress traffic on the port.
	IngressShapingEnabled pulumi.BoolPtrInput
	// The peak ingress bandwidth during bursts in bits per second if ingress traffic shaping is enabled on the port.
	IngressShapingPeakBandwidth pulumi.IntPtrInput
	// The generated UUID of the port group.
	Key pulumi.StringPtrInput
	// Whether or not to enable LACP on all uplink ports.
	LacpEnabled pulumi.BoolPtrInput
	// The uplink LACP mode to use. Can be one of active or passive.
	LacpMode pulumi.StringPtrInput
	// Allow a live port to be moved in and out of the portgroup.
	LivePortMovingAllowed pulumi.BoolPtrInput
	// The name of the port group.
	Name pulumi.StringPtrInput
	// Indicates whether to enable netflow on all ports.
	NetflowEnabled pulumi.BoolPtrInput
	// Allow the enabling or disabling of Netflow on a port, contrary to the policy in the portgroup.
	NetflowOverrideAllowed pulumi.BoolPtrInput
	// The key of a network resource pool
	// to associate with this port group. The default is `-1`, which implies no
	// association.
	NetworkResourcePoolKey pulumi.StringPtrInput
	// Allow the network resource pool of an individual port to override the setting in the portgroup.
	NetworkResourcePoolOverrideAllowed pulumi.BoolPtrInput
	// If true, the teaming policy will notify the broadcast network of a NIC failover, triggering cache updates.
	NotifySwitches pulumi.BoolPtrInput
	// The number of ports available on this port
	// group. Cannot be decreased below the amount of used ports on the port group.
	NumberOfPorts pulumi.IntPtrInput
	// Reset the setting of any ports in this portgroup back to the default setting when the port disconnects.
	PortConfigResetAtDisconnect pulumi.BoolPtrInput
	// An optional formatting policy for naming of
	// the ports in this port group. See the `portNameFormat` attribute listed
	// [here][ext-vsphere-portname-format] for details on the format syntax.
	//
	// [ext-vsphere-portname-format]: https://developer.broadcom.com/xapis/virtual-infrastructure-json-api/latest/data-structures/DVPortgroupConfigInfo/
	PortNameFormat pulumi.StringPtrInput
	// The secondary VLAN ID for this port.
	PortPrivateSecondaryVlanId pulumi.IntPtrInput
	// Allow security policy settings on a port to override those on the portgroup.
	SecurityPolicyOverrideAllowed pulumi.BoolPtrInput
	// Allow the traffic shaping policies of an individual port to override the settings in the portgroup.
	ShapingOverrideAllowed pulumi.BoolPtrInput
	// List of standby uplinks used for load balancing, matching the names of the uplinks assigned in the DVS.
	StandbyUplinks pulumi.StringArrayInput
	// A list of tag IDs to apply to this object.
	Tags pulumi.StringArrayInput
	// The network adapter teaming policy. Can be one of loadbalance_ip, loadbalance_srcmac, loadbalance_srcid,
	// failover_explicit, or loadbalance_loadbased.
	TeamingPolicy pulumi.StringPtrInput
	// Allow any filter policies set on the individual port to override those in the portgroup.
	TrafficFilterOverrideAllowed pulumi.BoolPtrInput
	// If true, a copy of packets sent to the switch will always be forwarded to an uplink in addition to the regular packet
	// forwarded done by the switch.
	TxUplink pulumi.BoolPtrInput
	// The port group type. Can be one of `earlyBinding` (static
	// binding) or `ephemeral`. Default: `earlyBinding`.
	Type pulumi.StringPtrInput
	// Allow the uplink teaming policies on a port to override those on the portgroup.
	UplinkTeamingOverrideAllowed pulumi.BoolPtrInput
	// The VLAN ID for single VLAN mode. 0 denotes no VLAN.
	VlanId pulumi.IntPtrInput
	// Allow the VLAN configuration on a port to override those on the portgroup.
	VlanOverrideAllowed pulumi.BoolPtrInput
	// The VLAN ID for single VLAN mode. 0 denotes no VLAN.
	VlanRanges DistributedPortGroupVlanRangeArrayInput
}

func (DistributedPortGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*distributedPortGroupState)(nil)).Elem()
}

type distributedPortGroupArgs struct {
	// List of active uplinks used for load balancing, matching the names of the uplinks assigned in the DVS.
	ActiveUplinks []string `pulumi:"activeUplinks"`
	// Controls whether or not the virtual network adapter is allowed to send network traffic with a different MAC address than
	// that of its own.
	AllowForgedTransmits *bool `pulumi:"allowForgedTransmits"`
	// Controls whether or not the Media Access Control (MAC) address can be changed.
	AllowMacChanges *bool `pulumi:"allowMacChanges"`
	// Enable promiscuous mode on the network. This flag indicates whether or not all traffic is seen on a given port.
	AllowPromiscuous *bool `pulumi:"allowPromiscuous"`
	// Allows the port group to create additional ports
	// past the limit specified in `numberOfPorts` if necessary. Default: `true`.
	//
	// > **NOTE:** Using `autoExpand` with a statically defined `numberOfPorts`
	// may lead to errors when the port count grows past the amount specified.  If you
	// specify `numberOfPorts`, you may wish to set `autoExpand` to `false`.
	AutoExpand *bool `pulumi:"autoExpand"`
	// Indicates whether to block all ports by default.
	BlockAllPorts *bool `pulumi:"blockAllPorts"`
	// Allow the blocked setting of an individual port to override the setting in the portgroup.
	BlockOverrideAllowed *bool `pulumi:"blockOverrideAllowed"`
	// Enable beacon probing on the ports this policy applies to.
	CheckBeacon *bool `pulumi:"checkBeacon"`
	// Map of custom attribute ids to attribute
	// value string to set for port group.
	//
	// > **NOTE:** Custom attributes are not supported on direct ESXi host
	// connections and require vCenter Server.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// An optional description for the port group.
	Description *string `pulumi:"description"`
	// Allow VMDirectPath Gen2 on the ports this policy applies to.
	DirectpathGen2Allowed *bool `pulumi:"directpathGen2Allowed"`
	// The ID of the VDS to add the
	// port group to. Forces a new resource if changed.
	DistributedVirtualSwitchUuid string `pulumi:"distributedVirtualSwitchUuid"`
	// The average egress bandwidth in bits per second if egress shaping is enabled on the port.
	EgressShapingAverageBandwidth *int `pulumi:"egressShapingAverageBandwidth"`
	// The maximum egress burst size allowed in bytes if egress shaping is enabled on the port.
	EgressShapingBurstSize *int `pulumi:"egressShapingBurstSize"`
	// True if the traffic shaper is enabled for egress traffic on the port.
	EgressShapingEnabled *bool `pulumi:"egressShapingEnabled"`
	// The peak egress bandwidth during bursts in bits per second if egress traffic shaping is enabled on the port.
	EgressShapingPeakBandwidth *int `pulumi:"egressShapingPeakBandwidth"`
	// If true, the teaming policy will re-activate failed interfaces higher in precedence when they come back up.
	Failback *bool `pulumi:"failback"`
	// The average ingress bandwidth in bits per second if ingress shaping is enabled on the port.
	IngressShapingAverageBandwidth *int `pulumi:"ingressShapingAverageBandwidth"`
	// The maximum ingress burst size allowed in bytes if ingress shaping is enabled on the port.
	IngressShapingBurstSize *int `pulumi:"ingressShapingBurstSize"`
	// True if the traffic shaper is enabled for ingress traffic on the port.
	IngressShapingEnabled *bool `pulumi:"ingressShapingEnabled"`
	// The peak ingress bandwidth during bursts in bits per second if ingress traffic shaping is enabled on the port.
	IngressShapingPeakBandwidth *int `pulumi:"ingressShapingPeakBandwidth"`
	// Whether or not to enable LACP on all uplink ports.
	LacpEnabled *bool `pulumi:"lacpEnabled"`
	// The uplink LACP mode to use. Can be one of active or passive.
	LacpMode *string `pulumi:"lacpMode"`
	// Allow a live port to be moved in and out of the portgroup.
	LivePortMovingAllowed *bool `pulumi:"livePortMovingAllowed"`
	// The name of the port group.
	Name *string `pulumi:"name"`
	// Indicates whether to enable netflow on all ports.
	NetflowEnabled *bool `pulumi:"netflowEnabled"`
	// Allow the enabling or disabling of Netflow on a port, contrary to the policy in the portgroup.
	NetflowOverrideAllowed *bool `pulumi:"netflowOverrideAllowed"`
	// The key of a network resource pool
	// to associate with this port group. The default is `-1`, which implies no
	// association.
	NetworkResourcePoolKey *string `pulumi:"networkResourcePoolKey"`
	// Allow the network resource pool of an individual port to override the setting in the portgroup.
	NetworkResourcePoolOverrideAllowed *bool `pulumi:"networkResourcePoolOverrideAllowed"`
	// If true, the teaming policy will notify the broadcast network of a NIC failover, triggering cache updates.
	NotifySwitches *bool `pulumi:"notifySwitches"`
	// The number of ports available on this port
	// group. Cannot be decreased below the amount of used ports on the port group.
	NumberOfPorts *int `pulumi:"numberOfPorts"`
	// Reset the setting of any ports in this portgroup back to the default setting when the port disconnects.
	PortConfigResetAtDisconnect *bool `pulumi:"portConfigResetAtDisconnect"`
	// An optional formatting policy for naming of
	// the ports in this port group. See the `portNameFormat` attribute listed
	// [here][ext-vsphere-portname-format] for details on the format syntax.
	//
	// [ext-vsphere-portname-format]: https://developer.broadcom.com/xapis/virtual-infrastructure-json-api/latest/data-structures/DVPortgroupConfigInfo/
	PortNameFormat *string `pulumi:"portNameFormat"`
	// The secondary VLAN ID for this port.
	PortPrivateSecondaryVlanId *int `pulumi:"portPrivateSecondaryVlanId"`
	// Allow security policy settings on a port to override those on the portgroup.
	SecurityPolicyOverrideAllowed *bool `pulumi:"securityPolicyOverrideAllowed"`
	// Allow the traffic shaping policies of an individual port to override the settings in the portgroup.
	ShapingOverrideAllowed *bool `pulumi:"shapingOverrideAllowed"`
	// List of standby uplinks used for load balancing, matching the names of the uplinks assigned in the DVS.
	StandbyUplinks []string `pulumi:"standbyUplinks"`
	// A list of tag IDs to apply to this object.
	Tags []string `pulumi:"tags"`
	// The network adapter teaming policy. Can be one of loadbalance_ip, loadbalance_srcmac, loadbalance_srcid,
	// failover_explicit, or loadbalance_loadbased.
	TeamingPolicy *string `pulumi:"teamingPolicy"`
	// Allow any filter policies set on the individual port to override those in the portgroup.
	TrafficFilterOverrideAllowed *bool `pulumi:"trafficFilterOverrideAllowed"`
	// If true, a copy of packets sent to the switch will always be forwarded to an uplink in addition to the regular packet
	// forwarded done by the switch.
	TxUplink *bool `pulumi:"txUplink"`
	// The port group type. Can be one of `earlyBinding` (static
	// binding) or `ephemeral`. Default: `earlyBinding`.
	Type *string `pulumi:"type"`
	// Allow the uplink teaming policies on a port to override those on the portgroup.
	UplinkTeamingOverrideAllowed *bool `pulumi:"uplinkTeamingOverrideAllowed"`
	// The VLAN ID for single VLAN mode. 0 denotes no VLAN.
	VlanId *int `pulumi:"vlanId"`
	// Allow the VLAN configuration on a port to override those on the portgroup.
	VlanOverrideAllowed *bool `pulumi:"vlanOverrideAllowed"`
	// The VLAN ID for single VLAN mode. 0 denotes no VLAN.
	VlanRanges []DistributedPortGroupVlanRange `pulumi:"vlanRanges"`
}

// The set of arguments for constructing a DistributedPortGroup resource.
type DistributedPortGroupArgs struct {
	// List of active uplinks used for load balancing, matching the names of the uplinks assigned in the DVS.
	ActiveUplinks pulumi.StringArrayInput
	// Controls whether or not the virtual network adapter is allowed to send network traffic with a different MAC address than
	// that of its own.
	AllowForgedTransmits pulumi.BoolPtrInput
	// Controls whether or not the Media Access Control (MAC) address can be changed.
	AllowMacChanges pulumi.BoolPtrInput
	// Enable promiscuous mode on the network. This flag indicates whether or not all traffic is seen on a given port.
	AllowPromiscuous pulumi.BoolPtrInput
	// Allows the port group to create additional ports
	// past the limit specified in `numberOfPorts` if necessary. Default: `true`.
	//
	// > **NOTE:** Using `autoExpand` with a statically defined `numberOfPorts`
	// may lead to errors when the port count grows past the amount specified.  If you
	// specify `numberOfPorts`, you may wish to set `autoExpand` to `false`.
	AutoExpand pulumi.BoolPtrInput
	// Indicates whether to block all ports by default.
	BlockAllPorts pulumi.BoolPtrInput
	// Allow the blocked setting of an individual port to override the setting in the portgroup.
	BlockOverrideAllowed pulumi.BoolPtrInput
	// Enable beacon probing on the ports this policy applies to.
	CheckBeacon pulumi.BoolPtrInput
	// Map of custom attribute ids to attribute
	// value string to set for port group.
	//
	// > **NOTE:** Custom attributes are not supported on direct ESXi host
	// connections and require vCenter Server.
	CustomAttributes pulumi.StringMapInput
	// An optional description for the port group.
	Description pulumi.StringPtrInput
	// Allow VMDirectPath Gen2 on the ports this policy applies to.
	DirectpathGen2Allowed pulumi.BoolPtrInput
	// The ID of the VDS to add the
	// port group to. Forces a new resource if changed.
	DistributedVirtualSwitchUuid pulumi.StringInput
	// The average egress bandwidth in bits per second if egress shaping is enabled on the port.
	EgressShapingAverageBandwidth pulumi.IntPtrInput
	// The maximum egress burst size allowed in bytes if egress shaping is enabled on the port.
	EgressShapingBurstSize pulumi.IntPtrInput
	// True if the traffic shaper is enabled for egress traffic on the port.
	EgressShapingEnabled pulumi.BoolPtrInput
	// The peak egress bandwidth during bursts in bits per second if egress traffic shaping is enabled on the port.
	EgressShapingPeakBandwidth pulumi.IntPtrInput
	// If true, the teaming policy will re-activate failed interfaces higher in precedence when they come back up.
	Failback pulumi.BoolPtrInput
	// The average ingress bandwidth in bits per second if ingress shaping is enabled on the port.
	IngressShapingAverageBandwidth pulumi.IntPtrInput
	// The maximum ingress burst size allowed in bytes if ingress shaping is enabled on the port.
	IngressShapingBurstSize pulumi.IntPtrInput
	// True if the traffic shaper is enabled for ingress traffic on the port.
	IngressShapingEnabled pulumi.BoolPtrInput
	// The peak ingress bandwidth during bursts in bits per second if ingress traffic shaping is enabled on the port.
	IngressShapingPeakBandwidth pulumi.IntPtrInput
	// Whether or not to enable LACP on all uplink ports.
	LacpEnabled pulumi.BoolPtrInput
	// The uplink LACP mode to use. Can be one of active or passive.
	LacpMode pulumi.StringPtrInput
	// Allow a live port to be moved in and out of the portgroup.
	LivePortMovingAllowed pulumi.BoolPtrInput
	// The name of the port group.
	Name pulumi.StringPtrInput
	// Indicates whether to enable netflow on all ports.
	NetflowEnabled pulumi.BoolPtrInput
	// Allow the enabling or disabling of Netflow on a port, contrary to the policy in the portgroup.
	NetflowOverrideAllowed pulumi.BoolPtrInput
	// The key of a network resource pool
	// to associate with this port group. The default is `-1`, which implies no
	// association.
	NetworkResourcePoolKey pulumi.StringPtrInput
	// Allow the network resource pool of an individual port to override the setting in the portgroup.
	NetworkResourcePoolOverrideAllowed pulumi.BoolPtrInput
	// If true, the teaming policy will notify the broadcast network of a NIC failover, triggering cache updates.
	NotifySwitches pulumi.BoolPtrInput
	// The number of ports available on this port
	// group. Cannot be decreased below the amount of used ports on the port group.
	NumberOfPorts pulumi.IntPtrInput
	// Reset the setting of any ports in this portgroup back to the default setting when the port disconnects.
	PortConfigResetAtDisconnect pulumi.BoolPtrInput
	// An optional formatting policy for naming of
	// the ports in this port group. See the `portNameFormat` attribute listed
	// [here][ext-vsphere-portname-format] for details on the format syntax.
	//
	// [ext-vsphere-portname-format]: https://developer.broadcom.com/xapis/virtual-infrastructure-json-api/latest/data-structures/DVPortgroupConfigInfo/
	PortNameFormat pulumi.StringPtrInput
	// The secondary VLAN ID for this port.
	PortPrivateSecondaryVlanId pulumi.IntPtrInput
	// Allow security policy settings on a port to override those on the portgroup.
	SecurityPolicyOverrideAllowed pulumi.BoolPtrInput
	// Allow the traffic shaping policies of an individual port to override the settings in the portgroup.
	ShapingOverrideAllowed pulumi.BoolPtrInput
	// List of standby uplinks used for load balancing, matching the names of the uplinks assigned in the DVS.
	StandbyUplinks pulumi.StringArrayInput
	// A list of tag IDs to apply to this object.
	Tags pulumi.StringArrayInput
	// The network adapter teaming policy. Can be one of loadbalance_ip, loadbalance_srcmac, loadbalance_srcid,
	// failover_explicit, or loadbalance_loadbased.
	TeamingPolicy pulumi.StringPtrInput
	// Allow any filter policies set on the individual port to override those in the portgroup.
	TrafficFilterOverrideAllowed pulumi.BoolPtrInput
	// If true, a copy of packets sent to the switch will always be forwarded to an uplink in addition to the regular packet
	// forwarded done by the switch.
	TxUplink pulumi.BoolPtrInput
	// The port group type. Can be one of `earlyBinding` (static
	// binding) or `ephemeral`. Default: `earlyBinding`.
	Type pulumi.StringPtrInput
	// Allow the uplink teaming policies on a port to override those on the portgroup.
	UplinkTeamingOverrideAllowed pulumi.BoolPtrInput
	// The VLAN ID for single VLAN mode. 0 denotes no VLAN.
	VlanId pulumi.IntPtrInput
	// Allow the VLAN configuration on a port to override those on the portgroup.
	VlanOverrideAllowed pulumi.BoolPtrInput
	// The VLAN ID for single VLAN mode. 0 denotes no VLAN.
	VlanRanges DistributedPortGroupVlanRangeArrayInput
}

func (DistributedPortGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*distributedPortGroupArgs)(nil)).Elem()
}

type DistributedPortGroupInput interface {
	pulumi.Input

	ToDistributedPortGroupOutput() DistributedPortGroupOutput
	ToDistributedPortGroupOutputWithContext(ctx context.Context) DistributedPortGroupOutput
}

func (*DistributedPortGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributedPortGroup)(nil)).Elem()
}

func (i *DistributedPortGroup) ToDistributedPortGroupOutput() DistributedPortGroupOutput {
	return i.ToDistributedPortGroupOutputWithContext(context.Background())
}

func (i *DistributedPortGroup) ToDistributedPortGroupOutputWithContext(ctx context.Context) DistributedPortGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributedPortGroupOutput)
}

// DistributedPortGroupArrayInput is an input type that accepts DistributedPortGroupArray and DistributedPortGroupArrayOutput values.
// You can construct a concrete instance of `DistributedPortGroupArrayInput` via:
//
//	DistributedPortGroupArray{ DistributedPortGroupArgs{...} }
type DistributedPortGroupArrayInput interface {
	pulumi.Input

	ToDistributedPortGroupArrayOutput() DistributedPortGroupArrayOutput
	ToDistributedPortGroupArrayOutputWithContext(context.Context) DistributedPortGroupArrayOutput
}

type DistributedPortGroupArray []DistributedPortGroupInput

func (DistributedPortGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DistributedPortGroup)(nil)).Elem()
}

func (i DistributedPortGroupArray) ToDistributedPortGroupArrayOutput() DistributedPortGroupArrayOutput {
	return i.ToDistributedPortGroupArrayOutputWithContext(context.Background())
}

func (i DistributedPortGroupArray) ToDistributedPortGroupArrayOutputWithContext(ctx context.Context) DistributedPortGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributedPortGroupArrayOutput)
}

// DistributedPortGroupMapInput is an input type that accepts DistributedPortGroupMap and DistributedPortGroupMapOutput values.
// You can construct a concrete instance of `DistributedPortGroupMapInput` via:
//
//	DistributedPortGroupMap{ "key": DistributedPortGroupArgs{...} }
type DistributedPortGroupMapInput interface {
	pulumi.Input

	ToDistributedPortGroupMapOutput() DistributedPortGroupMapOutput
	ToDistributedPortGroupMapOutputWithContext(context.Context) DistributedPortGroupMapOutput
}

type DistributedPortGroupMap map[string]DistributedPortGroupInput

func (DistributedPortGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DistributedPortGroup)(nil)).Elem()
}

func (i DistributedPortGroupMap) ToDistributedPortGroupMapOutput() DistributedPortGroupMapOutput {
	return i.ToDistributedPortGroupMapOutputWithContext(context.Background())
}

func (i DistributedPortGroupMap) ToDistributedPortGroupMapOutputWithContext(ctx context.Context) DistributedPortGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributedPortGroupMapOutput)
}

type DistributedPortGroupOutput struct{ *pulumi.OutputState }

func (DistributedPortGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributedPortGroup)(nil)).Elem()
}

func (o DistributedPortGroupOutput) ToDistributedPortGroupOutput() DistributedPortGroupOutput {
	return o
}

func (o DistributedPortGroupOutput) ToDistributedPortGroupOutputWithContext(ctx context.Context) DistributedPortGroupOutput {
	return o
}

// List of active uplinks used for load balancing, matching the names of the uplinks assigned in the DVS.
func (o DistributedPortGroupOutput) ActiveUplinks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.StringArrayOutput { return v.ActiveUplinks }).(pulumi.StringArrayOutput)
}

// Controls whether or not the virtual network adapter is allowed to send network traffic with a different MAC address than
// that of its own.
func (o DistributedPortGroupOutput) AllowForgedTransmits() pulumi.BoolOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolOutput { return v.AllowForgedTransmits }).(pulumi.BoolOutput)
}

// Controls whether or not the Media Access Control (MAC) address can be changed.
func (o DistributedPortGroupOutput) AllowMacChanges() pulumi.BoolOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolOutput { return v.AllowMacChanges }).(pulumi.BoolOutput)
}

// Enable promiscuous mode on the network. This flag indicates whether or not all traffic is seen on a given port.
func (o DistributedPortGroupOutput) AllowPromiscuous() pulumi.BoolOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolOutput { return v.AllowPromiscuous }).(pulumi.BoolOutput)
}

// Allows the port group to create additional ports
// past the limit specified in `numberOfPorts` if necessary. Default: `true`.
//
// > **NOTE:** Using `autoExpand` with a statically defined `numberOfPorts`
// may lead to errors when the port count grows past the amount specified.  If you
// specify `numberOfPorts`, you may wish to set `autoExpand` to `false`.
func (o DistributedPortGroupOutput) AutoExpand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolPtrOutput { return v.AutoExpand }).(pulumi.BoolPtrOutput)
}

// Indicates whether to block all ports by default.
func (o DistributedPortGroupOutput) BlockAllPorts() pulumi.BoolOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolOutput { return v.BlockAllPorts }).(pulumi.BoolOutput)
}

// Allow the blocked setting of an individual port to override the setting in the portgroup.
func (o DistributedPortGroupOutput) BlockOverrideAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolPtrOutput { return v.BlockOverrideAllowed }).(pulumi.BoolPtrOutput)
}

// Enable beacon probing on the ports this policy applies to.
func (o DistributedPortGroupOutput) CheckBeacon() pulumi.BoolOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolOutput { return v.CheckBeacon }).(pulumi.BoolOutput)
}

// The current version of the port group configuration,
// incremented by subsequent updates to the port group.
func (o DistributedPortGroupOutput) ConfigVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.StringOutput { return v.ConfigVersion }).(pulumi.StringOutput)
}

// Map of custom attribute ids to attribute
// value string to set for port group.
//
// > **NOTE:** Custom attributes are not supported on direct ESXi host
// connections and require vCenter Server.
func (o DistributedPortGroupOutput) CustomAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.StringMapOutput { return v.CustomAttributes }).(pulumi.StringMapOutput)
}

// An optional description for the port group.
func (o DistributedPortGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Allow VMDirectPath Gen2 on the ports this policy applies to.
func (o DistributedPortGroupOutput) DirectpathGen2Allowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolOutput { return v.DirectpathGen2Allowed }).(pulumi.BoolOutput)
}

// The ID of the VDS to add the
// port group to. Forces a new resource if changed.
func (o DistributedPortGroupOutput) DistributedVirtualSwitchUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.StringOutput { return v.DistributedVirtualSwitchUuid }).(pulumi.StringOutput)
}

// The average egress bandwidth in bits per second if egress shaping is enabled on the port.
func (o DistributedPortGroupOutput) EgressShapingAverageBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.IntOutput { return v.EgressShapingAverageBandwidth }).(pulumi.IntOutput)
}

// The maximum egress burst size allowed in bytes if egress shaping is enabled on the port.
func (o DistributedPortGroupOutput) EgressShapingBurstSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.IntOutput { return v.EgressShapingBurstSize }).(pulumi.IntOutput)
}

// True if the traffic shaper is enabled for egress traffic on the port.
func (o DistributedPortGroupOutput) EgressShapingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolOutput { return v.EgressShapingEnabled }).(pulumi.BoolOutput)
}

// The peak egress bandwidth during bursts in bits per second if egress traffic shaping is enabled on the port.
func (o DistributedPortGroupOutput) EgressShapingPeakBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.IntOutput { return v.EgressShapingPeakBandwidth }).(pulumi.IntOutput)
}

// If true, the teaming policy will re-activate failed interfaces higher in precedence when they come back up.
func (o DistributedPortGroupOutput) Failback() pulumi.BoolOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolOutput { return v.Failback }).(pulumi.BoolOutput)
}

// The average ingress bandwidth in bits per second if ingress shaping is enabled on the port.
func (o DistributedPortGroupOutput) IngressShapingAverageBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.IntOutput { return v.IngressShapingAverageBandwidth }).(pulumi.IntOutput)
}

// The maximum ingress burst size allowed in bytes if ingress shaping is enabled on the port.
func (o DistributedPortGroupOutput) IngressShapingBurstSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.IntOutput { return v.IngressShapingBurstSize }).(pulumi.IntOutput)
}

// True if the traffic shaper is enabled for ingress traffic on the port.
func (o DistributedPortGroupOutput) IngressShapingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolOutput { return v.IngressShapingEnabled }).(pulumi.BoolOutput)
}

// The peak ingress bandwidth during bursts in bits per second if ingress traffic shaping is enabled on the port.
func (o DistributedPortGroupOutput) IngressShapingPeakBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.IntOutput { return v.IngressShapingPeakBandwidth }).(pulumi.IntOutput)
}

// The generated UUID of the port group.
func (o DistributedPortGroupOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Whether or not to enable LACP on all uplink ports.
func (o DistributedPortGroupOutput) LacpEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolOutput { return v.LacpEnabled }).(pulumi.BoolOutput)
}

// The uplink LACP mode to use. Can be one of active or passive.
func (o DistributedPortGroupOutput) LacpMode() pulumi.StringOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.StringOutput { return v.LacpMode }).(pulumi.StringOutput)
}

// Allow a live port to be moved in and out of the portgroup.
func (o DistributedPortGroupOutput) LivePortMovingAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolPtrOutput { return v.LivePortMovingAllowed }).(pulumi.BoolPtrOutput)
}

// The name of the port group.
func (o DistributedPortGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether to enable netflow on all ports.
func (o DistributedPortGroupOutput) NetflowEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolOutput { return v.NetflowEnabled }).(pulumi.BoolOutput)
}

// Allow the enabling or disabling of Netflow on a port, contrary to the policy in the portgroup.
func (o DistributedPortGroupOutput) NetflowOverrideAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolPtrOutput { return v.NetflowOverrideAllowed }).(pulumi.BoolPtrOutput)
}

// The key of a network resource pool
// to associate with this port group. The default is `-1`, which implies no
// association.
func (o DistributedPortGroupOutput) NetworkResourcePoolKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.StringPtrOutput { return v.NetworkResourcePoolKey }).(pulumi.StringPtrOutput)
}

// Allow the network resource pool of an individual port to override the setting in the portgroup.
func (o DistributedPortGroupOutput) NetworkResourcePoolOverrideAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolPtrOutput { return v.NetworkResourcePoolOverrideAllowed }).(pulumi.BoolPtrOutput)
}

// If true, the teaming policy will notify the broadcast network of a NIC failover, triggering cache updates.
func (o DistributedPortGroupOutput) NotifySwitches() pulumi.BoolOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolOutput { return v.NotifySwitches }).(pulumi.BoolOutput)
}

// The number of ports available on this port
// group. Cannot be decreased below the amount of used ports on the port group.
func (o DistributedPortGroupOutput) NumberOfPorts() pulumi.IntOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.IntOutput { return v.NumberOfPorts }).(pulumi.IntOutput)
}

// Reset the setting of any ports in this portgroup back to the default setting when the port disconnects.
func (o DistributedPortGroupOutput) PortConfigResetAtDisconnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolPtrOutput { return v.PortConfigResetAtDisconnect }).(pulumi.BoolPtrOutput)
}

// An optional formatting policy for naming of
// the ports in this port group. See the `portNameFormat` attribute listed
// [here][ext-vsphere-portname-format] for details on the format syntax.
//
// [ext-vsphere-portname-format]: https://developer.broadcom.com/xapis/virtual-infrastructure-json-api/latest/data-structures/DVPortgroupConfigInfo/
func (o DistributedPortGroupOutput) PortNameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.StringPtrOutput { return v.PortNameFormat }).(pulumi.StringPtrOutput)
}

// The secondary VLAN ID for this port.
func (o DistributedPortGroupOutput) PortPrivateSecondaryVlanId() pulumi.IntOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.IntOutput { return v.PortPrivateSecondaryVlanId }).(pulumi.IntOutput)
}

// Allow security policy settings on a port to override those on the portgroup.
func (o DistributedPortGroupOutput) SecurityPolicyOverrideAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolPtrOutput { return v.SecurityPolicyOverrideAllowed }).(pulumi.BoolPtrOutput)
}

// Allow the traffic shaping policies of an individual port to override the settings in the portgroup.
func (o DistributedPortGroupOutput) ShapingOverrideAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolPtrOutput { return v.ShapingOverrideAllowed }).(pulumi.BoolPtrOutput)
}

// List of standby uplinks used for load balancing, matching the names of the uplinks assigned in the DVS.
func (o DistributedPortGroupOutput) StandbyUplinks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.StringArrayOutput { return v.StandbyUplinks }).(pulumi.StringArrayOutput)
}

// A list of tag IDs to apply to this object.
func (o DistributedPortGroupOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The network adapter teaming policy. Can be one of loadbalance_ip, loadbalance_srcmac, loadbalance_srcid,
// failover_explicit, or loadbalance_loadbased.
func (o DistributedPortGroupOutput) TeamingPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.StringOutput { return v.TeamingPolicy }).(pulumi.StringOutput)
}

// Allow any filter policies set on the individual port to override those in the portgroup.
func (o DistributedPortGroupOutput) TrafficFilterOverrideAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolPtrOutput { return v.TrafficFilterOverrideAllowed }).(pulumi.BoolPtrOutput)
}

// If true, a copy of packets sent to the switch will always be forwarded to an uplink in addition to the regular packet
// forwarded done by the switch.
func (o DistributedPortGroupOutput) TxUplink() pulumi.BoolOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolOutput { return v.TxUplink }).(pulumi.BoolOutput)
}

// The port group type. Can be one of `earlyBinding` (static
// binding) or `ephemeral`. Default: `earlyBinding`.
func (o DistributedPortGroupOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// Allow the uplink teaming policies on a port to override those on the portgroup.
func (o DistributedPortGroupOutput) UplinkTeamingOverrideAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolPtrOutput { return v.UplinkTeamingOverrideAllowed }).(pulumi.BoolPtrOutput)
}

// The VLAN ID for single VLAN mode. 0 denotes no VLAN.
func (o DistributedPortGroupOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.IntOutput { return v.VlanId }).(pulumi.IntOutput)
}

// Allow the VLAN configuration on a port to override those on the portgroup.
func (o DistributedPortGroupOutput) VlanOverrideAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DistributedPortGroup) pulumi.BoolPtrOutput { return v.VlanOverrideAllowed }).(pulumi.BoolPtrOutput)
}

// The VLAN ID for single VLAN mode. 0 denotes no VLAN.
func (o DistributedPortGroupOutput) VlanRanges() DistributedPortGroupVlanRangeArrayOutput {
	return o.ApplyT(func(v *DistributedPortGroup) DistributedPortGroupVlanRangeArrayOutput { return v.VlanRanges }).(DistributedPortGroupVlanRangeArrayOutput)
}

type DistributedPortGroupArrayOutput struct{ *pulumi.OutputState }

func (DistributedPortGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DistributedPortGroup)(nil)).Elem()
}

func (o DistributedPortGroupArrayOutput) ToDistributedPortGroupArrayOutput() DistributedPortGroupArrayOutput {
	return o
}

func (o DistributedPortGroupArrayOutput) ToDistributedPortGroupArrayOutputWithContext(ctx context.Context) DistributedPortGroupArrayOutput {
	return o
}

func (o DistributedPortGroupArrayOutput) Index(i pulumi.IntInput) DistributedPortGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DistributedPortGroup {
		return vs[0].([]*DistributedPortGroup)[vs[1].(int)]
	}).(DistributedPortGroupOutput)
}

type DistributedPortGroupMapOutput struct{ *pulumi.OutputState }

func (DistributedPortGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DistributedPortGroup)(nil)).Elem()
}

func (o DistributedPortGroupMapOutput) ToDistributedPortGroupMapOutput() DistributedPortGroupMapOutput {
	return o
}

func (o DistributedPortGroupMapOutput) ToDistributedPortGroupMapOutputWithContext(ctx context.Context) DistributedPortGroupMapOutput {
	return o
}

func (o DistributedPortGroupMapOutput) MapIndex(k pulumi.StringInput) DistributedPortGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DistributedPortGroup {
		return vs[0].(map[string]*DistributedPortGroup)[vs[1].(string)]
	}).(DistributedPortGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DistributedPortGroupInput)(nil)).Elem(), &DistributedPortGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributedPortGroupArrayInput)(nil)).Elem(), DistributedPortGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributedPortGroupMapInput)(nil)).Elem(), DistributedPortGroupMap{})
	pulumi.RegisterOutputType(DistributedPortGroupOutput{})
	pulumi.RegisterOutputType(DistributedPortGroupArrayOutput{})
	pulumi.RegisterOutputType(DistributedPortGroupMapOutput{})
}
