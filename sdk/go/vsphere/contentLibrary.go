// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ContentLibrary struct {
	pulumi.CustomResourceState

	// A description of the Content Library.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Content Library.
	Name pulumi.StringOutput `pulumi:"name"`
	// Options to publish a local Content Library.
	Publication ContentLibraryPublicationOutput `pulumi:"publication"`
	// The managed object reference ID on which to store Content Library
	// items.
	StorageBackings pulumi.StringArrayOutput `pulumi:"storageBackings"`
	// Options to publish a local Content Library.
	Subscription ContentLibrarySubscriptionPtrOutput `pulumi:"subscription"`
}

// NewContentLibrary registers a new resource with the given unique name, arguments, and options.
func NewContentLibrary(ctx *pulumi.Context,
	name string, args *ContentLibraryArgs, opts ...pulumi.ResourceOption) (*ContentLibrary, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StorageBackings == nil {
		return nil, errors.New("invalid value for required argument 'StorageBackings'")
	}
	var resource ContentLibrary
	err := ctx.RegisterResource("vsphere:index/contentLibrary:ContentLibrary", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContentLibrary gets an existing ContentLibrary resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContentLibrary(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContentLibraryState, opts ...pulumi.ResourceOption) (*ContentLibrary, error) {
	var resource ContentLibrary
	err := ctx.ReadResource("vsphere:index/contentLibrary:ContentLibrary", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContentLibrary resources.
type contentLibraryState struct {
	// A description of the Content Library.
	Description *string `pulumi:"description"`
	// The name of the Content Library.
	Name *string `pulumi:"name"`
	// Options to publish a local Content Library.
	Publication *ContentLibraryPublication `pulumi:"publication"`
	// The managed object reference ID on which to store Content Library
	// items.
	StorageBackings []string `pulumi:"storageBackings"`
	// Options to publish a local Content Library.
	Subscription *ContentLibrarySubscription `pulumi:"subscription"`
}

type ContentLibraryState struct {
	// A description of the Content Library.
	Description pulumi.StringPtrInput
	// The name of the Content Library.
	Name pulumi.StringPtrInput
	// Options to publish a local Content Library.
	Publication ContentLibraryPublicationPtrInput
	// The managed object reference ID on which to store Content Library
	// items.
	StorageBackings pulumi.StringArrayInput
	// Options to publish a local Content Library.
	Subscription ContentLibrarySubscriptionPtrInput
}

func (ContentLibraryState) ElementType() reflect.Type {
	return reflect.TypeOf((*contentLibraryState)(nil)).Elem()
}

type contentLibraryArgs struct {
	// A description of the Content Library.
	Description *string `pulumi:"description"`
	// The name of the Content Library.
	Name *string `pulumi:"name"`
	// Options to publish a local Content Library.
	Publication *ContentLibraryPublication `pulumi:"publication"`
	// The managed object reference ID on which to store Content Library
	// items.
	StorageBackings []string `pulumi:"storageBackings"`
	// Options to publish a local Content Library.
	Subscription *ContentLibrarySubscription `pulumi:"subscription"`
}

// The set of arguments for constructing a ContentLibrary resource.
type ContentLibraryArgs struct {
	// A description of the Content Library.
	Description pulumi.StringPtrInput
	// The name of the Content Library.
	Name pulumi.StringPtrInput
	// Options to publish a local Content Library.
	Publication ContentLibraryPublicationPtrInput
	// The managed object reference ID on which to store Content Library
	// items.
	StorageBackings pulumi.StringArrayInput
	// Options to publish a local Content Library.
	Subscription ContentLibrarySubscriptionPtrInput
}

func (ContentLibraryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contentLibraryArgs)(nil)).Elem()
}

type ContentLibraryInput interface {
	pulumi.Input

	ToContentLibraryOutput() ContentLibraryOutput
	ToContentLibraryOutputWithContext(ctx context.Context) ContentLibraryOutput
}

func (*ContentLibrary) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentLibrary)(nil))
}

func (i *ContentLibrary) ToContentLibraryOutput() ContentLibraryOutput {
	return i.ToContentLibraryOutputWithContext(context.Background())
}

func (i *ContentLibrary) ToContentLibraryOutputWithContext(ctx context.Context) ContentLibraryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLibraryOutput)
}

type ContentLibraryOutput struct {
	*pulumi.OutputState
}

func (ContentLibraryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentLibrary)(nil))
}

func (o ContentLibraryOutput) ToContentLibraryOutput() ContentLibraryOutput {
	return o
}

func (o ContentLibraryOutput) ToContentLibraryOutputWithContext(ctx context.Context) ContentLibraryOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ContentLibraryOutput{})
}
