// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VMware vSphere vnic resource.
//
// ## Example Usage
//
// ### Create a vnic attached to a distributed virtual switch using the vmotion TCP/IP stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			datacenter, err := vsphere.LookupDatacenter(ctx, &vsphere.LookupDatacenterArgs{
//				Name: pulumi.StringRef("dc-01"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			host, err := vsphere.LookupHost(ctx, &vsphere.LookupHostArgs{
//				Name:         pulumi.StringRef("esxi-01.example.com"),
//				DatacenterId: datacenter.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vds, err := vsphere.NewDistributedVirtualSwitch(ctx, "vds", &vsphere.DistributedVirtualSwitchArgs{
//				Name:         pulumi.String("vds-01"),
//				DatacenterId: pulumi.String(datacenter.Id),
//				Hosts: vsphere.DistributedVirtualSwitchHostArray{
//					&vsphere.DistributedVirtualSwitchHostArgs{
//						HostSystemId: pulumi.String(host.Id),
//						Devices: pulumi.StringArray{
//							pulumi.String("vnic3"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			pg, err := vsphere.NewDistributedPortGroup(ctx, "pg", &vsphere.DistributedPortGroupArgs{
//				Name:                         pulumi.String("pg-01"),
//				VlanId:                       pulumi.Int(1234),
//				DistributedVirtualSwitchUuid: vds.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vsphere.NewVnic(ctx, "vnic", &vsphere.VnicArgs{
//				Host:                  pulumi.String(host.Id),
//				DistributedSwitchPort: vds.ID(),
//				DistributedPortGroup:  pg.ID(),
//				Ipv4: &vsphere.VnicIpv4Args{
//					Dhcp: pulumi.Bool(true),
//				},
//				Netstack: pulumi.String("vmotion"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a vnic attached to a portgroup using the default TCP/IP stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			datacenter, err := vsphere.LookupDatacenter(ctx, &vsphere.LookupDatacenterArgs{
//				Name: pulumi.StringRef("dc-01"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			host, err := vsphere.LookupHost(ctx, &vsphere.LookupHostArgs{
//				Name:         pulumi.StringRef("esxi-01.example.com"),
//				DatacenterId: datacenter.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			hvs, err := vsphere.NewHostVirtualSwitch(ctx, "hvs", &vsphere.HostVirtualSwitchArgs{
//				Name:         pulumi.String("hvs-01"),
//				HostSystemId: pulumi.String(host.Id),
//				NetworkAdapters: pulumi.StringArray{
//					pulumi.String("vmnic3"),
//					pulumi.String("vmnic4"),
//				},
//				ActiveNics: pulumi.StringArray{
//					pulumi.String("vmnic3"),
//				},
//				StandbyNics: pulumi.StringArray{
//					pulumi.String("vmnic4"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			pg, err := vsphere.NewHostPortGroup(ctx, "pg", &vsphere.HostPortGroupArgs{
//				Name:              pulumi.String("pg-01"),
//				VirtualSwitchName: hvs.Name,
//				HostSystemId:      pulumi.String(host.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vsphere.NewVnic(ctx, "vnic", &vsphere.VnicArgs{
//				Host:      pulumi.String(host.Id),
//				Portgroup: pg.Name,
//				Ipv4: &vsphere.VnicIpv4Args{
//					Dhcp: pulumi.Bool(true),
//				},
//				Services: pulumi.StringArray{
//					pulumi.String("vsan"),
//					pulumi.String("management"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Importing
//
// An existing vNic can be [imported][docs-import] into this resource
// via supplying the vNic's ID. An example is below:
//
// [docs-import]: /docs/import/index.html
//
// The above would import the vnic `vmk2` from host with ID `host-123`.
type Vnic struct {
	pulumi.CustomResourceState

	// Key of the distributed portgroup the nic will connect to.
	DistributedPortGroup pulumi.StringPtrOutput `pulumi:"distributedPortGroup"`
	// UUID of the vdswitch the nic will be attached to. Do not set if you set portgroup.
	DistributedSwitchPort pulumi.StringPtrOutput `pulumi:"distributedSwitchPort"`
	// ESX host the interface belongs to
	Host pulumi.StringOutput `pulumi:"host"`
	// IPv4 settings. Either this or `ipv6` needs to be set. See IPv4 options below.
	Ipv4 VnicIpv4PtrOutput `pulumi:"ipv4"`
	// IPv6 settings. Either this or `ipv6` needs to be set. See IPv6 options below.
	Ipv6 VnicIpv6PtrOutput `pulumi:"ipv6"`
	// MAC address of the interface.
	Mac pulumi.StringOutput `pulumi:"mac"`
	// MTU of the interface.
	Mtu pulumi.IntOutput `pulumi:"mtu"`
	// TCP/IP stack setting for this interface. Possible values are `defaultTcpipStack``, 'vmotion', 'vSphereProvisioning'. Changing this will force the creation of a new interface since it's not possible to change the stack once it gets created. (Default:`defaultTcpipStack`)
	Netstack pulumi.StringPtrOutput `pulumi:"netstack"`
	// Portgroup to attach the nic to. Do not set if you set distributed_switch_port.
	Portgroup pulumi.StringPtrOutput `pulumi:"portgroup"`
	// Enabled services setting for this interface. Currently support values are `vmotion`, `management`, and `vsan`.
	Services pulumi.StringArrayOutput `pulumi:"services"`
}

// NewVnic registers a new resource with the given unique name, arguments, and options.
func NewVnic(ctx *pulumi.Context,
	name string, args *VnicArgs, opts ...pulumi.ResourceOption) (*Vnic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vnic
	err := ctx.RegisterResource("vsphere:index/vnic:Vnic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVnic gets an existing Vnic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVnic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VnicState, opts ...pulumi.ResourceOption) (*Vnic, error) {
	var resource Vnic
	err := ctx.ReadResource("vsphere:index/vnic:Vnic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vnic resources.
type vnicState struct {
	// Key of the distributed portgroup the nic will connect to.
	DistributedPortGroup *string `pulumi:"distributedPortGroup"`
	// UUID of the vdswitch the nic will be attached to. Do not set if you set portgroup.
	DistributedSwitchPort *string `pulumi:"distributedSwitchPort"`
	// ESX host the interface belongs to
	Host *string `pulumi:"host"`
	// IPv4 settings. Either this or `ipv6` needs to be set. See IPv4 options below.
	Ipv4 *VnicIpv4 `pulumi:"ipv4"`
	// IPv6 settings. Either this or `ipv6` needs to be set. See IPv6 options below.
	Ipv6 *VnicIpv6 `pulumi:"ipv6"`
	// MAC address of the interface.
	Mac *string `pulumi:"mac"`
	// MTU of the interface.
	Mtu *int `pulumi:"mtu"`
	// TCP/IP stack setting for this interface. Possible values are `defaultTcpipStack``, 'vmotion', 'vSphereProvisioning'. Changing this will force the creation of a new interface since it's not possible to change the stack once it gets created. (Default:`defaultTcpipStack`)
	Netstack *string `pulumi:"netstack"`
	// Portgroup to attach the nic to. Do not set if you set distributed_switch_port.
	Portgroup *string `pulumi:"portgroup"`
	// Enabled services setting for this interface. Currently support values are `vmotion`, `management`, and `vsan`.
	Services []string `pulumi:"services"`
}

type VnicState struct {
	// Key of the distributed portgroup the nic will connect to.
	DistributedPortGroup pulumi.StringPtrInput
	// UUID of the vdswitch the nic will be attached to. Do not set if you set portgroup.
	DistributedSwitchPort pulumi.StringPtrInput
	// ESX host the interface belongs to
	Host pulumi.StringPtrInput
	// IPv4 settings. Either this or `ipv6` needs to be set. See IPv4 options below.
	Ipv4 VnicIpv4PtrInput
	// IPv6 settings. Either this or `ipv6` needs to be set. See IPv6 options below.
	Ipv6 VnicIpv6PtrInput
	// MAC address of the interface.
	Mac pulumi.StringPtrInput
	// MTU of the interface.
	Mtu pulumi.IntPtrInput
	// TCP/IP stack setting for this interface. Possible values are `defaultTcpipStack``, 'vmotion', 'vSphereProvisioning'. Changing this will force the creation of a new interface since it's not possible to change the stack once it gets created. (Default:`defaultTcpipStack`)
	Netstack pulumi.StringPtrInput
	// Portgroup to attach the nic to. Do not set if you set distributed_switch_port.
	Portgroup pulumi.StringPtrInput
	// Enabled services setting for this interface. Currently support values are `vmotion`, `management`, and `vsan`.
	Services pulumi.StringArrayInput
}

func (VnicState) ElementType() reflect.Type {
	return reflect.TypeOf((*vnicState)(nil)).Elem()
}

type vnicArgs struct {
	// Key of the distributed portgroup the nic will connect to.
	DistributedPortGroup *string `pulumi:"distributedPortGroup"`
	// UUID of the vdswitch the nic will be attached to. Do not set if you set portgroup.
	DistributedSwitchPort *string `pulumi:"distributedSwitchPort"`
	// ESX host the interface belongs to
	Host string `pulumi:"host"`
	// IPv4 settings. Either this or `ipv6` needs to be set. See IPv4 options below.
	Ipv4 *VnicIpv4 `pulumi:"ipv4"`
	// IPv6 settings. Either this or `ipv6` needs to be set. See IPv6 options below.
	Ipv6 *VnicIpv6 `pulumi:"ipv6"`
	// MAC address of the interface.
	Mac *string `pulumi:"mac"`
	// MTU of the interface.
	Mtu *int `pulumi:"mtu"`
	// TCP/IP stack setting for this interface. Possible values are `defaultTcpipStack``, 'vmotion', 'vSphereProvisioning'. Changing this will force the creation of a new interface since it's not possible to change the stack once it gets created. (Default:`defaultTcpipStack`)
	Netstack *string `pulumi:"netstack"`
	// Portgroup to attach the nic to. Do not set if you set distributed_switch_port.
	Portgroup *string `pulumi:"portgroup"`
	// Enabled services setting for this interface. Currently support values are `vmotion`, `management`, and `vsan`.
	Services []string `pulumi:"services"`
}

// The set of arguments for constructing a Vnic resource.
type VnicArgs struct {
	// Key of the distributed portgroup the nic will connect to.
	DistributedPortGroup pulumi.StringPtrInput
	// UUID of the vdswitch the nic will be attached to. Do not set if you set portgroup.
	DistributedSwitchPort pulumi.StringPtrInput
	// ESX host the interface belongs to
	Host pulumi.StringInput
	// IPv4 settings. Either this or `ipv6` needs to be set. See IPv4 options below.
	Ipv4 VnicIpv4PtrInput
	// IPv6 settings. Either this or `ipv6` needs to be set. See IPv6 options below.
	Ipv6 VnicIpv6PtrInput
	// MAC address of the interface.
	Mac pulumi.StringPtrInput
	// MTU of the interface.
	Mtu pulumi.IntPtrInput
	// TCP/IP stack setting for this interface. Possible values are `defaultTcpipStack``, 'vmotion', 'vSphereProvisioning'. Changing this will force the creation of a new interface since it's not possible to change the stack once it gets created. (Default:`defaultTcpipStack`)
	Netstack pulumi.StringPtrInput
	// Portgroup to attach the nic to. Do not set if you set distributed_switch_port.
	Portgroup pulumi.StringPtrInput
	// Enabled services setting for this interface. Currently support values are `vmotion`, `management`, and `vsan`.
	Services pulumi.StringArrayInput
}

func (VnicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vnicArgs)(nil)).Elem()
}

type VnicInput interface {
	pulumi.Input

	ToVnicOutput() VnicOutput
	ToVnicOutputWithContext(ctx context.Context) VnicOutput
}

func (*Vnic) ElementType() reflect.Type {
	return reflect.TypeOf((**Vnic)(nil)).Elem()
}

func (i *Vnic) ToVnicOutput() VnicOutput {
	return i.ToVnicOutputWithContext(context.Background())
}

func (i *Vnic) ToVnicOutputWithContext(ctx context.Context) VnicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnicOutput)
}

// VnicArrayInput is an input type that accepts VnicArray and VnicArrayOutput values.
// You can construct a concrete instance of `VnicArrayInput` via:
//
//	VnicArray{ VnicArgs{...} }
type VnicArrayInput interface {
	pulumi.Input

	ToVnicArrayOutput() VnicArrayOutput
	ToVnicArrayOutputWithContext(context.Context) VnicArrayOutput
}

type VnicArray []VnicInput

func (VnicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vnic)(nil)).Elem()
}

func (i VnicArray) ToVnicArrayOutput() VnicArrayOutput {
	return i.ToVnicArrayOutputWithContext(context.Background())
}

func (i VnicArray) ToVnicArrayOutputWithContext(ctx context.Context) VnicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnicArrayOutput)
}

// VnicMapInput is an input type that accepts VnicMap and VnicMapOutput values.
// You can construct a concrete instance of `VnicMapInput` via:
//
//	VnicMap{ "key": VnicArgs{...} }
type VnicMapInput interface {
	pulumi.Input

	ToVnicMapOutput() VnicMapOutput
	ToVnicMapOutputWithContext(context.Context) VnicMapOutput
}

type VnicMap map[string]VnicInput

func (VnicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vnic)(nil)).Elem()
}

func (i VnicMap) ToVnicMapOutput() VnicMapOutput {
	return i.ToVnicMapOutputWithContext(context.Background())
}

func (i VnicMap) ToVnicMapOutputWithContext(ctx context.Context) VnicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnicMapOutput)
}

type VnicOutput struct{ *pulumi.OutputState }

func (VnicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vnic)(nil)).Elem()
}

func (o VnicOutput) ToVnicOutput() VnicOutput {
	return o
}

func (o VnicOutput) ToVnicOutputWithContext(ctx context.Context) VnicOutput {
	return o
}

// Key of the distributed portgroup the nic will connect to.
func (o VnicOutput) DistributedPortGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vnic) pulumi.StringPtrOutput { return v.DistributedPortGroup }).(pulumi.StringPtrOutput)
}

// UUID of the vdswitch the nic will be attached to. Do not set if you set portgroup.
func (o VnicOutput) DistributedSwitchPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vnic) pulumi.StringPtrOutput { return v.DistributedSwitchPort }).(pulumi.StringPtrOutput)
}

// ESX host the interface belongs to
func (o VnicOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *Vnic) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// IPv4 settings. Either this or `ipv6` needs to be set. See IPv4 options below.
func (o VnicOutput) Ipv4() VnicIpv4PtrOutput {
	return o.ApplyT(func(v *Vnic) VnicIpv4PtrOutput { return v.Ipv4 }).(VnicIpv4PtrOutput)
}

// IPv6 settings. Either this or `ipv6` needs to be set. See IPv6 options below.
func (o VnicOutput) Ipv6() VnicIpv6PtrOutput {
	return o.ApplyT(func(v *Vnic) VnicIpv6PtrOutput { return v.Ipv6 }).(VnicIpv6PtrOutput)
}

// MAC address of the interface.
func (o VnicOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *Vnic) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

// MTU of the interface.
func (o VnicOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v *Vnic) pulumi.IntOutput { return v.Mtu }).(pulumi.IntOutput)
}

// TCP/IP stack setting for this interface. Possible values are `defaultTcpipStack“, 'vmotion', 'vSphereProvisioning'. Changing this will force the creation of a new interface since it's not possible to change the stack once it gets created. (Default:`defaultTcpipStack`)
func (o VnicOutput) Netstack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vnic) pulumi.StringPtrOutput { return v.Netstack }).(pulumi.StringPtrOutput)
}

// Portgroup to attach the nic to. Do not set if you set distributed_switch_port.
func (o VnicOutput) Portgroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vnic) pulumi.StringPtrOutput { return v.Portgroup }).(pulumi.StringPtrOutput)
}

// Enabled services setting for this interface. Currently support values are `vmotion`, `management`, and `vsan`.
func (o VnicOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vnic) pulumi.StringArrayOutput { return v.Services }).(pulumi.StringArrayOutput)
}

type VnicArrayOutput struct{ *pulumi.OutputState }

func (VnicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vnic)(nil)).Elem()
}

func (o VnicArrayOutput) ToVnicArrayOutput() VnicArrayOutput {
	return o
}

func (o VnicArrayOutput) ToVnicArrayOutputWithContext(ctx context.Context) VnicArrayOutput {
	return o
}

func (o VnicArrayOutput) Index(i pulumi.IntInput) VnicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vnic {
		return vs[0].([]*Vnic)[vs[1].(int)]
	}).(VnicOutput)
}

type VnicMapOutput struct{ *pulumi.OutputState }

func (VnicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vnic)(nil)).Elem()
}

func (o VnicMapOutput) ToVnicMapOutput() VnicMapOutput {
	return o
}

func (o VnicMapOutput) ToVnicMapOutputWithContext(ctx context.Context) VnicMapOutput {
	return o
}

func (o VnicMapOutput) MapIndex(k pulumi.StringInput) VnicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vnic {
		return vs[0].(map[string]*Vnic)[vs[1].(string)]
	}).(VnicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VnicInput)(nil)).Elem(), &Vnic{})
	pulumi.RegisterInputType(reflect.TypeOf((*VnicArrayInput)(nil)).Elem(), VnicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VnicMapInput)(nil)).Elem(), VnicMap{})
	pulumi.RegisterOutputType(VnicOutput{})
	pulumi.RegisterOutputType(VnicArrayOutput{})
	pulumi.RegisterOutputType(VnicMapOutput{})
}
