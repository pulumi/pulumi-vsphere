// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ConfigurationProfile` data source can be used to export the configuration and schema
// of a cluster that is already managed via configuration profiles.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			datacenter, err := vsphere.LookupDatacenter(ctx, &vsphere.LookupDatacenterArgs{
//				Name: pulumi.StringRef("dc-01"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			computeCluster, err := vsphere.LookupComputeCluster(ctx, &vsphere.LookupComputeClusterArgs{
//				Name:         "cluster-01",
//				DatacenterId: pulumi.StringRef(datacenter.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vsphere.LookupConfigurationProfile(ctx, &vsphere.LookupConfigurationProfileArgs{
//				ClusterId: computeCluster.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupConfigurationProfile(ctx *pulumi.Context, args *LookupConfigurationProfileArgs, opts ...pulumi.InvokeOption) (*LookupConfigurationProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConfigurationProfileResult
	err := ctx.Invoke("vsphere:index/getConfigurationProfile:getConfigurationProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConfigurationProfile.
type LookupConfigurationProfileArgs struct {
	// The identifier of the compute cluster.
	ClusterId string `pulumi:"clusterId"`
}

// A collection of values returned by getConfigurationProfile.
type LookupConfigurationProfileResult struct {
	ClusterId string `pulumi:"clusterId"`
	// The current configuration which is active on the cluster.
	Configuration string `pulumi:"configuration"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The JSON schema for the profile.
	Schema string `pulumi:"schema"`
}

func LookupConfigurationProfileOutput(ctx *pulumi.Context, args LookupConfigurationProfileOutputArgs, opts ...pulumi.InvokeOption) LookupConfigurationProfileResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupConfigurationProfileResultOutput, error) {
			args := v.(LookupConfigurationProfileArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vsphere:index/getConfigurationProfile:getConfigurationProfile", args, LookupConfigurationProfileResultOutput{}, options).(LookupConfigurationProfileResultOutput), nil
		}).(LookupConfigurationProfileResultOutput)
}

// A collection of arguments for invoking getConfigurationProfile.
type LookupConfigurationProfileOutputArgs struct {
	// The identifier of the compute cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
}

func (LookupConfigurationProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConfigurationProfileArgs)(nil)).Elem()
}

// A collection of values returned by getConfigurationProfile.
type LookupConfigurationProfileResultOutput struct{ *pulumi.OutputState }

func (LookupConfigurationProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConfigurationProfileResult)(nil)).Elem()
}

func (o LookupConfigurationProfileResultOutput) ToLookupConfigurationProfileResultOutput() LookupConfigurationProfileResultOutput {
	return o
}

func (o LookupConfigurationProfileResultOutput) ToLookupConfigurationProfileResultOutputWithContext(ctx context.Context) LookupConfigurationProfileResultOutput {
	return o
}

func (o LookupConfigurationProfileResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigurationProfileResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The current configuration which is active on the cluster.
func (o LookupConfigurationProfileResultOutput) Configuration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigurationProfileResult) string { return v.Configuration }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupConfigurationProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigurationProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

// The JSON schema for the profile.
func (o LookupConfigurationProfileResultOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigurationProfileResult) string { return v.Schema }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConfigurationProfileResultOutput{})
}
