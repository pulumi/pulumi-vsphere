// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The `vsphere_compute_cluster_vm_anti_affinity_rule` resource can be used to
// manage VM anti-affinity rules in a cluster, either created by the
// [`vsphere_compute_cluster`][tf-vsphere-cluster-resource] resource or looked up
// by the [`vsphere_compute_cluster`][tf-vsphere-cluster-data-source] data source.
// 
// [tf-vsphere-cluster-resource]: /docs/providers/vsphere/r/compute_cluster.html
// [tf-vsphere-cluster-data-source]: /docs/providers/vsphere/d/compute_cluster.html
// 
// This rule can be used to tell a set to virtual machines to run on different
// hosts within a cluster, useful for preventing single points of failure in
// application cluster scenarios. When configured, DRS will make a best effort to
// ensure that the virtual machines run on different hosts, or prevent any
// operation that would keep that from happening, depending on the value of the
// `mandatory` flag.
// 
// -> Keep in mind that this rule can only be used to tell VMs to run separately
// on _non-specific_ hosts - specific hosts cannot be specified with this rule.
// For that, see the
// [`vsphere_compute_cluster_vm_host_rule`][tf-vsphere-cluster-vm-host-rule-resource]
// resource.
// 
// [tf-vsphere-cluster-vm-host-rule-resource]: /docs/providers/vsphere/r/compute_cluster_vm_host_rule.html
// 
// ~> **NOTE:** This resource requires vCenter and is not available on direct ESXi
// connections.
// 
// ~> **NOTE:** vSphere DRS requires a vSphere Enterprise Plus license.
type ComputeClusterVmAntiAffinityRule struct {
	s *pulumi.ResourceState
}

// NewComputeClusterVmAntiAffinityRule registers a new resource with the given unique name, arguments, and options.
func NewComputeClusterVmAntiAffinityRule(ctx *pulumi.Context,
	name string, args *ComputeClusterVmAntiAffinityRuleArgs, opts ...pulumi.ResourceOpt) (*ComputeClusterVmAntiAffinityRule, error) {
	if args == nil || args.ComputeClusterId == nil {
		return nil, errors.New("missing required argument 'ComputeClusterId'")
	}
	if args == nil || args.VirtualMachineIds == nil {
		return nil, errors.New("missing required argument 'VirtualMachineIds'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["computeClusterId"] = nil
		inputs["enabled"] = nil
		inputs["mandatory"] = nil
		inputs["name"] = nil
		inputs["virtualMachineIds"] = nil
	} else {
		inputs["computeClusterId"] = args.ComputeClusterId
		inputs["enabled"] = args.Enabled
		inputs["mandatory"] = args.Mandatory
		inputs["name"] = args.Name
		inputs["virtualMachineIds"] = args.VirtualMachineIds
	}
	s, err := ctx.RegisterResource("vsphere:index/computeClusterVmAntiAffinityRule:ComputeClusterVmAntiAffinityRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ComputeClusterVmAntiAffinityRule{s: s}, nil
}

// GetComputeClusterVmAntiAffinityRule gets an existing ComputeClusterVmAntiAffinityRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeClusterVmAntiAffinityRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ComputeClusterVmAntiAffinityRuleState, opts ...pulumi.ResourceOpt) (*ComputeClusterVmAntiAffinityRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["computeClusterId"] = state.ComputeClusterId
		inputs["enabled"] = state.Enabled
		inputs["mandatory"] = state.Mandatory
		inputs["name"] = state.Name
		inputs["virtualMachineIds"] = state.VirtualMachineIds
	}
	s, err := ctx.ReadResource("vsphere:index/computeClusterVmAntiAffinityRule:ComputeClusterVmAntiAffinityRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ComputeClusterVmAntiAffinityRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ComputeClusterVmAntiAffinityRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ComputeClusterVmAntiAffinityRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The [managed object reference
// ID][docs-about-morefs] of the cluster to put the group in.  Forces a new
// resource if changed.
func (r *ComputeClusterVmAntiAffinityRule) ComputeClusterId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["computeClusterId"])
}

// Enable this rule in the cluster. Default: `true`.
func (r *ComputeClusterVmAntiAffinityRule) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// When this value is `true`, prevents any virtual
// machine operations that may violate this rule. Default: `false`.
func (r *ComputeClusterVmAntiAffinityRule) Mandatory() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["mandatory"])
}

// The name of the rule. This must be unique in the cluster.
func (r *ComputeClusterVmAntiAffinityRule) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The UUIDs of the virtual machines to run
// on hosts different from each other.
func (r *ComputeClusterVmAntiAffinityRule) VirtualMachineIds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["virtualMachineIds"])
}

// Input properties used for looking up and filtering ComputeClusterVmAntiAffinityRule resources.
type ComputeClusterVmAntiAffinityRuleState struct {
	// The [managed object reference
	// ID][docs-about-morefs] of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId interface{}
	// Enable this rule in the cluster. Default: `true`.
	Enabled interface{}
	// When this value is `true`, prevents any virtual
	// machine operations that may violate this rule. Default: `false`.
	Mandatory interface{}
	// The name of the rule. This must be unique in the cluster.
	Name interface{}
	// The UUIDs of the virtual machines to run
	// on hosts different from each other.
	VirtualMachineIds interface{}
}

// The set of arguments for constructing a ComputeClusterVmAntiAffinityRule resource.
type ComputeClusterVmAntiAffinityRuleArgs struct {
	// The [managed object reference
	// ID][docs-about-morefs] of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId interface{}
	// Enable this rule in the cluster. Default: `true`.
	Enabled interface{}
	// When this value is `true`, prevents any virtual
	// machine operations that may violate this rule. Default: `false`.
	Mandatory interface{}
	// The name of the rule. This must be unique in the cluster.
	Name interface{}
	// The UUIDs of the virtual machines to run
	// on hosts different from each other.
	VirtualMachineIds interface{}
}
