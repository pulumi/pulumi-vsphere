// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VMware vSphere license resource. This can be used to add and remove license keys.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vsphere/sdk/v3/go/vsphere"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vsphere.NewLicense(ctx, "licenseKey", &vsphere.LicenseArgs{
// 			Labels: pulumi.StringMap{
// 				"VpxClientLicenseLabel": pulumi.String("Hello World"),
// 				"Workflow":              pulumi.String("Hello World"),
// 			},
// 			LicenseKey: pulumi.String("452CQ-2EK54-K8742-00000-00000"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type License struct {
	pulumi.CustomResourceState

	// The product edition of the license key.
	EditionKey pulumi.StringOutput `pulumi:"editionKey"`
	// A map of key/value pairs to be attached as labels (tags) to the license key.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The license key to add.
	LicenseKey pulumi.StringOutput `pulumi:"licenseKey"`
	// The display name for the license.
	Name pulumi.StringOutput `pulumi:"name"`
	// Total number of units (example: CPUs) contained in the license.
	Total pulumi.IntOutput `pulumi:"total"`
	// The number of units (example: CPUs) assigned to this license.
	Used pulumi.IntOutput `pulumi:"used"`
}

// NewLicense registers a new resource with the given unique name, arguments, and options.
func NewLicense(ctx *pulumi.Context,
	name string, args *LicenseArgs, opts ...pulumi.ResourceOption) (*License, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LicenseKey == nil {
		return nil, errors.New("invalid value for required argument 'LicenseKey'")
	}
	var resource License
	err := ctx.RegisterResource("vsphere:index/license:License", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicense gets an existing License resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicense(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseState, opts ...pulumi.ResourceOption) (*License, error) {
	var resource License
	err := ctx.ReadResource("vsphere:index/license:License", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering License resources.
type licenseState struct {
	// The product edition of the license key.
	EditionKey *string `pulumi:"editionKey"`
	// A map of key/value pairs to be attached as labels (tags) to the license key.
	Labels map[string]string `pulumi:"labels"`
	// The license key to add.
	LicenseKey *string `pulumi:"licenseKey"`
	// The display name for the license.
	Name *string `pulumi:"name"`
	// Total number of units (example: CPUs) contained in the license.
	Total *int `pulumi:"total"`
	// The number of units (example: CPUs) assigned to this license.
	Used *int `pulumi:"used"`
}

type LicenseState struct {
	// The product edition of the license key.
	EditionKey pulumi.StringPtrInput
	// A map of key/value pairs to be attached as labels (tags) to the license key.
	Labels pulumi.StringMapInput
	// The license key to add.
	LicenseKey pulumi.StringPtrInput
	// The display name for the license.
	Name pulumi.StringPtrInput
	// Total number of units (example: CPUs) contained in the license.
	Total pulumi.IntPtrInput
	// The number of units (example: CPUs) assigned to this license.
	Used pulumi.IntPtrInput
}

func (LicenseState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseState)(nil)).Elem()
}

type licenseArgs struct {
	// A map of key/value pairs to be attached as labels (tags) to the license key.
	Labels map[string]string `pulumi:"labels"`
	// The license key to add.
	LicenseKey string `pulumi:"licenseKey"`
}

// The set of arguments for constructing a License resource.
type LicenseArgs struct {
	// A map of key/value pairs to be attached as labels (tags) to the license key.
	Labels pulumi.StringMapInput
	// The license key to add.
	LicenseKey pulumi.StringInput
}

func (LicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseArgs)(nil)).Elem()
}

type LicenseInput interface {
	pulumi.Input

	ToLicenseOutput() LicenseOutput
	ToLicenseOutputWithContext(ctx context.Context) LicenseOutput
}

func (*License) ElementType() reflect.Type {
	return reflect.TypeOf((*License)(nil))
}

func (i *License) ToLicenseOutput() LicenseOutput {
	return i.ToLicenseOutputWithContext(context.Background())
}

func (i *License) ToLicenseOutputWithContext(ctx context.Context) LicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseOutput)
}

func (i *License) ToLicensePtrOutput() LicensePtrOutput {
	return i.ToLicensePtrOutputWithContext(context.Background())
}

func (i *License) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensePtrOutput)
}

type LicensePtrInput interface {
	pulumi.Input

	ToLicensePtrOutput() LicensePtrOutput
	ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput
}

type licensePtrType LicenseArgs

func (*licensePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**License)(nil))
}

func (i *licensePtrType) ToLicensePtrOutput() LicensePtrOutput {
	return i.ToLicensePtrOutputWithContext(context.Background())
}

func (i *licensePtrType) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensePtrOutput)
}

// LicenseArrayInput is an input type that accepts LicenseArray and LicenseArrayOutput values.
// You can construct a concrete instance of `LicenseArrayInput` via:
//
//          LicenseArray{ LicenseArgs{...} }
type LicenseArrayInput interface {
	pulumi.Input

	ToLicenseArrayOutput() LicenseArrayOutput
	ToLicenseArrayOutputWithContext(context.Context) LicenseArrayOutput
}

type LicenseArray []LicenseInput

func (LicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*License)(nil))
}

func (i LicenseArray) ToLicenseArrayOutput() LicenseArrayOutput {
	return i.ToLicenseArrayOutputWithContext(context.Background())
}

func (i LicenseArray) ToLicenseArrayOutputWithContext(ctx context.Context) LicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseArrayOutput)
}

// LicenseMapInput is an input type that accepts LicenseMap and LicenseMapOutput values.
// You can construct a concrete instance of `LicenseMapInput` via:
//
//          LicenseMap{ "key": LicenseArgs{...} }
type LicenseMapInput interface {
	pulumi.Input

	ToLicenseMapOutput() LicenseMapOutput
	ToLicenseMapOutputWithContext(context.Context) LicenseMapOutput
}

type LicenseMap map[string]LicenseInput

func (LicenseMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*License)(nil))
}

func (i LicenseMap) ToLicenseMapOutput() LicenseMapOutput {
	return i.ToLicenseMapOutputWithContext(context.Background())
}

func (i LicenseMap) ToLicenseMapOutputWithContext(ctx context.Context) LicenseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseMapOutput)
}

type LicenseOutput struct {
	*pulumi.OutputState
}

func (LicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*License)(nil))
}

func (o LicenseOutput) ToLicenseOutput() LicenseOutput {
	return o
}

func (o LicenseOutput) ToLicenseOutputWithContext(ctx context.Context) LicenseOutput {
	return o
}

func (o LicenseOutput) ToLicensePtrOutput() LicensePtrOutput {
	return o.ToLicensePtrOutputWithContext(context.Background())
}

func (o LicenseOutput) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return o.ApplyT(func(v License) *License {
		return &v
	}).(LicensePtrOutput)
}

type LicensePtrOutput struct {
	*pulumi.OutputState
}

func (LicensePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**License)(nil))
}

func (o LicensePtrOutput) ToLicensePtrOutput() LicensePtrOutput {
	return o
}

func (o LicensePtrOutput) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return o
}

type LicenseArrayOutput struct{ *pulumi.OutputState }

func (LicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]License)(nil))
}

func (o LicenseArrayOutput) ToLicenseArrayOutput() LicenseArrayOutput {
	return o
}

func (o LicenseArrayOutput) ToLicenseArrayOutputWithContext(ctx context.Context) LicenseArrayOutput {
	return o
}

func (o LicenseArrayOutput) Index(i pulumi.IntInput) LicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) License {
		return vs[0].([]License)[vs[1].(int)]
	}).(LicenseOutput)
}

type LicenseMapOutput struct{ *pulumi.OutputState }

func (LicenseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]License)(nil))
}

func (o LicenseMapOutput) ToLicenseMapOutput() LicenseMapOutput {
	return o
}

func (o LicenseMapOutput) ToLicenseMapOutputWithContext(ctx context.Context) LicenseMapOutput {
	return o
}

func (o LicenseMapOutput) MapIndex(k pulumi.StringInput) LicenseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) License {
		return vs[0].(map[string]License)[vs[1].(string)]
	}).(LicenseOutput)
}

func init() {
	pulumi.RegisterOutputType(LicenseOutput{})
	pulumi.RegisterOutputType(LicensePtrOutput{})
	pulumi.RegisterOutputType(LicenseArrayOutput{})
	pulumi.RegisterOutputType(LicenseMapOutput{})
}
