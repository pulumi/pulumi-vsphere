// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Role struct {
	pulumi.CustomResourceState

	// The display label of the role.
	Label pulumi.StringOutput `pulumi:"label"`
	// The name of the role.
	Name pulumi.StringOutput `pulumi:"name"`
	// The privileges to be associated with this role.
	RolePrivileges pulumi.StringArrayOutput `pulumi:"rolePrivileges"`
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	if args == nil {
		args = &RoleArgs{}
	}

	var resource Role
	err := ctx.RegisterResource("vsphere:index/role:Role", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleState, opts ...pulumi.ResourceOption) (*Role, error) {
	var resource Role
	err := ctx.ReadResource("vsphere:index/role:Role", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Role resources.
type roleState struct {
	// The display label of the role.
	Label *string `pulumi:"label"`
	// The name of the role.
	Name *string `pulumi:"name"`
	// The privileges to be associated with this role.
	RolePrivileges []string `pulumi:"rolePrivileges"`
}

type RoleState struct {
	// The display label of the role.
	Label pulumi.StringPtrInput
	// The name of the role.
	Name pulumi.StringPtrInput
	// The privileges to be associated with this role.
	RolePrivileges pulumi.StringArrayInput
}

func (RoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleState)(nil)).Elem()
}

type roleArgs struct {
	// The name of the role.
	Name *string `pulumi:"name"`
	// The privileges to be associated with this role.
	RolePrivileges []string `pulumi:"rolePrivileges"`
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	// The name of the role.
	Name pulumi.StringPtrInput
	// The privileges to be associated with this role.
	RolePrivileges pulumi.StringArrayInput
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleArgs)(nil)).Elem()
}

type RoleInput interface {
	pulumi.Input

	ToRoleOutput() RoleOutput
	ToRoleOutputWithContext(ctx context.Context) RoleOutput
}

func (*Role) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil))
}

func (i *Role) ToRoleOutput() RoleOutput {
	return i.ToRoleOutputWithContext(context.Background())
}

func (i *Role) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput)
}

type RoleOutput struct {
	*pulumi.OutputState
}

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil))
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RoleOutput{})
}
