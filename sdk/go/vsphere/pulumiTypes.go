// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type DistributedPortGroupVlanRange struct {
	MaxVlan int `pulumi:"maxVlan"`
	MinVlan int `pulumi:"minVlan"`
}

// DistributedPortGroupVlanRangeInput is an input type that accepts DistributedPortGroupVlanRangeArgs and DistributedPortGroupVlanRangeOutput values.
// You can construct a concrete instance of `DistributedPortGroupVlanRangeInput` via:
//
// 		 DistributedPortGroupVlanRangeArgs{...}
//
type DistributedPortGroupVlanRangeInput interface {
	pulumi.Input

	ToDistributedPortGroupVlanRangeOutput() DistributedPortGroupVlanRangeOutput
	ToDistributedPortGroupVlanRangeOutputWithContext(context.Context) DistributedPortGroupVlanRangeOutput
}

type DistributedPortGroupVlanRangeArgs struct {
	MaxVlan pulumi.IntInput `pulumi:"maxVlan"`
	MinVlan pulumi.IntInput `pulumi:"minVlan"`
}

func (DistributedPortGroupVlanRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributedPortGroupVlanRange)(nil)).Elem()
}

func (i DistributedPortGroupVlanRangeArgs) ToDistributedPortGroupVlanRangeOutput() DistributedPortGroupVlanRangeOutput {
	return i.ToDistributedPortGroupVlanRangeOutputWithContext(context.Background())
}

func (i DistributedPortGroupVlanRangeArgs) ToDistributedPortGroupVlanRangeOutputWithContext(ctx context.Context) DistributedPortGroupVlanRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributedPortGroupVlanRangeOutput)
}

// DistributedPortGroupVlanRangeArrayInput is an input type that accepts DistributedPortGroupVlanRangeArray and DistributedPortGroupVlanRangeArrayOutput values.
// You can construct a concrete instance of `DistributedPortGroupVlanRangeArrayInput` via:
//
// 		 DistributedPortGroupVlanRangeArray{ DistributedPortGroupVlanRangeArgs{...} }
//
type DistributedPortGroupVlanRangeArrayInput interface {
	pulumi.Input

	ToDistributedPortGroupVlanRangeArrayOutput() DistributedPortGroupVlanRangeArrayOutput
	ToDistributedPortGroupVlanRangeArrayOutputWithContext(context.Context) DistributedPortGroupVlanRangeArrayOutput
}

type DistributedPortGroupVlanRangeArray []DistributedPortGroupVlanRangeInput

func (DistributedPortGroupVlanRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributedPortGroupVlanRange)(nil)).Elem()
}

func (i DistributedPortGroupVlanRangeArray) ToDistributedPortGroupVlanRangeArrayOutput() DistributedPortGroupVlanRangeArrayOutput {
	return i.ToDistributedPortGroupVlanRangeArrayOutputWithContext(context.Background())
}

func (i DistributedPortGroupVlanRangeArray) ToDistributedPortGroupVlanRangeArrayOutputWithContext(ctx context.Context) DistributedPortGroupVlanRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributedPortGroupVlanRangeArrayOutput)
}

type DistributedPortGroupVlanRangeOutput struct{ *pulumi.OutputState }

func (DistributedPortGroupVlanRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributedPortGroupVlanRange)(nil)).Elem()
}

func (o DistributedPortGroupVlanRangeOutput) ToDistributedPortGroupVlanRangeOutput() DistributedPortGroupVlanRangeOutput {
	return o
}

func (o DistributedPortGroupVlanRangeOutput) ToDistributedPortGroupVlanRangeOutputWithContext(ctx context.Context) DistributedPortGroupVlanRangeOutput {
	return o
}

func (o DistributedPortGroupVlanRangeOutput) MaxVlan() pulumi.IntOutput {
	return o.ApplyT(func(v DistributedPortGroupVlanRange) int { return v.MaxVlan }).(pulumi.IntOutput)
}

func (o DistributedPortGroupVlanRangeOutput) MinVlan() pulumi.IntOutput {
	return o.ApplyT(func(v DistributedPortGroupVlanRange) int { return v.MinVlan }).(pulumi.IntOutput)
}

type DistributedPortGroupVlanRangeArrayOutput struct{ *pulumi.OutputState }

func (DistributedPortGroupVlanRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributedPortGroupVlanRange)(nil)).Elem()
}

func (o DistributedPortGroupVlanRangeArrayOutput) ToDistributedPortGroupVlanRangeArrayOutput() DistributedPortGroupVlanRangeArrayOutput {
	return o
}

func (o DistributedPortGroupVlanRangeArrayOutput) ToDistributedPortGroupVlanRangeArrayOutputWithContext(ctx context.Context) DistributedPortGroupVlanRangeArrayOutput {
	return o
}

func (o DistributedPortGroupVlanRangeArrayOutput) Index(i pulumi.IntInput) DistributedPortGroupVlanRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DistributedPortGroupVlanRange {
		return vs[0].([]DistributedPortGroupVlanRange)[vs[1].(int)]
	}).(DistributedPortGroupVlanRangeOutput)
}

type DistributedVirtualSwitchHost struct {
	// The list of NIC devices to map to uplinks on the DVS,
	// added in order they are specified.
	Devices []string `pulumi:"devices"`
	// The host system ID of the host to add to the
	// DVS.
	HostSystemId string `pulumi:"hostSystemId"`
}

// DistributedVirtualSwitchHostInput is an input type that accepts DistributedVirtualSwitchHostArgs and DistributedVirtualSwitchHostOutput values.
// You can construct a concrete instance of `DistributedVirtualSwitchHostInput` via:
//
// 		 DistributedVirtualSwitchHostArgs{...}
//
type DistributedVirtualSwitchHostInput interface {
	pulumi.Input

	ToDistributedVirtualSwitchHostOutput() DistributedVirtualSwitchHostOutput
	ToDistributedVirtualSwitchHostOutputWithContext(context.Context) DistributedVirtualSwitchHostOutput
}

type DistributedVirtualSwitchHostArgs struct {
	// The list of NIC devices to map to uplinks on the DVS,
	// added in order they are specified.
	Devices pulumi.StringArrayInput `pulumi:"devices"`
	// The host system ID of the host to add to the
	// DVS.
	HostSystemId pulumi.StringInput `pulumi:"hostSystemId"`
}

func (DistributedVirtualSwitchHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributedVirtualSwitchHost)(nil)).Elem()
}

func (i DistributedVirtualSwitchHostArgs) ToDistributedVirtualSwitchHostOutput() DistributedVirtualSwitchHostOutput {
	return i.ToDistributedVirtualSwitchHostOutputWithContext(context.Background())
}

func (i DistributedVirtualSwitchHostArgs) ToDistributedVirtualSwitchHostOutputWithContext(ctx context.Context) DistributedVirtualSwitchHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributedVirtualSwitchHostOutput)
}

// DistributedVirtualSwitchHostArrayInput is an input type that accepts DistributedVirtualSwitchHostArray and DistributedVirtualSwitchHostArrayOutput values.
// You can construct a concrete instance of `DistributedVirtualSwitchHostArrayInput` via:
//
// 		 DistributedVirtualSwitchHostArray{ DistributedVirtualSwitchHostArgs{...} }
//
type DistributedVirtualSwitchHostArrayInput interface {
	pulumi.Input

	ToDistributedVirtualSwitchHostArrayOutput() DistributedVirtualSwitchHostArrayOutput
	ToDistributedVirtualSwitchHostArrayOutputWithContext(context.Context) DistributedVirtualSwitchHostArrayOutput
}

type DistributedVirtualSwitchHostArray []DistributedVirtualSwitchHostInput

func (DistributedVirtualSwitchHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributedVirtualSwitchHost)(nil)).Elem()
}

func (i DistributedVirtualSwitchHostArray) ToDistributedVirtualSwitchHostArrayOutput() DistributedVirtualSwitchHostArrayOutput {
	return i.ToDistributedVirtualSwitchHostArrayOutputWithContext(context.Background())
}

func (i DistributedVirtualSwitchHostArray) ToDistributedVirtualSwitchHostArrayOutputWithContext(ctx context.Context) DistributedVirtualSwitchHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributedVirtualSwitchHostArrayOutput)
}

type DistributedVirtualSwitchHostOutput struct{ *pulumi.OutputState }

func (DistributedVirtualSwitchHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributedVirtualSwitchHost)(nil)).Elem()
}

func (o DistributedVirtualSwitchHostOutput) ToDistributedVirtualSwitchHostOutput() DistributedVirtualSwitchHostOutput {
	return o
}

func (o DistributedVirtualSwitchHostOutput) ToDistributedVirtualSwitchHostOutputWithContext(ctx context.Context) DistributedVirtualSwitchHostOutput {
	return o
}

// The list of NIC devices to map to uplinks on the DVS,
// added in order they are specified.
func (o DistributedVirtualSwitchHostOutput) Devices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributedVirtualSwitchHost) []string { return v.Devices }).(pulumi.StringArrayOutput)
}

// The host system ID of the host to add to the
// DVS.
func (o DistributedVirtualSwitchHostOutput) HostSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v DistributedVirtualSwitchHost) string { return v.HostSystemId }).(pulumi.StringOutput)
}

type DistributedVirtualSwitchHostArrayOutput struct{ *pulumi.OutputState }

func (DistributedVirtualSwitchHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributedVirtualSwitchHost)(nil)).Elem()
}

func (o DistributedVirtualSwitchHostArrayOutput) ToDistributedVirtualSwitchHostArrayOutput() DistributedVirtualSwitchHostArrayOutput {
	return o
}

func (o DistributedVirtualSwitchHostArrayOutput) ToDistributedVirtualSwitchHostArrayOutputWithContext(ctx context.Context) DistributedVirtualSwitchHostArrayOutput {
	return o
}

func (o DistributedVirtualSwitchHostArrayOutput) Index(i pulumi.IntInput) DistributedVirtualSwitchHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DistributedVirtualSwitchHost {
		return vs[0].([]DistributedVirtualSwitchHost)[vs[1].(int)]
	}).(DistributedVirtualSwitchHostOutput)
}

type DistributedVirtualSwitchVlanRange struct {
	MaxVlan int `pulumi:"maxVlan"`
	MinVlan int `pulumi:"minVlan"`
}

// DistributedVirtualSwitchVlanRangeInput is an input type that accepts DistributedVirtualSwitchVlanRangeArgs and DistributedVirtualSwitchVlanRangeOutput values.
// You can construct a concrete instance of `DistributedVirtualSwitchVlanRangeInput` via:
//
// 		 DistributedVirtualSwitchVlanRangeArgs{...}
//
type DistributedVirtualSwitchVlanRangeInput interface {
	pulumi.Input

	ToDistributedVirtualSwitchVlanRangeOutput() DistributedVirtualSwitchVlanRangeOutput
	ToDistributedVirtualSwitchVlanRangeOutputWithContext(context.Context) DistributedVirtualSwitchVlanRangeOutput
}

type DistributedVirtualSwitchVlanRangeArgs struct {
	MaxVlan pulumi.IntInput `pulumi:"maxVlan"`
	MinVlan pulumi.IntInput `pulumi:"minVlan"`
}

func (DistributedVirtualSwitchVlanRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributedVirtualSwitchVlanRange)(nil)).Elem()
}

func (i DistributedVirtualSwitchVlanRangeArgs) ToDistributedVirtualSwitchVlanRangeOutput() DistributedVirtualSwitchVlanRangeOutput {
	return i.ToDistributedVirtualSwitchVlanRangeOutputWithContext(context.Background())
}

func (i DistributedVirtualSwitchVlanRangeArgs) ToDistributedVirtualSwitchVlanRangeOutputWithContext(ctx context.Context) DistributedVirtualSwitchVlanRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributedVirtualSwitchVlanRangeOutput)
}

// DistributedVirtualSwitchVlanRangeArrayInput is an input type that accepts DistributedVirtualSwitchVlanRangeArray and DistributedVirtualSwitchVlanRangeArrayOutput values.
// You can construct a concrete instance of `DistributedVirtualSwitchVlanRangeArrayInput` via:
//
// 		 DistributedVirtualSwitchVlanRangeArray{ DistributedVirtualSwitchVlanRangeArgs{...} }
//
type DistributedVirtualSwitchVlanRangeArrayInput interface {
	pulumi.Input

	ToDistributedVirtualSwitchVlanRangeArrayOutput() DistributedVirtualSwitchVlanRangeArrayOutput
	ToDistributedVirtualSwitchVlanRangeArrayOutputWithContext(context.Context) DistributedVirtualSwitchVlanRangeArrayOutput
}

type DistributedVirtualSwitchVlanRangeArray []DistributedVirtualSwitchVlanRangeInput

func (DistributedVirtualSwitchVlanRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributedVirtualSwitchVlanRange)(nil)).Elem()
}

func (i DistributedVirtualSwitchVlanRangeArray) ToDistributedVirtualSwitchVlanRangeArrayOutput() DistributedVirtualSwitchVlanRangeArrayOutput {
	return i.ToDistributedVirtualSwitchVlanRangeArrayOutputWithContext(context.Background())
}

func (i DistributedVirtualSwitchVlanRangeArray) ToDistributedVirtualSwitchVlanRangeArrayOutputWithContext(ctx context.Context) DistributedVirtualSwitchVlanRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributedVirtualSwitchVlanRangeArrayOutput)
}

type DistributedVirtualSwitchVlanRangeOutput struct{ *pulumi.OutputState }

func (DistributedVirtualSwitchVlanRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributedVirtualSwitchVlanRange)(nil)).Elem()
}

func (o DistributedVirtualSwitchVlanRangeOutput) ToDistributedVirtualSwitchVlanRangeOutput() DistributedVirtualSwitchVlanRangeOutput {
	return o
}

func (o DistributedVirtualSwitchVlanRangeOutput) ToDistributedVirtualSwitchVlanRangeOutputWithContext(ctx context.Context) DistributedVirtualSwitchVlanRangeOutput {
	return o
}

func (o DistributedVirtualSwitchVlanRangeOutput) MaxVlan() pulumi.IntOutput {
	return o.ApplyT(func(v DistributedVirtualSwitchVlanRange) int { return v.MaxVlan }).(pulumi.IntOutput)
}

func (o DistributedVirtualSwitchVlanRangeOutput) MinVlan() pulumi.IntOutput {
	return o.ApplyT(func(v DistributedVirtualSwitchVlanRange) int { return v.MinVlan }).(pulumi.IntOutput)
}

type DistributedVirtualSwitchVlanRangeArrayOutput struct{ *pulumi.OutputState }

func (DistributedVirtualSwitchVlanRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributedVirtualSwitchVlanRange)(nil)).Elem()
}

func (o DistributedVirtualSwitchVlanRangeArrayOutput) ToDistributedVirtualSwitchVlanRangeArrayOutput() DistributedVirtualSwitchVlanRangeArrayOutput {
	return o
}

func (o DistributedVirtualSwitchVlanRangeArrayOutput) ToDistributedVirtualSwitchVlanRangeArrayOutputWithContext(ctx context.Context) DistributedVirtualSwitchVlanRangeArrayOutput {
	return o
}

func (o DistributedVirtualSwitchVlanRangeArrayOutput) Index(i pulumi.IntInput) DistributedVirtualSwitchVlanRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DistributedVirtualSwitchVlanRange {
		return vs[0].([]DistributedVirtualSwitchVlanRange)[vs[1].(int)]
	}).(DistributedVirtualSwitchVlanRangeOutput)
}

type HostPortGroupPorts struct {
	// The key for this port group as returned from the vSphere API.
	Key          *string  `pulumi:"key"`
	MacAddresses []string `pulumi:"macAddresses"`
	Type         *string  `pulumi:"type"`
}

// HostPortGroupPortsInput is an input type that accepts HostPortGroupPortsArgs and HostPortGroupPortsOutput values.
// You can construct a concrete instance of `HostPortGroupPortsInput` via:
//
// 		 HostPortGroupPortsArgs{...}
//
type HostPortGroupPortsInput interface {
	pulumi.Input

	ToHostPortGroupPortsOutput() HostPortGroupPortsOutput
	ToHostPortGroupPortsOutputWithContext(context.Context) HostPortGroupPortsOutput
}

type HostPortGroupPortsArgs struct {
	// The key for this port group as returned from the vSphere API.
	Key          pulumi.StringPtrInput   `pulumi:"key"`
	MacAddresses pulumi.StringArrayInput `pulumi:"macAddresses"`
	Type         pulumi.StringPtrInput   `pulumi:"type"`
}

func (HostPortGroupPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostPortGroupPorts)(nil)).Elem()
}

func (i HostPortGroupPortsArgs) ToHostPortGroupPortsOutput() HostPortGroupPortsOutput {
	return i.ToHostPortGroupPortsOutputWithContext(context.Background())
}

func (i HostPortGroupPortsArgs) ToHostPortGroupPortsOutputWithContext(ctx context.Context) HostPortGroupPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPortGroupPortsOutput)
}

func (i HostPortGroupPortsArgs) ToHostPortGroupPortsPtrOutput() HostPortGroupPortsPtrOutput {
	return i.ToHostPortGroupPortsPtrOutputWithContext(context.Background())
}

func (i HostPortGroupPortsArgs) ToHostPortGroupPortsPtrOutputWithContext(ctx context.Context) HostPortGroupPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPortGroupPortsOutput).ToHostPortGroupPortsPtrOutputWithContext(ctx)
}

// HostPortGroupPortsPtrInput is an input type that accepts HostPortGroupPortsArgs, HostPortGroupPortsPtr and HostPortGroupPortsPtrOutput values.
// You can construct a concrete instance of `HostPortGroupPortsPtrInput` via:
//
// 		 HostPortGroupPortsArgs{...}
//
//  or:
//
// 		 nil
//
type HostPortGroupPortsPtrInput interface {
	pulumi.Input

	ToHostPortGroupPortsPtrOutput() HostPortGroupPortsPtrOutput
	ToHostPortGroupPortsPtrOutputWithContext(context.Context) HostPortGroupPortsPtrOutput
}

type hostPortGroupPortsPtrType HostPortGroupPortsArgs

func HostPortGroupPortsPtr(v *HostPortGroupPortsArgs) HostPortGroupPortsPtrInput {
	return (*hostPortGroupPortsPtrType)(v)
}

func (*hostPortGroupPortsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostPortGroupPorts)(nil)).Elem()
}

func (i *hostPortGroupPortsPtrType) ToHostPortGroupPortsPtrOutput() HostPortGroupPortsPtrOutput {
	return i.ToHostPortGroupPortsPtrOutputWithContext(context.Background())
}

func (i *hostPortGroupPortsPtrType) ToHostPortGroupPortsPtrOutputWithContext(ctx context.Context) HostPortGroupPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPortGroupPortsPtrOutput)
}

type HostPortGroupPortsOutput struct{ *pulumi.OutputState }

func (HostPortGroupPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostPortGroupPorts)(nil)).Elem()
}

func (o HostPortGroupPortsOutput) ToHostPortGroupPortsOutput() HostPortGroupPortsOutput {
	return o
}

func (o HostPortGroupPortsOutput) ToHostPortGroupPortsOutputWithContext(ctx context.Context) HostPortGroupPortsOutput {
	return o
}

func (o HostPortGroupPortsOutput) ToHostPortGroupPortsPtrOutput() HostPortGroupPortsPtrOutput {
	return o.ToHostPortGroupPortsPtrOutputWithContext(context.Background())
}

func (o HostPortGroupPortsOutput) ToHostPortGroupPortsPtrOutputWithContext(ctx context.Context) HostPortGroupPortsPtrOutput {
	return o.ApplyT(func(v HostPortGroupPorts) *HostPortGroupPorts {
		return &v
	}).(HostPortGroupPortsPtrOutput)
}

// The key for this port group as returned from the vSphere API.
func (o HostPortGroupPortsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostPortGroupPorts) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o HostPortGroupPortsOutput) MacAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HostPortGroupPorts) []string { return v.MacAddresses }).(pulumi.StringArrayOutput)
}

func (o HostPortGroupPortsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostPortGroupPorts) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HostPortGroupPortsPtrOutput struct{ *pulumi.OutputState }

func (HostPortGroupPortsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostPortGroupPorts)(nil)).Elem()
}

func (o HostPortGroupPortsPtrOutput) ToHostPortGroupPortsPtrOutput() HostPortGroupPortsPtrOutput {
	return o
}

func (o HostPortGroupPortsPtrOutput) ToHostPortGroupPortsPtrOutputWithContext(ctx context.Context) HostPortGroupPortsPtrOutput {
	return o
}

func (o HostPortGroupPortsPtrOutput) Elem() HostPortGroupPortsOutput {
	return o.ApplyT(func(v *HostPortGroupPorts) HostPortGroupPorts { return *v }).(HostPortGroupPortsOutput)
}

// The key for this port group as returned from the vSphere API.
func (o HostPortGroupPortsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostPortGroupPorts) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o HostPortGroupPortsPtrOutput) MacAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HostPortGroupPorts) []string { return v.MacAddresses }).(pulumi.StringArrayOutput)
}

func (o HostPortGroupPortsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostPortGroupPorts) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VirtualMachineCdrom struct {
	// Indicates whether the device should be backed by
	// remote client device. Conflicts with `datastoreId` and `path`.
	ClientDevice *bool `pulumi:"clientDevice"`
	// The datastore ID that the ISO is located in.
	// Requried for using a datastore ISO. Conflicts with `clientDevice`.
	DatastoreId   *string `pulumi:"datastoreId"`
	DeviceAddress *string `pulumi:"deviceAddress"`
	// The ID of the device within the virtual machine.
	Key *int `pulumi:"key"`
	// The path to the ISO file. Required for using a datastore
	// ISO. Conflicts with `clientDevice`.
	Path *string `pulumi:"path"`
}

// VirtualMachineCdromInput is an input type that accepts VirtualMachineCdromArgs and VirtualMachineCdromOutput values.
// You can construct a concrete instance of `VirtualMachineCdromInput` via:
//
// 		 VirtualMachineCdromArgs{...}
//
type VirtualMachineCdromInput interface {
	pulumi.Input

	ToVirtualMachineCdromOutput() VirtualMachineCdromOutput
	ToVirtualMachineCdromOutputWithContext(context.Context) VirtualMachineCdromOutput
}

type VirtualMachineCdromArgs struct {
	// Indicates whether the device should be backed by
	// remote client device. Conflicts with `datastoreId` and `path`.
	ClientDevice pulumi.BoolPtrInput `pulumi:"clientDevice"`
	// The datastore ID that the ISO is located in.
	// Requried for using a datastore ISO. Conflicts with `clientDevice`.
	DatastoreId   pulumi.StringPtrInput `pulumi:"datastoreId"`
	DeviceAddress pulumi.StringPtrInput `pulumi:"deviceAddress"`
	// The ID of the device within the virtual machine.
	Key pulumi.IntPtrInput `pulumi:"key"`
	// The path to the ISO file. Required for using a datastore
	// ISO. Conflicts with `clientDevice`.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (VirtualMachineCdromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCdrom)(nil)).Elem()
}

func (i VirtualMachineCdromArgs) ToVirtualMachineCdromOutput() VirtualMachineCdromOutput {
	return i.ToVirtualMachineCdromOutputWithContext(context.Background())
}

func (i VirtualMachineCdromArgs) ToVirtualMachineCdromOutputWithContext(ctx context.Context) VirtualMachineCdromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCdromOutput)
}

func (i VirtualMachineCdromArgs) ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput {
	return i.ToVirtualMachineCdromPtrOutputWithContext(context.Background())
}

func (i VirtualMachineCdromArgs) ToVirtualMachineCdromPtrOutputWithContext(ctx context.Context) VirtualMachineCdromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCdromOutput).ToVirtualMachineCdromPtrOutputWithContext(ctx)
}

// VirtualMachineCdromPtrInput is an input type that accepts VirtualMachineCdromArgs, VirtualMachineCdromPtr and VirtualMachineCdromPtrOutput values.
// You can construct a concrete instance of `VirtualMachineCdromPtrInput` via:
//
// 		 VirtualMachineCdromArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualMachineCdromPtrInput interface {
	pulumi.Input

	ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput
	ToVirtualMachineCdromPtrOutputWithContext(context.Context) VirtualMachineCdromPtrOutput
}

type virtualMachineCdromPtrType VirtualMachineCdromArgs

func VirtualMachineCdromPtr(v *VirtualMachineCdromArgs) VirtualMachineCdromPtrInput {
	return (*virtualMachineCdromPtrType)(v)
}

func (*virtualMachineCdromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCdrom)(nil)).Elem()
}

func (i *virtualMachineCdromPtrType) ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput {
	return i.ToVirtualMachineCdromPtrOutputWithContext(context.Background())
}

func (i *virtualMachineCdromPtrType) ToVirtualMachineCdromPtrOutputWithContext(ctx context.Context) VirtualMachineCdromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCdromPtrOutput)
}

type VirtualMachineCdromOutput struct{ *pulumi.OutputState }

func (VirtualMachineCdromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCdrom)(nil)).Elem()
}

func (o VirtualMachineCdromOutput) ToVirtualMachineCdromOutput() VirtualMachineCdromOutput {
	return o
}

func (o VirtualMachineCdromOutput) ToVirtualMachineCdromOutputWithContext(ctx context.Context) VirtualMachineCdromOutput {
	return o
}

func (o VirtualMachineCdromOutput) ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput {
	return o.ToVirtualMachineCdromPtrOutputWithContext(context.Background())
}

func (o VirtualMachineCdromOutput) ToVirtualMachineCdromPtrOutputWithContext(ctx context.Context) VirtualMachineCdromPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *VirtualMachineCdrom {
		return &v
	}).(VirtualMachineCdromPtrOutput)
}

// Indicates whether the device should be backed by
// remote client device. Conflicts with `datastoreId` and `path`.
func (o VirtualMachineCdromOutput) ClientDevice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *bool { return v.ClientDevice }).(pulumi.BoolPtrOutput)
}

// The datastore ID that the ISO is located in.
// Requried for using a datastore ISO. Conflicts with `clientDevice`.
func (o VirtualMachineCdromOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCdromOutput) DeviceAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *string { return v.DeviceAddress }).(pulumi.StringPtrOutput)
}

// The ID of the device within the virtual machine.
func (o VirtualMachineCdromOutput) Key() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *int { return v.Key }).(pulumi.IntPtrOutput)
}

// The path to the ISO file. Required for using a datastore
// ISO. Conflicts with `clientDevice`.
func (o VirtualMachineCdromOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type VirtualMachineCdromPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineCdromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCdrom)(nil)).Elem()
}

func (o VirtualMachineCdromPtrOutput) ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput {
	return o
}

func (o VirtualMachineCdromPtrOutput) ToVirtualMachineCdromPtrOutputWithContext(ctx context.Context) VirtualMachineCdromPtrOutput {
	return o
}

func (o VirtualMachineCdromPtrOutput) Elem() VirtualMachineCdromOutput {
	return o.ApplyT(func(v *VirtualMachineCdrom) VirtualMachineCdrom { return *v }).(VirtualMachineCdromOutput)
}

// Indicates whether the device should be backed by
// remote client device. Conflicts with `datastoreId` and `path`.
func (o VirtualMachineCdromPtrOutput) ClientDevice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *bool { return v.ClientDevice }).(pulumi.BoolPtrOutput)
}

// The datastore ID that the ISO is located in.
// Requried for using a datastore ISO. Conflicts with `clientDevice`.
func (o VirtualMachineCdromPtrOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCdromPtrOutput) DeviceAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *string { return v.DeviceAddress }).(pulumi.StringPtrOutput)
}

// The ID of the device within the virtual machine.
func (o VirtualMachineCdromPtrOutput) Key() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *int { return v.Key }).(pulumi.IntPtrOutput)
}

// The path to the ISO file. Required for using a datastore
// ISO. Conflicts with `clientDevice`.
func (o VirtualMachineCdromPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type VirtualMachineClone struct {
	Customize     *VirtualMachineCloneCustomize `pulumi:"customize"`
	LinkedClone   *bool                         `pulumi:"linkedClone"`
	OvfNetworkMap map[string]string             `pulumi:"ovfNetworkMap"`
	OvfStorageMap map[string]string             `pulumi:"ovfStorageMap"`
	TemplateUuid  string                        `pulumi:"templateUuid"`
	Timeout       *int                          `pulumi:"timeout"`
}

// VirtualMachineCloneInput is an input type that accepts VirtualMachineCloneArgs and VirtualMachineCloneOutput values.
// You can construct a concrete instance of `VirtualMachineCloneInput` via:
//
// 		 VirtualMachineCloneArgs{...}
//
type VirtualMachineCloneInput interface {
	pulumi.Input

	ToVirtualMachineCloneOutput() VirtualMachineCloneOutput
	ToVirtualMachineCloneOutputWithContext(context.Context) VirtualMachineCloneOutput
}

type VirtualMachineCloneArgs struct {
	Customize     VirtualMachineCloneCustomizePtrInput `pulumi:"customize"`
	LinkedClone   pulumi.BoolPtrInput                  `pulumi:"linkedClone"`
	OvfNetworkMap pulumi.StringMapInput                `pulumi:"ovfNetworkMap"`
	OvfStorageMap pulumi.StringMapInput                `pulumi:"ovfStorageMap"`
	TemplateUuid  pulumi.StringInput                   `pulumi:"templateUuid"`
	Timeout       pulumi.IntPtrInput                   `pulumi:"timeout"`
}

func (VirtualMachineCloneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineClone)(nil)).Elem()
}

func (i VirtualMachineCloneArgs) ToVirtualMachineCloneOutput() VirtualMachineCloneOutput {
	return i.ToVirtualMachineCloneOutputWithContext(context.Background())
}

func (i VirtualMachineCloneArgs) ToVirtualMachineCloneOutputWithContext(ctx context.Context) VirtualMachineCloneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneOutput)
}

func (i VirtualMachineCloneArgs) ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput {
	return i.ToVirtualMachineClonePtrOutputWithContext(context.Background())
}

func (i VirtualMachineCloneArgs) ToVirtualMachineClonePtrOutputWithContext(ctx context.Context) VirtualMachineClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneOutput).ToVirtualMachineClonePtrOutputWithContext(ctx)
}

// VirtualMachineClonePtrInput is an input type that accepts VirtualMachineCloneArgs, VirtualMachineClonePtr and VirtualMachineClonePtrOutput values.
// You can construct a concrete instance of `VirtualMachineClonePtrInput` via:
//
// 		 VirtualMachineCloneArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualMachineClonePtrInput interface {
	pulumi.Input

	ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput
	ToVirtualMachineClonePtrOutputWithContext(context.Context) VirtualMachineClonePtrOutput
}

type virtualMachineClonePtrType VirtualMachineCloneArgs

func VirtualMachineClonePtr(v *VirtualMachineCloneArgs) VirtualMachineClonePtrInput {
	return (*virtualMachineClonePtrType)(v)
}

func (*virtualMachineClonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineClone)(nil)).Elem()
}

func (i *virtualMachineClonePtrType) ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput {
	return i.ToVirtualMachineClonePtrOutputWithContext(context.Background())
}

func (i *virtualMachineClonePtrType) ToVirtualMachineClonePtrOutputWithContext(ctx context.Context) VirtualMachineClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineClonePtrOutput)
}

type VirtualMachineCloneOutput struct{ *pulumi.OutputState }

func (VirtualMachineCloneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineClone)(nil)).Elem()
}

func (o VirtualMachineCloneOutput) ToVirtualMachineCloneOutput() VirtualMachineCloneOutput {
	return o
}

func (o VirtualMachineCloneOutput) ToVirtualMachineCloneOutputWithContext(ctx context.Context) VirtualMachineCloneOutput {
	return o
}

func (o VirtualMachineCloneOutput) ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput {
	return o.ToVirtualMachineClonePtrOutputWithContext(context.Background())
}

func (o VirtualMachineCloneOutput) ToVirtualMachineClonePtrOutputWithContext(ctx context.Context) VirtualMachineClonePtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *VirtualMachineClone {
		return &v
	}).(VirtualMachineClonePtrOutput)
}
func (o VirtualMachineCloneOutput) Customize() VirtualMachineCloneCustomizePtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *VirtualMachineCloneCustomize { return v.Customize }).(VirtualMachineCloneCustomizePtrOutput)
}

func (o VirtualMachineCloneOutput) LinkedClone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *bool { return v.LinkedClone }).(pulumi.BoolPtrOutput)
}

func (o VirtualMachineCloneOutput) OvfNetworkMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualMachineClone) map[string]string { return v.OvfNetworkMap }).(pulumi.StringMapOutput)
}

func (o VirtualMachineCloneOutput) OvfStorageMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualMachineClone) map[string]string { return v.OvfStorageMap }).(pulumi.StringMapOutput)
}

func (o VirtualMachineCloneOutput) TemplateUuid() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineClone) string { return v.TemplateUuid }).(pulumi.StringOutput)
}

func (o VirtualMachineCloneOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type VirtualMachineClonePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineClonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineClone)(nil)).Elem()
}

func (o VirtualMachineClonePtrOutput) ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput {
	return o
}

func (o VirtualMachineClonePtrOutput) ToVirtualMachineClonePtrOutputWithContext(ctx context.Context) VirtualMachineClonePtrOutput {
	return o
}

func (o VirtualMachineClonePtrOutput) Elem() VirtualMachineCloneOutput {
	return o.ApplyT(func(v *VirtualMachineClone) VirtualMachineClone { return *v }).(VirtualMachineCloneOutput)
}

func (o VirtualMachineClonePtrOutput) Customize() VirtualMachineCloneCustomizePtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *VirtualMachineCloneCustomize { return v.Customize }).(VirtualMachineCloneCustomizePtrOutput)
}

func (o VirtualMachineClonePtrOutput) LinkedClone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *bool { return v.LinkedClone }).(pulumi.BoolPtrOutput)
}

func (o VirtualMachineClonePtrOutput) OvfNetworkMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualMachineClone) map[string]string { return v.OvfNetworkMap }).(pulumi.StringMapOutput)
}

func (o VirtualMachineClonePtrOutput) OvfStorageMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualMachineClone) map[string]string { return v.OvfStorageMap }).(pulumi.StringMapOutput)
}

func (o VirtualMachineClonePtrOutput) TemplateUuid() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineClone) string { return v.TemplateUuid }).(pulumi.StringOutput)
}

func (o VirtualMachineClonePtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type VirtualMachineCloneCustomize struct {
	DnsServerLists []string                                  `pulumi:"dnsServerLists"`
	DnsSuffixLists []string                                  `pulumi:"dnsSuffixLists"`
	Ipv4Gateway    *string                                   `pulumi:"ipv4Gateway"`
	Ipv6Gateway    *string                                   `pulumi:"ipv6Gateway"`
	LinuxOptions   *VirtualMachineCloneCustomizeLinuxOptions `pulumi:"linuxOptions"`
	// A specification for a virtual NIC on this
	// virtual machine. See network interface options
	// below.
	NetworkInterfaces  []VirtualMachineCloneCustomizeNetworkInterface `pulumi:"networkInterfaces"`
	Timeout            *int                                           `pulumi:"timeout"`
	WindowsOptions     *VirtualMachineCloneCustomizeWindowsOptions    `pulumi:"windowsOptions"`
	WindowsSysprepText *string                                        `pulumi:"windowsSysprepText"`
}

// VirtualMachineCloneCustomizeInput is an input type that accepts VirtualMachineCloneCustomizeArgs and VirtualMachineCloneCustomizeOutput values.
// You can construct a concrete instance of `VirtualMachineCloneCustomizeInput` via:
//
// 		 VirtualMachineCloneCustomizeArgs{...}
//
type VirtualMachineCloneCustomizeInput interface {
	pulumi.Input

	ToVirtualMachineCloneCustomizeOutput() VirtualMachineCloneCustomizeOutput
	ToVirtualMachineCloneCustomizeOutputWithContext(context.Context) VirtualMachineCloneCustomizeOutput
}

type VirtualMachineCloneCustomizeArgs struct {
	DnsServerLists pulumi.StringArrayInput                          `pulumi:"dnsServerLists"`
	DnsSuffixLists pulumi.StringArrayInput                          `pulumi:"dnsSuffixLists"`
	Ipv4Gateway    pulumi.StringPtrInput                            `pulumi:"ipv4Gateway"`
	Ipv6Gateway    pulumi.StringPtrInput                            `pulumi:"ipv6Gateway"`
	LinuxOptions   VirtualMachineCloneCustomizeLinuxOptionsPtrInput `pulumi:"linuxOptions"`
	// A specification for a virtual NIC on this
	// virtual machine. See network interface options
	// below.
	NetworkInterfaces  VirtualMachineCloneCustomizeNetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	Timeout            pulumi.IntPtrInput                                     `pulumi:"timeout"`
	WindowsOptions     VirtualMachineCloneCustomizeWindowsOptionsPtrInput     `pulumi:"windowsOptions"`
	WindowsSysprepText pulumi.StringPtrInput                                  `pulumi:"windowsSysprepText"`
}

func (VirtualMachineCloneCustomizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCloneCustomize)(nil)).Elem()
}

func (i VirtualMachineCloneCustomizeArgs) ToVirtualMachineCloneCustomizeOutput() VirtualMachineCloneCustomizeOutput {
	return i.ToVirtualMachineCloneCustomizeOutputWithContext(context.Background())
}

func (i VirtualMachineCloneCustomizeArgs) ToVirtualMachineCloneCustomizeOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneCustomizeOutput)
}

func (i VirtualMachineCloneCustomizeArgs) ToVirtualMachineCloneCustomizePtrOutput() VirtualMachineCloneCustomizePtrOutput {
	return i.ToVirtualMachineCloneCustomizePtrOutputWithContext(context.Background())
}

func (i VirtualMachineCloneCustomizeArgs) ToVirtualMachineCloneCustomizePtrOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneCustomizeOutput).ToVirtualMachineCloneCustomizePtrOutputWithContext(ctx)
}

// VirtualMachineCloneCustomizePtrInput is an input type that accepts VirtualMachineCloneCustomizeArgs, VirtualMachineCloneCustomizePtr and VirtualMachineCloneCustomizePtrOutput values.
// You can construct a concrete instance of `VirtualMachineCloneCustomizePtrInput` via:
//
// 		 VirtualMachineCloneCustomizeArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualMachineCloneCustomizePtrInput interface {
	pulumi.Input

	ToVirtualMachineCloneCustomizePtrOutput() VirtualMachineCloneCustomizePtrOutput
	ToVirtualMachineCloneCustomizePtrOutputWithContext(context.Context) VirtualMachineCloneCustomizePtrOutput
}

type virtualMachineCloneCustomizePtrType VirtualMachineCloneCustomizeArgs

func VirtualMachineCloneCustomizePtr(v *VirtualMachineCloneCustomizeArgs) VirtualMachineCloneCustomizePtrInput {
	return (*virtualMachineCloneCustomizePtrType)(v)
}

func (*virtualMachineCloneCustomizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCloneCustomize)(nil)).Elem()
}

func (i *virtualMachineCloneCustomizePtrType) ToVirtualMachineCloneCustomizePtrOutput() VirtualMachineCloneCustomizePtrOutput {
	return i.ToVirtualMachineCloneCustomizePtrOutputWithContext(context.Background())
}

func (i *virtualMachineCloneCustomizePtrType) ToVirtualMachineCloneCustomizePtrOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneCustomizePtrOutput)
}

type VirtualMachineCloneCustomizeOutput struct{ *pulumi.OutputState }

func (VirtualMachineCloneCustomizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCloneCustomize)(nil)).Elem()
}

func (o VirtualMachineCloneCustomizeOutput) ToVirtualMachineCloneCustomizeOutput() VirtualMachineCloneCustomizeOutput {
	return o
}

func (o VirtualMachineCloneCustomizeOutput) ToVirtualMachineCloneCustomizeOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeOutput {
	return o
}

func (o VirtualMachineCloneCustomizeOutput) ToVirtualMachineCloneCustomizePtrOutput() VirtualMachineCloneCustomizePtrOutput {
	return o.ToVirtualMachineCloneCustomizePtrOutputWithContext(context.Background())
}

func (o VirtualMachineCloneCustomizeOutput) ToVirtualMachineCloneCustomizePtrOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizePtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) *VirtualMachineCloneCustomize {
		return &v
	}).(VirtualMachineCloneCustomizePtrOutput)
}
func (o VirtualMachineCloneCustomizeOutput) DnsServerLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) []string { return v.DnsServerLists }).(pulumi.StringArrayOutput)
}

func (o VirtualMachineCloneCustomizeOutput) DnsSuffixLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) []string { return v.DnsSuffixLists }).(pulumi.StringArrayOutput)
}

func (o VirtualMachineCloneCustomizeOutput) Ipv4Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) *string { return v.Ipv4Gateway }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeOutput) Ipv6Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) *string { return v.Ipv6Gateway }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeOutput) LinuxOptions() VirtualMachineCloneCustomizeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) *VirtualMachineCloneCustomizeLinuxOptions { return v.LinuxOptions }).(VirtualMachineCloneCustomizeLinuxOptionsPtrOutput)
}

// A specification for a virtual NIC on this
// virtual machine. See network interface options
// below.
func (o VirtualMachineCloneCustomizeOutput) NetworkInterfaces() VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) []VirtualMachineCloneCustomizeNetworkInterface {
		return v.NetworkInterfaces
	}).(VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput)
}

func (o VirtualMachineCloneCustomizeOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

func (o VirtualMachineCloneCustomizeOutput) WindowsOptions() VirtualMachineCloneCustomizeWindowsOptionsPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) *VirtualMachineCloneCustomizeWindowsOptions {
		return v.WindowsOptions
	}).(VirtualMachineCloneCustomizeWindowsOptionsPtrOutput)
}

func (o VirtualMachineCloneCustomizeOutput) WindowsSysprepText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) *string { return v.WindowsSysprepText }).(pulumi.StringPtrOutput)
}

type VirtualMachineCloneCustomizePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineCloneCustomizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCloneCustomize)(nil)).Elem()
}

func (o VirtualMachineCloneCustomizePtrOutput) ToVirtualMachineCloneCustomizePtrOutput() VirtualMachineCloneCustomizePtrOutput {
	return o
}

func (o VirtualMachineCloneCustomizePtrOutput) ToVirtualMachineCloneCustomizePtrOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizePtrOutput {
	return o
}

func (o VirtualMachineCloneCustomizePtrOutput) Elem() VirtualMachineCloneCustomizeOutput {
	return o.ApplyT(func(v *VirtualMachineCloneCustomize) VirtualMachineCloneCustomize { return *v }).(VirtualMachineCloneCustomizeOutput)
}

func (o VirtualMachineCloneCustomizePtrOutput) DnsServerLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) []string { return v.DnsServerLists }).(pulumi.StringArrayOutput)
}

func (o VirtualMachineCloneCustomizePtrOutput) DnsSuffixLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) []string { return v.DnsSuffixLists }).(pulumi.StringArrayOutput)
}

func (o VirtualMachineCloneCustomizePtrOutput) Ipv4Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) *string { return v.Ipv4Gateway }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizePtrOutput) Ipv6Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) *string { return v.Ipv6Gateway }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizePtrOutput) LinuxOptions() VirtualMachineCloneCustomizeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) *VirtualMachineCloneCustomizeLinuxOptions { return v.LinuxOptions }).(VirtualMachineCloneCustomizeLinuxOptionsPtrOutput)
}

// A specification for a virtual NIC on this
// virtual machine. See network interface options
// below.
func (o VirtualMachineCloneCustomizePtrOutput) NetworkInterfaces() VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) []VirtualMachineCloneCustomizeNetworkInterface {
		return v.NetworkInterfaces
	}).(VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput)
}

func (o VirtualMachineCloneCustomizePtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

func (o VirtualMachineCloneCustomizePtrOutput) WindowsOptions() VirtualMachineCloneCustomizeWindowsOptionsPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) *VirtualMachineCloneCustomizeWindowsOptions {
		return v.WindowsOptions
	}).(VirtualMachineCloneCustomizeWindowsOptionsPtrOutput)
}

func (o VirtualMachineCloneCustomizePtrOutput) WindowsSysprepText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomize) *string { return v.WindowsSysprepText }).(pulumi.StringPtrOutput)
}

type VirtualMachineCloneCustomizeLinuxOptions struct {
	Domain     string  `pulumi:"domain"`
	HostName   string  `pulumi:"hostName"`
	HwClockUtc *bool   `pulumi:"hwClockUtc"`
	TimeZone   *string `pulumi:"timeZone"`
}

// VirtualMachineCloneCustomizeLinuxOptionsInput is an input type that accepts VirtualMachineCloneCustomizeLinuxOptionsArgs and VirtualMachineCloneCustomizeLinuxOptionsOutput values.
// You can construct a concrete instance of `VirtualMachineCloneCustomizeLinuxOptionsInput` via:
//
// 		 VirtualMachineCloneCustomizeLinuxOptionsArgs{...}
//
type VirtualMachineCloneCustomizeLinuxOptionsInput interface {
	pulumi.Input

	ToVirtualMachineCloneCustomizeLinuxOptionsOutput() VirtualMachineCloneCustomizeLinuxOptionsOutput
	ToVirtualMachineCloneCustomizeLinuxOptionsOutputWithContext(context.Context) VirtualMachineCloneCustomizeLinuxOptionsOutput
}

type VirtualMachineCloneCustomizeLinuxOptionsArgs struct {
	Domain     pulumi.StringInput    `pulumi:"domain"`
	HostName   pulumi.StringInput    `pulumi:"hostName"`
	HwClockUtc pulumi.BoolPtrInput   `pulumi:"hwClockUtc"`
	TimeZone   pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (VirtualMachineCloneCustomizeLinuxOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCloneCustomizeLinuxOptions)(nil)).Elem()
}

func (i VirtualMachineCloneCustomizeLinuxOptionsArgs) ToVirtualMachineCloneCustomizeLinuxOptionsOutput() VirtualMachineCloneCustomizeLinuxOptionsOutput {
	return i.ToVirtualMachineCloneCustomizeLinuxOptionsOutputWithContext(context.Background())
}

func (i VirtualMachineCloneCustomizeLinuxOptionsArgs) ToVirtualMachineCloneCustomizeLinuxOptionsOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeLinuxOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneCustomizeLinuxOptionsOutput)
}

func (i VirtualMachineCloneCustomizeLinuxOptionsArgs) ToVirtualMachineCloneCustomizeLinuxOptionsPtrOutput() VirtualMachineCloneCustomizeLinuxOptionsPtrOutput {
	return i.ToVirtualMachineCloneCustomizeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i VirtualMachineCloneCustomizeLinuxOptionsArgs) ToVirtualMachineCloneCustomizeLinuxOptionsPtrOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneCustomizeLinuxOptionsOutput).ToVirtualMachineCloneCustomizeLinuxOptionsPtrOutputWithContext(ctx)
}

// VirtualMachineCloneCustomizeLinuxOptionsPtrInput is an input type that accepts VirtualMachineCloneCustomizeLinuxOptionsArgs, VirtualMachineCloneCustomizeLinuxOptionsPtr and VirtualMachineCloneCustomizeLinuxOptionsPtrOutput values.
// You can construct a concrete instance of `VirtualMachineCloneCustomizeLinuxOptionsPtrInput` via:
//
// 		 VirtualMachineCloneCustomizeLinuxOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualMachineCloneCustomizeLinuxOptionsPtrInput interface {
	pulumi.Input

	ToVirtualMachineCloneCustomizeLinuxOptionsPtrOutput() VirtualMachineCloneCustomizeLinuxOptionsPtrOutput
	ToVirtualMachineCloneCustomizeLinuxOptionsPtrOutputWithContext(context.Context) VirtualMachineCloneCustomizeLinuxOptionsPtrOutput
}

type virtualMachineCloneCustomizeLinuxOptionsPtrType VirtualMachineCloneCustomizeLinuxOptionsArgs

func VirtualMachineCloneCustomizeLinuxOptionsPtr(v *VirtualMachineCloneCustomizeLinuxOptionsArgs) VirtualMachineCloneCustomizeLinuxOptionsPtrInput {
	return (*virtualMachineCloneCustomizeLinuxOptionsPtrType)(v)
}

func (*virtualMachineCloneCustomizeLinuxOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCloneCustomizeLinuxOptions)(nil)).Elem()
}

func (i *virtualMachineCloneCustomizeLinuxOptionsPtrType) ToVirtualMachineCloneCustomizeLinuxOptionsPtrOutput() VirtualMachineCloneCustomizeLinuxOptionsPtrOutput {
	return i.ToVirtualMachineCloneCustomizeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i *virtualMachineCloneCustomizeLinuxOptionsPtrType) ToVirtualMachineCloneCustomizeLinuxOptionsPtrOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneCustomizeLinuxOptionsPtrOutput)
}

type VirtualMachineCloneCustomizeLinuxOptionsOutput struct{ *pulumi.OutputState }

func (VirtualMachineCloneCustomizeLinuxOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCloneCustomizeLinuxOptions)(nil)).Elem()
}

func (o VirtualMachineCloneCustomizeLinuxOptionsOutput) ToVirtualMachineCloneCustomizeLinuxOptionsOutput() VirtualMachineCloneCustomizeLinuxOptionsOutput {
	return o
}

func (o VirtualMachineCloneCustomizeLinuxOptionsOutput) ToVirtualMachineCloneCustomizeLinuxOptionsOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeLinuxOptionsOutput {
	return o
}

func (o VirtualMachineCloneCustomizeLinuxOptionsOutput) ToVirtualMachineCloneCustomizeLinuxOptionsPtrOutput() VirtualMachineCloneCustomizeLinuxOptionsPtrOutput {
	return o.ToVirtualMachineCloneCustomizeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (o VirtualMachineCloneCustomizeLinuxOptionsOutput) ToVirtualMachineCloneCustomizeLinuxOptionsPtrOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeLinuxOptions) *VirtualMachineCloneCustomizeLinuxOptions {
		return &v
	}).(VirtualMachineCloneCustomizeLinuxOptionsPtrOutput)
}
func (o VirtualMachineCloneCustomizeLinuxOptionsOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeLinuxOptions) string { return v.Domain }).(pulumi.StringOutput)
}

func (o VirtualMachineCloneCustomizeLinuxOptionsOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeLinuxOptions) string { return v.HostName }).(pulumi.StringOutput)
}

func (o VirtualMachineCloneCustomizeLinuxOptionsOutput) HwClockUtc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeLinuxOptions) *bool { return v.HwClockUtc }).(pulumi.BoolPtrOutput)
}

func (o VirtualMachineCloneCustomizeLinuxOptionsOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeLinuxOptions) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type VirtualMachineCloneCustomizeLinuxOptionsPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineCloneCustomizeLinuxOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCloneCustomizeLinuxOptions)(nil)).Elem()
}

func (o VirtualMachineCloneCustomizeLinuxOptionsPtrOutput) ToVirtualMachineCloneCustomizeLinuxOptionsPtrOutput() VirtualMachineCloneCustomizeLinuxOptionsPtrOutput {
	return o
}

func (o VirtualMachineCloneCustomizeLinuxOptionsPtrOutput) ToVirtualMachineCloneCustomizeLinuxOptionsPtrOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeLinuxOptionsPtrOutput {
	return o
}

func (o VirtualMachineCloneCustomizeLinuxOptionsPtrOutput) Elem() VirtualMachineCloneCustomizeLinuxOptionsOutput {
	return o.ApplyT(func(v *VirtualMachineCloneCustomizeLinuxOptions) VirtualMachineCloneCustomizeLinuxOptions { return *v }).(VirtualMachineCloneCustomizeLinuxOptionsOutput)
}

func (o VirtualMachineCloneCustomizeLinuxOptionsPtrOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeLinuxOptions) string { return v.Domain }).(pulumi.StringOutput)
}

func (o VirtualMachineCloneCustomizeLinuxOptionsPtrOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeLinuxOptions) string { return v.HostName }).(pulumi.StringOutput)
}

func (o VirtualMachineCloneCustomizeLinuxOptionsPtrOutput) HwClockUtc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeLinuxOptions) *bool { return v.HwClockUtc }).(pulumi.BoolPtrOutput)
}

func (o VirtualMachineCloneCustomizeLinuxOptionsPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeLinuxOptions) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type VirtualMachineCloneCustomizeNetworkInterface struct {
	DnsDomain      *string  `pulumi:"dnsDomain"`
	DnsServerLists []string `pulumi:"dnsServerLists"`
	Ipv4Address    *string  `pulumi:"ipv4Address"`
	Ipv4Netmask    *int     `pulumi:"ipv4Netmask"`
	Ipv6Address    *string  `pulumi:"ipv6Address"`
	Ipv6Netmask    *int     `pulumi:"ipv6Netmask"`
}

// VirtualMachineCloneCustomizeNetworkInterfaceInput is an input type that accepts VirtualMachineCloneCustomizeNetworkInterfaceArgs and VirtualMachineCloneCustomizeNetworkInterfaceOutput values.
// You can construct a concrete instance of `VirtualMachineCloneCustomizeNetworkInterfaceInput` via:
//
// 		 VirtualMachineCloneCustomizeNetworkInterfaceArgs{...}
//
type VirtualMachineCloneCustomizeNetworkInterfaceInput interface {
	pulumi.Input

	ToVirtualMachineCloneCustomizeNetworkInterfaceOutput() VirtualMachineCloneCustomizeNetworkInterfaceOutput
	ToVirtualMachineCloneCustomizeNetworkInterfaceOutputWithContext(context.Context) VirtualMachineCloneCustomizeNetworkInterfaceOutput
}

type VirtualMachineCloneCustomizeNetworkInterfaceArgs struct {
	DnsDomain      pulumi.StringPtrInput   `pulumi:"dnsDomain"`
	DnsServerLists pulumi.StringArrayInput `pulumi:"dnsServerLists"`
	Ipv4Address    pulumi.StringPtrInput   `pulumi:"ipv4Address"`
	Ipv4Netmask    pulumi.IntPtrInput      `pulumi:"ipv4Netmask"`
	Ipv6Address    pulumi.StringPtrInput   `pulumi:"ipv6Address"`
	Ipv6Netmask    pulumi.IntPtrInput      `pulumi:"ipv6Netmask"`
}

func (VirtualMachineCloneCustomizeNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCloneCustomizeNetworkInterface)(nil)).Elem()
}

func (i VirtualMachineCloneCustomizeNetworkInterfaceArgs) ToVirtualMachineCloneCustomizeNetworkInterfaceOutput() VirtualMachineCloneCustomizeNetworkInterfaceOutput {
	return i.ToVirtualMachineCloneCustomizeNetworkInterfaceOutputWithContext(context.Background())
}

func (i VirtualMachineCloneCustomizeNetworkInterfaceArgs) ToVirtualMachineCloneCustomizeNetworkInterfaceOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneCustomizeNetworkInterfaceOutput)
}

// VirtualMachineCloneCustomizeNetworkInterfaceArrayInput is an input type that accepts VirtualMachineCloneCustomizeNetworkInterfaceArray and VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `VirtualMachineCloneCustomizeNetworkInterfaceArrayInput` via:
//
// 		 VirtualMachineCloneCustomizeNetworkInterfaceArray{ VirtualMachineCloneCustomizeNetworkInterfaceArgs{...} }
//
type VirtualMachineCloneCustomizeNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToVirtualMachineCloneCustomizeNetworkInterfaceArrayOutput() VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput
	ToVirtualMachineCloneCustomizeNetworkInterfaceArrayOutputWithContext(context.Context) VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput
}

type VirtualMachineCloneCustomizeNetworkInterfaceArray []VirtualMachineCloneCustomizeNetworkInterfaceInput

func (VirtualMachineCloneCustomizeNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineCloneCustomizeNetworkInterface)(nil)).Elem()
}

func (i VirtualMachineCloneCustomizeNetworkInterfaceArray) ToVirtualMachineCloneCustomizeNetworkInterfaceArrayOutput() VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput {
	return i.ToVirtualMachineCloneCustomizeNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i VirtualMachineCloneCustomizeNetworkInterfaceArray) ToVirtualMachineCloneCustomizeNetworkInterfaceArrayOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput)
}

type VirtualMachineCloneCustomizeNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (VirtualMachineCloneCustomizeNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCloneCustomizeNetworkInterface)(nil)).Elem()
}

func (o VirtualMachineCloneCustomizeNetworkInterfaceOutput) ToVirtualMachineCloneCustomizeNetworkInterfaceOutput() VirtualMachineCloneCustomizeNetworkInterfaceOutput {
	return o
}

func (o VirtualMachineCloneCustomizeNetworkInterfaceOutput) ToVirtualMachineCloneCustomizeNetworkInterfaceOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeNetworkInterfaceOutput {
	return o
}

func (o VirtualMachineCloneCustomizeNetworkInterfaceOutput) DnsDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeNetworkInterface) *string { return v.DnsDomain }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeNetworkInterfaceOutput) DnsServerLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeNetworkInterface) []string { return v.DnsServerLists }).(pulumi.StringArrayOutput)
}

func (o VirtualMachineCloneCustomizeNetworkInterfaceOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeNetworkInterface) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeNetworkInterfaceOutput) Ipv4Netmask() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeNetworkInterface) *int { return v.Ipv4Netmask }).(pulumi.IntPtrOutput)
}

func (o VirtualMachineCloneCustomizeNetworkInterfaceOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeNetworkInterface) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeNetworkInterfaceOutput) Ipv6Netmask() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeNetworkInterface) *int { return v.Ipv6Netmask }).(pulumi.IntPtrOutput)
}

type VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineCloneCustomizeNetworkInterface)(nil)).Elem()
}

func (o VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput) ToVirtualMachineCloneCustomizeNetworkInterfaceArrayOutput() VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput {
	return o
}

func (o VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput) ToVirtualMachineCloneCustomizeNetworkInterfaceArrayOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput {
	return o
}

func (o VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) VirtualMachineCloneCustomizeNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineCloneCustomizeNetworkInterface {
		return vs[0].([]VirtualMachineCloneCustomizeNetworkInterface)[vs[1].(int)]
	}).(VirtualMachineCloneCustomizeNetworkInterfaceOutput)
}

type VirtualMachineCloneCustomizeWindowsOptions struct {
	AdminPassword       *string  `pulumi:"adminPassword"`
	AutoLogon           *bool    `pulumi:"autoLogon"`
	AutoLogonCount      *int     `pulumi:"autoLogonCount"`
	ComputerName        string   `pulumi:"computerName"`
	DomainAdminPassword *string  `pulumi:"domainAdminPassword"`
	DomainAdminUser     *string  `pulumi:"domainAdminUser"`
	FullName            *string  `pulumi:"fullName"`
	JoinDomain          *string  `pulumi:"joinDomain"`
	OrganizationName    *string  `pulumi:"organizationName"`
	ProductKey          *string  `pulumi:"productKey"`
	RunOnceCommandLists []string `pulumi:"runOnceCommandLists"`
	TimeZone            *int     `pulumi:"timeZone"`
	Workgroup           *string  `pulumi:"workgroup"`
}

// VirtualMachineCloneCustomizeWindowsOptionsInput is an input type that accepts VirtualMachineCloneCustomizeWindowsOptionsArgs and VirtualMachineCloneCustomizeWindowsOptionsOutput values.
// You can construct a concrete instance of `VirtualMachineCloneCustomizeWindowsOptionsInput` via:
//
// 		 VirtualMachineCloneCustomizeWindowsOptionsArgs{...}
//
type VirtualMachineCloneCustomizeWindowsOptionsInput interface {
	pulumi.Input

	ToVirtualMachineCloneCustomizeWindowsOptionsOutput() VirtualMachineCloneCustomizeWindowsOptionsOutput
	ToVirtualMachineCloneCustomizeWindowsOptionsOutputWithContext(context.Context) VirtualMachineCloneCustomizeWindowsOptionsOutput
}

type VirtualMachineCloneCustomizeWindowsOptionsArgs struct {
	AdminPassword       pulumi.StringPtrInput   `pulumi:"adminPassword"`
	AutoLogon           pulumi.BoolPtrInput     `pulumi:"autoLogon"`
	AutoLogonCount      pulumi.IntPtrInput      `pulumi:"autoLogonCount"`
	ComputerName        pulumi.StringInput      `pulumi:"computerName"`
	DomainAdminPassword pulumi.StringPtrInput   `pulumi:"domainAdminPassword"`
	DomainAdminUser     pulumi.StringPtrInput   `pulumi:"domainAdminUser"`
	FullName            pulumi.StringPtrInput   `pulumi:"fullName"`
	JoinDomain          pulumi.StringPtrInput   `pulumi:"joinDomain"`
	OrganizationName    pulumi.StringPtrInput   `pulumi:"organizationName"`
	ProductKey          pulumi.StringPtrInput   `pulumi:"productKey"`
	RunOnceCommandLists pulumi.StringArrayInput `pulumi:"runOnceCommandLists"`
	TimeZone            pulumi.IntPtrInput      `pulumi:"timeZone"`
	Workgroup           pulumi.StringPtrInput   `pulumi:"workgroup"`
}

func (VirtualMachineCloneCustomizeWindowsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCloneCustomizeWindowsOptions)(nil)).Elem()
}

func (i VirtualMachineCloneCustomizeWindowsOptionsArgs) ToVirtualMachineCloneCustomizeWindowsOptionsOutput() VirtualMachineCloneCustomizeWindowsOptionsOutput {
	return i.ToVirtualMachineCloneCustomizeWindowsOptionsOutputWithContext(context.Background())
}

func (i VirtualMachineCloneCustomizeWindowsOptionsArgs) ToVirtualMachineCloneCustomizeWindowsOptionsOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeWindowsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneCustomizeWindowsOptionsOutput)
}

func (i VirtualMachineCloneCustomizeWindowsOptionsArgs) ToVirtualMachineCloneCustomizeWindowsOptionsPtrOutput() VirtualMachineCloneCustomizeWindowsOptionsPtrOutput {
	return i.ToVirtualMachineCloneCustomizeWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i VirtualMachineCloneCustomizeWindowsOptionsArgs) ToVirtualMachineCloneCustomizeWindowsOptionsPtrOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneCustomizeWindowsOptionsOutput).ToVirtualMachineCloneCustomizeWindowsOptionsPtrOutputWithContext(ctx)
}

// VirtualMachineCloneCustomizeWindowsOptionsPtrInput is an input type that accepts VirtualMachineCloneCustomizeWindowsOptionsArgs, VirtualMachineCloneCustomizeWindowsOptionsPtr and VirtualMachineCloneCustomizeWindowsOptionsPtrOutput values.
// You can construct a concrete instance of `VirtualMachineCloneCustomizeWindowsOptionsPtrInput` via:
//
// 		 VirtualMachineCloneCustomizeWindowsOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualMachineCloneCustomizeWindowsOptionsPtrInput interface {
	pulumi.Input

	ToVirtualMachineCloneCustomizeWindowsOptionsPtrOutput() VirtualMachineCloneCustomizeWindowsOptionsPtrOutput
	ToVirtualMachineCloneCustomizeWindowsOptionsPtrOutputWithContext(context.Context) VirtualMachineCloneCustomizeWindowsOptionsPtrOutput
}

type virtualMachineCloneCustomizeWindowsOptionsPtrType VirtualMachineCloneCustomizeWindowsOptionsArgs

func VirtualMachineCloneCustomizeWindowsOptionsPtr(v *VirtualMachineCloneCustomizeWindowsOptionsArgs) VirtualMachineCloneCustomizeWindowsOptionsPtrInput {
	return (*virtualMachineCloneCustomizeWindowsOptionsPtrType)(v)
}

func (*virtualMachineCloneCustomizeWindowsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCloneCustomizeWindowsOptions)(nil)).Elem()
}

func (i *virtualMachineCloneCustomizeWindowsOptionsPtrType) ToVirtualMachineCloneCustomizeWindowsOptionsPtrOutput() VirtualMachineCloneCustomizeWindowsOptionsPtrOutput {
	return i.ToVirtualMachineCloneCustomizeWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i *virtualMachineCloneCustomizeWindowsOptionsPtrType) ToVirtualMachineCloneCustomizeWindowsOptionsPtrOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneCustomizeWindowsOptionsPtrOutput)
}

type VirtualMachineCloneCustomizeWindowsOptionsOutput struct{ *pulumi.OutputState }

func (VirtualMachineCloneCustomizeWindowsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCloneCustomizeWindowsOptions)(nil)).Elem()
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) ToVirtualMachineCloneCustomizeWindowsOptionsOutput() VirtualMachineCloneCustomizeWindowsOptionsOutput {
	return o
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) ToVirtualMachineCloneCustomizeWindowsOptionsOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeWindowsOptionsOutput {
	return o
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) ToVirtualMachineCloneCustomizeWindowsOptionsPtrOutput() VirtualMachineCloneCustomizeWindowsOptionsPtrOutput {
	return o.ToVirtualMachineCloneCustomizeWindowsOptionsPtrOutputWithContext(context.Background())
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) ToVirtualMachineCloneCustomizeWindowsOptionsPtrOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeWindowsOptionsPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *VirtualMachineCloneCustomizeWindowsOptions {
		return &v
	}).(VirtualMachineCloneCustomizeWindowsOptionsPtrOutput)
}
func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) AutoLogon() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *bool { return v.AutoLogon }).(pulumi.BoolPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) AutoLogonCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *int { return v.AutoLogonCount }).(pulumi.IntPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) ComputerName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) string { return v.ComputerName }).(pulumi.StringOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) DomainAdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.DomainAdminPassword }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) DomainAdminUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.DomainAdminUser }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) FullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.FullName }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) JoinDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.JoinDomain }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) OrganizationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.OrganizationName }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) ProductKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.ProductKey }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) RunOnceCommandLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) []string { return v.RunOnceCommandLists }).(pulumi.StringArrayOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) TimeZone() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *int { return v.TimeZone }).(pulumi.IntPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsOutput) Workgroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.Workgroup }).(pulumi.StringPtrOutput)
}

type VirtualMachineCloneCustomizeWindowsOptionsPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCloneCustomizeWindowsOptions)(nil)).Elem()
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) ToVirtualMachineCloneCustomizeWindowsOptionsPtrOutput() VirtualMachineCloneCustomizeWindowsOptionsPtrOutput {
	return o
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) ToVirtualMachineCloneCustomizeWindowsOptionsPtrOutputWithContext(ctx context.Context) VirtualMachineCloneCustomizeWindowsOptionsPtrOutput {
	return o
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) Elem() VirtualMachineCloneCustomizeWindowsOptionsOutput {
	return o.ApplyT(func(v *VirtualMachineCloneCustomizeWindowsOptions) VirtualMachineCloneCustomizeWindowsOptions {
		return *v
	}).(VirtualMachineCloneCustomizeWindowsOptionsOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) AutoLogon() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *bool { return v.AutoLogon }).(pulumi.BoolPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) AutoLogonCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *int { return v.AutoLogonCount }).(pulumi.IntPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) ComputerName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) string { return v.ComputerName }).(pulumi.StringOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) DomainAdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.DomainAdminPassword }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) DomainAdminUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.DomainAdminUser }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) FullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.FullName }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) JoinDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.JoinDomain }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) OrganizationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.OrganizationName }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) ProductKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.ProductKey }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) RunOnceCommandLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) []string { return v.RunOnceCommandLists }).(pulumi.StringArrayOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) TimeZone() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *int { return v.TimeZone }).(pulumi.IntPtrOutput)
}

func (o VirtualMachineCloneCustomizeWindowsOptionsPtrOutput) Workgroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCloneCustomizeWindowsOptions) *string { return v.Workgroup }).(pulumi.StringPtrOutput)
}

type VirtualMachineDisk struct {
	// Attach an external disk instead of creating a new one.
	// Implies and conflicts with `keepOnRemove`. If set, you cannot set `size`,
	// `eagerlyScrub`, or `thinProvisioned`. Must set `path` if used.
	Attach *bool `pulumi:"attach"`
	// The datastore ID that the ISO is located in.
	// Requried for using a datastore ISO. Conflicts with `clientDevice`.
	DatastoreId   *string `pulumi:"datastoreId"`
	DeviceAddress *string `pulumi:"deviceAddress"`
	// The mode of this this virtual disk for purposes of
	// writes and snapshotting. Can be one of `append`, `independentNonpersistent`,
	// `independentPersistent`, `nonpersistent`, `persistent`, or `undoable`.
	// Default: `persistent`. For an explanation of options, click
	// [here][vmware-docs-disk-mode].
	DiskMode *string `pulumi:"diskMode"`
	// The sharing mode of this virtual disk. Can be one
	// of `sharingMultiWriter` or `sharingNone`. Default: `sharingNone`.
	DiskSharing *string `pulumi:"diskSharing"`
	// If set to `true`, the disk space is zeroed out
	// on VM creation. This will delay the creation of the disk or virtual machine.
	// Cannot be set to `true` when `thinProvisioned` is `true`.  See the section
	// on picking a disk type.  Default: `false`.
	EagerlyScrub *bool `pulumi:"eagerlyScrub"`
	// The upper limit of IOPS that this disk can use. The
	// default is no limit.
	IoLimit *int `pulumi:"ioLimit"`
	// The I/O reservation (guarantee) that this disk
	// has, in IOPS.  The default is no reservation.
	IoReservation *int `pulumi:"ioReservation"`
	// The share count for this disk when the share
	// level is `custom`.
	IoShareCount *int `pulumi:"ioShareCount"`
	// The share allocation level for this disk. Can
	// be one of `low`, `normal`, `high`, or `custom`. Default: `normal`.
	IoShareLevel *string `pulumi:"ioShareLevel"`
	// Keep this disk when removing the device or
	// destroying the virtual machine. Default: `false`.
	KeepOnRemove *bool `pulumi:"keepOnRemove"`
	// The ID of the device within the virtual machine.
	Key *int `pulumi:"key"`
	// A label for the disk. Forces a new disk if changed.
	Label *string `pulumi:"label"`
	// An alias for both `label` and `path`, the latter when
	// using `attach`. Required if not using `label`.
	Name *string `pulumi:"name"`
	// The path to the ISO file. Required for using a datastore
	// ISO. Conflicts with `clientDevice`.
	Path *string `pulumi:"path"`
	// The size of the disk, in GB.
	Size *int `pulumi:"size"`
	// The UUID of the storage policy to assign to this disk.
	StoragePolicyId *string `pulumi:"storagePolicyId"`
	// If `true`, this disk is thin provisioned,
	// with space for the file being allocated on an as-needed basis. Cannot be set
	// to `true` when `eagerlyScrub` is `true`. See the section on picking a disk
	// type. Default: `true`.
	ThinProvisioned *bool `pulumi:"thinProvisioned"`
	// The disk number on the SCSI bus. The maximum value
	// for this setting is the value of
	// `scsiControllerCount` times 15, minus 1 (so `14`,
	// `29`, `44`, and `59`, for 1-4 controllers respectively). The default is `0`,
	// for which one disk must be set to. Duplicate unit numbers are not allowed.
	UnitNumber *int `pulumi:"unitNumber"`
	// The UUID of the virtual disk's VMDK file. This is used to track the
	// virtual disk on the virtual machine.
	Uuid *string `pulumi:"uuid"`
	// If `true`, writes for this disk are sent
	// directly to the filesystem immediately instead of being buffered. Default:
	// `false`.
	WriteThrough *bool `pulumi:"writeThrough"`
}

// VirtualMachineDiskInput is an input type that accepts VirtualMachineDiskArgs and VirtualMachineDiskOutput values.
// You can construct a concrete instance of `VirtualMachineDiskInput` via:
//
// 		 VirtualMachineDiskArgs{...}
//
type VirtualMachineDiskInput interface {
	pulumi.Input

	ToVirtualMachineDiskOutput() VirtualMachineDiskOutput
	ToVirtualMachineDiskOutputWithContext(context.Context) VirtualMachineDiskOutput
}

type VirtualMachineDiskArgs struct {
	// Attach an external disk instead of creating a new one.
	// Implies and conflicts with `keepOnRemove`. If set, you cannot set `size`,
	// `eagerlyScrub`, or `thinProvisioned`. Must set `path` if used.
	Attach pulumi.BoolPtrInput `pulumi:"attach"`
	// The datastore ID that the ISO is located in.
	// Requried for using a datastore ISO. Conflicts with `clientDevice`.
	DatastoreId   pulumi.StringPtrInput `pulumi:"datastoreId"`
	DeviceAddress pulumi.StringPtrInput `pulumi:"deviceAddress"`
	// The mode of this this virtual disk for purposes of
	// writes and snapshotting. Can be one of `append`, `independentNonpersistent`,
	// `independentPersistent`, `nonpersistent`, `persistent`, or `undoable`.
	// Default: `persistent`. For an explanation of options, click
	// [here][vmware-docs-disk-mode].
	DiskMode pulumi.StringPtrInput `pulumi:"diskMode"`
	// The sharing mode of this virtual disk. Can be one
	// of `sharingMultiWriter` or `sharingNone`. Default: `sharingNone`.
	DiskSharing pulumi.StringPtrInput `pulumi:"diskSharing"`
	// If set to `true`, the disk space is zeroed out
	// on VM creation. This will delay the creation of the disk or virtual machine.
	// Cannot be set to `true` when `thinProvisioned` is `true`.  See the section
	// on picking a disk type.  Default: `false`.
	EagerlyScrub pulumi.BoolPtrInput `pulumi:"eagerlyScrub"`
	// The upper limit of IOPS that this disk can use. The
	// default is no limit.
	IoLimit pulumi.IntPtrInput `pulumi:"ioLimit"`
	// The I/O reservation (guarantee) that this disk
	// has, in IOPS.  The default is no reservation.
	IoReservation pulumi.IntPtrInput `pulumi:"ioReservation"`
	// The share count for this disk when the share
	// level is `custom`.
	IoShareCount pulumi.IntPtrInput `pulumi:"ioShareCount"`
	// The share allocation level for this disk. Can
	// be one of `low`, `normal`, `high`, or `custom`. Default: `normal`.
	IoShareLevel pulumi.StringPtrInput `pulumi:"ioShareLevel"`
	// Keep this disk when removing the device or
	// destroying the virtual machine. Default: `false`.
	KeepOnRemove pulumi.BoolPtrInput `pulumi:"keepOnRemove"`
	// The ID of the device within the virtual machine.
	Key pulumi.IntPtrInput `pulumi:"key"`
	// A label for the disk. Forces a new disk if changed.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// An alias for both `label` and `path`, the latter when
	// using `attach`. Required if not using `label`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The path to the ISO file. Required for using a datastore
	// ISO. Conflicts with `clientDevice`.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The size of the disk, in GB.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// The UUID of the storage policy to assign to this disk.
	StoragePolicyId pulumi.StringPtrInput `pulumi:"storagePolicyId"`
	// If `true`, this disk is thin provisioned,
	// with space for the file being allocated on an as-needed basis. Cannot be set
	// to `true` when `eagerlyScrub` is `true`. See the section on picking a disk
	// type. Default: `true`.
	ThinProvisioned pulumi.BoolPtrInput `pulumi:"thinProvisioned"`
	// The disk number on the SCSI bus. The maximum value
	// for this setting is the value of
	// `scsiControllerCount` times 15, minus 1 (so `14`,
	// `29`, `44`, and `59`, for 1-4 controllers respectively). The default is `0`,
	// for which one disk must be set to. Duplicate unit numbers are not allowed.
	UnitNumber pulumi.IntPtrInput `pulumi:"unitNumber"`
	// The UUID of the virtual disk's VMDK file. This is used to track the
	// virtual disk on the virtual machine.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// If `true`, writes for this disk are sent
	// directly to the filesystem immediately instead of being buffered. Default:
	// `false`.
	WriteThrough pulumi.BoolPtrInput `pulumi:"writeThrough"`
}

func (VirtualMachineDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineDisk)(nil)).Elem()
}

func (i VirtualMachineDiskArgs) ToVirtualMachineDiskOutput() VirtualMachineDiskOutput {
	return i.ToVirtualMachineDiskOutputWithContext(context.Background())
}

func (i VirtualMachineDiskArgs) ToVirtualMachineDiskOutputWithContext(ctx context.Context) VirtualMachineDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineDiskOutput)
}

// VirtualMachineDiskArrayInput is an input type that accepts VirtualMachineDiskArray and VirtualMachineDiskArrayOutput values.
// You can construct a concrete instance of `VirtualMachineDiskArrayInput` via:
//
// 		 VirtualMachineDiskArray{ VirtualMachineDiskArgs{...} }
//
type VirtualMachineDiskArrayInput interface {
	pulumi.Input

	ToVirtualMachineDiskArrayOutput() VirtualMachineDiskArrayOutput
	ToVirtualMachineDiskArrayOutputWithContext(context.Context) VirtualMachineDiskArrayOutput
}

type VirtualMachineDiskArray []VirtualMachineDiskInput

func (VirtualMachineDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineDisk)(nil)).Elem()
}

func (i VirtualMachineDiskArray) ToVirtualMachineDiskArrayOutput() VirtualMachineDiskArrayOutput {
	return i.ToVirtualMachineDiskArrayOutputWithContext(context.Background())
}

func (i VirtualMachineDiskArray) ToVirtualMachineDiskArrayOutputWithContext(ctx context.Context) VirtualMachineDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineDiskArrayOutput)
}

type VirtualMachineDiskOutput struct{ *pulumi.OutputState }

func (VirtualMachineDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineDisk)(nil)).Elem()
}

func (o VirtualMachineDiskOutput) ToVirtualMachineDiskOutput() VirtualMachineDiskOutput {
	return o
}

func (o VirtualMachineDiskOutput) ToVirtualMachineDiskOutputWithContext(ctx context.Context) VirtualMachineDiskOutput {
	return o
}

// Attach an external disk instead of creating a new one.
// Implies and conflicts with `keepOnRemove`. If set, you cannot set `size`,
// `eagerlyScrub`, or `thinProvisioned`. Must set `path` if used.
func (o VirtualMachineDiskOutput) Attach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *bool { return v.Attach }).(pulumi.BoolPtrOutput)
}

// The datastore ID that the ISO is located in.
// Requried for using a datastore ISO. Conflicts with `clientDevice`.
func (o VirtualMachineDiskOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineDiskOutput) DeviceAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.DeviceAddress }).(pulumi.StringPtrOutput)
}

// The mode of this this virtual disk for purposes of
// writes and snapshotting. Can be one of `append`, `independentNonpersistent`,
// `independentPersistent`, `nonpersistent`, `persistent`, or `undoable`.
// Default: `persistent`. For an explanation of options, click
// [here][vmware-docs-disk-mode].
func (o VirtualMachineDiskOutput) DiskMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.DiskMode }).(pulumi.StringPtrOutput)
}

// The sharing mode of this virtual disk. Can be one
// of `sharingMultiWriter` or `sharingNone`. Default: `sharingNone`.
func (o VirtualMachineDiskOutput) DiskSharing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.DiskSharing }).(pulumi.StringPtrOutput)
}

// If set to `true`, the disk space is zeroed out
// on VM creation. This will delay the creation of the disk or virtual machine.
// Cannot be set to `true` when `thinProvisioned` is `true`.  See the section
// on picking a disk type.  Default: `false`.
func (o VirtualMachineDiskOutput) EagerlyScrub() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *bool { return v.EagerlyScrub }).(pulumi.BoolPtrOutput)
}

// The upper limit of IOPS that this disk can use. The
// default is no limit.
func (o VirtualMachineDiskOutput) IoLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *int { return v.IoLimit }).(pulumi.IntPtrOutput)
}

// The I/O reservation (guarantee) that this disk
// has, in IOPS.  The default is no reservation.
func (o VirtualMachineDiskOutput) IoReservation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *int { return v.IoReservation }).(pulumi.IntPtrOutput)
}

// The share count for this disk when the share
// level is `custom`.
func (o VirtualMachineDiskOutput) IoShareCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *int { return v.IoShareCount }).(pulumi.IntPtrOutput)
}

// The share allocation level for this disk. Can
// be one of `low`, `normal`, `high`, or `custom`. Default: `normal`.
func (o VirtualMachineDiskOutput) IoShareLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.IoShareLevel }).(pulumi.StringPtrOutput)
}

// Keep this disk when removing the device or
// destroying the virtual machine. Default: `false`.
func (o VirtualMachineDiskOutput) KeepOnRemove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *bool { return v.KeepOnRemove }).(pulumi.BoolPtrOutput)
}

// The ID of the device within the virtual machine.
func (o VirtualMachineDiskOutput) Key() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *int { return v.Key }).(pulumi.IntPtrOutput)
}

// A label for the disk. Forces a new disk if changed.
func (o VirtualMachineDiskOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// An alias for both `label` and `path`, the latter when
// using `attach`. Required if not using `label`.
func (o VirtualMachineDiskOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The path to the ISO file. Required for using a datastore
// ISO. Conflicts with `clientDevice`.
func (o VirtualMachineDiskOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The size of the disk, in GB.
func (o VirtualMachineDiskOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// The UUID of the storage policy to assign to this disk.
func (o VirtualMachineDiskOutput) StoragePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.StoragePolicyId }).(pulumi.StringPtrOutput)
}

// If `true`, this disk is thin provisioned,
// with space for the file being allocated on an as-needed basis. Cannot be set
// to `true` when `eagerlyScrub` is `true`. See the section on picking a disk
// type. Default: `true`.
func (o VirtualMachineDiskOutput) ThinProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *bool { return v.ThinProvisioned }).(pulumi.BoolPtrOutput)
}

// The disk number on the SCSI bus. The maximum value
// for this setting is the value of
// `scsiControllerCount` times 15, minus 1 (so `14`,
// `29`, `44`, and `59`, for 1-4 controllers respectively). The default is `0`,
// for which one disk must be set to. Duplicate unit numbers are not allowed.
func (o VirtualMachineDiskOutput) UnitNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *int { return v.UnitNumber }).(pulumi.IntPtrOutput)
}

// The UUID of the virtual disk's VMDK file. This is used to track the
// virtual disk on the virtual machine.
func (o VirtualMachineDiskOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// If `true`, writes for this disk are sent
// directly to the filesystem immediately instead of being buffered. Default:
// `false`.
func (o VirtualMachineDiskOutput) WriteThrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *bool { return v.WriteThrough }).(pulumi.BoolPtrOutput)
}

type VirtualMachineDiskArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineDisk)(nil)).Elem()
}

func (o VirtualMachineDiskArrayOutput) ToVirtualMachineDiskArrayOutput() VirtualMachineDiskArrayOutput {
	return o
}

func (o VirtualMachineDiskArrayOutput) ToVirtualMachineDiskArrayOutputWithContext(ctx context.Context) VirtualMachineDiskArrayOutput {
	return o
}

func (o VirtualMachineDiskArrayOutput) Index(i pulumi.IntInput) VirtualMachineDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineDisk {
		return vs[0].([]VirtualMachineDisk)[vs[1].(int)]
	}).(VirtualMachineDiskOutput)
}

type VirtualMachineNetworkInterface struct {
	// The network interface type. Can be one of
	// `e1000`, `e1000e`, or `vmxnet3`. Default: `vmxnet3`.
	AdapterType *string `pulumi:"adapterType"`
	// The upper bandwidth limit of this network
	// interface, in Mbits/sec. The default is no limit.
	BandwidthLimit *int `pulumi:"bandwidthLimit"`
	// The bandwidth reservation of this
	// network interface, in Mbits/sec. The default is no reservation.
	BandwidthReservation *int `pulumi:"bandwidthReservation"`
	// The share count for this network
	// interface when the share level is `custom`.
	BandwidthShareCount *int `pulumi:"bandwidthShareCount"`
	// The bandwidth share allocation level for
	// this interface. Can be one of `low`, `normal`, `high`, or `custom`. Default:
	// `normal`.
	BandwidthShareLevel *string `pulumi:"bandwidthShareLevel"`
	DeviceAddress       *string `pulumi:"deviceAddress"`
	// The ID of the device within the virtual machine.
	Key *int `pulumi:"key"`
	// The MAC address of this network interface. Can
	// only be manually set if `useStaticMac` is true, otherwise this is a
	// computed value that gives the current MAC address of this interface.
	MacAddress *string `pulumi:"macAddress"`
	// The [managed object reference
	// ID][docs-about-morefs] of the network to connect this interface to.
	NetworkId string `pulumi:"networkId"`
	// Specifies which OVF NIC the `networkInterface`
	// should be associated with. Only applies at creation and only when deploying
	// from an OVF source.
	OvfMapping *string `pulumi:"ovfMapping"`
	// If true, the `macAddress` field is treated as
	// a static MAC address and set accordingly. Setting this to `true` requires
	// `macAddress` to be set. Default: `false`.
	UseStaticMac *bool `pulumi:"useStaticMac"`
}

// VirtualMachineNetworkInterfaceInput is an input type that accepts VirtualMachineNetworkInterfaceArgs and VirtualMachineNetworkInterfaceOutput values.
// You can construct a concrete instance of `VirtualMachineNetworkInterfaceInput` via:
//
// 		 VirtualMachineNetworkInterfaceArgs{...}
//
type VirtualMachineNetworkInterfaceInput interface {
	pulumi.Input

	ToVirtualMachineNetworkInterfaceOutput() VirtualMachineNetworkInterfaceOutput
	ToVirtualMachineNetworkInterfaceOutputWithContext(context.Context) VirtualMachineNetworkInterfaceOutput
}

type VirtualMachineNetworkInterfaceArgs struct {
	// The network interface type. Can be one of
	// `e1000`, `e1000e`, or `vmxnet3`. Default: `vmxnet3`.
	AdapterType pulumi.StringPtrInput `pulumi:"adapterType"`
	// The upper bandwidth limit of this network
	// interface, in Mbits/sec. The default is no limit.
	BandwidthLimit pulumi.IntPtrInput `pulumi:"bandwidthLimit"`
	// The bandwidth reservation of this
	// network interface, in Mbits/sec. The default is no reservation.
	BandwidthReservation pulumi.IntPtrInput `pulumi:"bandwidthReservation"`
	// The share count for this network
	// interface when the share level is `custom`.
	BandwidthShareCount pulumi.IntPtrInput `pulumi:"bandwidthShareCount"`
	// The bandwidth share allocation level for
	// this interface. Can be one of `low`, `normal`, `high`, or `custom`. Default:
	// `normal`.
	BandwidthShareLevel pulumi.StringPtrInput `pulumi:"bandwidthShareLevel"`
	DeviceAddress       pulumi.StringPtrInput `pulumi:"deviceAddress"`
	// The ID of the device within the virtual machine.
	Key pulumi.IntPtrInput `pulumi:"key"`
	// The MAC address of this network interface. Can
	// only be manually set if `useStaticMac` is true, otherwise this is a
	// computed value that gives the current MAC address of this interface.
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// The [managed object reference
	// ID][docs-about-morefs] of the network to connect this interface to.
	NetworkId pulumi.StringInput `pulumi:"networkId"`
	// Specifies which OVF NIC the `networkInterface`
	// should be associated with. Only applies at creation and only when deploying
	// from an OVF source.
	OvfMapping pulumi.StringPtrInput `pulumi:"ovfMapping"`
	// If true, the `macAddress` field is treated as
	// a static MAC address and set accordingly. Setting this to `true` requires
	// `macAddress` to be set. Default: `false`.
	UseStaticMac pulumi.BoolPtrInput `pulumi:"useStaticMac"`
}

func (VirtualMachineNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkInterface)(nil)).Elem()
}

func (i VirtualMachineNetworkInterfaceArgs) ToVirtualMachineNetworkInterfaceOutput() VirtualMachineNetworkInterfaceOutput {
	return i.ToVirtualMachineNetworkInterfaceOutputWithContext(context.Background())
}

func (i VirtualMachineNetworkInterfaceArgs) ToVirtualMachineNetworkInterfaceOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNetworkInterfaceOutput)
}

// VirtualMachineNetworkInterfaceArrayInput is an input type that accepts VirtualMachineNetworkInterfaceArray and VirtualMachineNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `VirtualMachineNetworkInterfaceArrayInput` via:
//
// 		 VirtualMachineNetworkInterfaceArray{ VirtualMachineNetworkInterfaceArgs{...} }
//
type VirtualMachineNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToVirtualMachineNetworkInterfaceArrayOutput() VirtualMachineNetworkInterfaceArrayOutput
	ToVirtualMachineNetworkInterfaceArrayOutputWithContext(context.Context) VirtualMachineNetworkInterfaceArrayOutput
}

type VirtualMachineNetworkInterfaceArray []VirtualMachineNetworkInterfaceInput

func (VirtualMachineNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineNetworkInterface)(nil)).Elem()
}

func (i VirtualMachineNetworkInterfaceArray) ToVirtualMachineNetworkInterfaceArrayOutput() VirtualMachineNetworkInterfaceArrayOutput {
	return i.ToVirtualMachineNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i VirtualMachineNetworkInterfaceArray) ToVirtualMachineNetworkInterfaceArrayOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNetworkInterfaceArrayOutput)
}

type VirtualMachineNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkInterface)(nil)).Elem()
}

func (o VirtualMachineNetworkInterfaceOutput) ToVirtualMachineNetworkInterfaceOutput() VirtualMachineNetworkInterfaceOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceOutput) ToVirtualMachineNetworkInterfaceOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceOutput {
	return o
}

// The network interface type. Can be one of
// `e1000`, `e1000e`, or `vmxnet3`. Default: `vmxnet3`.
func (o VirtualMachineNetworkInterfaceOutput) AdapterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterface) *string { return v.AdapterType }).(pulumi.StringPtrOutput)
}

// The upper bandwidth limit of this network
// interface, in Mbits/sec. The default is no limit.
func (o VirtualMachineNetworkInterfaceOutput) BandwidthLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterface) *int { return v.BandwidthLimit }).(pulumi.IntPtrOutput)
}

// The bandwidth reservation of this
// network interface, in Mbits/sec. The default is no reservation.
func (o VirtualMachineNetworkInterfaceOutput) BandwidthReservation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterface) *int { return v.BandwidthReservation }).(pulumi.IntPtrOutput)
}

// The share count for this network
// interface when the share level is `custom`.
func (o VirtualMachineNetworkInterfaceOutput) BandwidthShareCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterface) *int { return v.BandwidthShareCount }).(pulumi.IntPtrOutput)
}

// The bandwidth share allocation level for
// this interface. Can be one of `low`, `normal`, `high`, or `custom`. Default:
// `normal`.
func (o VirtualMachineNetworkInterfaceOutput) BandwidthShareLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterface) *string { return v.BandwidthShareLevel }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineNetworkInterfaceOutput) DeviceAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterface) *string { return v.DeviceAddress }).(pulumi.StringPtrOutput)
}

// The ID of the device within the virtual machine.
func (o VirtualMachineNetworkInterfaceOutput) Key() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterface) *int { return v.Key }).(pulumi.IntPtrOutput)
}

// The MAC address of this network interface. Can
// only be manually set if `useStaticMac` is true, otherwise this is a
// computed value that gives the current MAC address of this interface.
func (o VirtualMachineNetworkInterfaceOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterface) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

// The [managed object reference
// ID][docs-about-morefs] of the network to connect this interface to.
func (o VirtualMachineNetworkInterfaceOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterface) string { return v.NetworkId }).(pulumi.StringOutput)
}

// Specifies which OVF NIC the `networkInterface`
// should be associated with. Only applies at creation and only when deploying
// from an OVF source.
func (o VirtualMachineNetworkInterfaceOutput) OvfMapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterface) *string { return v.OvfMapping }).(pulumi.StringPtrOutput)
}

// If true, the `macAddress` field is treated as
// a static MAC address and set accordingly. Setting this to `true` requires
// `macAddress` to be set. Default: `false`.
func (o VirtualMachineNetworkInterfaceOutput) UseStaticMac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterface) *bool { return v.UseStaticMac }).(pulumi.BoolPtrOutput)
}

type VirtualMachineNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineNetworkInterface)(nil)).Elem()
}

func (o VirtualMachineNetworkInterfaceArrayOutput) ToVirtualMachineNetworkInterfaceArrayOutput() VirtualMachineNetworkInterfaceArrayOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceArrayOutput) ToVirtualMachineNetworkInterfaceArrayOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceArrayOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) VirtualMachineNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineNetworkInterface {
		return vs[0].([]VirtualMachineNetworkInterface)[vs[1].(int)]
	}).(VirtualMachineNetworkInterfaceOutput)
}

type VirtualMachineVapp struct {
	Properties map[string]string `pulumi:"properties"`
}

// VirtualMachineVappInput is an input type that accepts VirtualMachineVappArgs and VirtualMachineVappOutput values.
// You can construct a concrete instance of `VirtualMachineVappInput` via:
//
// 		 VirtualMachineVappArgs{...}
//
type VirtualMachineVappInput interface {
	pulumi.Input

	ToVirtualMachineVappOutput() VirtualMachineVappOutput
	ToVirtualMachineVappOutputWithContext(context.Context) VirtualMachineVappOutput
}

type VirtualMachineVappArgs struct {
	Properties pulumi.StringMapInput `pulumi:"properties"`
}

func (VirtualMachineVappArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineVapp)(nil)).Elem()
}

func (i VirtualMachineVappArgs) ToVirtualMachineVappOutput() VirtualMachineVappOutput {
	return i.ToVirtualMachineVappOutputWithContext(context.Background())
}

func (i VirtualMachineVappArgs) ToVirtualMachineVappOutputWithContext(ctx context.Context) VirtualMachineVappOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineVappOutput)
}

func (i VirtualMachineVappArgs) ToVirtualMachineVappPtrOutput() VirtualMachineVappPtrOutput {
	return i.ToVirtualMachineVappPtrOutputWithContext(context.Background())
}

func (i VirtualMachineVappArgs) ToVirtualMachineVappPtrOutputWithContext(ctx context.Context) VirtualMachineVappPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineVappOutput).ToVirtualMachineVappPtrOutputWithContext(ctx)
}

// VirtualMachineVappPtrInput is an input type that accepts VirtualMachineVappArgs, VirtualMachineVappPtr and VirtualMachineVappPtrOutput values.
// You can construct a concrete instance of `VirtualMachineVappPtrInput` via:
//
// 		 VirtualMachineVappArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualMachineVappPtrInput interface {
	pulumi.Input

	ToVirtualMachineVappPtrOutput() VirtualMachineVappPtrOutput
	ToVirtualMachineVappPtrOutputWithContext(context.Context) VirtualMachineVappPtrOutput
}

type virtualMachineVappPtrType VirtualMachineVappArgs

func VirtualMachineVappPtr(v *VirtualMachineVappArgs) VirtualMachineVappPtrInput {
	return (*virtualMachineVappPtrType)(v)
}

func (*virtualMachineVappPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineVapp)(nil)).Elem()
}

func (i *virtualMachineVappPtrType) ToVirtualMachineVappPtrOutput() VirtualMachineVappPtrOutput {
	return i.ToVirtualMachineVappPtrOutputWithContext(context.Background())
}

func (i *virtualMachineVappPtrType) ToVirtualMachineVappPtrOutputWithContext(ctx context.Context) VirtualMachineVappPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineVappPtrOutput)
}

type VirtualMachineVappOutput struct{ *pulumi.OutputState }

func (VirtualMachineVappOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineVapp)(nil)).Elem()
}

func (o VirtualMachineVappOutput) ToVirtualMachineVappOutput() VirtualMachineVappOutput {
	return o
}

func (o VirtualMachineVappOutput) ToVirtualMachineVappOutputWithContext(ctx context.Context) VirtualMachineVappOutput {
	return o
}

func (o VirtualMachineVappOutput) ToVirtualMachineVappPtrOutput() VirtualMachineVappPtrOutput {
	return o.ToVirtualMachineVappPtrOutputWithContext(context.Background())
}

func (o VirtualMachineVappOutput) ToVirtualMachineVappPtrOutputWithContext(ctx context.Context) VirtualMachineVappPtrOutput {
	return o.ApplyT(func(v VirtualMachineVapp) *VirtualMachineVapp {
		return &v
	}).(VirtualMachineVappPtrOutput)
}
func (o VirtualMachineVappOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualMachineVapp) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

type VirtualMachineVappPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineVappPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineVapp)(nil)).Elem()
}

func (o VirtualMachineVappPtrOutput) ToVirtualMachineVappPtrOutput() VirtualMachineVappPtrOutput {
	return o
}

func (o VirtualMachineVappPtrOutput) ToVirtualMachineVappPtrOutputWithContext(ctx context.Context) VirtualMachineVappPtrOutput {
	return o
}

func (o VirtualMachineVappPtrOutput) Elem() VirtualMachineVappOutput {
	return o.ApplyT(func(v *VirtualMachineVapp) VirtualMachineVapp { return *v }).(VirtualMachineVappOutput)
}

func (o VirtualMachineVappPtrOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualMachineVapp) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

type VnicIpv4 struct {
	// Use DHCP to configure the interface's IPv4 stack.
	Dhcp *bool `pulumi:"dhcp"`
	// IP address of the default gateway, if DHCP or autoconfig is not set.
	Gw *string `pulumi:"gw"`
	// Address of the interface, if DHCP is not set.
	Ip *string `pulumi:"ip"`
	// Netmask of the interface, if DHCP is not set.
	Netmask *string `pulumi:"netmask"`
}

// VnicIpv4Input is an input type that accepts VnicIpv4Args and VnicIpv4Output values.
// You can construct a concrete instance of `VnicIpv4Input` via:
//
// 		 VnicIpv4Args{...}
//
type VnicIpv4Input interface {
	pulumi.Input

	ToVnicIpv4Output() VnicIpv4Output
	ToVnicIpv4OutputWithContext(context.Context) VnicIpv4Output
}

type VnicIpv4Args struct {
	// Use DHCP to configure the interface's IPv4 stack.
	Dhcp pulumi.BoolPtrInput `pulumi:"dhcp"`
	// IP address of the default gateway, if DHCP or autoconfig is not set.
	Gw pulumi.StringPtrInput `pulumi:"gw"`
	// Address of the interface, if DHCP is not set.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Netmask of the interface, if DHCP is not set.
	Netmask pulumi.StringPtrInput `pulumi:"netmask"`
}

func (VnicIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*VnicIpv4)(nil)).Elem()
}

func (i VnicIpv4Args) ToVnicIpv4Output() VnicIpv4Output {
	return i.ToVnicIpv4OutputWithContext(context.Background())
}

func (i VnicIpv4Args) ToVnicIpv4OutputWithContext(ctx context.Context) VnicIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(VnicIpv4Output)
}

func (i VnicIpv4Args) ToVnicIpv4PtrOutput() VnicIpv4PtrOutput {
	return i.ToVnicIpv4PtrOutputWithContext(context.Background())
}

func (i VnicIpv4Args) ToVnicIpv4PtrOutputWithContext(ctx context.Context) VnicIpv4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnicIpv4Output).ToVnicIpv4PtrOutputWithContext(ctx)
}

// VnicIpv4PtrInput is an input type that accepts VnicIpv4Args, VnicIpv4Ptr and VnicIpv4PtrOutput values.
// You can construct a concrete instance of `VnicIpv4PtrInput` via:
//
// 		 VnicIpv4Args{...}
//
//  or:
//
// 		 nil
//
type VnicIpv4PtrInput interface {
	pulumi.Input

	ToVnicIpv4PtrOutput() VnicIpv4PtrOutput
	ToVnicIpv4PtrOutputWithContext(context.Context) VnicIpv4PtrOutput
}

type vnicIpv4PtrType VnicIpv4Args

func VnicIpv4Ptr(v *VnicIpv4Args) VnicIpv4PtrInput {
	return (*vnicIpv4PtrType)(v)
}

func (*vnicIpv4PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VnicIpv4)(nil)).Elem()
}

func (i *vnicIpv4PtrType) ToVnicIpv4PtrOutput() VnicIpv4PtrOutput {
	return i.ToVnicIpv4PtrOutputWithContext(context.Background())
}

func (i *vnicIpv4PtrType) ToVnicIpv4PtrOutputWithContext(ctx context.Context) VnicIpv4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnicIpv4PtrOutput)
}

type VnicIpv4Output struct{ *pulumi.OutputState }

func (VnicIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*VnicIpv4)(nil)).Elem()
}

func (o VnicIpv4Output) ToVnicIpv4Output() VnicIpv4Output {
	return o
}

func (o VnicIpv4Output) ToVnicIpv4OutputWithContext(ctx context.Context) VnicIpv4Output {
	return o
}

func (o VnicIpv4Output) ToVnicIpv4PtrOutput() VnicIpv4PtrOutput {
	return o.ToVnicIpv4PtrOutputWithContext(context.Background())
}

func (o VnicIpv4Output) ToVnicIpv4PtrOutputWithContext(ctx context.Context) VnicIpv4PtrOutput {
	return o.ApplyT(func(v VnicIpv4) *VnicIpv4 {
		return &v
	}).(VnicIpv4PtrOutput)
}

// Use DHCP to configure the interface's IPv4 stack.
func (o VnicIpv4Output) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VnicIpv4) *bool { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

// IP address of the default gateway, if DHCP or autoconfig is not set.
func (o VnicIpv4Output) Gw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnicIpv4) *string { return v.Gw }).(pulumi.StringPtrOutput)
}

// Address of the interface, if DHCP is not set.
func (o VnicIpv4Output) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnicIpv4) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Netmask of the interface, if DHCP is not set.
func (o VnicIpv4Output) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnicIpv4) *string { return v.Netmask }).(pulumi.StringPtrOutput)
}

type VnicIpv4PtrOutput struct{ *pulumi.OutputState }

func (VnicIpv4PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VnicIpv4)(nil)).Elem()
}

func (o VnicIpv4PtrOutput) ToVnicIpv4PtrOutput() VnicIpv4PtrOutput {
	return o
}

func (o VnicIpv4PtrOutput) ToVnicIpv4PtrOutputWithContext(ctx context.Context) VnicIpv4PtrOutput {
	return o
}

func (o VnicIpv4PtrOutput) Elem() VnicIpv4Output {
	return o.ApplyT(func(v *VnicIpv4) VnicIpv4 { return *v }).(VnicIpv4Output)
}

// Use DHCP to configure the interface's IPv4 stack.
func (o VnicIpv4PtrOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VnicIpv4) *bool { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

// IP address of the default gateway, if DHCP or autoconfig is not set.
func (o VnicIpv4PtrOutput) Gw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnicIpv4) *string { return v.Gw }).(pulumi.StringPtrOutput)
}

// Address of the interface, if DHCP is not set.
func (o VnicIpv4PtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnicIpv4) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Netmask of the interface, if DHCP is not set.
func (o VnicIpv4PtrOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnicIpv4) *string { return v.Netmask }).(pulumi.StringPtrOutput)
}

type VnicIpv6 struct {
	// List of IPv6 addresses
	Addresses []string `pulumi:"addresses"`
	// Use IPv6 Autoconfiguration (RFC2462).
	Autoconfig *bool `pulumi:"autoconfig"`
	// Use DHCP to configure the interface's IPv4 stack.
	Dhcp *bool `pulumi:"dhcp"`
	// IP address of the default gateway, if DHCP or autoconfig is not set.
	Gw *string `pulumi:"gw"`
}

// VnicIpv6Input is an input type that accepts VnicIpv6Args and VnicIpv6Output values.
// You can construct a concrete instance of `VnicIpv6Input` via:
//
// 		 VnicIpv6Args{...}
//
type VnicIpv6Input interface {
	pulumi.Input

	ToVnicIpv6Output() VnicIpv6Output
	ToVnicIpv6OutputWithContext(context.Context) VnicIpv6Output
}

type VnicIpv6Args struct {
	// List of IPv6 addresses
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// Use IPv6 Autoconfiguration (RFC2462).
	Autoconfig pulumi.BoolPtrInput `pulumi:"autoconfig"`
	// Use DHCP to configure the interface's IPv4 stack.
	Dhcp pulumi.BoolPtrInput `pulumi:"dhcp"`
	// IP address of the default gateway, if DHCP or autoconfig is not set.
	Gw pulumi.StringPtrInput `pulumi:"gw"`
}

func (VnicIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*VnicIpv6)(nil)).Elem()
}

func (i VnicIpv6Args) ToVnicIpv6Output() VnicIpv6Output {
	return i.ToVnicIpv6OutputWithContext(context.Background())
}

func (i VnicIpv6Args) ToVnicIpv6OutputWithContext(ctx context.Context) VnicIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(VnicIpv6Output)
}

func (i VnicIpv6Args) ToVnicIpv6PtrOutput() VnicIpv6PtrOutput {
	return i.ToVnicIpv6PtrOutputWithContext(context.Background())
}

func (i VnicIpv6Args) ToVnicIpv6PtrOutputWithContext(ctx context.Context) VnicIpv6PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnicIpv6Output).ToVnicIpv6PtrOutputWithContext(ctx)
}

// VnicIpv6PtrInput is an input type that accepts VnicIpv6Args, VnicIpv6Ptr and VnicIpv6PtrOutput values.
// You can construct a concrete instance of `VnicIpv6PtrInput` via:
//
// 		 VnicIpv6Args{...}
//
//  or:
//
// 		 nil
//
type VnicIpv6PtrInput interface {
	pulumi.Input

	ToVnicIpv6PtrOutput() VnicIpv6PtrOutput
	ToVnicIpv6PtrOutputWithContext(context.Context) VnicIpv6PtrOutput
}

type vnicIpv6PtrType VnicIpv6Args

func VnicIpv6Ptr(v *VnicIpv6Args) VnicIpv6PtrInput {
	return (*vnicIpv6PtrType)(v)
}

func (*vnicIpv6PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VnicIpv6)(nil)).Elem()
}

func (i *vnicIpv6PtrType) ToVnicIpv6PtrOutput() VnicIpv6PtrOutput {
	return i.ToVnicIpv6PtrOutputWithContext(context.Background())
}

func (i *vnicIpv6PtrType) ToVnicIpv6PtrOutputWithContext(ctx context.Context) VnicIpv6PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnicIpv6PtrOutput)
}

type VnicIpv6Output struct{ *pulumi.OutputState }

func (VnicIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*VnicIpv6)(nil)).Elem()
}

func (o VnicIpv6Output) ToVnicIpv6Output() VnicIpv6Output {
	return o
}

func (o VnicIpv6Output) ToVnicIpv6OutputWithContext(ctx context.Context) VnicIpv6Output {
	return o
}

func (o VnicIpv6Output) ToVnicIpv6PtrOutput() VnicIpv6PtrOutput {
	return o.ToVnicIpv6PtrOutputWithContext(context.Background())
}

func (o VnicIpv6Output) ToVnicIpv6PtrOutputWithContext(ctx context.Context) VnicIpv6PtrOutput {
	return o.ApplyT(func(v VnicIpv6) *VnicIpv6 {
		return &v
	}).(VnicIpv6PtrOutput)
}

// List of IPv6 addresses
func (o VnicIpv6Output) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VnicIpv6) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// Use IPv6 Autoconfiguration (RFC2462).
func (o VnicIpv6Output) Autoconfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VnicIpv6) *bool { return v.Autoconfig }).(pulumi.BoolPtrOutput)
}

// Use DHCP to configure the interface's IPv4 stack.
func (o VnicIpv6Output) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VnicIpv6) *bool { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

// IP address of the default gateway, if DHCP or autoconfig is not set.
func (o VnicIpv6Output) Gw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnicIpv6) *string { return v.Gw }).(pulumi.StringPtrOutput)
}

type VnicIpv6PtrOutput struct{ *pulumi.OutputState }

func (VnicIpv6PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VnicIpv6)(nil)).Elem()
}

func (o VnicIpv6PtrOutput) ToVnicIpv6PtrOutput() VnicIpv6PtrOutput {
	return o
}

func (o VnicIpv6PtrOutput) ToVnicIpv6PtrOutputWithContext(ctx context.Context) VnicIpv6PtrOutput {
	return o
}

func (o VnicIpv6PtrOutput) Elem() VnicIpv6Output {
	return o.ApplyT(func(v *VnicIpv6) VnicIpv6 { return *v }).(VnicIpv6Output)
}

// List of IPv6 addresses
func (o VnicIpv6PtrOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VnicIpv6) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// Use IPv6 Autoconfiguration (RFC2462).
func (o VnicIpv6PtrOutput) Autoconfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VnicIpv6) *bool { return v.Autoconfig }).(pulumi.BoolPtrOutput)
}

// Use DHCP to configure the interface's IPv4 stack.
func (o VnicIpv6PtrOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VnicIpv6) *bool { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

// IP address of the default gateway, if DHCP or autoconfig is not set.
func (o VnicIpv6PtrOutput) Gw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnicIpv6) *string { return v.Gw }).(pulumi.StringPtrOutput)
}

type GetVirtualMachineDisk struct {
	// Set to `true` if the disk has been eager zeroed.
	EagerlyScrub bool `pulumi:"eagerlyScrub"`
	// The size of the disk, in GIB.
	Size int `pulumi:"size"`
	// Set to `true` if the disk has been thin provisioned.
	ThinProvisioned bool `pulumi:"thinProvisioned"`
}

// GetVirtualMachineDiskInput is an input type that accepts GetVirtualMachineDiskArgs and GetVirtualMachineDiskOutput values.
// You can construct a concrete instance of `GetVirtualMachineDiskInput` via:
//
// 		 GetVirtualMachineDiskArgs{...}
//
type GetVirtualMachineDiskInput interface {
	pulumi.Input

	ToGetVirtualMachineDiskOutput() GetVirtualMachineDiskOutput
	ToGetVirtualMachineDiskOutputWithContext(context.Context) GetVirtualMachineDiskOutput
}

type GetVirtualMachineDiskArgs struct {
	// Set to `true` if the disk has been eager zeroed.
	EagerlyScrub pulumi.BoolInput `pulumi:"eagerlyScrub"`
	// The size of the disk, in GIB.
	Size pulumi.IntInput `pulumi:"size"`
	// Set to `true` if the disk has been thin provisioned.
	ThinProvisioned pulumi.BoolInput `pulumi:"thinProvisioned"`
}

func (GetVirtualMachineDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualMachineDisk)(nil)).Elem()
}

func (i GetVirtualMachineDiskArgs) ToGetVirtualMachineDiskOutput() GetVirtualMachineDiskOutput {
	return i.ToGetVirtualMachineDiskOutputWithContext(context.Background())
}

func (i GetVirtualMachineDiskArgs) ToGetVirtualMachineDiskOutputWithContext(ctx context.Context) GetVirtualMachineDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualMachineDiskOutput)
}

// GetVirtualMachineDiskArrayInput is an input type that accepts GetVirtualMachineDiskArray and GetVirtualMachineDiskArrayOutput values.
// You can construct a concrete instance of `GetVirtualMachineDiskArrayInput` via:
//
// 		 GetVirtualMachineDiskArray{ GetVirtualMachineDiskArgs{...} }
//
type GetVirtualMachineDiskArrayInput interface {
	pulumi.Input

	ToGetVirtualMachineDiskArrayOutput() GetVirtualMachineDiskArrayOutput
	ToGetVirtualMachineDiskArrayOutputWithContext(context.Context) GetVirtualMachineDiskArrayOutput
}

type GetVirtualMachineDiskArray []GetVirtualMachineDiskInput

func (GetVirtualMachineDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualMachineDisk)(nil)).Elem()
}

func (i GetVirtualMachineDiskArray) ToGetVirtualMachineDiskArrayOutput() GetVirtualMachineDiskArrayOutput {
	return i.ToGetVirtualMachineDiskArrayOutputWithContext(context.Background())
}

func (i GetVirtualMachineDiskArray) ToGetVirtualMachineDiskArrayOutputWithContext(ctx context.Context) GetVirtualMachineDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualMachineDiskArrayOutput)
}

type GetVirtualMachineDiskOutput struct{ *pulumi.OutputState }

func (GetVirtualMachineDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualMachineDisk)(nil)).Elem()
}

func (o GetVirtualMachineDiskOutput) ToGetVirtualMachineDiskOutput() GetVirtualMachineDiskOutput {
	return o
}

func (o GetVirtualMachineDiskOutput) ToGetVirtualMachineDiskOutputWithContext(ctx context.Context) GetVirtualMachineDiskOutput {
	return o
}

// Set to `true` if the disk has been eager zeroed.
func (o GetVirtualMachineDiskOutput) EagerlyScrub() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVirtualMachineDisk) bool { return v.EagerlyScrub }).(pulumi.BoolOutput)
}

// The size of the disk, in GIB.
func (o GetVirtualMachineDiskOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetVirtualMachineDisk) int { return v.Size }).(pulumi.IntOutput)
}

// Set to `true` if the disk has been thin provisioned.
func (o GetVirtualMachineDiskOutput) ThinProvisioned() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVirtualMachineDisk) bool { return v.ThinProvisioned }).(pulumi.BoolOutput)
}

type GetVirtualMachineDiskArrayOutput struct{ *pulumi.OutputState }

func (GetVirtualMachineDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualMachineDisk)(nil)).Elem()
}

func (o GetVirtualMachineDiskArrayOutput) ToGetVirtualMachineDiskArrayOutput() GetVirtualMachineDiskArrayOutput {
	return o
}

func (o GetVirtualMachineDiskArrayOutput) ToGetVirtualMachineDiskArrayOutputWithContext(ctx context.Context) GetVirtualMachineDiskArrayOutput {
	return o
}

func (o GetVirtualMachineDiskArrayOutput) Index(i pulumi.IntInput) GetVirtualMachineDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVirtualMachineDisk {
		return vs[0].([]GetVirtualMachineDisk)[vs[1].(int)]
	}).(GetVirtualMachineDiskOutput)
}

func init() {
	pulumi.RegisterOutputType(DistributedPortGroupVlanRangeOutput{})
	pulumi.RegisterOutputType(DistributedPortGroupVlanRangeArrayOutput{})
	pulumi.RegisterOutputType(DistributedVirtualSwitchHostOutput{})
	pulumi.RegisterOutputType(DistributedVirtualSwitchHostArrayOutput{})
	pulumi.RegisterOutputType(DistributedVirtualSwitchVlanRangeOutput{})
	pulumi.RegisterOutputType(DistributedVirtualSwitchVlanRangeArrayOutput{})
	pulumi.RegisterOutputType(HostPortGroupPortsOutput{})
	pulumi.RegisterOutputType(HostPortGroupPortsPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineCdromOutput{})
	pulumi.RegisterOutputType(VirtualMachineCdromPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineCloneOutput{})
	pulumi.RegisterOutputType(VirtualMachineClonePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineCloneCustomizeOutput{})
	pulumi.RegisterOutputType(VirtualMachineCloneCustomizePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineCloneCustomizeLinuxOptionsOutput{})
	pulumi.RegisterOutputType(VirtualMachineCloneCustomizeLinuxOptionsPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineCloneCustomizeNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(VirtualMachineCloneCustomizeNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineCloneCustomizeWindowsOptionsOutput{})
	pulumi.RegisterOutputType(VirtualMachineCloneCustomizeWindowsOptionsPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineDiskOutput{})
	pulumi.RegisterOutputType(VirtualMachineDiskArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineVappOutput{})
	pulumi.RegisterOutputType(VirtualMachineVappPtrOutput{})
	pulumi.RegisterOutputType(VnicIpv4Output{})
	pulumi.RegisterOutputType(VnicIpv4PtrOutput{})
	pulumi.RegisterOutputType(VnicIpv6Output{})
	pulumi.RegisterOutputType(VnicIpv6PtrOutput{})
	pulumi.RegisterOutputType(GetVirtualMachineDiskOutput{})
	pulumi.RegisterOutputType(GetVirtualMachineDiskArrayOutput{})
}
