// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `DistributedVirtualSwitch` data source can be used to discover
// the ID and uplink data of a of a vSphere distributed virtual switch (DVS). This
// can then be used with resources or data sources that require a DVS, such as the
// `DistributedPortGroup` resource, for which
// an example is shown below.
//
// > **NOTE:** This data source requires vCenter and is not available on direct
// ESXi connections.
//
// ## Example Usage
//
// The following example locates a DVS that is named `test-dvs`, in the
// datacenter `dc1`. It then uses this DVS to set up a
// `DistributedPortGroup` resource that uses the first uplink as a
// primary uplink and the second uplink as a secondary.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		datacenter, err := vsphere.LookupDatacenter(ctx, &GetDatacenterArgs{
// 			Name: pulumi.StringRef("dc1"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		dvs, err := vsphere.LookupDistributedVirtualSwitch(ctx, &GetDistributedVirtualSwitchArgs{
// 			DatacenterId: pulumi.StringRef(datacenter.Id),
// 			Name:         "test-dvs",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = vsphere.NewDistributedPortGroup(ctx, "pg", &vsphere.DistributedPortGroupArgs{
// 			ActiveUplinks: pulumi.StringArray{
// 				pulumi.String(dvs.Uplinks[0]),
// 			},
// 			DistributedVirtualSwitchUuid: pulumi.String(dvs.Id),
// 			StandbyUplinks: pulumi.StringArray{
// 				pulumi.String(dvs.Uplinks[1]),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupDistributedVirtualSwitch(ctx *pulumi.Context, args *LookupDistributedVirtualSwitchArgs, opts ...pulumi.InvokeOption) (*LookupDistributedVirtualSwitchResult, error) {
	var rv LookupDistributedVirtualSwitchResult
	err := ctx.Invoke("vsphere:index/getDistributedVirtualSwitch:getDistributedVirtualSwitch", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDistributedVirtualSwitch.
type LookupDistributedVirtualSwitchArgs struct {
	// The managed object reference
	// ID of the datacenter the DVS is located in. This can be
	// omitted if the search path used in `name` is an absolute path. For default
	// datacenters, use the id attribute from an empty `Datacenter` data
	// source.
	DatacenterId *string `pulumi:"datacenterId"`
	// The name of the distributed virtual switch. This can be a
	// name or path.
	Name string `pulumi:"name"`
}

// A collection of values returned by getDistributedVirtualSwitch.
type LookupDistributedVirtualSwitchResult struct {
	DatacenterId *string `pulumi:"datacenterId"`
	// The provider-assigned unique ID for this managed resource.
	Id      string   `pulumi:"id"`
	Name    string   `pulumi:"name"`
	Uplinks []string `pulumi:"uplinks"`
}

func LookupDistributedVirtualSwitchOutput(ctx *pulumi.Context, args LookupDistributedVirtualSwitchOutputArgs, opts ...pulumi.InvokeOption) LookupDistributedVirtualSwitchResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDistributedVirtualSwitchResult, error) {
			args := v.(LookupDistributedVirtualSwitchArgs)
			r, err := LookupDistributedVirtualSwitch(ctx, &args, opts...)
			return *r, err
		}).(LookupDistributedVirtualSwitchResultOutput)
}

// A collection of arguments for invoking getDistributedVirtualSwitch.
type LookupDistributedVirtualSwitchOutputArgs struct {
	// The managed object reference
	// ID of the datacenter the DVS is located in. This can be
	// omitted if the search path used in `name` is an absolute path. For default
	// datacenters, use the id attribute from an empty `Datacenter` data
	// source.
	DatacenterId pulumi.StringPtrInput `pulumi:"datacenterId"`
	// The name of the distributed virtual switch. This can be a
	// name or path.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDistributedVirtualSwitchOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDistributedVirtualSwitchArgs)(nil)).Elem()
}

// A collection of values returned by getDistributedVirtualSwitch.
type LookupDistributedVirtualSwitchResultOutput struct{ *pulumi.OutputState }

func (LookupDistributedVirtualSwitchResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDistributedVirtualSwitchResult)(nil)).Elem()
}

func (o LookupDistributedVirtualSwitchResultOutput) ToLookupDistributedVirtualSwitchResultOutput() LookupDistributedVirtualSwitchResultOutput {
	return o
}

func (o LookupDistributedVirtualSwitchResultOutput) ToLookupDistributedVirtualSwitchResultOutputWithContext(ctx context.Context) LookupDistributedVirtualSwitchResultOutput {
	return o
}

func (o LookupDistributedVirtualSwitchResultOutput) DatacenterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDistributedVirtualSwitchResult) *string { return v.DatacenterId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDistributedVirtualSwitchResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDistributedVirtualSwitchResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDistributedVirtualSwitchResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDistributedVirtualSwitchResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDistributedVirtualSwitchResultOutput) Uplinks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDistributedVirtualSwitchResult) []string { return v.Uplinks }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDistributedVirtualSwitchResultOutput{})
}
