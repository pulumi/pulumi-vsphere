// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type VirtualMachine struct {
	pulumi.CustomResourceState

	// The guest name for the operating system
	// when `guestId` is `other` or `other-64`.
	AlternateGuestName pulumi.StringPtrOutput `pulumi:"alternateGuestName"`
	// A user-provided description of the virtual machine.
	// The default is no annotation.
	Annotation pulumi.StringPtrOutput `pulumi:"annotation"`
	// The number of milliseconds to wait before starting
	// the boot sequence. The default is no delay.
	BootDelay pulumi.IntPtrOutput `pulumi:"bootDelay"`
	// The number of milliseconds to wait before
	// retrying the boot sequence. This only valid if `bootRetryEnabled` is true.
	// Default: `10000` (10 seconds).
	BootRetryDelay pulumi.IntPtrOutput `pulumi:"bootRetryDelay"`
	// If set to true, a virtual machine that
	// fails to boot will try again after the delay defined in `bootRetryDelay`.
	// Default: `false`.
	BootRetryEnabled pulumi.BoolPtrOutput `pulumi:"bootRetryEnabled"`
	// A specification for a CDROM device on this virtual
	// machine. See CDROM options below.
	Cdrom VirtualMachineCdromPtrOutput `pulumi:"cdrom"`
	// A unique identifier for a given version of the last
	// configuration applied, such the timestamp of the last update to the
	// configuration.
	ChangeVersion pulumi.StringOutput `pulumi:"changeVersion"`
	// When specified, the VM will be created as a clone of a
	// specified template. Optional customization options can be submitted as well.
	// See creating a virtual machine from a
	// template for more details.
	Clone VirtualMachineClonePtrOutput `pulumi:"clone"`
	// Allow CPUs to be added to this virtual
	// machine while it is running.
	CpuHotAddEnabled pulumi.BoolPtrOutput `pulumi:"cpuHotAddEnabled"`
	// Allow CPUs to be removed to this
	// virtual machine while it is running.
	CpuHotRemoveEnabled pulumi.BoolPtrOutput `pulumi:"cpuHotRemoveEnabled"`
	// The maximum amount of CPU (in MHz) that this virtual
	// machine can consume, regardless of available resources. The default is no
	// limit.
	CpuLimit pulumi.IntPtrOutput `pulumi:"cpuLimit"`
	// Enable CPU performance
	// counters on this virtual machine. Default: `false`.
	CpuPerformanceCountersEnabled pulumi.BoolPtrOutput `pulumi:"cpuPerformanceCountersEnabled"`
	// The amount of CPU (in MHz) that this virtual
	// machine is guaranteed. The default is no reservation.
	CpuReservation pulumi.IntPtrOutput `pulumi:"cpuReservation"`
	// The number of CPU shares allocated to the
	// virtual machine when the `cpuShareLevel` is `custom`.
	CpuShareCount pulumi.IntOutput `pulumi:"cpuShareCount"`
	// The allocation level for CPU resources. Can be
	// one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	CpuShareLevel pulumi.StringPtrOutput `pulumi:"cpuShareLevel"`
	// Map of custom attribute ids to attribute
	// value strings to set for virtual machine. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	CustomAttributes pulumi.StringMapOutput `pulumi:"customAttributes"`
	// The [managed object reference
	// ID][docs-about-morefs] of the datastore cluster ID to use. This setting
	// applies to entire virtual machine and implies that you wish to use Storage
	// DRS with this virtual machine. See the section on virtual machine
	// migration for details on changing this value.
	DatastoreClusterId pulumi.StringPtrOutput `pulumi:"datastoreClusterId"`
	// The datastore ID that the ISO is located in.
	// Requried for using a datastore ISO. Conflicts with `clientDevice`.
	DatastoreId pulumi.StringOutput `pulumi:"datastoreId"`
	// The IP address selected by Terraform to be used for the provisioner.
	DefaultIpAddress pulumi.StringOutput `pulumi:"defaultIpAddress"`
	// A specification for a virtual disk device on this virtual
	// machine. See disk options below.
	Disks VirtualMachineDiskArrayOutput `pulumi:"disks"`
	// When the `firmware` type is set to is
	// `efi`, this enables EFI secure boot. Default: `false`.
	EfiSecureBootEnabled pulumi.BoolPtrOutput `pulumi:"efiSecureBootEnabled"`
	// Expose the UUIDs of attached virtual disks to
	// the virtual machine, allowing access to them in the guest. Default: `false`.
	EnableDiskUuid pulumi.BoolPtrOutput `pulumi:"enableDiskUuid"`
	// Enable logging of virtual machine events to a
	// log file stored in the virtual machine directory. Default: `false`.
	EnableLogging pulumi.BoolPtrOutput `pulumi:"enableLogging"`
	// The EPT/RVI (hardware memory virtualization)
	// setting for this virtual machine. Can be one of `automatic`, `on`, or `off`.
	// Default: `automatic`.
	EptRviMode pulumi.StringPtrOutput `pulumi:"eptRviMode"`
	// Extra configuration data for this virtual
	// machine. Can be used to supply advanced parameters not normally in
	// configuration, such as instance metadata.
	ExtraConfig pulumi.StringMapOutput `pulumi:"extraConfig"`
	// The firmware interface to use on the virtual machine.
	// Can be one of `bios` or `EFI`. Default: `bios`.
	Firmware pulumi.StringPtrOutput `pulumi:"firmware"`
	// The path to the folder to put this virtual machine in,
	// relative to the datacenter that the resource pool is in.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// If a guest shutdown failed or timed out while
	// updating or destroying (see
	// `shutdownWaitTimeout`), force the power-off of
	// the virtual machine. Default: `true`.
	ForcePowerOff pulumi.BoolPtrOutput `pulumi:"forcePowerOff"`
	// The guest ID for the operating system type. For a
	// full list of possible values, see [here][vmware-docs-guest-ids]. Default: `other-64`.
	GuestId pulumi.StringPtrOutput `pulumi:"guestId"`
	// The current list of IP addresses on this machine,
	// including the value of `defaultIpAddress`. If VMware tools is not running
	// on the virtual machine, or if the VM is powered off, this list will be empty.
	// * `moid`: The [managed object reference ID][docs-about-morefs] of the created
	// virtual machine.
	GuestIpAddresses pulumi.StringArrayOutput `pulumi:"guestIpAddresses"`
	// The hardware version number. Valid range
	// is from 4 to 15. The hardware version cannot be downgraded. See [virtual
	// machine hardware compatibility][virtual-machine-hardware-compatibility] for
	// more details.
	HardwareVersion pulumi.IntOutput `pulumi:"hardwareVersion"`
	// An optional [managed object reference
	// ID][docs-about-morefs] of a host to put this virtual machine on. See the
	// section on virtual machine migration for
	// details on changing this value. If a `hostSystemId` is not supplied,
	// vSphere will select a host in the resource pool to place the virtual machine,
	// according to any defaults or DRS policies in place.
	HostSystemId pulumi.StringOutput `pulumi:"hostSystemId"`
	// The (non-nested) hardware virtualization setting for
	// this virtual machine. Can be one of `hvAuto`, `hvOn`, or `hvOff`. Default:
	// `hvAuto`.
	HvMode pulumi.StringPtrOutput `pulumi:"hvMode"`
	// List of IP addresses and CIDR networks to
	// ignore while waiting for an available IP address using either of the waiters.
	// Any IP addresses in this list will be ignored if they show up so that the
	// waiter will continue to wait for a real IP address. Default: [].
	IgnoredGuestIps pulumi.StringArrayOutput `pulumi:"ignoredGuestIps"`
	// This is flagged if the virtual machine has been imported, or the
	// state has been migrated from a previous version of the resource. It
	// influences the behavior of the first post-import apply operation. See the
	// section on importing below.
	Imported pulumi.BoolOutput `pulumi:"imported"`
	// Controls the scheduling delay of the
	// virtual machine. Use a higher sensitivity for applications that require lower
	// latency, such as VOIP, media player applications, or applications that
	// require frequent access to mouse or keyboard devices. Can be one of `low`,
	// `normal`, `medium`, or `high`.
	LatencySensitivity pulumi.StringPtrOutput `pulumi:"latencySensitivity"`
	// The size of the virtual machine's memory, in MB.
	// Default: `1024` (1 GB).
	Memory pulumi.IntPtrOutput `pulumi:"memory"`
	// Allow memory to be added to this
	// virtual machine while it is running.
	MemoryHotAddEnabled pulumi.BoolPtrOutput `pulumi:"memoryHotAddEnabled"`
	// The maximum amount of memory (in MB) that this
	// virtual machine can consume, regardless of available resources. The default
	// is no limit.
	MemoryLimit pulumi.IntPtrOutput `pulumi:"memoryLimit"`
	// The amount of memory (in MB) that this
	// virtual machine is guaranteed. The default is no reservation.
	MemoryReservation pulumi.IntPtrOutput `pulumi:"memoryReservation"`
	// The number of memory shares allocated to
	// the virtual machine when the `memoryShareLevel` is `custom`.
	MemoryShareCount pulumi.IntOutput `pulumi:"memoryShareCount"`
	// The allocation level for memory resources.
	// Can be one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	MemoryShareLevel pulumi.StringPtrOutput `pulumi:"memoryShareLevel"`
	// The amount of time, in minutes, to wait
	// for a virtual machine migration to complete before failing. Default: 10
	// minutes. Also see the section on virtual machine
	// migration.
	MigrateWaitTimeout pulumi.IntPtrOutput `pulumi:"migrateWaitTimeout"`
	// The machine object ID from VMWare
	Moid pulumi.StringOutput `pulumi:"moid"`
	// An alias for both `label` and `path`, the latter when
	// using `attach`. Required if not using `label`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable nested hardware virtualization on
	// this virtual machine, facilitating nested virtualization in the guest.
	// Default: `false`.
	NestedHvEnabled pulumi.BoolPtrOutput `pulumi:"nestedHvEnabled"`
	// A specification for a virtual NIC on this
	// virtual machine. See network interface options
	// below.
	NetworkInterfaces VirtualMachineNetworkInterfaceArrayOutput `pulumi:"networkInterfaces"`
	// The number of cores per socket in this
	// virtual machine. The number of vCPUs on the virtual machine will be
	// `numCpus` divided by `numCoresPerSocket`. If specified, the value
	// supplied to `numCpus` must be evenly divisible by this value. Default: `1`.
	NumCoresPerSocket pulumi.IntPtrOutput `pulumi:"numCoresPerSocket"`
	// The total number of virtual processor cores to assign
	// to this virtual machine. Default: `1`.
	NumCpus pulumi.IntPtrOutput `pulumi:"numCpus"`
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout pulumi.IntPtrOutput `pulumi:"poweronTimeout"`
	// Value internal to Terraform used to determine if a configuration set change requires a reboot.
	RebootRequired pulumi.BoolOutput `pulumi:"rebootRequired"`
	// The [managed object reference
	// ID][docs-about-morefs] of the resource pool to put this virtual machine in.
	// See the section on virtual machine migration
	// for details on changing this value.
	ResourcePoolId pulumi.StringOutput `pulumi:"resourcePoolId"`
	// Enable the execution of
	// post-power-on scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsAfterPowerOn pulumi.BoolPtrOutput `pulumi:"runToolsScriptsAfterPowerOn"`
	// Enable the execution of
	// post-resume scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsAfterResume pulumi.BoolPtrOutput `pulumi:"runToolsScriptsAfterResume"`
	// Enable the execution of
	// pre-reboot scripts when VMware tools is installed. Default: `false`.
	RunToolsScriptsBeforeGuestReboot pulumi.BoolPtrOutput `pulumi:"runToolsScriptsBeforeGuestReboot"`
	// Enable the execution
	// of pre-shutdown scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestShutdown pulumi.BoolPtrOutput `pulumi:"runToolsScriptsBeforeGuestShutdown"`
	// Enable the execution of
	// pre-standby scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestStandby pulumi.BoolPtrOutput `pulumi:"runToolsScriptsBeforeGuestStandby"`
	// Mode for sharing the SCSI bus. The modes are
	// physicalSharing, virtualSharing, and noSharing. Default: `noSharing`.
	ScsiBusSharing pulumi.StringPtrOutput `pulumi:"scsiBusSharing"`
	// The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	ScsiControllerCount pulumi.IntPtrOutput `pulumi:"scsiControllerCount"`
	// The type of SCSI bus this virtual machine will have.
	// Can be one of lsilogic (LSI Logic Parallel), lsilogic-sas (LSI Logic SAS) or
	// pvscsi (VMware Paravirtual). Defualt: `pvscsi`.
	ScsiType pulumi.StringPtrOutput `pulumi:"scsiType"`
	// The amount of time, in minutes, to wait
	// for a graceful guest shutdown when making necessary updates to the virtual
	// machine. If `forcePowerOff` is set to true, the VM will be force powered-off
	// after this timeout, otherwise an error is returned. Default: 3 minutes.
	ShutdownWaitTimeout pulumi.IntPtrOutput `pulumi:"shutdownWaitTimeout"`
	// The UUID of the storage policy to assign to this disk.
	StoragePolicyId pulumi.StringPtrOutput `pulumi:"storagePolicyId"`
	// The swap file placement policy for this
	// virtual machine. Can be one of `inherit`, `hostLocal`, or `vmDirectory`.
	// Default: `inherit`.
	SwapPlacementPolicy pulumi.StringPtrOutput `pulumi:"swapPlacementPolicy"`
	// Enable guest clock synchronization with
	// the host. Requires VMware tools to be installed. Default: `false`.
	SyncTimeWithHost pulumi.BoolPtrOutput `pulumi:"syncTimeWithHost"`
	// The IDs of any tags to attach to this resource. See
	// [here][docs-applying-tags] for a reference on how to apply tags.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The UUID of the virtual disk's VMDK file. This is used to track the
	// virtual disk on the virtual machine.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Optional vApp configuration. The only sub-key available
	// is `properties`, which is a key/value map of properties for virtual machines
	// imported from OVF or OVA files. See Using vApp properties to supply OVF/OVA
	// configuration for
	// more details.
	Vapp VirtualMachineVappPtrOutput `pulumi:"vapp"`
	// Computed value which is only valid for cloned virtual
	// machines. A list of vApp transport methods supported by the source virtual
	// machine or template.
	VappTransports pulumi.StringArrayOutput `pulumi:"vappTransports"`
	// The state of VMware tools in the guest. This will
	// determine the proper course of action for some device operations.
	VmwareToolsStatus pulumi.StringOutput `pulumi:"vmwareToolsStatus"`
	// The path of the virtual machine's configuration file in the VM's
	// datastore.
	VmxPath pulumi.StringOutput `pulumi:"vmxPath"`
	// The amount of time, in minutes, to
	// wait for an available guest IP address on this virtual machine. This should
	// only be used if your version of VMware Tools does not allow the
	// `waitForGuestNetTimeout` waiter to be
	// used. A value less than 1 disables the waiter. Default: 0.
	WaitForGuestIpTimeout pulumi.IntPtrOutput `pulumi:"waitForGuestIpTimeout"`
	// Controls whether or not the guest
	// network waiter waits for a routable address. When `false`, the waiter does
	// not wait for a default gateway, nor are IP addresses checked against any
	// discovered default gateways as part of its success criteria. This property is
	// ignored if the `waitForGuestIpTimeout`
	// waiter is used. Default: `true`.
	WaitForGuestNetRoutable pulumi.BoolPtrOutput `pulumi:"waitForGuestNetRoutable"`
	// The amount of time, in minutes, to
	// wait for an available IP address on this virtual machine's NICs. Older
	// versions of VMware Tools do not populate this property. In those cases, this
	// waiter can be disabled and the
	// `waitForGuestIpTimeout` waiter can be used
	// instead. A value less than 1 disables the waiter. Default: 5 minutes.
	WaitForGuestNetTimeout pulumi.IntPtrOutput `pulumi:"waitForGuestNetTimeout"`
}

// NewVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachine(ctx *pulumi.Context,
	name string, args *VirtualMachineArgs, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	if args == nil || args.NetworkInterfaces == nil {
		return nil, errors.New("missing required argument 'NetworkInterfaces'")
	}
	if args == nil || args.ResourcePoolId == nil {
		return nil, errors.New("missing required argument 'ResourcePoolId'")
	}
	if args == nil {
		args = &VirtualMachineArgs{}
	}
	var resource VirtualMachine
	err := ctx.RegisterResource("vsphere:index/virtualMachine:VirtualMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachine gets an existing VirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineState, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	var resource VirtualMachine
	err := ctx.ReadResource("vsphere:index/virtualMachine:VirtualMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachine resources.
type virtualMachineState struct {
	// The guest name for the operating system
	// when `guestId` is `other` or `other-64`.
	AlternateGuestName *string `pulumi:"alternateGuestName"`
	// A user-provided description of the virtual machine.
	// The default is no annotation.
	Annotation *string `pulumi:"annotation"`
	// The number of milliseconds to wait before starting
	// the boot sequence. The default is no delay.
	BootDelay *int `pulumi:"bootDelay"`
	// The number of milliseconds to wait before
	// retrying the boot sequence. This only valid if `bootRetryEnabled` is true.
	// Default: `10000` (10 seconds).
	BootRetryDelay *int `pulumi:"bootRetryDelay"`
	// If set to true, a virtual machine that
	// fails to boot will try again after the delay defined in `bootRetryDelay`.
	// Default: `false`.
	BootRetryEnabled *bool `pulumi:"bootRetryEnabled"`
	// A specification for a CDROM device on this virtual
	// machine. See CDROM options below.
	Cdrom *VirtualMachineCdrom `pulumi:"cdrom"`
	// A unique identifier for a given version of the last
	// configuration applied, such the timestamp of the last update to the
	// configuration.
	ChangeVersion *string `pulumi:"changeVersion"`
	// When specified, the VM will be created as a clone of a
	// specified template. Optional customization options can be submitted as well.
	// See creating a virtual machine from a
	// template for more details.
	Clone *VirtualMachineClone `pulumi:"clone"`
	// Allow CPUs to be added to this virtual
	// machine while it is running.
	CpuHotAddEnabled *bool `pulumi:"cpuHotAddEnabled"`
	// Allow CPUs to be removed to this
	// virtual machine while it is running.
	CpuHotRemoveEnabled *bool `pulumi:"cpuHotRemoveEnabled"`
	// The maximum amount of CPU (in MHz) that this virtual
	// machine can consume, regardless of available resources. The default is no
	// limit.
	CpuLimit *int `pulumi:"cpuLimit"`
	// Enable CPU performance
	// counters on this virtual machine. Default: `false`.
	CpuPerformanceCountersEnabled *bool `pulumi:"cpuPerformanceCountersEnabled"`
	// The amount of CPU (in MHz) that this virtual
	// machine is guaranteed. The default is no reservation.
	CpuReservation *int `pulumi:"cpuReservation"`
	// The number of CPU shares allocated to the
	// virtual machine when the `cpuShareLevel` is `custom`.
	CpuShareCount *int `pulumi:"cpuShareCount"`
	// The allocation level for CPU resources. Can be
	// one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	CpuShareLevel *string `pulumi:"cpuShareLevel"`
	// Map of custom attribute ids to attribute
	// value strings to set for virtual machine. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// The [managed object reference
	// ID][docs-about-morefs] of the datastore cluster ID to use. This setting
	// applies to entire virtual machine and implies that you wish to use Storage
	// DRS with this virtual machine. See the section on virtual machine
	// migration for details on changing this value.
	DatastoreClusterId *string `pulumi:"datastoreClusterId"`
	// The datastore ID that the ISO is located in.
	// Requried for using a datastore ISO. Conflicts with `clientDevice`.
	DatastoreId *string `pulumi:"datastoreId"`
	// The IP address selected by Terraform to be used for the provisioner.
	DefaultIpAddress *string `pulumi:"defaultIpAddress"`
	// A specification for a virtual disk device on this virtual
	// machine. See disk options below.
	Disks []VirtualMachineDisk `pulumi:"disks"`
	// When the `firmware` type is set to is
	// `efi`, this enables EFI secure boot. Default: `false`.
	EfiSecureBootEnabled *bool `pulumi:"efiSecureBootEnabled"`
	// Expose the UUIDs of attached virtual disks to
	// the virtual machine, allowing access to them in the guest. Default: `false`.
	EnableDiskUuid *bool `pulumi:"enableDiskUuid"`
	// Enable logging of virtual machine events to a
	// log file stored in the virtual machine directory. Default: `false`.
	EnableLogging *bool `pulumi:"enableLogging"`
	// The EPT/RVI (hardware memory virtualization)
	// setting for this virtual machine. Can be one of `automatic`, `on`, or `off`.
	// Default: `automatic`.
	EptRviMode *string `pulumi:"eptRviMode"`
	// Extra configuration data for this virtual
	// machine. Can be used to supply advanced parameters not normally in
	// configuration, such as instance metadata.
	ExtraConfig map[string]string `pulumi:"extraConfig"`
	// The firmware interface to use on the virtual machine.
	// Can be one of `bios` or `EFI`. Default: `bios`.
	Firmware *string `pulumi:"firmware"`
	// The path to the folder to put this virtual machine in,
	// relative to the datacenter that the resource pool is in.
	Folder *string `pulumi:"folder"`
	// If a guest shutdown failed or timed out while
	// updating or destroying (see
	// `shutdownWaitTimeout`), force the power-off of
	// the virtual machine. Default: `true`.
	ForcePowerOff *bool `pulumi:"forcePowerOff"`
	// The guest ID for the operating system type. For a
	// full list of possible values, see [here][vmware-docs-guest-ids]. Default: `other-64`.
	GuestId *string `pulumi:"guestId"`
	// The current list of IP addresses on this machine,
	// including the value of `defaultIpAddress`. If VMware tools is not running
	// on the virtual machine, or if the VM is powered off, this list will be empty.
	// * `moid`: The [managed object reference ID][docs-about-morefs] of the created
	// virtual machine.
	GuestIpAddresses []string `pulumi:"guestIpAddresses"`
	// The hardware version number. Valid range
	// is from 4 to 15. The hardware version cannot be downgraded. See [virtual
	// machine hardware compatibility][virtual-machine-hardware-compatibility] for
	// more details.
	HardwareVersion *int `pulumi:"hardwareVersion"`
	// An optional [managed object reference
	// ID][docs-about-morefs] of a host to put this virtual machine on. See the
	// section on virtual machine migration for
	// details on changing this value. If a `hostSystemId` is not supplied,
	// vSphere will select a host in the resource pool to place the virtual machine,
	// according to any defaults or DRS policies in place.
	HostSystemId *string `pulumi:"hostSystemId"`
	// The (non-nested) hardware virtualization setting for
	// this virtual machine. Can be one of `hvAuto`, `hvOn`, or `hvOff`. Default:
	// `hvAuto`.
	HvMode *string `pulumi:"hvMode"`
	// List of IP addresses and CIDR networks to
	// ignore while waiting for an available IP address using either of the waiters.
	// Any IP addresses in this list will be ignored if they show up so that the
	// waiter will continue to wait for a real IP address. Default: [].
	IgnoredGuestIps []string `pulumi:"ignoredGuestIps"`
	// This is flagged if the virtual machine has been imported, or the
	// state has been migrated from a previous version of the resource. It
	// influences the behavior of the first post-import apply operation. See the
	// section on importing below.
	Imported *bool `pulumi:"imported"`
	// Controls the scheduling delay of the
	// virtual machine. Use a higher sensitivity for applications that require lower
	// latency, such as VOIP, media player applications, or applications that
	// require frequent access to mouse or keyboard devices. Can be one of `low`,
	// `normal`, `medium`, or `high`.
	LatencySensitivity *string `pulumi:"latencySensitivity"`
	// The size of the virtual machine's memory, in MB.
	// Default: `1024` (1 GB).
	Memory *int `pulumi:"memory"`
	// Allow memory to be added to this
	// virtual machine while it is running.
	MemoryHotAddEnabled *bool `pulumi:"memoryHotAddEnabled"`
	// The maximum amount of memory (in MB) that this
	// virtual machine can consume, regardless of available resources. The default
	// is no limit.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// The amount of memory (in MB) that this
	// virtual machine is guaranteed. The default is no reservation.
	MemoryReservation *int `pulumi:"memoryReservation"`
	// The number of memory shares allocated to
	// the virtual machine when the `memoryShareLevel` is `custom`.
	MemoryShareCount *int `pulumi:"memoryShareCount"`
	// The allocation level for memory resources.
	// Can be one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	MemoryShareLevel *string `pulumi:"memoryShareLevel"`
	// The amount of time, in minutes, to wait
	// for a virtual machine migration to complete before failing. Default: 10
	// minutes. Also see the section on virtual machine
	// migration.
	MigrateWaitTimeout *int `pulumi:"migrateWaitTimeout"`
	// The machine object ID from VMWare
	Moid *string `pulumi:"moid"`
	// An alias for both `label` and `path`, the latter when
	// using `attach`. Required if not using `label`.
	Name *string `pulumi:"name"`
	// Enable nested hardware virtualization on
	// this virtual machine, facilitating nested virtualization in the guest.
	// Default: `false`.
	NestedHvEnabled *bool `pulumi:"nestedHvEnabled"`
	// A specification for a virtual NIC on this
	// virtual machine. See network interface options
	// below.
	NetworkInterfaces []VirtualMachineNetworkInterface `pulumi:"networkInterfaces"`
	// The number of cores per socket in this
	// virtual machine. The number of vCPUs on the virtual machine will be
	// `numCpus` divided by `numCoresPerSocket`. If specified, the value
	// supplied to `numCpus` must be evenly divisible by this value. Default: `1`.
	NumCoresPerSocket *int `pulumi:"numCoresPerSocket"`
	// The total number of virtual processor cores to assign
	// to this virtual machine. Default: `1`.
	NumCpus *int `pulumi:"numCpus"`
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout *int `pulumi:"poweronTimeout"`
	// Value internal to Terraform used to determine if a configuration set change requires a reboot.
	RebootRequired *bool `pulumi:"rebootRequired"`
	// The [managed object reference
	// ID][docs-about-morefs] of the resource pool to put this virtual machine in.
	// See the section on virtual machine migration
	// for details on changing this value.
	ResourcePoolId *string `pulumi:"resourcePoolId"`
	// Enable the execution of
	// post-power-on scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsAfterPowerOn *bool `pulumi:"runToolsScriptsAfterPowerOn"`
	// Enable the execution of
	// post-resume scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsAfterResume *bool `pulumi:"runToolsScriptsAfterResume"`
	// Enable the execution of
	// pre-reboot scripts when VMware tools is installed. Default: `false`.
	RunToolsScriptsBeforeGuestReboot *bool `pulumi:"runToolsScriptsBeforeGuestReboot"`
	// Enable the execution
	// of pre-shutdown scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestShutdown *bool `pulumi:"runToolsScriptsBeforeGuestShutdown"`
	// Enable the execution of
	// pre-standby scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestStandby *bool `pulumi:"runToolsScriptsBeforeGuestStandby"`
	// Mode for sharing the SCSI bus. The modes are
	// physicalSharing, virtualSharing, and noSharing. Default: `noSharing`.
	ScsiBusSharing *string `pulumi:"scsiBusSharing"`
	// The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	ScsiControllerCount *int `pulumi:"scsiControllerCount"`
	// The type of SCSI bus this virtual machine will have.
	// Can be one of lsilogic (LSI Logic Parallel), lsilogic-sas (LSI Logic SAS) or
	// pvscsi (VMware Paravirtual). Defualt: `pvscsi`.
	ScsiType *string `pulumi:"scsiType"`
	// The amount of time, in minutes, to wait
	// for a graceful guest shutdown when making necessary updates to the virtual
	// machine. If `forcePowerOff` is set to true, the VM will be force powered-off
	// after this timeout, otherwise an error is returned. Default: 3 minutes.
	ShutdownWaitTimeout *int `pulumi:"shutdownWaitTimeout"`
	// The UUID of the storage policy to assign to this disk.
	StoragePolicyId *string `pulumi:"storagePolicyId"`
	// The swap file placement policy for this
	// virtual machine. Can be one of `inherit`, `hostLocal`, or `vmDirectory`.
	// Default: `inherit`.
	SwapPlacementPolicy *string `pulumi:"swapPlacementPolicy"`
	// Enable guest clock synchronization with
	// the host. Requires VMware tools to be installed. Default: `false`.
	SyncTimeWithHost *bool `pulumi:"syncTimeWithHost"`
	// The IDs of any tags to attach to this resource. See
	// [here][docs-applying-tags] for a reference on how to apply tags.
	Tags []string `pulumi:"tags"`
	// The UUID of the virtual disk's VMDK file. This is used to track the
	// virtual disk on the virtual machine.
	Uuid *string `pulumi:"uuid"`
	// Optional vApp configuration. The only sub-key available
	// is `properties`, which is a key/value map of properties for virtual machines
	// imported from OVF or OVA files. See Using vApp properties to supply OVF/OVA
	// configuration for
	// more details.
	Vapp *VirtualMachineVapp `pulumi:"vapp"`
	// Computed value which is only valid for cloned virtual
	// machines. A list of vApp transport methods supported by the source virtual
	// machine or template.
	VappTransports []string `pulumi:"vappTransports"`
	// The state of VMware tools in the guest. This will
	// determine the proper course of action for some device operations.
	VmwareToolsStatus *string `pulumi:"vmwareToolsStatus"`
	// The path of the virtual machine's configuration file in the VM's
	// datastore.
	VmxPath *string `pulumi:"vmxPath"`
	// The amount of time, in minutes, to
	// wait for an available guest IP address on this virtual machine. This should
	// only be used if your version of VMware Tools does not allow the
	// `waitForGuestNetTimeout` waiter to be
	// used. A value less than 1 disables the waiter. Default: 0.
	WaitForGuestIpTimeout *int `pulumi:"waitForGuestIpTimeout"`
	// Controls whether or not the guest
	// network waiter waits for a routable address. When `false`, the waiter does
	// not wait for a default gateway, nor are IP addresses checked against any
	// discovered default gateways as part of its success criteria. This property is
	// ignored if the `waitForGuestIpTimeout`
	// waiter is used. Default: `true`.
	WaitForGuestNetRoutable *bool `pulumi:"waitForGuestNetRoutable"`
	// The amount of time, in minutes, to
	// wait for an available IP address on this virtual machine's NICs. Older
	// versions of VMware Tools do not populate this property. In those cases, this
	// waiter can be disabled and the
	// `waitForGuestIpTimeout` waiter can be used
	// instead. A value less than 1 disables the waiter. Default: 5 minutes.
	WaitForGuestNetTimeout *int `pulumi:"waitForGuestNetTimeout"`
}

type VirtualMachineState struct {
	// The guest name for the operating system
	// when `guestId` is `other` or `other-64`.
	AlternateGuestName pulumi.StringPtrInput
	// A user-provided description of the virtual machine.
	// The default is no annotation.
	Annotation pulumi.StringPtrInput
	// The number of milliseconds to wait before starting
	// the boot sequence. The default is no delay.
	BootDelay pulumi.IntPtrInput
	// The number of milliseconds to wait before
	// retrying the boot sequence. This only valid if `bootRetryEnabled` is true.
	// Default: `10000` (10 seconds).
	BootRetryDelay pulumi.IntPtrInput
	// If set to true, a virtual machine that
	// fails to boot will try again after the delay defined in `bootRetryDelay`.
	// Default: `false`.
	BootRetryEnabled pulumi.BoolPtrInput
	// A specification for a CDROM device on this virtual
	// machine. See CDROM options below.
	Cdrom VirtualMachineCdromPtrInput
	// A unique identifier for a given version of the last
	// configuration applied, such the timestamp of the last update to the
	// configuration.
	ChangeVersion pulumi.StringPtrInput
	// When specified, the VM will be created as a clone of a
	// specified template. Optional customization options can be submitted as well.
	// See creating a virtual machine from a
	// template for more details.
	Clone VirtualMachineClonePtrInput
	// Allow CPUs to be added to this virtual
	// machine while it is running.
	CpuHotAddEnabled pulumi.BoolPtrInput
	// Allow CPUs to be removed to this
	// virtual machine while it is running.
	CpuHotRemoveEnabled pulumi.BoolPtrInput
	// The maximum amount of CPU (in MHz) that this virtual
	// machine can consume, regardless of available resources. The default is no
	// limit.
	CpuLimit pulumi.IntPtrInput
	// Enable CPU performance
	// counters on this virtual machine. Default: `false`.
	CpuPerformanceCountersEnabled pulumi.BoolPtrInput
	// The amount of CPU (in MHz) that this virtual
	// machine is guaranteed. The default is no reservation.
	CpuReservation pulumi.IntPtrInput
	// The number of CPU shares allocated to the
	// virtual machine when the `cpuShareLevel` is `custom`.
	CpuShareCount pulumi.IntPtrInput
	// The allocation level for CPU resources. Can be
	// one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	CpuShareLevel pulumi.StringPtrInput
	// Map of custom attribute ids to attribute
	// value strings to set for virtual machine. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	CustomAttributes pulumi.StringMapInput
	// The [managed object reference
	// ID][docs-about-morefs] of the datastore cluster ID to use. This setting
	// applies to entire virtual machine and implies that you wish to use Storage
	// DRS with this virtual machine. See the section on virtual machine
	// migration for details on changing this value.
	DatastoreClusterId pulumi.StringPtrInput
	// The datastore ID that the ISO is located in.
	// Requried for using a datastore ISO. Conflicts with `clientDevice`.
	DatastoreId pulumi.StringPtrInput
	// The IP address selected by Terraform to be used for the provisioner.
	DefaultIpAddress pulumi.StringPtrInput
	// A specification for a virtual disk device on this virtual
	// machine. See disk options below.
	Disks VirtualMachineDiskArrayInput
	// When the `firmware` type is set to is
	// `efi`, this enables EFI secure boot. Default: `false`.
	EfiSecureBootEnabled pulumi.BoolPtrInput
	// Expose the UUIDs of attached virtual disks to
	// the virtual machine, allowing access to them in the guest. Default: `false`.
	EnableDiskUuid pulumi.BoolPtrInput
	// Enable logging of virtual machine events to a
	// log file stored in the virtual machine directory. Default: `false`.
	EnableLogging pulumi.BoolPtrInput
	// The EPT/RVI (hardware memory virtualization)
	// setting for this virtual machine. Can be one of `automatic`, `on`, or `off`.
	// Default: `automatic`.
	EptRviMode pulumi.StringPtrInput
	// Extra configuration data for this virtual
	// machine. Can be used to supply advanced parameters not normally in
	// configuration, such as instance metadata.
	ExtraConfig pulumi.StringMapInput
	// The firmware interface to use on the virtual machine.
	// Can be one of `bios` or `EFI`. Default: `bios`.
	Firmware pulumi.StringPtrInput
	// The path to the folder to put this virtual machine in,
	// relative to the datacenter that the resource pool is in.
	Folder pulumi.StringPtrInput
	// If a guest shutdown failed or timed out while
	// updating or destroying (see
	// `shutdownWaitTimeout`), force the power-off of
	// the virtual machine. Default: `true`.
	ForcePowerOff pulumi.BoolPtrInput
	// The guest ID for the operating system type. For a
	// full list of possible values, see [here][vmware-docs-guest-ids]. Default: `other-64`.
	GuestId pulumi.StringPtrInput
	// The current list of IP addresses on this machine,
	// including the value of `defaultIpAddress`. If VMware tools is not running
	// on the virtual machine, or if the VM is powered off, this list will be empty.
	// * `moid`: The [managed object reference ID][docs-about-morefs] of the created
	// virtual machine.
	GuestIpAddresses pulumi.StringArrayInput
	// The hardware version number. Valid range
	// is from 4 to 15. The hardware version cannot be downgraded. See [virtual
	// machine hardware compatibility][virtual-machine-hardware-compatibility] for
	// more details.
	HardwareVersion pulumi.IntPtrInput
	// An optional [managed object reference
	// ID][docs-about-morefs] of a host to put this virtual machine on. See the
	// section on virtual machine migration for
	// details on changing this value. If a `hostSystemId` is not supplied,
	// vSphere will select a host in the resource pool to place the virtual machine,
	// according to any defaults or DRS policies in place.
	HostSystemId pulumi.StringPtrInput
	// The (non-nested) hardware virtualization setting for
	// this virtual machine. Can be one of `hvAuto`, `hvOn`, or `hvOff`. Default:
	// `hvAuto`.
	HvMode pulumi.StringPtrInput
	// List of IP addresses and CIDR networks to
	// ignore while waiting for an available IP address using either of the waiters.
	// Any IP addresses in this list will be ignored if they show up so that the
	// waiter will continue to wait for a real IP address. Default: [].
	IgnoredGuestIps pulumi.StringArrayInput
	// This is flagged if the virtual machine has been imported, or the
	// state has been migrated from a previous version of the resource. It
	// influences the behavior of the first post-import apply operation. See the
	// section on importing below.
	Imported pulumi.BoolPtrInput
	// Controls the scheduling delay of the
	// virtual machine. Use a higher sensitivity for applications that require lower
	// latency, such as VOIP, media player applications, or applications that
	// require frequent access to mouse or keyboard devices. Can be one of `low`,
	// `normal`, `medium`, or `high`.
	LatencySensitivity pulumi.StringPtrInput
	// The size of the virtual machine's memory, in MB.
	// Default: `1024` (1 GB).
	Memory pulumi.IntPtrInput
	// Allow memory to be added to this
	// virtual machine while it is running.
	MemoryHotAddEnabled pulumi.BoolPtrInput
	// The maximum amount of memory (in MB) that this
	// virtual machine can consume, regardless of available resources. The default
	// is no limit.
	MemoryLimit pulumi.IntPtrInput
	// The amount of memory (in MB) that this
	// virtual machine is guaranteed. The default is no reservation.
	MemoryReservation pulumi.IntPtrInput
	// The number of memory shares allocated to
	// the virtual machine when the `memoryShareLevel` is `custom`.
	MemoryShareCount pulumi.IntPtrInput
	// The allocation level for memory resources.
	// Can be one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	MemoryShareLevel pulumi.StringPtrInput
	// The amount of time, in minutes, to wait
	// for a virtual machine migration to complete before failing. Default: 10
	// minutes. Also see the section on virtual machine
	// migration.
	MigrateWaitTimeout pulumi.IntPtrInput
	// The machine object ID from VMWare
	Moid pulumi.StringPtrInput
	// An alias for both `label` and `path`, the latter when
	// using `attach`. Required if not using `label`.
	Name pulumi.StringPtrInput
	// Enable nested hardware virtualization on
	// this virtual machine, facilitating nested virtualization in the guest.
	// Default: `false`.
	NestedHvEnabled pulumi.BoolPtrInput
	// A specification for a virtual NIC on this
	// virtual machine. See network interface options
	// below.
	NetworkInterfaces VirtualMachineNetworkInterfaceArrayInput
	// The number of cores per socket in this
	// virtual machine. The number of vCPUs on the virtual machine will be
	// `numCpus` divided by `numCoresPerSocket`. If specified, the value
	// supplied to `numCpus` must be evenly divisible by this value. Default: `1`.
	NumCoresPerSocket pulumi.IntPtrInput
	// The total number of virtual processor cores to assign
	// to this virtual machine. Default: `1`.
	NumCpus pulumi.IntPtrInput
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout pulumi.IntPtrInput
	// Value internal to Terraform used to determine if a configuration set change requires a reboot.
	RebootRequired pulumi.BoolPtrInput
	// The [managed object reference
	// ID][docs-about-morefs] of the resource pool to put this virtual machine in.
	// See the section on virtual machine migration
	// for details on changing this value.
	ResourcePoolId pulumi.StringPtrInput
	// Enable the execution of
	// post-power-on scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsAfterPowerOn pulumi.BoolPtrInput
	// Enable the execution of
	// post-resume scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsAfterResume pulumi.BoolPtrInput
	// Enable the execution of
	// pre-reboot scripts when VMware tools is installed. Default: `false`.
	RunToolsScriptsBeforeGuestReboot pulumi.BoolPtrInput
	// Enable the execution
	// of pre-shutdown scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestShutdown pulumi.BoolPtrInput
	// Enable the execution of
	// pre-standby scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestStandby pulumi.BoolPtrInput
	// Mode for sharing the SCSI bus. The modes are
	// physicalSharing, virtualSharing, and noSharing. Default: `noSharing`.
	ScsiBusSharing pulumi.StringPtrInput
	// The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	ScsiControllerCount pulumi.IntPtrInput
	// The type of SCSI bus this virtual machine will have.
	// Can be one of lsilogic (LSI Logic Parallel), lsilogic-sas (LSI Logic SAS) or
	// pvscsi (VMware Paravirtual). Defualt: `pvscsi`.
	ScsiType pulumi.StringPtrInput
	// The amount of time, in minutes, to wait
	// for a graceful guest shutdown when making necessary updates to the virtual
	// machine. If `forcePowerOff` is set to true, the VM will be force powered-off
	// after this timeout, otherwise an error is returned. Default: 3 minutes.
	ShutdownWaitTimeout pulumi.IntPtrInput
	// The UUID of the storage policy to assign to this disk.
	StoragePolicyId pulumi.StringPtrInput
	// The swap file placement policy for this
	// virtual machine. Can be one of `inherit`, `hostLocal`, or `vmDirectory`.
	// Default: `inherit`.
	SwapPlacementPolicy pulumi.StringPtrInput
	// Enable guest clock synchronization with
	// the host. Requires VMware tools to be installed. Default: `false`.
	SyncTimeWithHost pulumi.BoolPtrInput
	// The IDs of any tags to attach to this resource. See
	// [here][docs-applying-tags] for a reference on how to apply tags.
	Tags pulumi.StringArrayInput
	// The UUID of the virtual disk's VMDK file. This is used to track the
	// virtual disk on the virtual machine.
	Uuid pulumi.StringPtrInput
	// Optional vApp configuration. The only sub-key available
	// is `properties`, which is a key/value map of properties for virtual machines
	// imported from OVF or OVA files. See Using vApp properties to supply OVF/OVA
	// configuration for
	// more details.
	Vapp VirtualMachineVappPtrInput
	// Computed value which is only valid for cloned virtual
	// machines. A list of vApp transport methods supported by the source virtual
	// machine or template.
	VappTransports pulumi.StringArrayInput
	// The state of VMware tools in the guest. This will
	// determine the proper course of action for some device operations.
	VmwareToolsStatus pulumi.StringPtrInput
	// The path of the virtual machine's configuration file in the VM's
	// datastore.
	VmxPath pulumi.StringPtrInput
	// The amount of time, in minutes, to
	// wait for an available guest IP address on this virtual machine. This should
	// only be used if your version of VMware Tools does not allow the
	// `waitForGuestNetTimeout` waiter to be
	// used. A value less than 1 disables the waiter. Default: 0.
	WaitForGuestIpTimeout pulumi.IntPtrInput
	// Controls whether or not the guest
	// network waiter waits for a routable address. When `false`, the waiter does
	// not wait for a default gateway, nor are IP addresses checked against any
	// discovered default gateways as part of its success criteria. This property is
	// ignored if the `waitForGuestIpTimeout`
	// waiter is used. Default: `true`.
	WaitForGuestNetRoutable pulumi.BoolPtrInput
	// The amount of time, in minutes, to
	// wait for an available IP address on this virtual machine's NICs. Older
	// versions of VMware Tools do not populate this property. In those cases, this
	// waiter can be disabled and the
	// `waitForGuestIpTimeout` waiter can be used
	// instead. A value less than 1 disables the waiter. Default: 5 minutes.
	WaitForGuestNetTimeout pulumi.IntPtrInput
}

func (VirtualMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineState)(nil)).Elem()
}

type virtualMachineArgs struct {
	// The guest name for the operating system
	// when `guestId` is `other` or `other-64`.
	AlternateGuestName *string `pulumi:"alternateGuestName"`
	// A user-provided description of the virtual machine.
	// The default is no annotation.
	Annotation *string `pulumi:"annotation"`
	// The number of milliseconds to wait before starting
	// the boot sequence. The default is no delay.
	BootDelay *int `pulumi:"bootDelay"`
	// The number of milliseconds to wait before
	// retrying the boot sequence. This only valid if `bootRetryEnabled` is true.
	// Default: `10000` (10 seconds).
	BootRetryDelay *int `pulumi:"bootRetryDelay"`
	// If set to true, a virtual machine that
	// fails to boot will try again after the delay defined in `bootRetryDelay`.
	// Default: `false`.
	BootRetryEnabled *bool `pulumi:"bootRetryEnabled"`
	// A specification for a CDROM device on this virtual
	// machine. See CDROM options below.
	Cdrom *VirtualMachineCdrom `pulumi:"cdrom"`
	// When specified, the VM will be created as a clone of a
	// specified template. Optional customization options can be submitted as well.
	// See creating a virtual machine from a
	// template for more details.
	Clone *VirtualMachineClone `pulumi:"clone"`
	// Allow CPUs to be added to this virtual
	// machine while it is running.
	CpuHotAddEnabled *bool `pulumi:"cpuHotAddEnabled"`
	// Allow CPUs to be removed to this
	// virtual machine while it is running.
	CpuHotRemoveEnabled *bool `pulumi:"cpuHotRemoveEnabled"`
	// The maximum amount of CPU (in MHz) that this virtual
	// machine can consume, regardless of available resources. The default is no
	// limit.
	CpuLimit *int `pulumi:"cpuLimit"`
	// Enable CPU performance
	// counters on this virtual machine. Default: `false`.
	CpuPerformanceCountersEnabled *bool `pulumi:"cpuPerformanceCountersEnabled"`
	// The amount of CPU (in MHz) that this virtual
	// machine is guaranteed. The default is no reservation.
	CpuReservation *int `pulumi:"cpuReservation"`
	// The number of CPU shares allocated to the
	// virtual machine when the `cpuShareLevel` is `custom`.
	CpuShareCount *int `pulumi:"cpuShareCount"`
	// The allocation level for CPU resources. Can be
	// one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	CpuShareLevel *string `pulumi:"cpuShareLevel"`
	// Map of custom attribute ids to attribute
	// value strings to set for virtual machine. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// The [managed object reference
	// ID][docs-about-morefs] of the datastore cluster ID to use. This setting
	// applies to entire virtual machine and implies that you wish to use Storage
	// DRS with this virtual machine. See the section on virtual machine
	// migration for details on changing this value.
	DatastoreClusterId *string `pulumi:"datastoreClusterId"`
	// The datastore ID that the ISO is located in.
	// Requried for using a datastore ISO. Conflicts with `clientDevice`.
	DatastoreId *string `pulumi:"datastoreId"`
	// A specification for a virtual disk device on this virtual
	// machine. See disk options below.
	Disks []VirtualMachineDisk `pulumi:"disks"`
	// When the `firmware` type is set to is
	// `efi`, this enables EFI secure boot. Default: `false`.
	EfiSecureBootEnabled *bool `pulumi:"efiSecureBootEnabled"`
	// Expose the UUIDs of attached virtual disks to
	// the virtual machine, allowing access to them in the guest. Default: `false`.
	EnableDiskUuid *bool `pulumi:"enableDiskUuid"`
	// Enable logging of virtual machine events to a
	// log file stored in the virtual machine directory. Default: `false`.
	EnableLogging *bool `pulumi:"enableLogging"`
	// The EPT/RVI (hardware memory virtualization)
	// setting for this virtual machine. Can be one of `automatic`, `on`, or `off`.
	// Default: `automatic`.
	EptRviMode *string `pulumi:"eptRviMode"`
	// Extra configuration data for this virtual
	// machine. Can be used to supply advanced parameters not normally in
	// configuration, such as instance metadata.
	ExtraConfig map[string]string `pulumi:"extraConfig"`
	// The firmware interface to use on the virtual machine.
	// Can be one of `bios` or `EFI`. Default: `bios`.
	Firmware *string `pulumi:"firmware"`
	// The path to the folder to put this virtual machine in,
	// relative to the datacenter that the resource pool is in.
	Folder *string `pulumi:"folder"`
	// If a guest shutdown failed or timed out while
	// updating or destroying (see
	// `shutdownWaitTimeout`), force the power-off of
	// the virtual machine. Default: `true`.
	ForcePowerOff *bool `pulumi:"forcePowerOff"`
	// The guest ID for the operating system type. For a
	// full list of possible values, see [here][vmware-docs-guest-ids]. Default: `other-64`.
	GuestId *string `pulumi:"guestId"`
	// The hardware version number. Valid range
	// is from 4 to 15. The hardware version cannot be downgraded. See [virtual
	// machine hardware compatibility][virtual-machine-hardware-compatibility] for
	// more details.
	HardwareVersion *int `pulumi:"hardwareVersion"`
	// An optional [managed object reference
	// ID][docs-about-morefs] of a host to put this virtual machine on. See the
	// section on virtual machine migration for
	// details on changing this value. If a `hostSystemId` is not supplied,
	// vSphere will select a host in the resource pool to place the virtual machine,
	// according to any defaults or DRS policies in place.
	HostSystemId *string `pulumi:"hostSystemId"`
	// The (non-nested) hardware virtualization setting for
	// this virtual machine. Can be one of `hvAuto`, `hvOn`, or `hvOff`. Default:
	// `hvAuto`.
	HvMode *string `pulumi:"hvMode"`
	// List of IP addresses and CIDR networks to
	// ignore while waiting for an available IP address using either of the waiters.
	// Any IP addresses in this list will be ignored if they show up so that the
	// waiter will continue to wait for a real IP address. Default: [].
	IgnoredGuestIps []string `pulumi:"ignoredGuestIps"`
	// Controls the scheduling delay of the
	// virtual machine. Use a higher sensitivity for applications that require lower
	// latency, such as VOIP, media player applications, or applications that
	// require frequent access to mouse or keyboard devices. Can be one of `low`,
	// `normal`, `medium`, or `high`.
	LatencySensitivity *string `pulumi:"latencySensitivity"`
	// The size of the virtual machine's memory, in MB.
	// Default: `1024` (1 GB).
	Memory *int `pulumi:"memory"`
	// Allow memory to be added to this
	// virtual machine while it is running.
	MemoryHotAddEnabled *bool `pulumi:"memoryHotAddEnabled"`
	// The maximum amount of memory (in MB) that this
	// virtual machine can consume, regardless of available resources. The default
	// is no limit.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// The amount of memory (in MB) that this
	// virtual machine is guaranteed. The default is no reservation.
	MemoryReservation *int `pulumi:"memoryReservation"`
	// The number of memory shares allocated to
	// the virtual machine when the `memoryShareLevel` is `custom`.
	MemoryShareCount *int `pulumi:"memoryShareCount"`
	// The allocation level for memory resources.
	// Can be one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	MemoryShareLevel *string `pulumi:"memoryShareLevel"`
	// The amount of time, in minutes, to wait
	// for a virtual machine migration to complete before failing. Default: 10
	// minutes. Also see the section on virtual machine
	// migration.
	MigrateWaitTimeout *int `pulumi:"migrateWaitTimeout"`
	// An alias for both `label` and `path`, the latter when
	// using `attach`. Required if not using `label`.
	Name *string `pulumi:"name"`
	// Enable nested hardware virtualization on
	// this virtual machine, facilitating nested virtualization in the guest.
	// Default: `false`.
	NestedHvEnabled *bool `pulumi:"nestedHvEnabled"`
	// A specification for a virtual NIC on this
	// virtual machine. See network interface options
	// below.
	NetworkInterfaces []VirtualMachineNetworkInterface `pulumi:"networkInterfaces"`
	// The number of cores per socket in this
	// virtual machine. The number of vCPUs on the virtual machine will be
	// `numCpus` divided by `numCoresPerSocket`. If specified, the value
	// supplied to `numCpus` must be evenly divisible by this value. Default: `1`.
	NumCoresPerSocket *int `pulumi:"numCoresPerSocket"`
	// The total number of virtual processor cores to assign
	// to this virtual machine. Default: `1`.
	NumCpus *int `pulumi:"numCpus"`
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout *int `pulumi:"poweronTimeout"`
	// The [managed object reference
	// ID][docs-about-morefs] of the resource pool to put this virtual machine in.
	// See the section on virtual machine migration
	// for details on changing this value.
	ResourcePoolId string `pulumi:"resourcePoolId"`
	// Enable the execution of
	// post-power-on scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsAfterPowerOn *bool `pulumi:"runToolsScriptsAfterPowerOn"`
	// Enable the execution of
	// post-resume scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsAfterResume *bool `pulumi:"runToolsScriptsAfterResume"`
	// Enable the execution of
	// pre-reboot scripts when VMware tools is installed. Default: `false`.
	RunToolsScriptsBeforeGuestReboot *bool `pulumi:"runToolsScriptsBeforeGuestReboot"`
	// Enable the execution
	// of pre-shutdown scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestShutdown *bool `pulumi:"runToolsScriptsBeforeGuestShutdown"`
	// Enable the execution of
	// pre-standby scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestStandby *bool `pulumi:"runToolsScriptsBeforeGuestStandby"`
	// Mode for sharing the SCSI bus. The modes are
	// physicalSharing, virtualSharing, and noSharing. Default: `noSharing`.
	ScsiBusSharing *string `pulumi:"scsiBusSharing"`
	// The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	ScsiControllerCount *int `pulumi:"scsiControllerCount"`
	// The type of SCSI bus this virtual machine will have.
	// Can be one of lsilogic (LSI Logic Parallel), lsilogic-sas (LSI Logic SAS) or
	// pvscsi (VMware Paravirtual). Defualt: `pvscsi`.
	ScsiType *string `pulumi:"scsiType"`
	// The amount of time, in minutes, to wait
	// for a graceful guest shutdown when making necessary updates to the virtual
	// machine. If `forcePowerOff` is set to true, the VM will be force powered-off
	// after this timeout, otherwise an error is returned. Default: 3 minutes.
	ShutdownWaitTimeout *int `pulumi:"shutdownWaitTimeout"`
	// The UUID of the storage policy to assign to this disk.
	StoragePolicyId *string `pulumi:"storagePolicyId"`
	// The swap file placement policy for this
	// virtual machine. Can be one of `inherit`, `hostLocal`, or `vmDirectory`.
	// Default: `inherit`.
	SwapPlacementPolicy *string `pulumi:"swapPlacementPolicy"`
	// Enable guest clock synchronization with
	// the host. Requires VMware tools to be installed. Default: `false`.
	SyncTimeWithHost *bool `pulumi:"syncTimeWithHost"`
	// The IDs of any tags to attach to this resource. See
	// [here][docs-applying-tags] for a reference on how to apply tags.
	Tags []string `pulumi:"tags"`
	// Optional vApp configuration. The only sub-key available
	// is `properties`, which is a key/value map of properties for virtual machines
	// imported from OVF or OVA files. See Using vApp properties to supply OVF/OVA
	// configuration for
	// more details.
	Vapp *VirtualMachineVapp `pulumi:"vapp"`
	// The amount of time, in minutes, to
	// wait for an available guest IP address on this virtual machine. This should
	// only be used if your version of VMware Tools does not allow the
	// `waitForGuestNetTimeout` waiter to be
	// used. A value less than 1 disables the waiter. Default: 0.
	WaitForGuestIpTimeout *int `pulumi:"waitForGuestIpTimeout"`
	// Controls whether or not the guest
	// network waiter waits for a routable address. When `false`, the waiter does
	// not wait for a default gateway, nor are IP addresses checked against any
	// discovered default gateways as part of its success criteria. This property is
	// ignored if the `waitForGuestIpTimeout`
	// waiter is used. Default: `true`.
	WaitForGuestNetRoutable *bool `pulumi:"waitForGuestNetRoutable"`
	// The amount of time, in minutes, to
	// wait for an available IP address on this virtual machine's NICs. Older
	// versions of VMware Tools do not populate this property. In those cases, this
	// waiter can be disabled and the
	// `waitForGuestIpTimeout` waiter can be used
	// instead. A value less than 1 disables the waiter. Default: 5 minutes.
	WaitForGuestNetTimeout *int `pulumi:"waitForGuestNetTimeout"`
}

// The set of arguments for constructing a VirtualMachine resource.
type VirtualMachineArgs struct {
	// The guest name for the operating system
	// when `guestId` is `other` or `other-64`.
	AlternateGuestName pulumi.StringPtrInput
	// A user-provided description of the virtual machine.
	// The default is no annotation.
	Annotation pulumi.StringPtrInput
	// The number of milliseconds to wait before starting
	// the boot sequence. The default is no delay.
	BootDelay pulumi.IntPtrInput
	// The number of milliseconds to wait before
	// retrying the boot sequence. This only valid if `bootRetryEnabled` is true.
	// Default: `10000` (10 seconds).
	BootRetryDelay pulumi.IntPtrInput
	// If set to true, a virtual machine that
	// fails to boot will try again after the delay defined in `bootRetryDelay`.
	// Default: `false`.
	BootRetryEnabled pulumi.BoolPtrInput
	// A specification for a CDROM device on this virtual
	// machine. See CDROM options below.
	Cdrom VirtualMachineCdromPtrInput
	// When specified, the VM will be created as a clone of a
	// specified template. Optional customization options can be submitted as well.
	// See creating a virtual machine from a
	// template for more details.
	Clone VirtualMachineClonePtrInput
	// Allow CPUs to be added to this virtual
	// machine while it is running.
	CpuHotAddEnabled pulumi.BoolPtrInput
	// Allow CPUs to be removed to this
	// virtual machine while it is running.
	CpuHotRemoveEnabled pulumi.BoolPtrInput
	// The maximum amount of CPU (in MHz) that this virtual
	// machine can consume, regardless of available resources. The default is no
	// limit.
	CpuLimit pulumi.IntPtrInput
	// Enable CPU performance
	// counters on this virtual machine. Default: `false`.
	CpuPerformanceCountersEnabled pulumi.BoolPtrInput
	// The amount of CPU (in MHz) that this virtual
	// machine is guaranteed. The default is no reservation.
	CpuReservation pulumi.IntPtrInput
	// The number of CPU shares allocated to the
	// virtual machine when the `cpuShareLevel` is `custom`.
	CpuShareCount pulumi.IntPtrInput
	// The allocation level for CPU resources. Can be
	// one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	CpuShareLevel pulumi.StringPtrInput
	// Map of custom attribute ids to attribute
	// value strings to set for virtual machine. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	CustomAttributes pulumi.StringMapInput
	// The [managed object reference
	// ID][docs-about-morefs] of the datastore cluster ID to use. This setting
	// applies to entire virtual machine and implies that you wish to use Storage
	// DRS with this virtual machine. See the section on virtual machine
	// migration for details on changing this value.
	DatastoreClusterId pulumi.StringPtrInput
	// The datastore ID that the ISO is located in.
	// Requried for using a datastore ISO. Conflicts with `clientDevice`.
	DatastoreId pulumi.StringPtrInput
	// A specification for a virtual disk device on this virtual
	// machine. See disk options below.
	Disks VirtualMachineDiskArrayInput
	// When the `firmware` type is set to is
	// `efi`, this enables EFI secure boot. Default: `false`.
	EfiSecureBootEnabled pulumi.BoolPtrInput
	// Expose the UUIDs of attached virtual disks to
	// the virtual machine, allowing access to them in the guest. Default: `false`.
	EnableDiskUuid pulumi.BoolPtrInput
	// Enable logging of virtual machine events to a
	// log file stored in the virtual machine directory. Default: `false`.
	EnableLogging pulumi.BoolPtrInput
	// The EPT/RVI (hardware memory virtualization)
	// setting for this virtual machine. Can be one of `automatic`, `on`, or `off`.
	// Default: `automatic`.
	EptRviMode pulumi.StringPtrInput
	// Extra configuration data for this virtual
	// machine. Can be used to supply advanced parameters not normally in
	// configuration, such as instance metadata.
	ExtraConfig pulumi.StringMapInput
	// The firmware interface to use on the virtual machine.
	// Can be one of `bios` or `EFI`. Default: `bios`.
	Firmware pulumi.StringPtrInput
	// The path to the folder to put this virtual machine in,
	// relative to the datacenter that the resource pool is in.
	Folder pulumi.StringPtrInput
	// If a guest shutdown failed or timed out while
	// updating or destroying (see
	// `shutdownWaitTimeout`), force the power-off of
	// the virtual machine. Default: `true`.
	ForcePowerOff pulumi.BoolPtrInput
	// The guest ID for the operating system type. For a
	// full list of possible values, see [here][vmware-docs-guest-ids]. Default: `other-64`.
	GuestId pulumi.StringPtrInput
	// The hardware version number. Valid range
	// is from 4 to 15. The hardware version cannot be downgraded. See [virtual
	// machine hardware compatibility][virtual-machine-hardware-compatibility] for
	// more details.
	HardwareVersion pulumi.IntPtrInput
	// An optional [managed object reference
	// ID][docs-about-morefs] of a host to put this virtual machine on. See the
	// section on virtual machine migration for
	// details on changing this value. If a `hostSystemId` is not supplied,
	// vSphere will select a host in the resource pool to place the virtual machine,
	// according to any defaults or DRS policies in place.
	HostSystemId pulumi.StringPtrInput
	// The (non-nested) hardware virtualization setting for
	// this virtual machine. Can be one of `hvAuto`, `hvOn`, or `hvOff`. Default:
	// `hvAuto`.
	HvMode pulumi.StringPtrInput
	// List of IP addresses and CIDR networks to
	// ignore while waiting for an available IP address using either of the waiters.
	// Any IP addresses in this list will be ignored if they show up so that the
	// waiter will continue to wait for a real IP address. Default: [].
	IgnoredGuestIps pulumi.StringArrayInput
	// Controls the scheduling delay of the
	// virtual machine. Use a higher sensitivity for applications that require lower
	// latency, such as VOIP, media player applications, or applications that
	// require frequent access to mouse or keyboard devices. Can be one of `low`,
	// `normal`, `medium`, or `high`.
	LatencySensitivity pulumi.StringPtrInput
	// The size of the virtual machine's memory, in MB.
	// Default: `1024` (1 GB).
	Memory pulumi.IntPtrInput
	// Allow memory to be added to this
	// virtual machine while it is running.
	MemoryHotAddEnabled pulumi.BoolPtrInput
	// The maximum amount of memory (in MB) that this
	// virtual machine can consume, regardless of available resources. The default
	// is no limit.
	MemoryLimit pulumi.IntPtrInput
	// The amount of memory (in MB) that this
	// virtual machine is guaranteed. The default is no reservation.
	MemoryReservation pulumi.IntPtrInput
	// The number of memory shares allocated to
	// the virtual machine when the `memoryShareLevel` is `custom`.
	MemoryShareCount pulumi.IntPtrInput
	// The allocation level for memory resources.
	// Can be one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	MemoryShareLevel pulumi.StringPtrInput
	// The amount of time, in minutes, to wait
	// for a virtual machine migration to complete before failing. Default: 10
	// minutes. Also see the section on virtual machine
	// migration.
	MigrateWaitTimeout pulumi.IntPtrInput
	// An alias for both `label` and `path`, the latter when
	// using `attach`. Required if not using `label`.
	Name pulumi.StringPtrInput
	// Enable nested hardware virtualization on
	// this virtual machine, facilitating nested virtualization in the guest.
	// Default: `false`.
	NestedHvEnabled pulumi.BoolPtrInput
	// A specification for a virtual NIC on this
	// virtual machine. See network interface options
	// below.
	NetworkInterfaces VirtualMachineNetworkInterfaceArrayInput
	// The number of cores per socket in this
	// virtual machine. The number of vCPUs on the virtual machine will be
	// `numCpus` divided by `numCoresPerSocket`. If specified, the value
	// supplied to `numCpus` must be evenly divisible by this value. Default: `1`.
	NumCoresPerSocket pulumi.IntPtrInput
	// The total number of virtual processor cores to assign
	// to this virtual machine. Default: `1`.
	NumCpus pulumi.IntPtrInput
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout pulumi.IntPtrInput
	// The [managed object reference
	// ID][docs-about-morefs] of the resource pool to put this virtual machine in.
	// See the section on virtual machine migration
	// for details on changing this value.
	ResourcePoolId pulumi.StringInput
	// Enable the execution of
	// post-power-on scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsAfterPowerOn pulumi.BoolPtrInput
	// Enable the execution of
	// post-resume scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsAfterResume pulumi.BoolPtrInput
	// Enable the execution of
	// pre-reboot scripts when VMware tools is installed. Default: `false`.
	RunToolsScriptsBeforeGuestReboot pulumi.BoolPtrInput
	// Enable the execution
	// of pre-shutdown scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestShutdown pulumi.BoolPtrInput
	// Enable the execution of
	// pre-standby scripts when VMware tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestStandby pulumi.BoolPtrInput
	// Mode for sharing the SCSI bus. The modes are
	// physicalSharing, virtualSharing, and noSharing. Default: `noSharing`.
	ScsiBusSharing pulumi.StringPtrInput
	// The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	ScsiControllerCount pulumi.IntPtrInput
	// The type of SCSI bus this virtual machine will have.
	// Can be one of lsilogic (LSI Logic Parallel), lsilogic-sas (LSI Logic SAS) or
	// pvscsi (VMware Paravirtual). Defualt: `pvscsi`.
	ScsiType pulumi.StringPtrInput
	// The amount of time, in minutes, to wait
	// for a graceful guest shutdown when making necessary updates to the virtual
	// machine. If `forcePowerOff` is set to true, the VM will be force powered-off
	// after this timeout, otherwise an error is returned. Default: 3 minutes.
	ShutdownWaitTimeout pulumi.IntPtrInput
	// The UUID of the storage policy to assign to this disk.
	StoragePolicyId pulumi.StringPtrInput
	// The swap file placement policy for this
	// virtual machine. Can be one of `inherit`, `hostLocal`, or `vmDirectory`.
	// Default: `inherit`.
	SwapPlacementPolicy pulumi.StringPtrInput
	// Enable guest clock synchronization with
	// the host. Requires VMware tools to be installed. Default: `false`.
	SyncTimeWithHost pulumi.BoolPtrInput
	// The IDs of any tags to attach to this resource. See
	// [here][docs-applying-tags] for a reference on how to apply tags.
	Tags pulumi.StringArrayInput
	// Optional vApp configuration. The only sub-key available
	// is `properties`, which is a key/value map of properties for virtual machines
	// imported from OVF or OVA files. See Using vApp properties to supply OVF/OVA
	// configuration for
	// more details.
	Vapp VirtualMachineVappPtrInput
	// The amount of time, in minutes, to
	// wait for an available guest IP address on this virtual machine. This should
	// only be used if your version of VMware Tools does not allow the
	// `waitForGuestNetTimeout` waiter to be
	// used. A value less than 1 disables the waiter. Default: 0.
	WaitForGuestIpTimeout pulumi.IntPtrInput
	// Controls whether or not the guest
	// network waiter waits for a routable address. When `false`, the waiter does
	// not wait for a default gateway, nor are IP addresses checked against any
	// discovered default gateways as part of its success criteria. This property is
	// ignored if the `waitForGuestIpTimeout`
	// waiter is used. Default: `true`.
	WaitForGuestNetRoutable pulumi.BoolPtrInput
	// The amount of time, in minutes, to
	// wait for an available IP address on this virtual machine's NICs. Older
	// versions of VMware Tools do not populate this property. In those cases, this
	// waiter can be disabled and the
	// `waitForGuestIpTimeout` waiter can be used
	// instead. A value less than 1 disables the waiter. Default: 5 minutes.
	WaitForGuestNetTimeout pulumi.IntPtrInput
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineArgs)(nil)).Elem()
}
