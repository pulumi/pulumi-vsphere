// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ### Additional Importing Requirements
//
// Many of the requirements for [cloning](#additional-requirements-and-notes-for-cloning) apply to importing. Although importing writes directly to the Terraform state, some rules can not be enforced during import time, so every effort should be made to ensure the correctness of the configuration before the import.
//
// The following requirements apply to import:
//
// * The disks must have a [`label`](#label) argument assigned in a convention matching `Hard Disk`, starting with disk number 0, based on each virtual disk order on the SCSI bus. As an example, a disk on SCSI controller `0` with a unit number of `0` would be labeled as `Hard Disk 0`, a disk on the same controller with a unit number of `1` would be `Hard Disk 1`, but the next disk, which is on SCSI controller `1` with a unit number of `0`, still becomes `Hard Disk 2`.
//
// * Disks are always imported with [`keep_on_remove`](#keep_on_remove) enabled until the first `pulumi up` run which will remove the setting for known disks. This process safeguards against naming or accounting mistakes in the disk configuration.
//
// * The storage controller count for the resource is set to the number of contiguous storage controllers found, starting with the controller at SCSI bus number `0`. If no storage controllers are discovered, the virtual machine is not eligible for import. For maximum compatibility, ensure that the virtual machine has the exact number of storage controllers needed and set the storage controller count accordingly.
//
// After importing, you should run `pulumi preview`. Unless you have changed anything else in the configuration that would cause other attributes to change. The only difference should be configuration-only changes, which are typically comprised of:
//
// * The [`imported`](#imported) flag will transition from `true` to `false`.
//
// * The [`keep_on_remove`](#keep_on_remove) of known disks will transition from `true` to `false`.
//
// * Configuration supplied in the [`clone`](#clone) block, if present, will be persisted to state. This initial persistence operation does not perform any cloning or customization actions, nor does it force a new resource. After the first apply operation, further changes to `clone` will force the creation of a new resource.
//
// These changes only update Terraform state when applied. Hence, it is safe to run when the virtual machine is running. If more settings are modified, you may need to plan maintenance accordingly for any necessary virtual machine re-configurations.
type VirtualMachine struct {
	pulumi.CustomResourceState

	// The guest name for the operating system when guestId is otherGuest or otherGuest64.
	AlternateGuestName pulumi.StringPtrOutput `pulumi:"alternateGuestName"`
	// User-provided description of the virtual machine.
	Annotation pulumi.StringOutput `pulumi:"annotation"`
	// The number of milliseconds to wait before starting the boot sequence.
	BootDelay pulumi.IntPtrOutput `pulumi:"bootDelay"`
	// The number of milliseconds to wait before retrying the boot sequence. This only valid if bootRetryEnabled is true.
	BootRetryDelay pulumi.IntPtrOutput `pulumi:"bootRetryDelay"`
	// If set to true, a virtual machine that fails to boot will try again after the delay defined in boot_retry_delay.
	BootRetryEnabled pulumi.BoolPtrOutput `pulumi:"bootRetryEnabled"`
	// A specification for a CDROM device on this virtual machine.
	Cdroms VirtualMachineCdromArrayOutput `pulumi:"cdroms"`
	// A unique identifier for a given version of the last configuration was applied.
	ChangeVersion pulumi.StringOutput `pulumi:"changeVersion"`
	// A specification for cloning a virtual machine from template.
	Clone VirtualMachineClonePtrOutput `pulumi:"clone"`
	// Allow CPUs to be added to this virtual machine while it is running.
	CpuHotAddEnabled pulumi.BoolPtrOutput `pulumi:"cpuHotAddEnabled"`
	// Allow CPUs to be added to this virtual machine while it is running.
	CpuHotRemoveEnabled pulumi.BoolPtrOutput `pulumi:"cpuHotRemoveEnabled"`
	// The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
	// resources.
	CpuLimit pulumi.IntPtrOutput `pulumi:"cpuLimit"`
	// Enable CPU performance counters on this virtual machine.
	CpuPerformanceCountersEnabled pulumi.BoolPtrOutput `pulumi:"cpuPerformanceCountersEnabled"`
	// The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
	CpuReservation pulumi.IntPtrOutput `pulumi:"cpuReservation"`
	// The amount of shares to allocate to cpu for a custom share level.
	CpuShareCount pulumi.IntOutput `pulumi:"cpuShareCount"`
	// The allocation level for cpu resources. Can be one of high, low, normal, or custom.
	CpuShareLevel pulumi.StringPtrOutput `pulumi:"cpuShareLevel"`
	// A list of custom attributes to set on this resource.
	CustomAttributes pulumi.StringMapOutput `pulumi:"customAttributes"`
	// The ID of the datacenter where the VM is to be created.
	DatacenterId pulumi.StringPtrOutput `pulumi:"datacenterId"`
	// The ID of a datastore cluster to put the virtual machine in.
	DatastoreClusterId pulumi.StringPtrOutput `pulumi:"datastoreClusterId"`
	// The ID of the virtual machine's datastore. The virtual machine configuration is placed here, along with any virtual
	// disks that are created without datastores.
	DatastoreId pulumi.StringOutput `pulumi:"datastoreId"`
	// The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
	DefaultIpAddress pulumi.StringOutput `pulumi:"defaultIpAddress"`
	// A specification for a virtual disk device on this virtual machine.
	Disks VirtualMachineDiskArrayOutput `pulumi:"disks"`
	// When the boot type set in firmware is efi, this enables EFI secure boot.
	EfiSecureBootEnabled pulumi.BoolPtrOutput `pulumi:"efiSecureBootEnabled"`
	// Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest.
	EnableDiskUuid pulumi.BoolPtrOutput `pulumi:"enableDiskUuid"`
	// Enable logging on this virtual machine.
	EnableLogging pulumi.BoolPtrOutput `pulumi:"enableLogging"`
	// The EPT/RVI (hardware memory virtualization) setting for this virtual machine. Can be one of automatic, on, or off.
	EptRviMode pulumi.StringOutput `pulumi:"eptRviMode"`
	// Extra configuration data for this virtual machine. Can be used to supply advanced parameters not normally in
	// configuration, such as instance metadata, or configuration data for OVF images.
	ExtraConfig pulumi.StringMapOutput `pulumi:"extraConfig"`
	// Allow the virtual machine to be rebooted when a change to `extraConfig` occurs.
	ExtraConfigRebootRequired pulumi.BoolPtrOutput `pulumi:"extraConfigRebootRequired"`
	// The firmware interface to use on the virtual machine. Can be one of bios or efi.
	Firmware pulumi.StringPtrOutput `pulumi:"firmware"`
	// The name of the folder to locate the virtual machine in.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// Set to true to force power-off a virtual machine if a graceful guest shutdown failed for a necessary operation.
	ForcePowerOff pulumi.BoolPtrOutput `pulumi:"forcePowerOff"`
	// The guest ID for the operating system.
	GuestId pulumi.StringOutput `pulumi:"guestId"`
	// The current list of IP addresses on this machine, including the value of `defaultIpAddress`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
	GuestIpAddresses pulumi.StringArrayOutput `pulumi:"guestIpAddresses"`
	// The hardware version for the virtual machine.
	HardwareVersion pulumi.IntOutput `pulumi:"hardwareVersion"`
	// The ID of an optional host system to pin the virtual machine to.
	HostSystemId pulumi.StringOutput `pulumi:"hostSystemId"`
	// The (non-nested) hardware virtualization setting for this virtual machine. Can be one of hvAuto, hvOn, or hvOff.
	HvMode             pulumi.StringOutput `pulumi:"hvMode"`
	IdeControllerCount pulumi.IntPtrOutput `pulumi:"ideControllerCount"`
	// List of IP addresses and CIDR networks to ignore while waiting for an IP
	IgnoredGuestIps pulumi.StringArrayOutput `pulumi:"ignoredGuestIps"`
	// Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
	Imported pulumi.BoolOutput `pulumi:"imported"`
	// Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower
	// latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard
	// devices. Can be one of low, normal, medium, or high.
	LatencySensitivity pulumi.StringPtrOutput `pulumi:"latencySensitivity"`
	// The size of the virtual machine's memory, in MB.
	Memory pulumi.IntPtrOutput `pulumi:"memory"`
	// Allow memory to be added to this virtual machine while it is running.
	MemoryHotAddEnabled pulumi.BoolPtrOutput `pulumi:"memoryHotAddEnabled"`
	// The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
	// resources.
	MemoryLimit pulumi.IntPtrOutput `pulumi:"memoryLimit"`
	// The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
	MemoryReservation pulumi.IntPtrOutput `pulumi:"memoryReservation"`
	// If set true, memory resource reservation for this virtual machine will always be equal to the virtual machine's memory
	// size;increases in memory size will be rejected when a corresponding reservation increase is not possible. This feature
	// may only be enabled if it is currently possible to reserve all of the virtual machine's memory.
	MemoryReservationLockedToMax pulumi.BoolPtrOutput `pulumi:"memoryReservationLockedToMax"`
	// The amount of shares to allocate to memory for a custom share level.
	MemoryShareCount pulumi.IntOutput `pulumi:"memoryShareCount"`
	// The allocation level for memory resources. Can be one of high, low, normal, or custom.
	MemoryShareLevel pulumi.StringPtrOutput `pulumi:"memoryShareLevel"`
	// The amount of time, in minutes, to wait for a vMotion operation to complete before failing.
	MigrateWaitTimeout pulumi.IntPtrOutput `pulumi:"migrateWaitTimeout"`
	// The managed object reference ID of the created virtual machine.
	Moid pulumi.StringOutput `pulumi:"moid"`
	// The name of this virtual machine.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable nested hardware virtualization on this virtual machine, facilitating nested virtualization in the guest.
	NestedHvEnabled pulumi.BoolPtrOutput `pulumi:"nestedHvEnabled"`
	// A specification for a virtual NIC on this virtual machine.
	NetworkInterfaces VirtualMachineNetworkInterfaceArrayOutput `pulumi:"networkInterfaces"`
	// The number of cores to distribute amongst the CPUs in this virtual machine. If specified, the value supplied to numCpus
	// must be evenly divisible by this value.
	NumCoresPerSocket pulumi.IntPtrOutput `pulumi:"numCoresPerSocket"`
	// The number of virtual processors to assign to this virtual machine.
	NumCpus pulumi.IntPtrOutput `pulumi:"numCpus"`
	// A specification for deploying a virtual machine from ovf/ova template.
	OvfDeploy VirtualMachineOvfDeployPtrOutput `pulumi:"ovfDeploy"`
	// A list of PCI passthrough devices
	PciDeviceIds pulumi.StringArrayOutput `pulumi:"pciDeviceIds"`
	// A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
	PowerState pulumi.StringOutput `pulumi:"powerState"`
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout pulumi.IntPtrOutput `pulumi:"poweronTimeout"`
	RebootRequired pulumi.BoolOutput   `pulumi:"rebootRequired"`
	// Triggers replacement of resource whenever it changes.
	ReplaceTrigger pulumi.StringPtrOutput `pulumi:"replaceTrigger"`
	// The ID of a resource pool to put the virtual machine in.
	ResourcePoolId pulumi.StringOutput `pulumi:"resourcePoolId"`
	// Enable the run of scripts after virtual machine power-on when VMware Tools is installed.
	RunToolsScriptsAfterPowerOn pulumi.BoolPtrOutput `pulumi:"runToolsScriptsAfterPowerOn"`
	// Enable the run of scripts after virtual machine resume when when VMware Tools is installed.
	RunToolsScriptsAfterResume pulumi.BoolPtrOutput `pulumi:"runToolsScriptsAfterResume"`
	// Enable the run of scripts before guest operating system reboot when VMware Tools is installed.
	RunToolsScriptsBeforeGuestReboot pulumi.BoolPtrOutput `pulumi:"runToolsScriptsBeforeGuestReboot"`
	// Enable the run of scripts before guest operating system shutdown when VMware Tools is installed.
	RunToolsScriptsBeforeGuestShutdown pulumi.BoolPtrOutput `pulumi:"runToolsScriptsBeforeGuestShutdown"`
	// Enable the run of scripts before guest operating system standby when VMware Tools is installed.
	RunToolsScriptsBeforeGuestStandby pulumi.BoolPtrOutput `pulumi:"runToolsScriptsBeforeGuestStandby"`
	SataControllerCount               pulumi.IntPtrOutput  `pulumi:"sataControllerCount"`
	// Mode for sharing the SCSI bus. The modes are physicalSharing, virtualSharing, and noSharing.
	ScsiBusSharing      pulumi.StringPtrOutput `pulumi:"scsiBusSharing"`
	ScsiControllerCount pulumi.IntPtrOutput    `pulumi:"scsiControllerCount"`
	// The type of SCSI bus this virtual machine will have. Can be one of lsilogic, lsilogic-sas or pvscsi.
	ScsiType pulumi.StringPtrOutput `pulumi:"scsiType"`
	// The amount of time, in minutes, to wait for shutdown when making necessary updates to the virtual machine.
	ShutdownWaitTimeout pulumi.IntPtrOutput `pulumi:"shutdownWaitTimeout"`
	// The ID of the storage policy to assign to the virtual machine home directory.
	StoragePolicyId pulumi.StringOutput `pulumi:"storagePolicyId"`
	// The swap file placement policy for this virtual machine. Can be one of inherit, hostLocal, or vmDirectory.
	SwapPlacementPolicy pulumi.StringPtrOutput `pulumi:"swapPlacementPolicy"`
	// Enable guest clock synchronization with the host. On vSphere 7.0 U1 and above, with only this setting the clock is
	// synchronized on startup and resume. Requires VMware Tools to be installed.
	SyncTimeWithHost pulumi.BoolPtrOutput `pulumi:"syncTimeWithHost"`
	// Enable periodic clock synchronization with the host. Supported only on vSphere 7.0 U1 and above. On prior versions
	// setting `syncTimeWithHost` is enough for periodic synchronization. Requires VMware Tools to be installed.
	SyncTimeWithHostPeriodically pulumi.BoolPtrOutput `pulumi:"syncTimeWithHostPeriodically"`
	// A list of tag IDs to apply to this object.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Set the upgrade policy for VMware Tools. Can be one of `manual` or `upgradeAtPowerCycle`.
	ToolsUpgradePolicy pulumi.StringPtrOutput `pulumi:"toolsUpgradePolicy"`
	// The UUID of the virtual machine. Also exposed as the `id` of the resource.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// vApp configuration data for this virtual machine. Can be used to provide configuration data for OVF images.
	Vapp VirtualMachineVappPtrOutput `pulumi:"vapp"`
	// Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
	VappTransports pulumi.StringArrayOutput `pulumi:"vappTransports"`
	// Flag to specify if Virtualization-based security is enabled for this virtual machine.
	VbsEnabled pulumi.BoolPtrOutput `pulumi:"vbsEnabled"`
	// The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
	VmwareToolsStatus pulumi.StringOutput `pulumi:"vmwareToolsStatus"`
	// The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
	VmxPath pulumi.StringOutput `pulumi:"vmxPath"`
	// Flag to specify if I/O MMU virtualization, also called Intel Virtualization Technology for Directed I/O (VT-d) and AMD
	// I/O Virtualization (AMD-Vi or IOMMU), is enabled.
	VvtdEnabled pulumi.BoolPtrOutput `pulumi:"vvtdEnabled"`
	// The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
	// disables the waiter.
	WaitForGuestIpTimeout pulumi.IntPtrOutput `pulumi:"waitForGuestIpTimeout"`
	// Controls whether or not the guest network waiter waits for a routable address. When false, the waiter does not wait for
	// a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria.
	WaitForGuestNetRoutable pulumi.BoolPtrOutput `pulumi:"waitForGuestNetRoutable"`
	// The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
	// disables the waiter.
	WaitForGuestNetTimeout pulumi.IntPtrOutput `pulumi:"waitForGuestNetTimeout"`
}

// NewVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachine(ctx *pulumi.Context,
	name string, args *VirtualMachineArgs, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourcePoolId == nil {
		return nil, errors.New("invalid value for required argument 'ResourcePoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualMachine
	err := ctx.RegisterResource("vsphere:index/virtualMachine:VirtualMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachine gets an existing VirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineState, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	var resource VirtualMachine
	err := ctx.ReadResource("vsphere:index/virtualMachine:VirtualMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachine resources.
type virtualMachineState struct {
	// The guest name for the operating system when guestId is otherGuest or otherGuest64.
	AlternateGuestName *string `pulumi:"alternateGuestName"`
	// User-provided description of the virtual machine.
	Annotation *string `pulumi:"annotation"`
	// The number of milliseconds to wait before starting the boot sequence.
	BootDelay *int `pulumi:"bootDelay"`
	// The number of milliseconds to wait before retrying the boot sequence. This only valid if bootRetryEnabled is true.
	BootRetryDelay *int `pulumi:"bootRetryDelay"`
	// If set to true, a virtual machine that fails to boot will try again after the delay defined in boot_retry_delay.
	BootRetryEnabled *bool `pulumi:"bootRetryEnabled"`
	// A specification for a CDROM device on this virtual machine.
	Cdroms []VirtualMachineCdrom `pulumi:"cdroms"`
	// A unique identifier for a given version of the last configuration was applied.
	ChangeVersion *string `pulumi:"changeVersion"`
	// A specification for cloning a virtual machine from template.
	Clone *VirtualMachineClone `pulumi:"clone"`
	// Allow CPUs to be added to this virtual machine while it is running.
	CpuHotAddEnabled *bool `pulumi:"cpuHotAddEnabled"`
	// Allow CPUs to be added to this virtual machine while it is running.
	CpuHotRemoveEnabled *bool `pulumi:"cpuHotRemoveEnabled"`
	// The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
	// resources.
	CpuLimit *int `pulumi:"cpuLimit"`
	// Enable CPU performance counters on this virtual machine.
	CpuPerformanceCountersEnabled *bool `pulumi:"cpuPerformanceCountersEnabled"`
	// The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
	CpuReservation *int `pulumi:"cpuReservation"`
	// The amount of shares to allocate to cpu for a custom share level.
	CpuShareCount *int `pulumi:"cpuShareCount"`
	// The allocation level for cpu resources. Can be one of high, low, normal, or custom.
	CpuShareLevel *string `pulumi:"cpuShareLevel"`
	// A list of custom attributes to set on this resource.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// The ID of the datacenter where the VM is to be created.
	DatacenterId *string `pulumi:"datacenterId"`
	// The ID of a datastore cluster to put the virtual machine in.
	DatastoreClusterId *string `pulumi:"datastoreClusterId"`
	// The ID of the virtual machine's datastore. The virtual machine configuration is placed here, along with any virtual
	// disks that are created without datastores.
	DatastoreId *string `pulumi:"datastoreId"`
	// The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
	DefaultIpAddress *string `pulumi:"defaultIpAddress"`
	// A specification for a virtual disk device on this virtual machine.
	Disks []VirtualMachineDisk `pulumi:"disks"`
	// When the boot type set in firmware is efi, this enables EFI secure boot.
	EfiSecureBootEnabled *bool `pulumi:"efiSecureBootEnabled"`
	// Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest.
	EnableDiskUuid *bool `pulumi:"enableDiskUuid"`
	// Enable logging on this virtual machine.
	EnableLogging *bool `pulumi:"enableLogging"`
	// The EPT/RVI (hardware memory virtualization) setting for this virtual machine. Can be one of automatic, on, or off.
	EptRviMode *string `pulumi:"eptRviMode"`
	// Extra configuration data for this virtual machine. Can be used to supply advanced parameters not normally in
	// configuration, such as instance metadata, or configuration data for OVF images.
	ExtraConfig map[string]string `pulumi:"extraConfig"`
	// Allow the virtual machine to be rebooted when a change to `extraConfig` occurs.
	ExtraConfigRebootRequired *bool `pulumi:"extraConfigRebootRequired"`
	// The firmware interface to use on the virtual machine. Can be one of bios or efi.
	Firmware *string `pulumi:"firmware"`
	// The name of the folder to locate the virtual machine in.
	Folder *string `pulumi:"folder"`
	// Set to true to force power-off a virtual machine if a graceful guest shutdown failed for a necessary operation.
	ForcePowerOff *bool `pulumi:"forcePowerOff"`
	// The guest ID for the operating system.
	GuestId *string `pulumi:"guestId"`
	// The current list of IP addresses on this machine, including the value of `defaultIpAddress`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
	GuestIpAddresses []string `pulumi:"guestIpAddresses"`
	// The hardware version for the virtual machine.
	HardwareVersion *int `pulumi:"hardwareVersion"`
	// The ID of an optional host system to pin the virtual machine to.
	HostSystemId *string `pulumi:"hostSystemId"`
	// The (non-nested) hardware virtualization setting for this virtual machine. Can be one of hvAuto, hvOn, or hvOff.
	HvMode             *string `pulumi:"hvMode"`
	IdeControllerCount *int    `pulumi:"ideControllerCount"`
	// List of IP addresses and CIDR networks to ignore while waiting for an IP
	IgnoredGuestIps []string `pulumi:"ignoredGuestIps"`
	// Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
	Imported *bool `pulumi:"imported"`
	// Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower
	// latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard
	// devices. Can be one of low, normal, medium, or high.
	LatencySensitivity *string `pulumi:"latencySensitivity"`
	// The size of the virtual machine's memory, in MB.
	Memory *int `pulumi:"memory"`
	// Allow memory to be added to this virtual machine while it is running.
	MemoryHotAddEnabled *bool `pulumi:"memoryHotAddEnabled"`
	// The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
	// resources.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
	MemoryReservation *int `pulumi:"memoryReservation"`
	// If set true, memory resource reservation for this virtual machine will always be equal to the virtual machine's memory
	// size;increases in memory size will be rejected when a corresponding reservation increase is not possible. This feature
	// may only be enabled if it is currently possible to reserve all of the virtual machine's memory.
	MemoryReservationLockedToMax *bool `pulumi:"memoryReservationLockedToMax"`
	// The amount of shares to allocate to memory for a custom share level.
	MemoryShareCount *int `pulumi:"memoryShareCount"`
	// The allocation level for memory resources. Can be one of high, low, normal, or custom.
	MemoryShareLevel *string `pulumi:"memoryShareLevel"`
	// The amount of time, in minutes, to wait for a vMotion operation to complete before failing.
	MigrateWaitTimeout *int `pulumi:"migrateWaitTimeout"`
	// The managed object reference ID of the created virtual machine.
	Moid *string `pulumi:"moid"`
	// The name of this virtual machine.
	Name *string `pulumi:"name"`
	// Enable nested hardware virtualization on this virtual machine, facilitating nested virtualization in the guest.
	NestedHvEnabled *bool `pulumi:"nestedHvEnabled"`
	// A specification for a virtual NIC on this virtual machine.
	NetworkInterfaces []VirtualMachineNetworkInterface `pulumi:"networkInterfaces"`
	// The number of cores to distribute amongst the CPUs in this virtual machine. If specified, the value supplied to numCpus
	// must be evenly divisible by this value.
	NumCoresPerSocket *int `pulumi:"numCoresPerSocket"`
	// The number of virtual processors to assign to this virtual machine.
	NumCpus *int `pulumi:"numCpus"`
	// A specification for deploying a virtual machine from ovf/ova template.
	OvfDeploy *VirtualMachineOvfDeploy `pulumi:"ovfDeploy"`
	// A list of PCI passthrough devices
	PciDeviceIds []string `pulumi:"pciDeviceIds"`
	// A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
	PowerState *string `pulumi:"powerState"`
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout *int  `pulumi:"poweronTimeout"`
	RebootRequired *bool `pulumi:"rebootRequired"`
	// Triggers replacement of resource whenever it changes.
	ReplaceTrigger *string `pulumi:"replaceTrigger"`
	// The ID of a resource pool to put the virtual machine in.
	ResourcePoolId *string `pulumi:"resourcePoolId"`
	// Enable the run of scripts after virtual machine power-on when VMware Tools is installed.
	RunToolsScriptsAfterPowerOn *bool `pulumi:"runToolsScriptsAfterPowerOn"`
	// Enable the run of scripts after virtual machine resume when when VMware Tools is installed.
	RunToolsScriptsAfterResume *bool `pulumi:"runToolsScriptsAfterResume"`
	// Enable the run of scripts before guest operating system reboot when VMware Tools is installed.
	RunToolsScriptsBeforeGuestReboot *bool `pulumi:"runToolsScriptsBeforeGuestReboot"`
	// Enable the run of scripts before guest operating system shutdown when VMware Tools is installed.
	RunToolsScriptsBeforeGuestShutdown *bool `pulumi:"runToolsScriptsBeforeGuestShutdown"`
	// Enable the run of scripts before guest operating system standby when VMware Tools is installed.
	RunToolsScriptsBeforeGuestStandby *bool `pulumi:"runToolsScriptsBeforeGuestStandby"`
	SataControllerCount               *int  `pulumi:"sataControllerCount"`
	// Mode for sharing the SCSI bus. The modes are physicalSharing, virtualSharing, and noSharing.
	ScsiBusSharing      *string `pulumi:"scsiBusSharing"`
	ScsiControllerCount *int    `pulumi:"scsiControllerCount"`
	// The type of SCSI bus this virtual machine will have. Can be one of lsilogic, lsilogic-sas or pvscsi.
	ScsiType *string `pulumi:"scsiType"`
	// The amount of time, in minutes, to wait for shutdown when making necessary updates to the virtual machine.
	ShutdownWaitTimeout *int `pulumi:"shutdownWaitTimeout"`
	// The ID of the storage policy to assign to the virtual machine home directory.
	StoragePolicyId *string `pulumi:"storagePolicyId"`
	// The swap file placement policy for this virtual machine. Can be one of inherit, hostLocal, or vmDirectory.
	SwapPlacementPolicy *string `pulumi:"swapPlacementPolicy"`
	// Enable guest clock synchronization with the host. On vSphere 7.0 U1 and above, with only this setting the clock is
	// synchronized on startup and resume. Requires VMware Tools to be installed.
	SyncTimeWithHost *bool `pulumi:"syncTimeWithHost"`
	// Enable periodic clock synchronization with the host. Supported only on vSphere 7.0 U1 and above. On prior versions
	// setting `syncTimeWithHost` is enough for periodic synchronization. Requires VMware Tools to be installed.
	SyncTimeWithHostPeriodically *bool `pulumi:"syncTimeWithHostPeriodically"`
	// A list of tag IDs to apply to this object.
	Tags []string `pulumi:"tags"`
	// Set the upgrade policy for VMware Tools. Can be one of `manual` or `upgradeAtPowerCycle`.
	ToolsUpgradePolicy *string `pulumi:"toolsUpgradePolicy"`
	// The UUID of the virtual machine. Also exposed as the `id` of the resource.
	Uuid *string `pulumi:"uuid"`
	// vApp configuration data for this virtual machine. Can be used to provide configuration data for OVF images.
	Vapp *VirtualMachineVapp `pulumi:"vapp"`
	// Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
	VappTransports []string `pulumi:"vappTransports"`
	// Flag to specify if Virtualization-based security is enabled for this virtual machine.
	VbsEnabled *bool `pulumi:"vbsEnabled"`
	// The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
	VmwareToolsStatus *string `pulumi:"vmwareToolsStatus"`
	// The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
	VmxPath *string `pulumi:"vmxPath"`
	// Flag to specify if I/O MMU virtualization, also called Intel Virtualization Technology for Directed I/O (VT-d) and AMD
	// I/O Virtualization (AMD-Vi or IOMMU), is enabled.
	VvtdEnabled *bool `pulumi:"vvtdEnabled"`
	// The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
	// disables the waiter.
	WaitForGuestIpTimeout *int `pulumi:"waitForGuestIpTimeout"`
	// Controls whether or not the guest network waiter waits for a routable address. When false, the waiter does not wait for
	// a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria.
	WaitForGuestNetRoutable *bool `pulumi:"waitForGuestNetRoutable"`
	// The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
	// disables the waiter.
	WaitForGuestNetTimeout *int `pulumi:"waitForGuestNetTimeout"`
}

type VirtualMachineState struct {
	// The guest name for the operating system when guestId is otherGuest or otherGuest64.
	AlternateGuestName pulumi.StringPtrInput
	// User-provided description of the virtual machine.
	Annotation pulumi.StringPtrInput
	// The number of milliseconds to wait before starting the boot sequence.
	BootDelay pulumi.IntPtrInput
	// The number of milliseconds to wait before retrying the boot sequence. This only valid if bootRetryEnabled is true.
	BootRetryDelay pulumi.IntPtrInput
	// If set to true, a virtual machine that fails to boot will try again after the delay defined in boot_retry_delay.
	BootRetryEnabled pulumi.BoolPtrInput
	// A specification for a CDROM device on this virtual machine.
	Cdroms VirtualMachineCdromArrayInput
	// A unique identifier for a given version of the last configuration was applied.
	ChangeVersion pulumi.StringPtrInput
	// A specification for cloning a virtual machine from template.
	Clone VirtualMachineClonePtrInput
	// Allow CPUs to be added to this virtual machine while it is running.
	CpuHotAddEnabled pulumi.BoolPtrInput
	// Allow CPUs to be added to this virtual machine while it is running.
	CpuHotRemoveEnabled pulumi.BoolPtrInput
	// The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
	// resources.
	CpuLimit pulumi.IntPtrInput
	// Enable CPU performance counters on this virtual machine.
	CpuPerformanceCountersEnabled pulumi.BoolPtrInput
	// The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
	CpuReservation pulumi.IntPtrInput
	// The amount of shares to allocate to cpu for a custom share level.
	CpuShareCount pulumi.IntPtrInput
	// The allocation level for cpu resources. Can be one of high, low, normal, or custom.
	CpuShareLevel pulumi.StringPtrInput
	// A list of custom attributes to set on this resource.
	CustomAttributes pulumi.StringMapInput
	// The ID of the datacenter where the VM is to be created.
	DatacenterId pulumi.StringPtrInput
	// The ID of a datastore cluster to put the virtual machine in.
	DatastoreClusterId pulumi.StringPtrInput
	// The ID of the virtual machine's datastore. The virtual machine configuration is placed here, along with any virtual
	// disks that are created without datastores.
	DatastoreId pulumi.StringPtrInput
	// The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
	DefaultIpAddress pulumi.StringPtrInput
	// A specification for a virtual disk device on this virtual machine.
	Disks VirtualMachineDiskArrayInput
	// When the boot type set in firmware is efi, this enables EFI secure boot.
	EfiSecureBootEnabled pulumi.BoolPtrInput
	// Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest.
	EnableDiskUuid pulumi.BoolPtrInput
	// Enable logging on this virtual machine.
	EnableLogging pulumi.BoolPtrInput
	// The EPT/RVI (hardware memory virtualization) setting for this virtual machine. Can be one of automatic, on, or off.
	EptRviMode pulumi.StringPtrInput
	// Extra configuration data for this virtual machine. Can be used to supply advanced parameters not normally in
	// configuration, such as instance metadata, or configuration data for OVF images.
	ExtraConfig pulumi.StringMapInput
	// Allow the virtual machine to be rebooted when a change to `extraConfig` occurs.
	ExtraConfigRebootRequired pulumi.BoolPtrInput
	// The firmware interface to use on the virtual machine. Can be one of bios or efi.
	Firmware pulumi.StringPtrInput
	// The name of the folder to locate the virtual machine in.
	Folder pulumi.StringPtrInput
	// Set to true to force power-off a virtual machine if a graceful guest shutdown failed for a necessary operation.
	ForcePowerOff pulumi.BoolPtrInput
	// The guest ID for the operating system.
	GuestId pulumi.StringPtrInput
	// The current list of IP addresses on this machine, including the value of `defaultIpAddress`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
	GuestIpAddresses pulumi.StringArrayInput
	// The hardware version for the virtual machine.
	HardwareVersion pulumi.IntPtrInput
	// The ID of an optional host system to pin the virtual machine to.
	HostSystemId pulumi.StringPtrInput
	// The (non-nested) hardware virtualization setting for this virtual machine. Can be one of hvAuto, hvOn, or hvOff.
	HvMode             pulumi.StringPtrInput
	IdeControllerCount pulumi.IntPtrInput
	// List of IP addresses and CIDR networks to ignore while waiting for an IP
	IgnoredGuestIps pulumi.StringArrayInput
	// Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
	Imported pulumi.BoolPtrInput
	// Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower
	// latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard
	// devices. Can be one of low, normal, medium, or high.
	LatencySensitivity pulumi.StringPtrInput
	// The size of the virtual machine's memory, in MB.
	Memory pulumi.IntPtrInput
	// Allow memory to be added to this virtual machine while it is running.
	MemoryHotAddEnabled pulumi.BoolPtrInput
	// The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
	// resources.
	MemoryLimit pulumi.IntPtrInput
	// The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
	MemoryReservation pulumi.IntPtrInput
	// If set true, memory resource reservation for this virtual machine will always be equal to the virtual machine's memory
	// size;increases in memory size will be rejected when a corresponding reservation increase is not possible. This feature
	// may only be enabled if it is currently possible to reserve all of the virtual machine's memory.
	MemoryReservationLockedToMax pulumi.BoolPtrInput
	// The amount of shares to allocate to memory for a custom share level.
	MemoryShareCount pulumi.IntPtrInput
	// The allocation level for memory resources. Can be one of high, low, normal, or custom.
	MemoryShareLevel pulumi.StringPtrInput
	// The amount of time, in minutes, to wait for a vMotion operation to complete before failing.
	MigrateWaitTimeout pulumi.IntPtrInput
	// The managed object reference ID of the created virtual machine.
	Moid pulumi.StringPtrInput
	// The name of this virtual machine.
	Name pulumi.StringPtrInput
	// Enable nested hardware virtualization on this virtual machine, facilitating nested virtualization in the guest.
	NestedHvEnabled pulumi.BoolPtrInput
	// A specification for a virtual NIC on this virtual machine.
	NetworkInterfaces VirtualMachineNetworkInterfaceArrayInput
	// The number of cores to distribute amongst the CPUs in this virtual machine. If specified, the value supplied to numCpus
	// must be evenly divisible by this value.
	NumCoresPerSocket pulumi.IntPtrInput
	// The number of virtual processors to assign to this virtual machine.
	NumCpus pulumi.IntPtrInput
	// A specification for deploying a virtual machine from ovf/ova template.
	OvfDeploy VirtualMachineOvfDeployPtrInput
	// A list of PCI passthrough devices
	PciDeviceIds pulumi.StringArrayInput
	// A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
	PowerState pulumi.StringPtrInput
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout pulumi.IntPtrInput
	RebootRequired pulumi.BoolPtrInput
	// Triggers replacement of resource whenever it changes.
	ReplaceTrigger pulumi.StringPtrInput
	// The ID of a resource pool to put the virtual machine in.
	ResourcePoolId pulumi.StringPtrInput
	// Enable the run of scripts after virtual machine power-on when VMware Tools is installed.
	RunToolsScriptsAfterPowerOn pulumi.BoolPtrInput
	// Enable the run of scripts after virtual machine resume when when VMware Tools is installed.
	RunToolsScriptsAfterResume pulumi.BoolPtrInput
	// Enable the run of scripts before guest operating system reboot when VMware Tools is installed.
	RunToolsScriptsBeforeGuestReboot pulumi.BoolPtrInput
	// Enable the run of scripts before guest operating system shutdown when VMware Tools is installed.
	RunToolsScriptsBeforeGuestShutdown pulumi.BoolPtrInput
	// Enable the run of scripts before guest operating system standby when VMware Tools is installed.
	RunToolsScriptsBeforeGuestStandby pulumi.BoolPtrInput
	SataControllerCount               pulumi.IntPtrInput
	// Mode for sharing the SCSI bus. The modes are physicalSharing, virtualSharing, and noSharing.
	ScsiBusSharing      pulumi.StringPtrInput
	ScsiControllerCount pulumi.IntPtrInput
	// The type of SCSI bus this virtual machine will have. Can be one of lsilogic, lsilogic-sas or pvscsi.
	ScsiType pulumi.StringPtrInput
	// The amount of time, in minutes, to wait for shutdown when making necessary updates to the virtual machine.
	ShutdownWaitTimeout pulumi.IntPtrInput
	// The ID of the storage policy to assign to the virtual machine home directory.
	StoragePolicyId pulumi.StringPtrInput
	// The swap file placement policy for this virtual machine. Can be one of inherit, hostLocal, or vmDirectory.
	SwapPlacementPolicy pulumi.StringPtrInput
	// Enable guest clock synchronization with the host. On vSphere 7.0 U1 and above, with only this setting the clock is
	// synchronized on startup and resume. Requires VMware Tools to be installed.
	SyncTimeWithHost pulumi.BoolPtrInput
	// Enable periodic clock synchronization with the host. Supported only on vSphere 7.0 U1 and above. On prior versions
	// setting `syncTimeWithHost` is enough for periodic synchronization. Requires VMware Tools to be installed.
	SyncTimeWithHostPeriodically pulumi.BoolPtrInput
	// A list of tag IDs to apply to this object.
	Tags pulumi.StringArrayInput
	// Set the upgrade policy for VMware Tools. Can be one of `manual` or `upgradeAtPowerCycle`.
	ToolsUpgradePolicy pulumi.StringPtrInput
	// The UUID of the virtual machine. Also exposed as the `id` of the resource.
	Uuid pulumi.StringPtrInput
	// vApp configuration data for this virtual machine. Can be used to provide configuration data for OVF images.
	Vapp VirtualMachineVappPtrInput
	// Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
	VappTransports pulumi.StringArrayInput
	// Flag to specify if Virtualization-based security is enabled for this virtual machine.
	VbsEnabled pulumi.BoolPtrInput
	// The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
	VmwareToolsStatus pulumi.StringPtrInput
	// The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
	VmxPath pulumi.StringPtrInput
	// Flag to specify if I/O MMU virtualization, also called Intel Virtualization Technology for Directed I/O (VT-d) and AMD
	// I/O Virtualization (AMD-Vi or IOMMU), is enabled.
	VvtdEnabled pulumi.BoolPtrInput
	// The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
	// disables the waiter.
	WaitForGuestIpTimeout pulumi.IntPtrInput
	// Controls whether or not the guest network waiter waits for a routable address. When false, the waiter does not wait for
	// a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria.
	WaitForGuestNetRoutable pulumi.BoolPtrInput
	// The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
	// disables the waiter.
	WaitForGuestNetTimeout pulumi.IntPtrInput
}

func (VirtualMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineState)(nil)).Elem()
}

type virtualMachineArgs struct {
	// The guest name for the operating system when guestId is otherGuest or otherGuest64.
	AlternateGuestName *string `pulumi:"alternateGuestName"`
	// User-provided description of the virtual machine.
	Annotation *string `pulumi:"annotation"`
	// The number of milliseconds to wait before starting the boot sequence.
	BootDelay *int `pulumi:"bootDelay"`
	// The number of milliseconds to wait before retrying the boot sequence. This only valid if bootRetryEnabled is true.
	BootRetryDelay *int `pulumi:"bootRetryDelay"`
	// If set to true, a virtual machine that fails to boot will try again after the delay defined in boot_retry_delay.
	BootRetryEnabled *bool `pulumi:"bootRetryEnabled"`
	// A specification for a CDROM device on this virtual machine.
	Cdroms []VirtualMachineCdrom `pulumi:"cdroms"`
	// A specification for cloning a virtual machine from template.
	Clone *VirtualMachineClone `pulumi:"clone"`
	// Allow CPUs to be added to this virtual machine while it is running.
	CpuHotAddEnabled *bool `pulumi:"cpuHotAddEnabled"`
	// Allow CPUs to be added to this virtual machine while it is running.
	CpuHotRemoveEnabled *bool `pulumi:"cpuHotRemoveEnabled"`
	// The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
	// resources.
	CpuLimit *int `pulumi:"cpuLimit"`
	// Enable CPU performance counters on this virtual machine.
	CpuPerformanceCountersEnabled *bool `pulumi:"cpuPerformanceCountersEnabled"`
	// The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
	CpuReservation *int `pulumi:"cpuReservation"`
	// The amount of shares to allocate to cpu for a custom share level.
	CpuShareCount *int `pulumi:"cpuShareCount"`
	// The allocation level for cpu resources. Can be one of high, low, normal, or custom.
	CpuShareLevel *string `pulumi:"cpuShareLevel"`
	// A list of custom attributes to set on this resource.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// The ID of the datacenter where the VM is to be created.
	DatacenterId *string `pulumi:"datacenterId"`
	// The ID of a datastore cluster to put the virtual machine in.
	DatastoreClusterId *string `pulumi:"datastoreClusterId"`
	// The ID of the virtual machine's datastore. The virtual machine configuration is placed here, along with any virtual
	// disks that are created without datastores.
	DatastoreId *string `pulumi:"datastoreId"`
	// A specification for a virtual disk device on this virtual machine.
	Disks []VirtualMachineDisk `pulumi:"disks"`
	// When the boot type set in firmware is efi, this enables EFI secure boot.
	EfiSecureBootEnabled *bool `pulumi:"efiSecureBootEnabled"`
	// Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest.
	EnableDiskUuid *bool `pulumi:"enableDiskUuid"`
	// Enable logging on this virtual machine.
	EnableLogging *bool `pulumi:"enableLogging"`
	// The EPT/RVI (hardware memory virtualization) setting for this virtual machine. Can be one of automatic, on, or off.
	EptRviMode *string `pulumi:"eptRviMode"`
	// Extra configuration data for this virtual machine. Can be used to supply advanced parameters not normally in
	// configuration, such as instance metadata, or configuration data for OVF images.
	ExtraConfig map[string]string `pulumi:"extraConfig"`
	// Allow the virtual machine to be rebooted when a change to `extraConfig` occurs.
	ExtraConfigRebootRequired *bool `pulumi:"extraConfigRebootRequired"`
	// The firmware interface to use on the virtual machine. Can be one of bios or efi.
	Firmware *string `pulumi:"firmware"`
	// The name of the folder to locate the virtual machine in.
	Folder *string `pulumi:"folder"`
	// Set to true to force power-off a virtual machine if a graceful guest shutdown failed for a necessary operation.
	ForcePowerOff *bool `pulumi:"forcePowerOff"`
	// The guest ID for the operating system.
	GuestId *string `pulumi:"guestId"`
	// The hardware version for the virtual machine.
	HardwareVersion *int `pulumi:"hardwareVersion"`
	// The ID of an optional host system to pin the virtual machine to.
	HostSystemId *string `pulumi:"hostSystemId"`
	// The (non-nested) hardware virtualization setting for this virtual machine. Can be one of hvAuto, hvOn, or hvOff.
	HvMode             *string `pulumi:"hvMode"`
	IdeControllerCount *int    `pulumi:"ideControllerCount"`
	// List of IP addresses and CIDR networks to ignore while waiting for an IP
	IgnoredGuestIps []string `pulumi:"ignoredGuestIps"`
	// Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower
	// latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard
	// devices. Can be one of low, normal, medium, or high.
	LatencySensitivity *string `pulumi:"latencySensitivity"`
	// The size of the virtual machine's memory, in MB.
	Memory *int `pulumi:"memory"`
	// Allow memory to be added to this virtual machine while it is running.
	MemoryHotAddEnabled *bool `pulumi:"memoryHotAddEnabled"`
	// The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
	// resources.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
	MemoryReservation *int `pulumi:"memoryReservation"`
	// If set true, memory resource reservation for this virtual machine will always be equal to the virtual machine's memory
	// size;increases in memory size will be rejected when a corresponding reservation increase is not possible. This feature
	// may only be enabled if it is currently possible to reserve all of the virtual machine's memory.
	MemoryReservationLockedToMax *bool `pulumi:"memoryReservationLockedToMax"`
	// The amount of shares to allocate to memory for a custom share level.
	MemoryShareCount *int `pulumi:"memoryShareCount"`
	// The allocation level for memory resources. Can be one of high, low, normal, or custom.
	MemoryShareLevel *string `pulumi:"memoryShareLevel"`
	// The amount of time, in minutes, to wait for a vMotion operation to complete before failing.
	MigrateWaitTimeout *int `pulumi:"migrateWaitTimeout"`
	// The name of this virtual machine.
	Name *string `pulumi:"name"`
	// Enable nested hardware virtualization on this virtual machine, facilitating nested virtualization in the guest.
	NestedHvEnabled *bool `pulumi:"nestedHvEnabled"`
	// A specification for a virtual NIC on this virtual machine.
	NetworkInterfaces []VirtualMachineNetworkInterface `pulumi:"networkInterfaces"`
	// The number of cores to distribute amongst the CPUs in this virtual machine. If specified, the value supplied to numCpus
	// must be evenly divisible by this value.
	NumCoresPerSocket *int `pulumi:"numCoresPerSocket"`
	// The number of virtual processors to assign to this virtual machine.
	NumCpus *int `pulumi:"numCpus"`
	// A specification for deploying a virtual machine from ovf/ova template.
	OvfDeploy *VirtualMachineOvfDeploy `pulumi:"ovfDeploy"`
	// A list of PCI passthrough devices
	PciDeviceIds []string `pulumi:"pciDeviceIds"`
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout *int `pulumi:"poweronTimeout"`
	// Triggers replacement of resource whenever it changes.
	ReplaceTrigger *string `pulumi:"replaceTrigger"`
	// The ID of a resource pool to put the virtual machine in.
	ResourcePoolId string `pulumi:"resourcePoolId"`
	// Enable the run of scripts after virtual machine power-on when VMware Tools is installed.
	RunToolsScriptsAfterPowerOn *bool `pulumi:"runToolsScriptsAfterPowerOn"`
	// Enable the run of scripts after virtual machine resume when when VMware Tools is installed.
	RunToolsScriptsAfterResume *bool `pulumi:"runToolsScriptsAfterResume"`
	// Enable the run of scripts before guest operating system reboot when VMware Tools is installed.
	RunToolsScriptsBeforeGuestReboot *bool `pulumi:"runToolsScriptsBeforeGuestReboot"`
	// Enable the run of scripts before guest operating system shutdown when VMware Tools is installed.
	RunToolsScriptsBeforeGuestShutdown *bool `pulumi:"runToolsScriptsBeforeGuestShutdown"`
	// Enable the run of scripts before guest operating system standby when VMware Tools is installed.
	RunToolsScriptsBeforeGuestStandby *bool `pulumi:"runToolsScriptsBeforeGuestStandby"`
	SataControllerCount               *int  `pulumi:"sataControllerCount"`
	// Mode for sharing the SCSI bus. The modes are physicalSharing, virtualSharing, and noSharing.
	ScsiBusSharing      *string `pulumi:"scsiBusSharing"`
	ScsiControllerCount *int    `pulumi:"scsiControllerCount"`
	// The type of SCSI bus this virtual machine will have. Can be one of lsilogic, lsilogic-sas or pvscsi.
	ScsiType *string `pulumi:"scsiType"`
	// The amount of time, in minutes, to wait for shutdown when making necessary updates to the virtual machine.
	ShutdownWaitTimeout *int `pulumi:"shutdownWaitTimeout"`
	// The ID of the storage policy to assign to the virtual machine home directory.
	StoragePolicyId *string `pulumi:"storagePolicyId"`
	// The swap file placement policy for this virtual machine. Can be one of inherit, hostLocal, or vmDirectory.
	SwapPlacementPolicy *string `pulumi:"swapPlacementPolicy"`
	// Enable guest clock synchronization with the host. On vSphere 7.0 U1 and above, with only this setting the clock is
	// synchronized on startup and resume. Requires VMware Tools to be installed.
	SyncTimeWithHost *bool `pulumi:"syncTimeWithHost"`
	// Enable periodic clock synchronization with the host. Supported only on vSphere 7.0 U1 and above. On prior versions
	// setting `syncTimeWithHost` is enough for periodic synchronization. Requires VMware Tools to be installed.
	SyncTimeWithHostPeriodically *bool `pulumi:"syncTimeWithHostPeriodically"`
	// A list of tag IDs to apply to this object.
	Tags []string `pulumi:"tags"`
	// Set the upgrade policy for VMware Tools. Can be one of `manual` or `upgradeAtPowerCycle`.
	ToolsUpgradePolicy *string `pulumi:"toolsUpgradePolicy"`
	// vApp configuration data for this virtual machine. Can be used to provide configuration data for OVF images.
	Vapp *VirtualMachineVapp `pulumi:"vapp"`
	// Flag to specify if Virtualization-based security is enabled for this virtual machine.
	VbsEnabled *bool `pulumi:"vbsEnabled"`
	// Flag to specify if I/O MMU virtualization, also called Intel Virtualization Technology for Directed I/O (VT-d) and AMD
	// I/O Virtualization (AMD-Vi or IOMMU), is enabled.
	VvtdEnabled *bool `pulumi:"vvtdEnabled"`
	// The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
	// disables the waiter.
	WaitForGuestIpTimeout *int `pulumi:"waitForGuestIpTimeout"`
	// Controls whether or not the guest network waiter waits for a routable address. When false, the waiter does not wait for
	// a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria.
	WaitForGuestNetRoutable *bool `pulumi:"waitForGuestNetRoutable"`
	// The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
	// disables the waiter.
	WaitForGuestNetTimeout *int `pulumi:"waitForGuestNetTimeout"`
}

// The set of arguments for constructing a VirtualMachine resource.
type VirtualMachineArgs struct {
	// The guest name for the operating system when guestId is otherGuest or otherGuest64.
	AlternateGuestName pulumi.StringPtrInput
	// User-provided description of the virtual machine.
	Annotation pulumi.StringPtrInput
	// The number of milliseconds to wait before starting the boot sequence.
	BootDelay pulumi.IntPtrInput
	// The number of milliseconds to wait before retrying the boot sequence. This only valid if bootRetryEnabled is true.
	BootRetryDelay pulumi.IntPtrInput
	// If set to true, a virtual machine that fails to boot will try again after the delay defined in boot_retry_delay.
	BootRetryEnabled pulumi.BoolPtrInput
	// A specification for a CDROM device on this virtual machine.
	Cdroms VirtualMachineCdromArrayInput
	// A specification for cloning a virtual machine from template.
	Clone VirtualMachineClonePtrInput
	// Allow CPUs to be added to this virtual machine while it is running.
	CpuHotAddEnabled pulumi.BoolPtrInput
	// Allow CPUs to be added to this virtual machine while it is running.
	CpuHotRemoveEnabled pulumi.BoolPtrInput
	// The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
	// resources.
	CpuLimit pulumi.IntPtrInput
	// Enable CPU performance counters on this virtual machine.
	CpuPerformanceCountersEnabled pulumi.BoolPtrInput
	// The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
	CpuReservation pulumi.IntPtrInput
	// The amount of shares to allocate to cpu for a custom share level.
	CpuShareCount pulumi.IntPtrInput
	// The allocation level for cpu resources. Can be one of high, low, normal, or custom.
	CpuShareLevel pulumi.StringPtrInput
	// A list of custom attributes to set on this resource.
	CustomAttributes pulumi.StringMapInput
	// The ID of the datacenter where the VM is to be created.
	DatacenterId pulumi.StringPtrInput
	// The ID of a datastore cluster to put the virtual machine in.
	DatastoreClusterId pulumi.StringPtrInput
	// The ID of the virtual machine's datastore. The virtual machine configuration is placed here, along with any virtual
	// disks that are created without datastores.
	DatastoreId pulumi.StringPtrInput
	// A specification for a virtual disk device on this virtual machine.
	Disks VirtualMachineDiskArrayInput
	// When the boot type set in firmware is efi, this enables EFI secure boot.
	EfiSecureBootEnabled pulumi.BoolPtrInput
	// Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest.
	EnableDiskUuid pulumi.BoolPtrInput
	// Enable logging on this virtual machine.
	EnableLogging pulumi.BoolPtrInput
	// The EPT/RVI (hardware memory virtualization) setting for this virtual machine. Can be one of automatic, on, or off.
	EptRviMode pulumi.StringPtrInput
	// Extra configuration data for this virtual machine. Can be used to supply advanced parameters not normally in
	// configuration, such as instance metadata, or configuration data for OVF images.
	ExtraConfig pulumi.StringMapInput
	// Allow the virtual machine to be rebooted when a change to `extraConfig` occurs.
	ExtraConfigRebootRequired pulumi.BoolPtrInput
	// The firmware interface to use on the virtual machine. Can be one of bios or efi.
	Firmware pulumi.StringPtrInput
	// The name of the folder to locate the virtual machine in.
	Folder pulumi.StringPtrInput
	// Set to true to force power-off a virtual machine if a graceful guest shutdown failed for a necessary operation.
	ForcePowerOff pulumi.BoolPtrInput
	// The guest ID for the operating system.
	GuestId pulumi.StringPtrInput
	// The hardware version for the virtual machine.
	HardwareVersion pulumi.IntPtrInput
	// The ID of an optional host system to pin the virtual machine to.
	HostSystemId pulumi.StringPtrInput
	// The (non-nested) hardware virtualization setting for this virtual machine. Can be one of hvAuto, hvOn, or hvOff.
	HvMode             pulumi.StringPtrInput
	IdeControllerCount pulumi.IntPtrInput
	// List of IP addresses and CIDR networks to ignore while waiting for an IP
	IgnoredGuestIps pulumi.StringArrayInput
	// Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower
	// latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard
	// devices. Can be one of low, normal, medium, or high.
	LatencySensitivity pulumi.StringPtrInput
	// The size of the virtual machine's memory, in MB.
	Memory pulumi.IntPtrInput
	// Allow memory to be added to this virtual machine while it is running.
	MemoryHotAddEnabled pulumi.BoolPtrInput
	// The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
	// resources.
	MemoryLimit pulumi.IntPtrInput
	// The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
	MemoryReservation pulumi.IntPtrInput
	// If set true, memory resource reservation for this virtual machine will always be equal to the virtual machine's memory
	// size;increases in memory size will be rejected when a corresponding reservation increase is not possible. This feature
	// may only be enabled if it is currently possible to reserve all of the virtual machine's memory.
	MemoryReservationLockedToMax pulumi.BoolPtrInput
	// The amount of shares to allocate to memory for a custom share level.
	MemoryShareCount pulumi.IntPtrInput
	// The allocation level for memory resources. Can be one of high, low, normal, or custom.
	MemoryShareLevel pulumi.StringPtrInput
	// The amount of time, in minutes, to wait for a vMotion operation to complete before failing.
	MigrateWaitTimeout pulumi.IntPtrInput
	// The name of this virtual machine.
	Name pulumi.StringPtrInput
	// Enable nested hardware virtualization on this virtual machine, facilitating nested virtualization in the guest.
	NestedHvEnabled pulumi.BoolPtrInput
	// A specification for a virtual NIC on this virtual machine.
	NetworkInterfaces VirtualMachineNetworkInterfaceArrayInput
	// The number of cores to distribute amongst the CPUs in this virtual machine. If specified, the value supplied to numCpus
	// must be evenly divisible by this value.
	NumCoresPerSocket pulumi.IntPtrInput
	// The number of virtual processors to assign to this virtual machine.
	NumCpus pulumi.IntPtrInput
	// A specification for deploying a virtual machine from ovf/ova template.
	OvfDeploy VirtualMachineOvfDeployPtrInput
	// A list of PCI passthrough devices
	PciDeviceIds pulumi.StringArrayInput
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout pulumi.IntPtrInput
	// Triggers replacement of resource whenever it changes.
	ReplaceTrigger pulumi.StringPtrInput
	// The ID of a resource pool to put the virtual machine in.
	ResourcePoolId pulumi.StringInput
	// Enable the run of scripts after virtual machine power-on when VMware Tools is installed.
	RunToolsScriptsAfterPowerOn pulumi.BoolPtrInput
	// Enable the run of scripts after virtual machine resume when when VMware Tools is installed.
	RunToolsScriptsAfterResume pulumi.BoolPtrInput
	// Enable the run of scripts before guest operating system reboot when VMware Tools is installed.
	RunToolsScriptsBeforeGuestReboot pulumi.BoolPtrInput
	// Enable the run of scripts before guest operating system shutdown when VMware Tools is installed.
	RunToolsScriptsBeforeGuestShutdown pulumi.BoolPtrInput
	// Enable the run of scripts before guest operating system standby when VMware Tools is installed.
	RunToolsScriptsBeforeGuestStandby pulumi.BoolPtrInput
	SataControllerCount               pulumi.IntPtrInput
	// Mode for sharing the SCSI bus. The modes are physicalSharing, virtualSharing, and noSharing.
	ScsiBusSharing      pulumi.StringPtrInput
	ScsiControllerCount pulumi.IntPtrInput
	// The type of SCSI bus this virtual machine will have. Can be one of lsilogic, lsilogic-sas or pvscsi.
	ScsiType pulumi.StringPtrInput
	// The amount of time, in minutes, to wait for shutdown when making necessary updates to the virtual machine.
	ShutdownWaitTimeout pulumi.IntPtrInput
	// The ID of the storage policy to assign to the virtual machine home directory.
	StoragePolicyId pulumi.StringPtrInput
	// The swap file placement policy for this virtual machine. Can be one of inherit, hostLocal, or vmDirectory.
	SwapPlacementPolicy pulumi.StringPtrInput
	// Enable guest clock synchronization with the host. On vSphere 7.0 U1 and above, with only this setting the clock is
	// synchronized on startup and resume. Requires VMware Tools to be installed.
	SyncTimeWithHost pulumi.BoolPtrInput
	// Enable periodic clock synchronization with the host. Supported only on vSphere 7.0 U1 and above. On prior versions
	// setting `syncTimeWithHost` is enough for periodic synchronization. Requires VMware Tools to be installed.
	SyncTimeWithHostPeriodically pulumi.BoolPtrInput
	// A list of tag IDs to apply to this object.
	Tags pulumi.StringArrayInput
	// Set the upgrade policy for VMware Tools. Can be one of `manual` or `upgradeAtPowerCycle`.
	ToolsUpgradePolicy pulumi.StringPtrInput
	// vApp configuration data for this virtual machine. Can be used to provide configuration data for OVF images.
	Vapp VirtualMachineVappPtrInput
	// Flag to specify if Virtualization-based security is enabled for this virtual machine.
	VbsEnabled pulumi.BoolPtrInput
	// Flag to specify if I/O MMU virtualization, also called Intel Virtualization Technology for Directed I/O (VT-d) and AMD
	// I/O Virtualization (AMD-Vi or IOMMU), is enabled.
	VvtdEnabled pulumi.BoolPtrInput
	// The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
	// disables the waiter.
	WaitForGuestIpTimeout pulumi.IntPtrInput
	// Controls whether or not the guest network waiter waits for a routable address. When false, the waiter does not wait for
	// a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria.
	WaitForGuestNetRoutable pulumi.BoolPtrInput
	// The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
	// disables the waiter.
	WaitForGuestNetTimeout pulumi.IntPtrInput
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineArgs)(nil)).Elem()
}

type VirtualMachineInput interface {
	pulumi.Input

	ToVirtualMachineOutput() VirtualMachineOutput
	ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput
}

func (*VirtualMachine) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (i *VirtualMachine) ToVirtualMachineOutput() VirtualMachineOutput {
	return i.ToVirtualMachineOutputWithContext(context.Background())
}

func (i *VirtualMachine) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput)
}

// VirtualMachineArrayInput is an input type that accepts VirtualMachineArray and VirtualMachineArrayOutput values.
// You can construct a concrete instance of `VirtualMachineArrayInput` via:
//
//	VirtualMachineArray{ VirtualMachineArgs{...} }
type VirtualMachineArrayInput interface {
	pulumi.Input

	ToVirtualMachineArrayOutput() VirtualMachineArrayOutput
	ToVirtualMachineArrayOutputWithContext(context.Context) VirtualMachineArrayOutput
}

type VirtualMachineArray []VirtualMachineInput

func (VirtualMachineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return i.ToVirtualMachineArrayOutputWithContext(context.Background())
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineArrayOutput)
}

// VirtualMachineMapInput is an input type that accepts VirtualMachineMap and VirtualMachineMapOutput values.
// You can construct a concrete instance of `VirtualMachineMapInput` via:
//
//	VirtualMachineMap{ "key": VirtualMachineArgs{...} }
type VirtualMachineMapInput interface {
	pulumi.Input

	ToVirtualMachineMapOutput() VirtualMachineMapOutput
	ToVirtualMachineMapOutputWithContext(context.Context) VirtualMachineMapOutput
}

type VirtualMachineMap map[string]VirtualMachineInput

func (VirtualMachineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineMap) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return i.ToVirtualMachineMapOutputWithContext(context.Background())
}

func (i VirtualMachineMap) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineMapOutput)
}

type VirtualMachineOutput struct{ *pulumi.OutputState }

func (VirtualMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineOutput) ToVirtualMachineOutput() VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return o
}

// The guest name for the operating system when guestId is otherGuest or otherGuest64.
func (o VirtualMachineOutput) AlternateGuestName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.AlternateGuestName }).(pulumi.StringPtrOutput)
}

// User-provided description of the virtual machine.
func (o VirtualMachineOutput) Annotation() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.Annotation }).(pulumi.StringOutput)
}

// The number of milliseconds to wait before starting the boot sequence.
func (o VirtualMachineOutput) BootDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.BootDelay }).(pulumi.IntPtrOutput)
}

// The number of milliseconds to wait before retrying the boot sequence. This only valid if bootRetryEnabled is true.
func (o VirtualMachineOutput) BootRetryDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.BootRetryDelay }).(pulumi.IntPtrOutput)
}

// If set to true, a virtual machine that fails to boot will try again after the delay defined in boot_retry_delay.
func (o VirtualMachineOutput) BootRetryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.BootRetryEnabled }).(pulumi.BoolPtrOutput)
}

// A specification for a CDROM device on this virtual machine.
func (o VirtualMachineOutput) Cdroms() VirtualMachineCdromArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineCdromArrayOutput { return v.Cdroms }).(VirtualMachineCdromArrayOutput)
}

// A unique identifier for a given version of the last configuration was applied.
func (o VirtualMachineOutput) ChangeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.ChangeVersion }).(pulumi.StringOutput)
}

// A specification for cloning a virtual machine from template.
func (o VirtualMachineOutput) Clone() VirtualMachineClonePtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineClonePtrOutput { return v.Clone }).(VirtualMachineClonePtrOutput)
}

// Allow CPUs to be added to this virtual machine while it is running.
func (o VirtualMachineOutput) CpuHotAddEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.CpuHotAddEnabled }).(pulumi.BoolPtrOutput)
}

// Allow CPUs to be added to this virtual machine while it is running.
func (o VirtualMachineOutput) CpuHotRemoveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.CpuHotRemoveEnabled }).(pulumi.BoolPtrOutput)
}

// The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
// resources.
func (o VirtualMachineOutput) CpuLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.CpuLimit }).(pulumi.IntPtrOutput)
}

// Enable CPU performance counters on this virtual machine.
func (o VirtualMachineOutput) CpuPerformanceCountersEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.CpuPerformanceCountersEnabled }).(pulumi.BoolPtrOutput)
}

// The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
func (o VirtualMachineOutput) CpuReservation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.CpuReservation }).(pulumi.IntPtrOutput)
}

// The amount of shares to allocate to cpu for a custom share level.
func (o VirtualMachineOutput) CpuShareCount() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntOutput { return v.CpuShareCount }).(pulumi.IntOutput)
}

// The allocation level for cpu resources. Can be one of high, low, normal, or custom.
func (o VirtualMachineOutput) CpuShareLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.CpuShareLevel }).(pulumi.StringPtrOutput)
}

// A list of custom attributes to set on this resource.
func (o VirtualMachineOutput) CustomAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.CustomAttributes }).(pulumi.StringMapOutput)
}

// The ID of the datacenter where the VM is to be created.
func (o VirtualMachineOutput) DatacenterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.DatacenterId }).(pulumi.StringPtrOutput)
}

// The ID of a datastore cluster to put the virtual machine in.
func (o VirtualMachineOutput) DatastoreClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.DatastoreClusterId }).(pulumi.StringPtrOutput)
}

// The ID of the virtual machine's datastore. The virtual machine configuration is placed here, along with any virtual
// disks that are created without datastores.
func (o VirtualMachineOutput) DatastoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.DatastoreId }).(pulumi.StringOutput)
}

// The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
func (o VirtualMachineOutput) DefaultIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.DefaultIpAddress }).(pulumi.StringOutput)
}

// A specification for a virtual disk device on this virtual machine.
func (o VirtualMachineOutput) Disks() VirtualMachineDiskArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineDiskArrayOutput { return v.Disks }).(VirtualMachineDiskArrayOutput)
}

// When the boot type set in firmware is efi, this enables EFI secure boot.
func (o VirtualMachineOutput) EfiSecureBootEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.EfiSecureBootEnabled }).(pulumi.BoolPtrOutput)
}

// Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest.
func (o VirtualMachineOutput) EnableDiskUuid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.EnableDiskUuid }).(pulumi.BoolPtrOutput)
}

// Enable logging on this virtual machine.
func (o VirtualMachineOutput) EnableLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.EnableLogging }).(pulumi.BoolPtrOutput)
}

// The EPT/RVI (hardware memory virtualization) setting for this virtual machine. Can be one of automatic, on, or off.
func (o VirtualMachineOutput) EptRviMode() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.EptRviMode }).(pulumi.StringOutput)
}

// Extra configuration data for this virtual machine. Can be used to supply advanced parameters not normally in
// configuration, such as instance metadata, or configuration data for OVF images.
func (o VirtualMachineOutput) ExtraConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.ExtraConfig }).(pulumi.StringMapOutput)
}

// Allow the virtual machine to be rebooted when a change to `extraConfig` occurs.
func (o VirtualMachineOutput) ExtraConfigRebootRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.ExtraConfigRebootRequired }).(pulumi.BoolPtrOutput)
}

// The firmware interface to use on the virtual machine. Can be one of bios or efi.
func (o VirtualMachineOutput) Firmware() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.Firmware }).(pulumi.StringPtrOutput)
}

// The name of the folder to locate the virtual machine in.
func (o VirtualMachineOutput) Folder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.Folder }).(pulumi.StringPtrOutput)
}

// Set to true to force power-off a virtual machine if a graceful guest shutdown failed for a necessary operation.
func (o VirtualMachineOutput) ForcePowerOff() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.ForcePowerOff }).(pulumi.BoolPtrOutput)
}

// The guest ID for the operating system.
func (o VirtualMachineOutput) GuestId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.GuestId }).(pulumi.StringOutput)
}

// The current list of IP addresses on this machine, including the value of `defaultIpAddress`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
func (o VirtualMachineOutput) GuestIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.GuestIpAddresses }).(pulumi.StringArrayOutput)
}

// The hardware version for the virtual machine.
func (o VirtualMachineOutput) HardwareVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntOutput { return v.HardwareVersion }).(pulumi.IntOutput)
}

// The ID of an optional host system to pin the virtual machine to.
func (o VirtualMachineOutput) HostSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.HostSystemId }).(pulumi.StringOutput)
}

// The (non-nested) hardware virtualization setting for this virtual machine. Can be one of hvAuto, hvOn, or hvOff.
func (o VirtualMachineOutput) HvMode() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.HvMode }).(pulumi.StringOutput)
}

func (o VirtualMachineOutput) IdeControllerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.IdeControllerCount }).(pulumi.IntPtrOutput)
}

// List of IP addresses and CIDR networks to ignore while waiting for an IP
func (o VirtualMachineOutput) IgnoredGuestIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.IgnoredGuestIps }).(pulumi.StringArrayOutput)
}

// Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
func (o VirtualMachineOutput) Imported() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolOutput { return v.Imported }).(pulumi.BoolOutput)
}

// Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower
// latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard
// devices. Can be one of low, normal, medium, or high.
func (o VirtualMachineOutput) LatencySensitivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.LatencySensitivity }).(pulumi.StringPtrOutput)
}

// The size of the virtual machine's memory, in MB.
func (o VirtualMachineOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.Memory }).(pulumi.IntPtrOutput)
}

// Allow memory to be added to this virtual machine while it is running.
func (o VirtualMachineOutput) MemoryHotAddEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.MemoryHotAddEnabled }).(pulumi.BoolPtrOutput)
}

// The maximum amount of memory (in MB) or CPU (in MHz) that this virtual machine can consume, regardless of available
// resources.
func (o VirtualMachineOutput) MemoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.MemoryLimit }).(pulumi.IntPtrOutput)
}

// The amount of memory (in MB) or CPU (in MHz) that this virtual machine is guaranteed.
func (o VirtualMachineOutput) MemoryReservation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.MemoryReservation }).(pulumi.IntPtrOutput)
}

// If set true, memory resource reservation for this virtual machine will always be equal to the virtual machine's memory
// size;increases in memory size will be rejected when a corresponding reservation increase is not possible. This feature
// may only be enabled if it is currently possible to reserve all of the virtual machine's memory.
func (o VirtualMachineOutput) MemoryReservationLockedToMax() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.MemoryReservationLockedToMax }).(pulumi.BoolPtrOutput)
}

// The amount of shares to allocate to memory for a custom share level.
func (o VirtualMachineOutput) MemoryShareCount() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntOutput { return v.MemoryShareCount }).(pulumi.IntOutput)
}

// The allocation level for memory resources. Can be one of high, low, normal, or custom.
func (o VirtualMachineOutput) MemoryShareLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.MemoryShareLevel }).(pulumi.StringPtrOutput)
}

// The amount of time, in minutes, to wait for a vMotion operation to complete before failing.
func (o VirtualMachineOutput) MigrateWaitTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.MigrateWaitTimeout }).(pulumi.IntPtrOutput)
}

// The managed object reference ID of the created virtual machine.
func (o VirtualMachineOutput) Moid() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.Moid }).(pulumi.StringOutput)
}

// The name of this virtual machine.
func (o VirtualMachineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable nested hardware virtualization on this virtual machine, facilitating nested virtualization in the guest.
func (o VirtualMachineOutput) NestedHvEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.NestedHvEnabled }).(pulumi.BoolPtrOutput)
}

// A specification for a virtual NIC on this virtual machine.
func (o VirtualMachineOutput) NetworkInterfaces() VirtualMachineNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineNetworkInterfaceArrayOutput { return v.NetworkInterfaces }).(VirtualMachineNetworkInterfaceArrayOutput)
}

// The number of cores to distribute amongst the CPUs in this virtual machine. If specified, the value supplied to numCpus
// must be evenly divisible by this value.
func (o VirtualMachineOutput) NumCoresPerSocket() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.NumCoresPerSocket }).(pulumi.IntPtrOutput)
}

// The number of virtual processors to assign to this virtual machine.
func (o VirtualMachineOutput) NumCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.NumCpus }).(pulumi.IntPtrOutput)
}

// A specification for deploying a virtual machine from ovf/ova template.
func (o VirtualMachineOutput) OvfDeploy() VirtualMachineOvfDeployPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineOvfDeployPtrOutput { return v.OvfDeploy }).(VirtualMachineOvfDeployPtrOutput)
}

// A list of PCI passthrough devices
func (o VirtualMachineOutput) PciDeviceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.PciDeviceIds }).(pulumi.StringArrayOutput)
}

// A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
func (o VirtualMachineOutput) PowerState() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.PowerState }).(pulumi.StringOutput)
}

// The amount of time, in seconds, that we will be trying to power on a VM
func (o VirtualMachineOutput) PoweronTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.PoweronTimeout }).(pulumi.IntPtrOutput)
}

func (o VirtualMachineOutput) RebootRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolOutput { return v.RebootRequired }).(pulumi.BoolOutput)
}

// Triggers replacement of resource whenever it changes.
func (o VirtualMachineOutput) ReplaceTrigger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.ReplaceTrigger }).(pulumi.StringPtrOutput)
}

// The ID of a resource pool to put the virtual machine in.
func (o VirtualMachineOutput) ResourcePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.ResourcePoolId }).(pulumi.StringOutput)
}

// Enable the run of scripts after virtual machine power-on when VMware Tools is installed.
func (o VirtualMachineOutput) RunToolsScriptsAfterPowerOn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.RunToolsScriptsAfterPowerOn }).(pulumi.BoolPtrOutput)
}

// Enable the run of scripts after virtual machine resume when when VMware Tools is installed.
func (o VirtualMachineOutput) RunToolsScriptsAfterResume() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.RunToolsScriptsAfterResume }).(pulumi.BoolPtrOutput)
}

// Enable the run of scripts before guest operating system reboot when VMware Tools is installed.
func (o VirtualMachineOutput) RunToolsScriptsBeforeGuestReboot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.RunToolsScriptsBeforeGuestReboot }).(pulumi.BoolPtrOutput)
}

// Enable the run of scripts before guest operating system shutdown when VMware Tools is installed.
func (o VirtualMachineOutput) RunToolsScriptsBeforeGuestShutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.RunToolsScriptsBeforeGuestShutdown }).(pulumi.BoolPtrOutput)
}

// Enable the run of scripts before guest operating system standby when VMware Tools is installed.
func (o VirtualMachineOutput) RunToolsScriptsBeforeGuestStandby() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.RunToolsScriptsBeforeGuestStandby }).(pulumi.BoolPtrOutput)
}

func (o VirtualMachineOutput) SataControllerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.SataControllerCount }).(pulumi.IntPtrOutput)
}

// Mode for sharing the SCSI bus. The modes are physicalSharing, virtualSharing, and noSharing.
func (o VirtualMachineOutput) ScsiBusSharing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.ScsiBusSharing }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineOutput) ScsiControllerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.ScsiControllerCount }).(pulumi.IntPtrOutput)
}

// The type of SCSI bus this virtual machine will have. Can be one of lsilogic, lsilogic-sas or pvscsi.
func (o VirtualMachineOutput) ScsiType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.ScsiType }).(pulumi.StringPtrOutput)
}

// The amount of time, in minutes, to wait for shutdown when making necessary updates to the virtual machine.
func (o VirtualMachineOutput) ShutdownWaitTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.ShutdownWaitTimeout }).(pulumi.IntPtrOutput)
}

// The ID of the storage policy to assign to the virtual machine home directory.
func (o VirtualMachineOutput) StoragePolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.StoragePolicyId }).(pulumi.StringOutput)
}

// The swap file placement policy for this virtual machine. Can be one of inherit, hostLocal, or vmDirectory.
func (o VirtualMachineOutput) SwapPlacementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.SwapPlacementPolicy }).(pulumi.StringPtrOutput)
}

// Enable guest clock synchronization with the host. On vSphere 7.0 U1 and above, with only this setting the clock is
// synchronized on startup and resume. Requires VMware Tools to be installed.
func (o VirtualMachineOutput) SyncTimeWithHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.SyncTimeWithHost }).(pulumi.BoolPtrOutput)
}

// Enable periodic clock synchronization with the host. Supported only on vSphere 7.0 U1 and above. On prior versions
// setting `syncTimeWithHost` is enough for periodic synchronization. Requires VMware Tools to be installed.
func (o VirtualMachineOutput) SyncTimeWithHostPeriodically() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.SyncTimeWithHostPeriodically }).(pulumi.BoolPtrOutput)
}

// A list of tag IDs to apply to this object.
func (o VirtualMachineOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Set the upgrade policy for VMware Tools. Can be one of `manual` or `upgradeAtPowerCycle`.
func (o VirtualMachineOutput) ToolsUpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.ToolsUpgradePolicy }).(pulumi.StringPtrOutput)
}

// The UUID of the virtual machine. Also exposed as the `id` of the resource.
func (o VirtualMachineOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// vApp configuration data for this virtual machine. Can be used to provide configuration data for OVF images.
func (o VirtualMachineOutput) Vapp() VirtualMachineVappPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineVappPtrOutput { return v.Vapp }).(VirtualMachineVappPtrOutput)
}

// Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
func (o VirtualMachineOutput) VappTransports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.VappTransports }).(pulumi.StringArrayOutput)
}

// Flag to specify if Virtualization-based security is enabled for this virtual machine.
func (o VirtualMachineOutput) VbsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.VbsEnabled }).(pulumi.BoolPtrOutput)
}

// The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
func (o VirtualMachineOutput) VmwareToolsStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.VmwareToolsStatus }).(pulumi.StringOutput)
}

// The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
func (o VirtualMachineOutput) VmxPath() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.VmxPath }).(pulumi.StringOutput)
}

// Flag to specify if I/O MMU virtualization, also called Intel Virtualization Technology for Directed I/O (VT-d) and AMD
// I/O Virtualization (AMD-Vi or IOMMU), is enabled.
func (o VirtualMachineOutput) VvtdEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.VvtdEnabled }).(pulumi.BoolPtrOutput)
}

// The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
// disables the waiter.
func (o VirtualMachineOutput) WaitForGuestIpTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.WaitForGuestIpTimeout }).(pulumi.IntPtrOutput)
}

// Controls whether or not the guest network waiter waits for a routable address. When false, the waiter does not wait for
// a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria.
func (o VirtualMachineOutput) WaitForGuestNetRoutable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.WaitForGuestNetRoutable }).(pulumi.BoolPtrOutput)
}

// The amount of time, in minutes, to wait for an available IP address on this virtual machine. A value less than 1
// disables the waiter.
func (o VirtualMachineOutput) WaitForGuestNetTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.WaitForGuestNetTimeout }).(pulumi.IntPtrOutput)
}

type VirtualMachineArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) Index(i pulumi.IntInput) VirtualMachineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualMachine {
		return vs[0].([]*VirtualMachine)[vs[1].(int)]
	}).(VirtualMachineOutput)
}

type VirtualMachineMapOutput struct{ *pulumi.OutputState }

func (VirtualMachineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) MapIndex(k pulumi.StringInput) VirtualMachineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualMachine {
		return vs[0].(map[string]*VirtualMachine)[vs[1].(string)]
	}).(VirtualMachineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInput)(nil)).Elem(), &VirtualMachine{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineArrayInput)(nil)).Elem(), VirtualMachineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineMapInput)(nil)).Elem(), VirtualMachineMap{})
	pulumi.RegisterOutputType(VirtualMachineOutput{})
	pulumi.RegisterOutputType(VirtualMachineArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineMapOutput{})
}
