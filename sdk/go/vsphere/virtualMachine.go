// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type VirtualMachine struct {
	pulumi.CustomResourceState

	// The guest name for the operating system when `guestId` is `otherGuest` or `otherGuest64`.
	AlternateGuestName pulumi.StringPtrOutput `pulumi:"alternateGuestName"`
	// A user-provided description of the virtual machine.
	Annotation pulumi.StringOutput `pulumi:"annotation"`
	// The number of milliseconds to wait before starting the boot sequence. The default is no delay.
	BootDelay pulumi.IntPtrOutput `pulumi:"bootDelay"`
	// The number of milliseconds to wait before retrying the boot sequence. This option is only valid if `bootRetryEnabled` is `true`. Default: `10000` (10 seconds).
	BootRetryDelay pulumi.IntPtrOutput `pulumi:"bootRetryDelay"`
	// If set to `true`, a virtual machine that fails to boot will try again after the delay defined in `bootRetryDelay`. Default: `false`.
	BootRetryEnabled pulumi.BoolPtrOutput `pulumi:"bootRetryEnabled"`
	// A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.
	Cdroms VirtualMachineCdromArrayOutput `pulumi:"cdroms"`
	// A unique identifier for a given version of the last configuration was applied.
	ChangeVersion pulumi.StringOutput `pulumi:"changeVersion"`
	// When specified, the virtual machine will be created as a clone of a specified template. Optional customization options can be submitted for the resource. See creating a virtual machine from a template for more information.
	Clone VirtualMachineClonePtrOutput `pulumi:"clone"`
	// Allow CPUs to be added to the virtual machine while it is powered on.
	CpuHotAddEnabled pulumi.BoolPtrOutput `pulumi:"cpuHotAddEnabled"`
	// Allow CPUs to be removed to the virtual machine while it is powered on.
	CpuHotRemoveEnabled pulumi.BoolPtrOutput `pulumi:"cpuHotRemoveEnabled"`
	// The maximum amount of CPU (in MHz) that the virtual machine can consume, regardless of available resources. The default is no limit.
	CpuLimit pulumi.IntPtrOutput `pulumi:"cpuLimit"`
	// Enable CPU performance counters on the virtual machine. Default: `false`.
	CpuPerformanceCountersEnabled pulumi.BoolPtrOutput `pulumi:"cpuPerformanceCountersEnabled"`
	// The amount of CPU (in MHz) that the virtual machine is guaranteed. The default is no reservation.
	CpuReservation pulumi.IntPtrOutput `pulumi:"cpuReservation"`
	// The number of CPU shares allocated to the virtual machine when the `cpuShareLevel` is `custom`.
	CpuShareCount pulumi.IntOutput `pulumi:"cpuShareCount"`
	// The allocation level for the virtual machine CPU resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	CpuShareLevel pulumi.StringPtrOutput `pulumi:"cpuShareLevel"`
	// Map of custom attribute ids to attribute value strings to set for virtual machine. Please refer to the `vsphereCustomAttributes` resource for more information on setting custom attributes.
	//
	// > **NOTE:** Custom attributes requires vCenter Server and is not supported on direct ESXi host connections.
	CustomAttributes pulumi.StringMapOutput `pulumi:"customAttributes"`
	// The datacenter ID. Required only when deploying an OVF/OVA template.
	DatacenterId pulumi.StringPtrOutput `pulumi:"datacenterId"`
	// The managed object reference ID of the datastore cluster in which to place the virtual machine. This setting applies to entire virtual machine and implies that you wish to use vSphere Storage DRS with the virtual machine. See the section on virtual machine migration for more information on modifying this value.
	//
	// > **NOTE:** One of `datastoreId` or `datastoreClusterId` must be specified.
	//
	// > **NOTE:** Use of `datastoreClusterId` requires vSphere Storage DRS to be enabled on the specified datastore cluster.
	//
	// > **NOTE:** The `datastoreClusterId` setting applies to the entire virtual machine resource. You cannot assign individual individual disks to datastore clusters. In addition, you cannot use the `attach` setting to attach external disks on virtual machines that are assigned to datastore clusters.
	DatastoreClusterId pulumi.StringPtrOutput `pulumi:"datastoreClusterId"`
	// The datastore ID that on which the ISO is located. Required for using a datastore ISO. Conflicts with `clientDevice`.
	DatastoreId pulumi.StringOutput `pulumi:"datastoreId"`
	// The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
	DefaultIpAddress pulumi.StringOutput `pulumi:"defaultIpAddress"`
	// A specification for a virtual disk device on the virtual machine. See disk options for more information.
	Disks VirtualMachineDiskArrayOutput `pulumi:"disks"`
	// Use this option to enable EFI secure boot when the `firmware` type is set to is `efi`. Default: `false`.
	//
	// > **NOTE:** EFI secure boot is only available on vSphere 6.5 and later.
	EfiSecureBootEnabled pulumi.BoolPtrOutput `pulumi:"efiSecureBootEnabled"`
	// Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest. Default: `false`.
	EnableDiskUuid pulumi.BoolPtrOutput `pulumi:"enableDiskUuid"`
	// Enable logging of virtual machine events to a log file stored in the virtual machine directory. Default: `false`.
	EnableLogging pulumi.BoolPtrOutput `pulumi:"enableLogging"`
	// The EPT/RVI (hardware memory virtualization) setting for the virtual machine. One of `automatic`, `on`, or `off`. Default: `automatic`.
	EptRviMode pulumi.StringPtrOutput `pulumi:"eptRviMode"`
	// Extra configuration data for the virtual machine. Can be used to supply advanced parameters not normally in configuration, such as instance metadata and userdata.
	//
	// > **NOTE:** Do not use `extraConfig` when working with a template imported from OVF/OVA as your settings may be ignored. Use the `vapp` block `properties` section as described in Using vApp Properties for OVF/OVA Configuration.
	ExtraConfig pulumi.StringMapOutput `pulumi:"extraConfig"`
	// Allow the virtual machine to be rebooted when a change to `extraConfig` occurs. Default: `true`.
	ExtraConfigRebootRequired pulumi.BoolPtrOutput `pulumi:"extraConfigRebootRequired"`
	// The firmware for the virtual machine. One of `bios` or `efi`.
	Firmware pulumi.StringPtrOutput `pulumi:"firmware"`
	// The path to the virtual machine folder in which to place the virtual machine, relative to the datacenter path (`/<datacenter-name>/vm`).  For example, `/dc-01/vm/foo`
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// If a guest shutdown failed or times out while updating or destroying (see `shutdownWaitTimeout`), force the power-off of the virtual machine. Default: `true`.
	ForcePowerOff pulumi.BoolPtrOutput `pulumi:"forcePowerOff"`
	// The guest ID for the operating system type. For a full list of possible values, see [here][vmware-docs-guest-ids]. Default: `otherGuest64`.
	//
	// [vmware-docs-guest-ids]: https://vdc-download.vmware.com/vmwb-repository/dcr-public/b50dcbbf-051d-4204-a3e7-e1b618c1e384/538cf2ec-b34f-4bae-a332-3820ef9e7773/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
	GuestId pulumi.StringOutput `pulumi:"guestId"`
	// The current list of IP addresses on this machine, including the value of `defaultIpAddress`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
	GuestIpAddresses pulumi.StringArrayOutput `pulumi:"guestIpAddresses"`
	// The hardware version number. Valid range is from 4 to 19. The hardware version cannot be downgraded. See [virtual machine hardware compatibility][virtual-machine-hardware-compatibility] for more information.
	//
	// [virtual-machine-hardware-compatibility]: https://kb.vmware.com/s/article/2007240
	HardwareVersion pulumi.IntOutput `pulumi:"hardwareVersion"`
	// The managed object reference ID of a host on which to place the virtual machine. See the section on virtual machine migration for more information on modifying this value. When using a vSphere cluster, if a `hostSystemId` is not supplied, vSphere will select a host in the cluster to place the virtual machine, according to any defaults or vSphere DRS placement policies.
	HostSystemId pulumi.StringOutput `pulumi:"hostSystemId"`
	// The hardware virtualization (non-nested) setting for the virtual machine. One of `hvAuto`, `hvOn`, or `hvOff`. Default: `hvAuto`.
	HvMode pulumi.StringPtrOutput `pulumi:"hvMode"`
	// The number of IDE controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: `2`.
	IdeControllerCount pulumi.IntPtrOutput `pulumi:"ideControllerCount"`
	// List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: `[]`.
	IgnoredGuestIps pulumi.StringArrayOutput `pulumi:"ignoredGuestIps"`
	// Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
	Imported pulumi.BoolOutput `pulumi:"imported"`
	// Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard devices. One of `low`, `normal`, `medium`, or `high`.
	//
	// > **NOTE:** On higher sensitivities, you may need to adjust the `memoryReservation` to the full amount of memory provisioned for the virtual machine.
	LatencySensitivity pulumi.StringPtrOutput `pulumi:"latencySensitivity"`
	// The memory size to assign to the virtual machine, in MB. Default: `1024` (1 GB).
	Memory pulumi.IntPtrOutput `pulumi:"memory"`
	// Allow memory to be added to the virtual machine while it is powered on.
	//
	// > **NOTE:** CPU and memory hot add options are not available on all guest operating systems. Please refer to the [VMware Guest OS Compatibility Guide][vmware-docs-compat-guide] to which settings are allow for your guest operating system. In addition, at least one `pulumi up` must be run before you are able to use CPU and memory hot add.
	//
	// [vmware-docs-compat-guide]: http://partnerweb.vmware.com/comp_guide2/pdf/VMware_GOS_Compatibility_Guide.pdf
	//
	// > **NOTE:** For Linux 64-bit guest operating systems with less than or equal to 3GB, the virtual machine must powered off to add memory beyond 3GB. Subsequent hot add of memory does not require the virtual machine to be powered-off to apply the plan. Please refer to [VMware KB 2008405][vmware-kb-2008405].
	//
	// [vmware-kb-2008405]: https://kb.vmware.com/s/article/2008405
	MemoryHotAddEnabled pulumi.BoolPtrOutput `pulumi:"memoryHotAddEnabled"`
	// The maximum amount of memory (in MB) that th virtual machine can consume, regardless of available resources. The default is no limit.
	MemoryLimit pulumi.IntPtrOutput `pulumi:"memoryLimit"`
	// The amount of memory (in MB) that the virtual machine is guaranteed. The default is no reservation.
	MemoryReservation pulumi.IntPtrOutput `pulumi:"memoryReservation"`
	// The number of memory shares allocated to the virtual machine when the `memoryShareLevel` is `custom`.
	MemoryShareCount pulumi.IntOutput `pulumi:"memoryShareCount"`
	// The allocation level for the virtual machine memory resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	MemoryShareLevel pulumi.StringPtrOutput `pulumi:"memoryShareLevel"`
	// The amount of time, in minutes, to wait for a virtual machine migration to complete before failing. Default: `10` minutes. See the section on virtual machine migration for more information.
	MigrateWaitTimeout pulumi.IntPtrOutput `pulumi:"migrateWaitTimeout"`
	// The managed object reference ID of the created virtual machine.
	Moid pulumi.StringOutput `pulumi:"moid"`
	// The name of the virtual machine.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable nested hardware virtualization on the virtual machine, facilitating nested virtualization in the guest operating system. Default: `false`.
	NestedHvEnabled pulumi.BoolPtrOutput `pulumi:"nestedHvEnabled"`
	// A specification for a virtual NIC on the virtual machine. See network interface options for more information.
	NetworkInterfaces VirtualMachineNetworkInterfaceArrayOutput `pulumi:"networkInterfaces"`
	// The number of cores per socket in the virtual machine. The number of vCPUs on the virtual machine will be `numCpus` divided by `numCoresPerSocket`. If specified, the value supplied to `numCpus` must be evenly divisible by this value. Default: `1`.
	NumCoresPerSocket pulumi.IntPtrOutput `pulumi:"numCoresPerSocket"`
	// The total number of virtual processor cores to assign to the virtual machine. Default: `1`.
	NumCpus pulumi.IntPtrOutput `pulumi:"numCpus"`
	// When specified, the virtual machine will be deployed from the provided OVF/OVA template. See creating a virtual machine from an OVF/OVA template for more information.
	OvfDeploy VirtualMachineOvfDeployPtrOutput `pulumi:"ovfDeploy"`
	// List of host PCI device IDs in which to create PCI passthroughs.
	//
	// > **NOTE:** Cloning requires vCenter Server and is not supported on direct ESXi host connections.
	PciDeviceIds pulumi.StringArrayOutput `pulumi:"pciDeviceIds"`
	// A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
	PowerState pulumi.StringOutput `pulumi:"powerState"`
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout pulumi.IntPtrOutput `pulumi:"poweronTimeout"`
	// Value internal to Terraform used to determine if a configuration set change requires a reboot.
	RebootRequired pulumi.BoolOutput `pulumi:"rebootRequired"`
	// Triggers replacement of resource whenever it changes.
	//
	// For example, `replaceTrigger = sha256(format("%s-%s",data.template_file.cloud_init_metadata.rendered,data.template_file.cloud_init_userdata.rendered))` will fingerprint the changes in cloud-init metadata and userdata templates. This will enable a replacement of the resource whenever the dependant template renders a new configuration. (Forces a replacement.)
	ReplaceTrigger pulumi.StringPtrOutput `pulumi:"replaceTrigger"`
	// The managed object reference ID of the resource pool in which to place the virtual machine. See the Virtual Machine Migration section for more information on modifying this value.
	//
	// > **NOTE:** All clusters and standalone hosts have a default root resource pool. This resource argument does not directly accept the cluster or standalone host resource. For more information, see the section on specifying the Root Resource Pool in the `ResourcePool` data source documentation on using the root resource pool.
	ResourcePoolId pulumi.StringOutput `pulumi:"resourcePoolId"`
	// Enable post-power-on scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsAfterPowerOn pulumi.BoolPtrOutput `pulumi:"runToolsScriptsAfterPowerOn"`
	// Enable ost-resume scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsAfterResume pulumi.BoolPtrOutput `pulumi:"runToolsScriptsAfterResume"`
	// Enable pre-reboot scripts to run when VMware Tools is installed. Default: `false`.
	RunToolsScriptsBeforeGuestReboot pulumi.BoolPtrOutput `pulumi:"runToolsScriptsBeforeGuestReboot"`
	// Enable pre-shutdown scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestShutdown pulumi.BoolPtrOutput `pulumi:"runToolsScriptsBeforeGuestShutdown"`
	// Enable pre-standby scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestStandby pulumi.BoolPtrOutput `pulumi:"runToolsScriptsBeforeGuestStandby"`
	// The number of SATA controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	SataControllerCount pulumi.IntPtrOutput `pulumi:"sataControllerCount"`
	// The type of SCSI bus sharing for the virtual machine SCSI controller. One of `physicalSharing`, `virtualSharing`, and `noSharing`. Default: `noSharing`.
	ScsiBusSharing pulumi.StringPtrOutput `pulumi:"scsiBusSharing"`
	// The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	ScsiControllerCount pulumi.IntPtrOutput `pulumi:"scsiControllerCount"`
	// The SCSI controller type for the virtual machine. One of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic SAS) or `pvscsi` (VMware Paravirtual). Default: `pvscsi`.
	ScsiType pulumi.StringPtrOutput `pulumi:"scsiType"`
	// The amount of time, in minutes, to wait for a graceful guest shutdown when making necessary updates to the virtual machine. If `forcePowerOff` is set to `true`, the virtual machine will be forced to power-off after the timeout, otherwise an error is returned. Default: `3` minutes.
	ShutdownWaitTimeout pulumi.IntPtrOutput `pulumi:"shutdownWaitTimeout"`
	// The UUID of the storage policy to assign to the virtual disk.
	StoragePolicyId pulumi.StringOutput `pulumi:"storagePolicyId"`
	// The swap file placement policy for the virtual machine. One of `inherit`, `hostLocal`, or `vmDirectory`. Default: `inherit`.
	SwapPlacementPolicy pulumi.StringPtrOutput `pulumi:"swapPlacementPolicy"`
	// Enable the guest operating system to synchronization its clock with the host when the virtual machine is powered on or resumed. Requires vSphere 7.0 Update 1 and later. Requires VMware Tools to be installed. Default: `false`.
	SyncTimeWithHost pulumi.BoolPtrOutput `pulumi:"syncTimeWithHost"`
	// Enable the guest operating system to periodically synchronize its clock with the host. Requires vSphere 7.0 Update 1 and later. On previous versions, setting `syncTimeWithHost` is will enable periodic synchronization. Requires VMware Tools to be installed. Default: `false`.
	SyncTimeWithHostPeriodically pulumi.BoolPtrOutput `pulumi:"syncTimeWithHostPeriodically"`
	// The IDs of any tags to attach to this resource. Please refer to the `Tag` resource for more information on applying tags to virtual machine resources.
	//
	// > **NOTE:** Tagging support is unsupported on direct ESXi host connections and requires vCenter Server instance.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Enable automatic upgrade of the VMware Tools version when the virtual machine is rebooted. If necessary, VMware Tools is upgraded to the latest version supported by the host on which the virtual machine is running. Requires VMware Tools to be installed. One of `manual` or `upgradeAtPowerCycle`. Default: `manual`.
	ToolsUpgradePolicy pulumi.StringPtrOutput `pulumi:"toolsUpgradePolicy"`
	// The UUID of the virtual disk VMDK file. This is used to track the virtual disk on the virtual machine.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Used for vApp configurations. The only sub-key available is `properties`, which is a key/value map of properties for virtual machines imported from and OVF/OVA. See Using vApp Properties for OVF/OVA Configuration for more information.
	Vapp VirtualMachineVappPtrOutput `pulumi:"vapp"`
	// Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
	VappTransports pulumi.StringArrayOutput `pulumi:"vappTransports"`
	// Enable Virtualization Based Security. Requires `firmware` to be `efi`. In addition, `vvtdEnabled`, `nestedHvEnabled`, and `efiSecureBootEnabled` must all have a value of `true`. Supported on vSphere 6.7 and later. Default: `false`.
	VbsEnabled pulumi.BoolPtrOutput `pulumi:"vbsEnabled"`
	// The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
	VmwareToolsStatus pulumi.StringOutput `pulumi:"vmwareToolsStatus"`
	// The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
	VmxPath pulumi.StringOutput `pulumi:"vmxPath"`
	// Enable Intel Virtualization Technology for Directed I/O for the virtual machine (_I/O MMU_ in the vSphere Client). Supported on vSphere 6.7 and later. Default: `false`.
	VvtdEnabled pulumi.BoolPtrOutput `pulumi:"vvtdEnabled"`
	// The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. This should only be used if the version VMware Tools does not allow the `waitForGuestNetTimeout` waiter to be used. A value less than `1` disables the waiter. Default: `0`.
	WaitForGuestIpTimeout pulumi.IntPtrOutput `pulumi:"waitForGuestIpTimeout"`
	// Controls whether or not the guest network waiter waits for a routable address. When `false`, the waiter does not wait for a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria. This property is ignored if the `waitForGuestIpTimeout` waiter is used. Default: `true`.
	WaitForGuestNetRoutable pulumi.BoolPtrOutput `pulumi:"waitForGuestNetRoutable"`
	// The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. Older versions of VMware Tools do not populate this property. In those cases, this waiter can be disabled and the `waitForGuestIpTimeout` waiter can be used instead. A value less than `1` disables the waiter. Default: `5` minutes.
	WaitForGuestNetTimeout pulumi.IntPtrOutput `pulumi:"waitForGuestNetTimeout"`
}

// NewVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachine(ctx *pulumi.Context,
	name string, args *VirtualMachineArgs, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourcePoolId == nil {
		return nil, errors.New("invalid value for required argument 'ResourcePoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualMachine
	err := ctx.RegisterResource("vsphere:index/virtualMachine:VirtualMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachine gets an existing VirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineState, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	var resource VirtualMachine
	err := ctx.ReadResource("vsphere:index/virtualMachine:VirtualMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachine resources.
type virtualMachineState struct {
	// The guest name for the operating system when `guestId` is `otherGuest` or `otherGuest64`.
	AlternateGuestName *string `pulumi:"alternateGuestName"`
	// A user-provided description of the virtual machine.
	Annotation *string `pulumi:"annotation"`
	// The number of milliseconds to wait before starting the boot sequence. The default is no delay.
	BootDelay *int `pulumi:"bootDelay"`
	// The number of milliseconds to wait before retrying the boot sequence. This option is only valid if `bootRetryEnabled` is `true`. Default: `10000` (10 seconds).
	BootRetryDelay *int `pulumi:"bootRetryDelay"`
	// If set to `true`, a virtual machine that fails to boot will try again after the delay defined in `bootRetryDelay`. Default: `false`.
	BootRetryEnabled *bool `pulumi:"bootRetryEnabled"`
	// A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.
	Cdroms []VirtualMachineCdrom `pulumi:"cdroms"`
	// A unique identifier for a given version of the last configuration was applied.
	ChangeVersion *string `pulumi:"changeVersion"`
	// When specified, the virtual machine will be created as a clone of a specified template. Optional customization options can be submitted for the resource. See creating a virtual machine from a template for more information.
	Clone *VirtualMachineClone `pulumi:"clone"`
	// Allow CPUs to be added to the virtual machine while it is powered on.
	CpuHotAddEnabled *bool `pulumi:"cpuHotAddEnabled"`
	// Allow CPUs to be removed to the virtual machine while it is powered on.
	CpuHotRemoveEnabled *bool `pulumi:"cpuHotRemoveEnabled"`
	// The maximum amount of CPU (in MHz) that the virtual machine can consume, regardless of available resources. The default is no limit.
	CpuLimit *int `pulumi:"cpuLimit"`
	// Enable CPU performance counters on the virtual machine. Default: `false`.
	CpuPerformanceCountersEnabled *bool `pulumi:"cpuPerformanceCountersEnabled"`
	// The amount of CPU (in MHz) that the virtual machine is guaranteed. The default is no reservation.
	CpuReservation *int `pulumi:"cpuReservation"`
	// The number of CPU shares allocated to the virtual machine when the `cpuShareLevel` is `custom`.
	CpuShareCount *int `pulumi:"cpuShareCount"`
	// The allocation level for the virtual machine CPU resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	CpuShareLevel *string `pulumi:"cpuShareLevel"`
	// Map of custom attribute ids to attribute value strings to set for virtual machine. Please refer to the `vsphereCustomAttributes` resource for more information on setting custom attributes.
	//
	// > **NOTE:** Custom attributes requires vCenter Server and is not supported on direct ESXi host connections.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// The datacenter ID. Required only when deploying an OVF/OVA template.
	DatacenterId *string `pulumi:"datacenterId"`
	// The managed object reference ID of the datastore cluster in which to place the virtual machine. This setting applies to entire virtual machine and implies that you wish to use vSphere Storage DRS with the virtual machine. See the section on virtual machine migration for more information on modifying this value.
	//
	// > **NOTE:** One of `datastoreId` or `datastoreClusterId` must be specified.
	//
	// > **NOTE:** Use of `datastoreClusterId` requires vSphere Storage DRS to be enabled on the specified datastore cluster.
	//
	// > **NOTE:** The `datastoreClusterId` setting applies to the entire virtual machine resource. You cannot assign individual individual disks to datastore clusters. In addition, you cannot use the `attach` setting to attach external disks on virtual machines that are assigned to datastore clusters.
	DatastoreClusterId *string `pulumi:"datastoreClusterId"`
	// The datastore ID that on which the ISO is located. Required for using a datastore ISO. Conflicts with `clientDevice`.
	DatastoreId *string `pulumi:"datastoreId"`
	// The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
	DefaultIpAddress *string `pulumi:"defaultIpAddress"`
	// A specification for a virtual disk device on the virtual machine. See disk options for more information.
	Disks []VirtualMachineDisk `pulumi:"disks"`
	// Use this option to enable EFI secure boot when the `firmware` type is set to is `efi`. Default: `false`.
	//
	// > **NOTE:** EFI secure boot is only available on vSphere 6.5 and later.
	EfiSecureBootEnabled *bool `pulumi:"efiSecureBootEnabled"`
	// Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest. Default: `false`.
	EnableDiskUuid *bool `pulumi:"enableDiskUuid"`
	// Enable logging of virtual machine events to a log file stored in the virtual machine directory. Default: `false`.
	EnableLogging *bool `pulumi:"enableLogging"`
	// The EPT/RVI (hardware memory virtualization) setting for the virtual machine. One of `automatic`, `on`, or `off`. Default: `automatic`.
	EptRviMode *string `pulumi:"eptRviMode"`
	// Extra configuration data for the virtual machine. Can be used to supply advanced parameters not normally in configuration, such as instance metadata and userdata.
	//
	// > **NOTE:** Do not use `extraConfig` when working with a template imported from OVF/OVA as your settings may be ignored. Use the `vapp` block `properties` section as described in Using vApp Properties for OVF/OVA Configuration.
	ExtraConfig map[string]string `pulumi:"extraConfig"`
	// Allow the virtual machine to be rebooted when a change to `extraConfig` occurs. Default: `true`.
	ExtraConfigRebootRequired *bool `pulumi:"extraConfigRebootRequired"`
	// The firmware for the virtual machine. One of `bios` or `efi`.
	Firmware *string `pulumi:"firmware"`
	// The path to the virtual machine folder in which to place the virtual machine, relative to the datacenter path (`/<datacenter-name>/vm`).  For example, `/dc-01/vm/foo`
	Folder *string `pulumi:"folder"`
	// If a guest shutdown failed or times out while updating or destroying (see `shutdownWaitTimeout`), force the power-off of the virtual machine. Default: `true`.
	ForcePowerOff *bool `pulumi:"forcePowerOff"`
	// The guest ID for the operating system type. For a full list of possible values, see [here][vmware-docs-guest-ids]. Default: `otherGuest64`.
	//
	// [vmware-docs-guest-ids]: https://vdc-download.vmware.com/vmwb-repository/dcr-public/b50dcbbf-051d-4204-a3e7-e1b618c1e384/538cf2ec-b34f-4bae-a332-3820ef9e7773/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
	GuestId *string `pulumi:"guestId"`
	// The current list of IP addresses on this machine, including the value of `defaultIpAddress`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
	GuestIpAddresses []string `pulumi:"guestIpAddresses"`
	// The hardware version number. Valid range is from 4 to 19. The hardware version cannot be downgraded. See [virtual machine hardware compatibility][virtual-machine-hardware-compatibility] for more information.
	//
	// [virtual-machine-hardware-compatibility]: https://kb.vmware.com/s/article/2007240
	HardwareVersion *int `pulumi:"hardwareVersion"`
	// The managed object reference ID of a host on which to place the virtual machine. See the section on virtual machine migration for more information on modifying this value. When using a vSphere cluster, if a `hostSystemId` is not supplied, vSphere will select a host in the cluster to place the virtual machine, according to any defaults or vSphere DRS placement policies.
	HostSystemId *string `pulumi:"hostSystemId"`
	// The hardware virtualization (non-nested) setting for the virtual machine. One of `hvAuto`, `hvOn`, or `hvOff`. Default: `hvAuto`.
	HvMode *string `pulumi:"hvMode"`
	// The number of IDE controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: `2`.
	IdeControllerCount *int `pulumi:"ideControllerCount"`
	// List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: `[]`.
	IgnoredGuestIps []string `pulumi:"ignoredGuestIps"`
	// Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
	Imported *bool `pulumi:"imported"`
	// Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard devices. One of `low`, `normal`, `medium`, or `high`.
	//
	// > **NOTE:** On higher sensitivities, you may need to adjust the `memoryReservation` to the full amount of memory provisioned for the virtual machine.
	LatencySensitivity *string `pulumi:"latencySensitivity"`
	// The memory size to assign to the virtual machine, in MB. Default: `1024` (1 GB).
	Memory *int `pulumi:"memory"`
	// Allow memory to be added to the virtual machine while it is powered on.
	//
	// > **NOTE:** CPU and memory hot add options are not available on all guest operating systems. Please refer to the [VMware Guest OS Compatibility Guide][vmware-docs-compat-guide] to which settings are allow for your guest operating system. In addition, at least one `pulumi up` must be run before you are able to use CPU and memory hot add.
	//
	// [vmware-docs-compat-guide]: http://partnerweb.vmware.com/comp_guide2/pdf/VMware_GOS_Compatibility_Guide.pdf
	//
	// > **NOTE:** For Linux 64-bit guest operating systems with less than or equal to 3GB, the virtual machine must powered off to add memory beyond 3GB. Subsequent hot add of memory does not require the virtual machine to be powered-off to apply the plan. Please refer to [VMware KB 2008405][vmware-kb-2008405].
	//
	// [vmware-kb-2008405]: https://kb.vmware.com/s/article/2008405
	MemoryHotAddEnabled *bool `pulumi:"memoryHotAddEnabled"`
	// The maximum amount of memory (in MB) that th virtual machine can consume, regardless of available resources. The default is no limit.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// The amount of memory (in MB) that the virtual machine is guaranteed. The default is no reservation.
	MemoryReservation *int `pulumi:"memoryReservation"`
	// The number of memory shares allocated to the virtual machine when the `memoryShareLevel` is `custom`.
	MemoryShareCount *int `pulumi:"memoryShareCount"`
	// The allocation level for the virtual machine memory resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	MemoryShareLevel *string `pulumi:"memoryShareLevel"`
	// The amount of time, in minutes, to wait for a virtual machine migration to complete before failing. Default: `10` minutes. See the section on virtual machine migration for more information.
	MigrateWaitTimeout *int `pulumi:"migrateWaitTimeout"`
	// The managed object reference ID of the created virtual machine.
	Moid *string `pulumi:"moid"`
	// The name of the virtual machine.
	Name *string `pulumi:"name"`
	// Enable nested hardware virtualization on the virtual machine, facilitating nested virtualization in the guest operating system. Default: `false`.
	NestedHvEnabled *bool `pulumi:"nestedHvEnabled"`
	// A specification for a virtual NIC on the virtual machine. See network interface options for more information.
	NetworkInterfaces []VirtualMachineNetworkInterface `pulumi:"networkInterfaces"`
	// The number of cores per socket in the virtual machine. The number of vCPUs on the virtual machine will be `numCpus` divided by `numCoresPerSocket`. If specified, the value supplied to `numCpus` must be evenly divisible by this value. Default: `1`.
	NumCoresPerSocket *int `pulumi:"numCoresPerSocket"`
	// The total number of virtual processor cores to assign to the virtual machine. Default: `1`.
	NumCpus *int `pulumi:"numCpus"`
	// When specified, the virtual machine will be deployed from the provided OVF/OVA template. See creating a virtual machine from an OVF/OVA template for more information.
	OvfDeploy *VirtualMachineOvfDeploy `pulumi:"ovfDeploy"`
	// List of host PCI device IDs in which to create PCI passthroughs.
	//
	// > **NOTE:** Cloning requires vCenter Server and is not supported on direct ESXi host connections.
	PciDeviceIds []string `pulumi:"pciDeviceIds"`
	// A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
	PowerState *string `pulumi:"powerState"`
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout *int `pulumi:"poweronTimeout"`
	// Value internal to Terraform used to determine if a configuration set change requires a reboot.
	RebootRequired *bool `pulumi:"rebootRequired"`
	// Triggers replacement of resource whenever it changes.
	//
	// For example, `replaceTrigger = sha256(format("%s-%s",data.template_file.cloud_init_metadata.rendered,data.template_file.cloud_init_userdata.rendered))` will fingerprint the changes in cloud-init metadata and userdata templates. This will enable a replacement of the resource whenever the dependant template renders a new configuration. (Forces a replacement.)
	ReplaceTrigger *string `pulumi:"replaceTrigger"`
	// The managed object reference ID of the resource pool in which to place the virtual machine. See the Virtual Machine Migration section for more information on modifying this value.
	//
	// > **NOTE:** All clusters and standalone hosts have a default root resource pool. This resource argument does not directly accept the cluster or standalone host resource. For more information, see the section on specifying the Root Resource Pool in the `ResourcePool` data source documentation on using the root resource pool.
	ResourcePoolId *string `pulumi:"resourcePoolId"`
	// Enable post-power-on scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsAfterPowerOn *bool `pulumi:"runToolsScriptsAfterPowerOn"`
	// Enable ost-resume scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsAfterResume *bool `pulumi:"runToolsScriptsAfterResume"`
	// Enable pre-reboot scripts to run when VMware Tools is installed. Default: `false`.
	RunToolsScriptsBeforeGuestReboot *bool `pulumi:"runToolsScriptsBeforeGuestReboot"`
	// Enable pre-shutdown scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestShutdown *bool `pulumi:"runToolsScriptsBeforeGuestShutdown"`
	// Enable pre-standby scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestStandby *bool `pulumi:"runToolsScriptsBeforeGuestStandby"`
	// The number of SATA controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	SataControllerCount *int `pulumi:"sataControllerCount"`
	// The type of SCSI bus sharing for the virtual machine SCSI controller. One of `physicalSharing`, `virtualSharing`, and `noSharing`. Default: `noSharing`.
	ScsiBusSharing *string `pulumi:"scsiBusSharing"`
	// The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	ScsiControllerCount *int `pulumi:"scsiControllerCount"`
	// The SCSI controller type for the virtual machine. One of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic SAS) or `pvscsi` (VMware Paravirtual). Default: `pvscsi`.
	ScsiType *string `pulumi:"scsiType"`
	// The amount of time, in minutes, to wait for a graceful guest shutdown when making necessary updates to the virtual machine. If `forcePowerOff` is set to `true`, the virtual machine will be forced to power-off after the timeout, otherwise an error is returned. Default: `3` minutes.
	ShutdownWaitTimeout *int `pulumi:"shutdownWaitTimeout"`
	// The UUID of the storage policy to assign to the virtual disk.
	StoragePolicyId *string `pulumi:"storagePolicyId"`
	// The swap file placement policy for the virtual machine. One of `inherit`, `hostLocal`, or `vmDirectory`. Default: `inherit`.
	SwapPlacementPolicy *string `pulumi:"swapPlacementPolicy"`
	// Enable the guest operating system to synchronization its clock with the host when the virtual machine is powered on or resumed. Requires vSphere 7.0 Update 1 and later. Requires VMware Tools to be installed. Default: `false`.
	SyncTimeWithHost *bool `pulumi:"syncTimeWithHost"`
	// Enable the guest operating system to periodically synchronize its clock with the host. Requires vSphere 7.0 Update 1 and later. On previous versions, setting `syncTimeWithHost` is will enable periodic synchronization. Requires VMware Tools to be installed. Default: `false`.
	SyncTimeWithHostPeriodically *bool `pulumi:"syncTimeWithHostPeriodically"`
	// The IDs of any tags to attach to this resource. Please refer to the `Tag` resource for more information on applying tags to virtual machine resources.
	//
	// > **NOTE:** Tagging support is unsupported on direct ESXi host connections and requires vCenter Server instance.
	Tags []string `pulumi:"tags"`
	// Enable automatic upgrade of the VMware Tools version when the virtual machine is rebooted. If necessary, VMware Tools is upgraded to the latest version supported by the host on which the virtual machine is running. Requires VMware Tools to be installed. One of `manual` or `upgradeAtPowerCycle`. Default: `manual`.
	ToolsUpgradePolicy *string `pulumi:"toolsUpgradePolicy"`
	// The UUID of the virtual disk VMDK file. This is used to track the virtual disk on the virtual machine.
	Uuid *string `pulumi:"uuid"`
	// Used for vApp configurations. The only sub-key available is `properties`, which is a key/value map of properties for virtual machines imported from and OVF/OVA. See Using vApp Properties for OVF/OVA Configuration for more information.
	Vapp *VirtualMachineVapp `pulumi:"vapp"`
	// Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
	VappTransports []string `pulumi:"vappTransports"`
	// Enable Virtualization Based Security. Requires `firmware` to be `efi`. In addition, `vvtdEnabled`, `nestedHvEnabled`, and `efiSecureBootEnabled` must all have a value of `true`. Supported on vSphere 6.7 and later. Default: `false`.
	VbsEnabled *bool `pulumi:"vbsEnabled"`
	// The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
	VmwareToolsStatus *string `pulumi:"vmwareToolsStatus"`
	// The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
	VmxPath *string `pulumi:"vmxPath"`
	// Enable Intel Virtualization Technology for Directed I/O for the virtual machine (_I/O MMU_ in the vSphere Client). Supported on vSphere 6.7 and later. Default: `false`.
	VvtdEnabled *bool `pulumi:"vvtdEnabled"`
	// The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. This should only be used if the version VMware Tools does not allow the `waitForGuestNetTimeout` waiter to be used. A value less than `1` disables the waiter. Default: `0`.
	WaitForGuestIpTimeout *int `pulumi:"waitForGuestIpTimeout"`
	// Controls whether or not the guest network waiter waits for a routable address. When `false`, the waiter does not wait for a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria. This property is ignored if the `waitForGuestIpTimeout` waiter is used. Default: `true`.
	WaitForGuestNetRoutable *bool `pulumi:"waitForGuestNetRoutable"`
	// The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. Older versions of VMware Tools do not populate this property. In those cases, this waiter can be disabled and the `waitForGuestIpTimeout` waiter can be used instead. A value less than `1` disables the waiter. Default: `5` minutes.
	WaitForGuestNetTimeout *int `pulumi:"waitForGuestNetTimeout"`
}

type VirtualMachineState struct {
	// The guest name for the operating system when `guestId` is `otherGuest` or `otherGuest64`.
	AlternateGuestName pulumi.StringPtrInput
	// A user-provided description of the virtual machine.
	Annotation pulumi.StringPtrInput
	// The number of milliseconds to wait before starting the boot sequence. The default is no delay.
	BootDelay pulumi.IntPtrInput
	// The number of milliseconds to wait before retrying the boot sequence. This option is only valid if `bootRetryEnabled` is `true`. Default: `10000` (10 seconds).
	BootRetryDelay pulumi.IntPtrInput
	// If set to `true`, a virtual machine that fails to boot will try again after the delay defined in `bootRetryDelay`. Default: `false`.
	BootRetryEnabled pulumi.BoolPtrInput
	// A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.
	Cdroms VirtualMachineCdromArrayInput
	// A unique identifier for a given version of the last configuration was applied.
	ChangeVersion pulumi.StringPtrInput
	// When specified, the virtual machine will be created as a clone of a specified template. Optional customization options can be submitted for the resource. See creating a virtual machine from a template for more information.
	Clone VirtualMachineClonePtrInput
	// Allow CPUs to be added to the virtual machine while it is powered on.
	CpuHotAddEnabled pulumi.BoolPtrInput
	// Allow CPUs to be removed to the virtual machine while it is powered on.
	CpuHotRemoveEnabled pulumi.BoolPtrInput
	// The maximum amount of CPU (in MHz) that the virtual machine can consume, regardless of available resources. The default is no limit.
	CpuLimit pulumi.IntPtrInput
	// Enable CPU performance counters on the virtual machine. Default: `false`.
	CpuPerformanceCountersEnabled pulumi.BoolPtrInput
	// The amount of CPU (in MHz) that the virtual machine is guaranteed. The default is no reservation.
	CpuReservation pulumi.IntPtrInput
	// The number of CPU shares allocated to the virtual machine when the `cpuShareLevel` is `custom`.
	CpuShareCount pulumi.IntPtrInput
	// The allocation level for the virtual machine CPU resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	CpuShareLevel pulumi.StringPtrInput
	// Map of custom attribute ids to attribute value strings to set for virtual machine. Please refer to the `vsphereCustomAttributes` resource for more information on setting custom attributes.
	//
	// > **NOTE:** Custom attributes requires vCenter Server and is not supported on direct ESXi host connections.
	CustomAttributes pulumi.StringMapInput
	// The datacenter ID. Required only when deploying an OVF/OVA template.
	DatacenterId pulumi.StringPtrInput
	// The managed object reference ID of the datastore cluster in which to place the virtual machine. This setting applies to entire virtual machine and implies that you wish to use vSphere Storage DRS with the virtual machine. See the section on virtual machine migration for more information on modifying this value.
	//
	// > **NOTE:** One of `datastoreId` or `datastoreClusterId` must be specified.
	//
	// > **NOTE:** Use of `datastoreClusterId` requires vSphere Storage DRS to be enabled on the specified datastore cluster.
	//
	// > **NOTE:** The `datastoreClusterId` setting applies to the entire virtual machine resource. You cannot assign individual individual disks to datastore clusters. In addition, you cannot use the `attach` setting to attach external disks on virtual machines that are assigned to datastore clusters.
	DatastoreClusterId pulumi.StringPtrInput
	// The datastore ID that on which the ISO is located. Required for using a datastore ISO. Conflicts with `clientDevice`.
	DatastoreId pulumi.StringPtrInput
	// The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
	DefaultIpAddress pulumi.StringPtrInput
	// A specification for a virtual disk device on the virtual machine. See disk options for more information.
	Disks VirtualMachineDiskArrayInput
	// Use this option to enable EFI secure boot when the `firmware` type is set to is `efi`. Default: `false`.
	//
	// > **NOTE:** EFI secure boot is only available on vSphere 6.5 and later.
	EfiSecureBootEnabled pulumi.BoolPtrInput
	// Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest. Default: `false`.
	EnableDiskUuid pulumi.BoolPtrInput
	// Enable logging of virtual machine events to a log file stored in the virtual machine directory. Default: `false`.
	EnableLogging pulumi.BoolPtrInput
	// The EPT/RVI (hardware memory virtualization) setting for the virtual machine. One of `automatic`, `on`, or `off`. Default: `automatic`.
	EptRviMode pulumi.StringPtrInput
	// Extra configuration data for the virtual machine. Can be used to supply advanced parameters not normally in configuration, such as instance metadata and userdata.
	//
	// > **NOTE:** Do not use `extraConfig` when working with a template imported from OVF/OVA as your settings may be ignored. Use the `vapp` block `properties` section as described in Using vApp Properties for OVF/OVA Configuration.
	ExtraConfig pulumi.StringMapInput
	// Allow the virtual machine to be rebooted when a change to `extraConfig` occurs. Default: `true`.
	ExtraConfigRebootRequired pulumi.BoolPtrInput
	// The firmware for the virtual machine. One of `bios` or `efi`.
	Firmware pulumi.StringPtrInput
	// The path to the virtual machine folder in which to place the virtual machine, relative to the datacenter path (`/<datacenter-name>/vm`).  For example, `/dc-01/vm/foo`
	Folder pulumi.StringPtrInput
	// If a guest shutdown failed or times out while updating or destroying (see `shutdownWaitTimeout`), force the power-off of the virtual machine. Default: `true`.
	ForcePowerOff pulumi.BoolPtrInput
	// The guest ID for the operating system type. For a full list of possible values, see [here][vmware-docs-guest-ids]. Default: `otherGuest64`.
	//
	// [vmware-docs-guest-ids]: https://vdc-download.vmware.com/vmwb-repository/dcr-public/b50dcbbf-051d-4204-a3e7-e1b618c1e384/538cf2ec-b34f-4bae-a332-3820ef9e7773/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
	GuestId pulumi.StringPtrInput
	// The current list of IP addresses on this machine, including the value of `defaultIpAddress`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
	GuestIpAddresses pulumi.StringArrayInput
	// The hardware version number. Valid range is from 4 to 19. The hardware version cannot be downgraded. See [virtual machine hardware compatibility][virtual-machine-hardware-compatibility] for more information.
	//
	// [virtual-machine-hardware-compatibility]: https://kb.vmware.com/s/article/2007240
	HardwareVersion pulumi.IntPtrInput
	// The managed object reference ID of a host on which to place the virtual machine. See the section on virtual machine migration for more information on modifying this value. When using a vSphere cluster, if a `hostSystemId` is not supplied, vSphere will select a host in the cluster to place the virtual machine, according to any defaults or vSphere DRS placement policies.
	HostSystemId pulumi.StringPtrInput
	// The hardware virtualization (non-nested) setting for the virtual machine. One of `hvAuto`, `hvOn`, or `hvOff`. Default: `hvAuto`.
	HvMode pulumi.StringPtrInput
	// The number of IDE controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: `2`.
	IdeControllerCount pulumi.IntPtrInput
	// List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: `[]`.
	IgnoredGuestIps pulumi.StringArrayInput
	// Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
	Imported pulumi.BoolPtrInput
	// Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard devices. One of `low`, `normal`, `medium`, or `high`.
	//
	// > **NOTE:** On higher sensitivities, you may need to adjust the `memoryReservation` to the full amount of memory provisioned for the virtual machine.
	LatencySensitivity pulumi.StringPtrInput
	// The memory size to assign to the virtual machine, in MB. Default: `1024` (1 GB).
	Memory pulumi.IntPtrInput
	// Allow memory to be added to the virtual machine while it is powered on.
	//
	// > **NOTE:** CPU and memory hot add options are not available on all guest operating systems. Please refer to the [VMware Guest OS Compatibility Guide][vmware-docs-compat-guide] to which settings are allow for your guest operating system. In addition, at least one `pulumi up` must be run before you are able to use CPU and memory hot add.
	//
	// [vmware-docs-compat-guide]: http://partnerweb.vmware.com/comp_guide2/pdf/VMware_GOS_Compatibility_Guide.pdf
	//
	// > **NOTE:** For Linux 64-bit guest operating systems with less than or equal to 3GB, the virtual machine must powered off to add memory beyond 3GB. Subsequent hot add of memory does not require the virtual machine to be powered-off to apply the plan. Please refer to [VMware KB 2008405][vmware-kb-2008405].
	//
	// [vmware-kb-2008405]: https://kb.vmware.com/s/article/2008405
	MemoryHotAddEnabled pulumi.BoolPtrInput
	// The maximum amount of memory (in MB) that th virtual machine can consume, regardless of available resources. The default is no limit.
	MemoryLimit pulumi.IntPtrInput
	// The amount of memory (in MB) that the virtual machine is guaranteed. The default is no reservation.
	MemoryReservation pulumi.IntPtrInput
	// The number of memory shares allocated to the virtual machine when the `memoryShareLevel` is `custom`.
	MemoryShareCount pulumi.IntPtrInput
	// The allocation level for the virtual machine memory resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	MemoryShareLevel pulumi.StringPtrInput
	// The amount of time, in minutes, to wait for a virtual machine migration to complete before failing. Default: `10` minutes. See the section on virtual machine migration for more information.
	MigrateWaitTimeout pulumi.IntPtrInput
	// The managed object reference ID of the created virtual machine.
	Moid pulumi.StringPtrInput
	// The name of the virtual machine.
	Name pulumi.StringPtrInput
	// Enable nested hardware virtualization on the virtual machine, facilitating nested virtualization in the guest operating system. Default: `false`.
	NestedHvEnabled pulumi.BoolPtrInput
	// A specification for a virtual NIC on the virtual machine. See network interface options for more information.
	NetworkInterfaces VirtualMachineNetworkInterfaceArrayInput
	// The number of cores per socket in the virtual machine. The number of vCPUs on the virtual machine will be `numCpus` divided by `numCoresPerSocket`. If specified, the value supplied to `numCpus` must be evenly divisible by this value. Default: `1`.
	NumCoresPerSocket pulumi.IntPtrInput
	// The total number of virtual processor cores to assign to the virtual machine. Default: `1`.
	NumCpus pulumi.IntPtrInput
	// When specified, the virtual machine will be deployed from the provided OVF/OVA template. See creating a virtual machine from an OVF/OVA template for more information.
	OvfDeploy VirtualMachineOvfDeployPtrInput
	// List of host PCI device IDs in which to create PCI passthroughs.
	//
	// > **NOTE:** Cloning requires vCenter Server and is not supported on direct ESXi host connections.
	PciDeviceIds pulumi.StringArrayInput
	// A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
	PowerState pulumi.StringPtrInput
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout pulumi.IntPtrInput
	// Value internal to Terraform used to determine if a configuration set change requires a reboot.
	RebootRequired pulumi.BoolPtrInput
	// Triggers replacement of resource whenever it changes.
	//
	// For example, `replaceTrigger = sha256(format("%s-%s",data.template_file.cloud_init_metadata.rendered,data.template_file.cloud_init_userdata.rendered))` will fingerprint the changes in cloud-init metadata and userdata templates. This will enable a replacement of the resource whenever the dependant template renders a new configuration. (Forces a replacement.)
	ReplaceTrigger pulumi.StringPtrInput
	// The managed object reference ID of the resource pool in which to place the virtual machine. See the Virtual Machine Migration section for more information on modifying this value.
	//
	// > **NOTE:** All clusters and standalone hosts have a default root resource pool. This resource argument does not directly accept the cluster or standalone host resource. For more information, see the section on specifying the Root Resource Pool in the `ResourcePool` data source documentation on using the root resource pool.
	ResourcePoolId pulumi.StringPtrInput
	// Enable post-power-on scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsAfterPowerOn pulumi.BoolPtrInput
	// Enable ost-resume scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsAfterResume pulumi.BoolPtrInput
	// Enable pre-reboot scripts to run when VMware Tools is installed. Default: `false`.
	RunToolsScriptsBeforeGuestReboot pulumi.BoolPtrInput
	// Enable pre-shutdown scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestShutdown pulumi.BoolPtrInput
	// Enable pre-standby scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestStandby pulumi.BoolPtrInput
	// The number of SATA controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	SataControllerCount pulumi.IntPtrInput
	// The type of SCSI bus sharing for the virtual machine SCSI controller. One of `physicalSharing`, `virtualSharing`, and `noSharing`. Default: `noSharing`.
	ScsiBusSharing pulumi.StringPtrInput
	// The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	ScsiControllerCount pulumi.IntPtrInput
	// The SCSI controller type for the virtual machine. One of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic SAS) or `pvscsi` (VMware Paravirtual). Default: `pvscsi`.
	ScsiType pulumi.StringPtrInput
	// The amount of time, in minutes, to wait for a graceful guest shutdown when making necessary updates to the virtual machine. If `forcePowerOff` is set to `true`, the virtual machine will be forced to power-off after the timeout, otherwise an error is returned. Default: `3` minutes.
	ShutdownWaitTimeout pulumi.IntPtrInput
	// The UUID of the storage policy to assign to the virtual disk.
	StoragePolicyId pulumi.StringPtrInput
	// The swap file placement policy for the virtual machine. One of `inherit`, `hostLocal`, or `vmDirectory`. Default: `inherit`.
	SwapPlacementPolicy pulumi.StringPtrInput
	// Enable the guest operating system to synchronization its clock with the host when the virtual machine is powered on or resumed. Requires vSphere 7.0 Update 1 and later. Requires VMware Tools to be installed. Default: `false`.
	SyncTimeWithHost pulumi.BoolPtrInput
	// Enable the guest operating system to periodically synchronize its clock with the host. Requires vSphere 7.0 Update 1 and later. On previous versions, setting `syncTimeWithHost` is will enable periodic synchronization. Requires VMware Tools to be installed. Default: `false`.
	SyncTimeWithHostPeriodically pulumi.BoolPtrInput
	// The IDs of any tags to attach to this resource. Please refer to the `Tag` resource for more information on applying tags to virtual machine resources.
	//
	// > **NOTE:** Tagging support is unsupported on direct ESXi host connections and requires vCenter Server instance.
	Tags pulumi.StringArrayInput
	// Enable automatic upgrade of the VMware Tools version when the virtual machine is rebooted. If necessary, VMware Tools is upgraded to the latest version supported by the host on which the virtual machine is running. Requires VMware Tools to be installed. One of `manual` or `upgradeAtPowerCycle`. Default: `manual`.
	ToolsUpgradePolicy pulumi.StringPtrInput
	// The UUID of the virtual disk VMDK file. This is used to track the virtual disk on the virtual machine.
	Uuid pulumi.StringPtrInput
	// Used for vApp configurations. The only sub-key available is `properties`, which is a key/value map of properties for virtual machines imported from and OVF/OVA. See Using vApp Properties for OVF/OVA Configuration for more information.
	Vapp VirtualMachineVappPtrInput
	// Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
	VappTransports pulumi.StringArrayInput
	// Enable Virtualization Based Security. Requires `firmware` to be `efi`. In addition, `vvtdEnabled`, `nestedHvEnabled`, and `efiSecureBootEnabled` must all have a value of `true`. Supported on vSphere 6.7 and later. Default: `false`.
	VbsEnabled pulumi.BoolPtrInput
	// The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
	VmwareToolsStatus pulumi.StringPtrInput
	// The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
	VmxPath pulumi.StringPtrInput
	// Enable Intel Virtualization Technology for Directed I/O for the virtual machine (_I/O MMU_ in the vSphere Client). Supported on vSphere 6.7 and later. Default: `false`.
	VvtdEnabled pulumi.BoolPtrInput
	// The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. This should only be used if the version VMware Tools does not allow the `waitForGuestNetTimeout` waiter to be used. A value less than `1` disables the waiter. Default: `0`.
	WaitForGuestIpTimeout pulumi.IntPtrInput
	// Controls whether or not the guest network waiter waits for a routable address. When `false`, the waiter does not wait for a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria. This property is ignored if the `waitForGuestIpTimeout` waiter is used. Default: `true`.
	WaitForGuestNetRoutable pulumi.BoolPtrInput
	// The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. Older versions of VMware Tools do not populate this property. In those cases, this waiter can be disabled and the `waitForGuestIpTimeout` waiter can be used instead. A value less than `1` disables the waiter. Default: `5` minutes.
	WaitForGuestNetTimeout pulumi.IntPtrInput
}

func (VirtualMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineState)(nil)).Elem()
}

type virtualMachineArgs struct {
	// The guest name for the operating system when `guestId` is `otherGuest` or `otherGuest64`.
	AlternateGuestName *string `pulumi:"alternateGuestName"`
	// A user-provided description of the virtual machine.
	Annotation *string `pulumi:"annotation"`
	// The number of milliseconds to wait before starting the boot sequence. The default is no delay.
	BootDelay *int `pulumi:"bootDelay"`
	// The number of milliseconds to wait before retrying the boot sequence. This option is only valid if `bootRetryEnabled` is `true`. Default: `10000` (10 seconds).
	BootRetryDelay *int `pulumi:"bootRetryDelay"`
	// If set to `true`, a virtual machine that fails to boot will try again after the delay defined in `bootRetryDelay`. Default: `false`.
	BootRetryEnabled *bool `pulumi:"bootRetryEnabled"`
	// A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.
	Cdroms []VirtualMachineCdrom `pulumi:"cdroms"`
	// When specified, the virtual machine will be created as a clone of a specified template. Optional customization options can be submitted for the resource. See creating a virtual machine from a template for more information.
	Clone *VirtualMachineClone `pulumi:"clone"`
	// Allow CPUs to be added to the virtual machine while it is powered on.
	CpuHotAddEnabled *bool `pulumi:"cpuHotAddEnabled"`
	// Allow CPUs to be removed to the virtual machine while it is powered on.
	CpuHotRemoveEnabled *bool `pulumi:"cpuHotRemoveEnabled"`
	// The maximum amount of CPU (in MHz) that the virtual machine can consume, regardless of available resources. The default is no limit.
	CpuLimit *int `pulumi:"cpuLimit"`
	// Enable CPU performance counters on the virtual machine. Default: `false`.
	CpuPerformanceCountersEnabled *bool `pulumi:"cpuPerformanceCountersEnabled"`
	// The amount of CPU (in MHz) that the virtual machine is guaranteed. The default is no reservation.
	CpuReservation *int `pulumi:"cpuReservation"`
	// The number of CPU shares allocated to the virtual machine when the `cpuShareLevel` is `custom`.
	CpuShareCount *int `pulumi:"cpuShareCount"`
	// The allocation level for the virtual machine CPU resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	CpuShareLevel *string `pulumi:"cpuShareLevel"`
	// Map of custom attribute ids to attribute value strings to set for virtual machine. Please refer to the `vsphereCustomAttributes` resource for more information on setting custom attributes.
	//
	// > **NOTE:** Custom attributes requires vCenter Server and is not supported on direct ESXi host connections.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// The datacenter ID. Required only when deploying an OVF/OVA template.
	DatacenterId *string `pulumi:"datacenterId"`
	// The managed object reference ID of the datastore cluster in which to place the virtual machine. This setting applies to entire virtual machine and implies that you wish to use vSphere Storage DRS with the virtual machine. See the section on virtual machine migration for more information on modifying this value.
	//
	// > **NOTE:** One of `datastoreId` or `datastoreClusterId` must be specified.
	//
	// > **NOTE:** Use of `datastoreClusterId` requires vSphere Storage DRS to be enabled on the specified datastore cluster.
	//
	// > **NOTE:** The `datastoreClusterId` setting applies to the entire virtual machine resource. You cannot assign individual individual disks to datastore clusters. In addition, you cannot use the `attach` setting to attach external disks on virtual machines that are assigned to datastore clusters.
	DatastoreClusterId *string `pulumi:"datastoreClusterId"`
	// The datastore ID that on which the ISO is located. Required for using a datastore ISO. Conflicts with `clientDevice`.
	DatastoreId *string `pulumi:"datastoreId"`
	// A specification for a virtual disk device on the virtual machine. See disk options for more information.
	Disks []VirtualMachineDisk `pulumi:"disks"`
	// Use this option to enable EFI secure boot when the `firmware` type is set to is `efi`. Default: `false`.
	//
	// > **NOTE:** EFI secure boot is only available on vSphere 6.5 and later.
	EfiSecureBootEnabled *bool `pulumi:"efiSecureBootEnabled"`
	// Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest. Default: `false`.
	EnableDiskUuid *bool `pulumi:"enableDiskUuid"`
	// Enable logging of virtual machine events to a log file stored in the virtual machine directory. Default: `false`.
	EnableLogging *bool `pulumi:"enableLogging"`
	// The EPT/RVI (hardware memory virtualization) setting for the virtual machine. One of `automatic`, `on`, or `off`. Default: `automatic`.
	EptRviMode *string `pulumi:"eptRviMode"`
	// Extra configuration data for the virtual machine. Can be used to supply advanced parameters not normally in configuration, such as instance metadata and userdata.
	//
	// > **NOTE:** Do not use `extraConfig` when working with a template imported from OVF/OVA as your settings may be ignored. Use the `vapp` block `properties` section as described in Using vApp Properties for OVF/OVA Configuration.
	ExtraConfig map[string]string `pulumi:"extraConfig"`
	// Allow the virtual machine to be rebooted when a change to `extraConfig` occurs. Default: `true`.
	ExtraConfigRebootRequired *bool `pulumi:"extraConfigRebootRequired"`
	// The firmware for the virtual machine. One of `bios` or `efi`.
	Firmware *string `pulumi:"firmware"`
	// The path to the virtual machine folder in which to place the virtual machine, relative to the datacenter path (`/<datacenter-name>/vm`).  For example, `/dc-01/vm/foo`
	Folder *string `pulumi:"folder"`
	// If a guest shutdown failed or times out while updating or destroying (see `shutdownWaitTimeout`), force the power-off of the virtual machine. Default: `true`.
	ForcePowerOff *bool `pulumi:"forcePowerOff"`
	// The guest ID for the operating system type. For a full list of possible values, see [here][vmware-docs-guest-ids]. Default: `otherGuest64`.
	//
	// [vmware-docs-guest-ids]: https://vdc-download.vmware.com/vmwb-repository/dcr-public/b50dcbbf-051d-4204-a3e7-e1b618c1e384/538cf2ec-b34f-4bae-a332-3820ef9e7773/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
	GuestId *string `pulumi:"guestId"`
	// The hardware version number. Valid range is from 4 to 19. The hardware version cannot be downgraded. See [virtual machine hardware compatibility][virtual-machine-hardware-compatibility] for more information.
	//
	// [virtual-machine-hardware-compatibility]: https://kb.vmware.com/s/article/2007240
	HardwareVersion *int `pulumi:"hardwareVersion"`
	// The managed object reference ID of a host on which to place the virtual machine. See the section on virtual machine migration for more information on modifying this value. When using a vSphere cluster, if a `hostSystemId` is not supplied, vSphere will select a host in the cluster to place the virtual machine, according to any defaults or vSphere DRS placement policies.
	HostSystemId *string `pulumi:"hostSystemId"`
	// The hardware virtualization (non-nested) setting for the virtual machine. One of `hvAuto`, `hvOn`, or `hvOff`. Default: `hvAuto`.
	HvMode *string `pulumi:"hvMode"`
	// The number of IDE controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: `2`.
	IdeControllerCount *int `pulumi:"ideControllerCount"`
	// List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: `[]`.
	IgnoredGuestIps []string `pulumi:"ignoredGuestIps"`
	// Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard devices. One of `low`, `normal`, `medium`, or `high`.
	//
	// > **NOTE:** On higher sensitivities, you may need to adjust the `memoryReservation` to the full amount of memory provisioned for the virtual machine.
	LatencySensitivity *string `pulumi:"latencySensitivity"`
	// The memory size to assign to the virtual machine, in MB. Default: `1024` (1 GB).
	Memory *int `pulumi:"memory"`
	// Allow memory to be added to the virtual machine while it is powered on.
	//
	// > **NOTE:** CPU and memory hot add options are not available on all guest operating systems. Please refer to the [VMware Guest OS Compatibility Guide][vmware-docs-compat-guide] to which settings are allow for your guest operating system. In addition, at least one `pulumi up` must be run before you are able to use CPU and memory hot add.
	//
	// [vmware-docs-compat-guide]: http://partnerweb.vmware.com/comp_guide2/pdf/VMware_GOS_Compatibility_Guide.pdf
	//
	// > **NOTE:** For Linux 64-bit guest operating systems with less than or equal to 3GB, the virtual machine must powered off to add memory beyond 3GB. Subsequent hot add of memory does not require the virtual machine to be powered-off to apply the plan. Please refer to [VMware KB 2008405][vmware-kb-2008405].
	//
	// [vmware-kb-2008405]: https://kb.vmware.com/s/article/2008405
	MemoryHotAddEnabled *bool `pulumi:"memoryHotAddEnabled"`
	// The maximum amount of memory (in MB) that th virtual machine can consume, regardless of available resources. The default is no limit.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// The amount of memory (in MB) that the virtual machine is guaranteed. The default is no reservation.
	MemoryReservation *int `pulumi:"memoryReservation"`
	// The number of memory shares allocated to the virtual machine when the `memoryShareLevel` is `custom`.
	MemoryShareCount *int `pulumi:"memoryShareCount"`
	// The allocation level for the virtual machine memory resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	MemoryShareLevel *string `pulumi:"memoryShareLevel"`
	// The amount of time, in minutes, to wait for a virtual machine migration to complete before failing. Default: `10` minutes. See the section on virtual machine migration for more information.
	MigrateWaitTimeout *int `pulumi:"migrateWaitTimeout"`
	// The name of the virtual machine.
	Name *string `pulumi:"name"`
	// Enable nested hardware virtualization on the virtual machine, facilitating nested virtualization in the guest operating system. Default: `false`.
	NestedHvEnabled *bool `pulumi:"nestedHvEnabled"`
	// A specification for a virtual NIC on the virtual machine. See network interface options for more information.
	NetworkInterfaces []VirtualMachineNetworkInterface `pulumi:"networkInterfaces"`
	// The number of cores per socket in the virtual machine. The number of vCPUs on the virtual machine will be `numCpus` divided by `numCoresPerSocket`. If specified, the value supplied to `numCpus` must be evenly divisible by this value. Default: `1`.
	NumCoresPerSocket *int `pulumi:"numCoresPerSocket"`
	// The total number of virtual processor cores to assign to the virtual machine. Default: `1`.
	NumCpus *int `pulumi:"numCpus"`
	// When specified, the virtual machine will be deployed from the provided OVF/OVA template. See creating a virtual machine from an OVF/OVA template for more information.
	OvfDeploy *VirtualMachineOvfDeploy `pulumi:"ovfDeploy"`
	// List of host PCI device IDs in which to create PCI passthroughs.
	//
	// > **NOTE:** Cloning requires vCenter Server and is not supported on direct ESXi host connections.
	PciDeviceIds []string `pulumi:"pciDeviceIds"`
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout *int `pulumi:"poweronTimeout"`
	// Triggers replacement of resource whenever it changes.
	//
	// For example, `replaceTrigger = sha256(format("%s-%s",data.template_file.cloud_init_metadata.rendered,data.template_file.cloud_init_userdata.rendered))` will fingerprint the changes in cloud-init metadata and userdata templates. This will enable a replacement of the resource whenever the dependant template renders a new configuration. (Forces a replacement.)
	ReplaceTrigger *string `pulumi:"replaceTrigger"`
	// The managed object reference ID of the resource pool in which to place the virtual machine. See the Virtual Machine Migration section for more information on modifying this value.
	//
	// > **NOTE:** All clusters and standalone hosts have a default root resource pool. This resource argument does not directly accept the cluster or standalone host resource. For more information, see the section on specifying the Root Resource Pool in the `ResourcePool` data source documentation on using the root resource pool.
	ResourcePoolId string `pulumi:"resourcePoolId"`
	// Enable post-power-on scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsAfterPowerOn *bool `pulumi:"runToolsScriptsAfterPowerOn"`
	// Enable ost-resume scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsAfterResume *bool `pulumi:"runToolsScriptsAfterResume"`
	// Enable pre-reboot scripts to run when VMware Tools is installed. Default: `false`.
	RunToolsScriptsBeforeGuestReboot *bool `pulumi:"runToolsScriptsBeforeGuestReboot"`
	// Enable pre-shutdown scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestShutdown *bool `pulumi:"runToolsScriptsBeforeGuestShutdown"`
	// Enable pre-standby scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestStandby *bool `pulumi:"runToolsScriptsBeforeGuestStandby"`
	// The number of SATA controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	SataControllerCount *int `pulumi:"sataControllerCount"`
	// The type of SCSI bus sharing for the virtual machine SCSI controller. One of `physicalSharing`, `virtualSharing`, and `noSharing`. Default: `noSharing`.
	ScsiBusSharing *string `pulumi:"scsiBusSharing"`
	// The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	ScsiControllerCount *int `pulumi:"scsiControllerCount"`
	// The SCSI controller type for the virtual machine. One of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic SAS) or `pvscsi` (VMware Paravirtual). Default: `pvscsi`.
	ScsiType *string `pulumi:"scsiType"`
	// The amount of time, in minutes, to wait for a graceful guest shutdown when making necessary updates to the virtual machine. If `forcePowerOff` is set to `true`, the virtual machine will be forced to power-off after the timeout, otherwise an error is returned. Default: `3` minutes.
	ShutdownWaitTimeout *int `pulumi:"shutdownWaitTimeout"`
	// The UUID of the storage policy to assign to the virtual disk.
	StoragePolicyId *string `pulumi:"storagePolicyId"`
	// The swap file placement policy for the virtual machine. One of `inherit`, `hostLocal`, or `vmDirectory`. Default: `inherit`.
	SwapPlacementPolicy *string `pulumi:"swapPlacementPolicy"`
	// Enable the guest operating system to synchronization its clock with the host when the virtual machine is powered on or resumed. Requires vSphere 7.0 Update 1 and later. Requires VMware Tools to be installed. Default: `false`.
	SyncTimeWithHost *bool `pulumi:"syncTimeWithHost"`
	// Enable the guest operating system to periodically synchronize its clock with the host. Requires vSphere 7.0 Update 1 and later. On previous versions, setting `syncTimeWithHost` is will enable periodic synchronization. Requires VMware Tools to be installed. Default: `false`.
	SyncTimeWithHostPeriodically *bool `pulumi:"syncTimeWithHostPeriodically"`
	// The IDs of any tags to attach to this resource. Please refer to the `Tag` resource for more information on applying tags to virtual machine resources.
	//
	// > **NOTE:** Tagging support is unsupported on direct ESXi host connections and requires vCenter Server instance.
	Tags []string `pulumi:"tags"`
	// Enable automatic upgrade of the VMware Tools version when the virtual machine is rebooted. If necessary, VMware Tools is upgraded to the latest version supported by the host on which the virtual machine is running. Requires VMware Tools to be installed. One of `manual` or `upgradeAtPowerCycle`. Default: `manual`.
	ToolsUpgradePolicy *string `pulumi:"toolsUpgradePolicy"`
	// Used for vApp configurations. The only sub-key available is `properties`, which is a key/value map of properties for virtual machines imported from and OVF/OVA. See Using vApp Properties for OVF/OVA Configuration for more information.
	Vapp *VirtualMachineVapp `pulumi:"vapp"`
	// Enable Virtualization Based Security. Requires `firmware` to be `efi`. In addition, `vvtdEnabled`, `nestedHvEnabled`, and `efiSecureBootEnabled` must all have a value of `true`. Supported on vSphere 6.7 and later. Default: `false`.
	VbsEnabled *bool `pulumi:"vbsEnabled"`
	// Enable Intel Virtualization Technology for Directed I/O for the virtual machine (_I/O MMU_ in the vSphere Client). Supported on vSphere 6.7 and later. Default: `false`.
	VvtdEnabled *bool `pulumi:"vvtdEnabled"`
	// The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. This should only be used if the version VMware Tools does not allow the `waitForGuestNetTimeout` waiter to be used. A value less than `1` disables the waiter. Default: `0`.
	WaitForGuestIpTimeout *int `pulumi:"waitForGuestIpTimeout"`
	// Controls whether or not the guest network waiter waits for a routable address. When `false`, the waiter does not wait for a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria. This property is ignored if the `waitForGuestIpTimeout` waiter is used. Default: `true`.
	WaitForGuestNetRoutable *bool `pulumi:"waitForGuestNetRoutable"`
	// The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. Older versions of VMware Tools do not populate this property. In those cases, this waiter can be disabled and the `waitForGuestIpTimeout` waiter can be used instead. A value less than `1` disables the waiter. Default: `5` minutes.
	WaitForGuestNetTimeout *int `pulumi:"waitForGuestNetTimeout"`
}

// The set of arguments for constructing a VirtualMachine resource.
type VirtualMachineArgs struct {
	// The guest name for the operating system when `guestId` is `otherGuest` or `otherGuest64`.
	AlternateGuestName pulumi.StringPtrInput
	// A user-provided description of the virtual machine.
	Annotation pulumi.StringPtrInput
	// The number of milliseconds to wait before starting the boot sequence. The default is no delay.
	BootDelay pulumi.IntPtrInput
	// The number of milliseconds to wait before retrying the boot sequence. This option is only valid if `bootRetryEnabled` is `true`. Default: `10000` (10 seconds).
	BootRetryDelay pulumi.IntPtrInput
	// If set to `true`, a virtual machine that fails to boot will try again after the delay defined in `bootRetryDelay`. Default: `false`.
	BootRetryEnabled pulumi.BoolPtrInput
	// A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.
	Cdroms VirtualMachineCdromArrayInput
	// When specified, the virtual machine will be created as a clone of a specified template. Optional customization options can be submitted for the resource. See creating a virtual machine from a template for more information.
	Clone VirtualMachineClonePtrInput
	// Allow CPUs to be added to the virtual machine while it is powered on.
	CpuHotAddEnabled pulumi.BoolPtrInput
	// Allow CPUs to be removed to the virtual machine while it is powered on.
	CpuHotRemoveEnabled pulumi.BoolPtrInput
	// The maximum amount of CPU (in MHz) that the virtual machine can consume, regardless of available resources. The default is no limit.
	CpuLimit pulumi.IntPtrInput
	// Enable CPU performance counters on the virtual machine. Default: `false`.
	CpuPerformanceCountersEnabled pulumi.BoolPtrInput
	// The amount of CPU (in MHz) that the virtual machine is guaranteed. The default is no reservation.
	CpuReservation pulumi.IntPtrInput
	// The number of CPU shares allocated to the virtual machine when the `cpuShareLevel` is `custom`.
	CpuShareCount pulumi.IntPtrInput
	// The allocation level for the virtual machine CPU resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	CpuShareLevel pulumi.StringPtrInput
	// Map of custom attribute ids to attribute value strings to set for virtual machine. Please refer to the `vsphereCustomAttributes` resource for more information on setting custom attributes.
	//
	// > **NOTE:** Custom attributes requires vCenter Server and is not supported on direct ESXi host connections.
	CustomAttributes pulumi.StringMapInput
	// The datacenter ID. Required only when deploying an OVF/OVA template.
	DatacenterId pulumi.StringPtrInput
	// The managed object reference ID of the datastore cluster in which to place the virtual machine. This setting applies to entire virtual machine and implies that you wish to use vSphere Storage DRS with the virtual machine. See the section on virtual machine migration for more information on modifying this value.
	//
	// > **NOTE:** One of `datastoreId` or `datastoreClusterId` must be specified.
	//
	// > **NOTE:** Use of `datastoreClusterId` requires vSphere Storage DRS to be enabled on the specified datastore cluster.
	//
	// > **NOTE:** The `datastoreClusterId` setting applies to the entire virtual machine resource. You cannot assign individual individual disks to datastore clusters. In addition, you cannot use the `attach` setting to attach external disks on virtual machines that are assigned to datastore clusters.
	DatastoreClusterId pulumi.StringPtrInput
	// The datastore ID that on which the ISO is located. Required for using a datastore ISO. Conflicts with `clientDevice`.
	DatastoreId pulumi.StringPtrInput
	// A specification for a virtual disk device on the virtual machine. See disk options for more information.
	Disks VirtualMachineDiskArrayInput
	// Use this option to enable EFI secure boot when the `firmware` type is set to is `efi`. Default: `false`.
	//
	// > **NOTE:** EFI secure boot is only available on vSphere 6.5 and later.
	EfiSecureBootEnabled pulumi.BoolPtrInput
	// Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest. Default: `false`.
	EnableDiskUuid pulumi.BoolPtrInput
	// Enable logging of virtual machine events to a log file stored in the virtual machine directory. Default: `false`.
	EnableLogging pulumi.BoolPtrInput
	// The EPT/RVI (hardware memory virtualization) setting for the virtual machine. One of `automatic`, `on`, or `off`. Default: `automatic`.
	EptRviMode pulumi.StringPtrInput
	// Extra configuration data for the virtual machine. Can be used to supply advanced parameters not normally in configuration, such as instance metadata and userdata.
	//
	// > **NOTE:** Do not use `extraConfig` when working with a template imported from OVF/OVA as your settings may be ignored. Use the `vapp` block `properties` section as described in Using vApp Properties for OVF/OVA Configuration.
	ExtraConfig pulumi.StringMapInput
	// Allow the virtual machine to be rebooted when a change to `extraConfig` occurs. Default: `true`.
	ExtraConfigRebootRequired pulumi.BoolPtrInput
	// The firmware for the virtual machine. One of `bios` or `efi`.
	Firmware pulumi.StringPtrInput
	// The path to the virtual machine folder in which to place the virtual machine, relative to the datacenter path (`/<datacenter-name>/vm`).  For example, `/dc-01/vm/foo`
	Folder pulumi.StringPtrInput
	// If a guest shutdown failed or times out while updating or destroying (see `shutdownWaitTimeout`), force the power-off of the virtual machine. Default: `true`.
	ForcePowerOff pulumi.BoolPtrInput
	// The guest ID for the operating system type. For a full list of possible values, see [here][vmware-docs-guest-ids]. Default: `otherGuest64`.
	//
	// [vmware-docs-guest-ids]: https://vdc-download.vmware.com/vmwb-repository/dcr-public/b50dcbbf-051d-4204-a3e7-e1b618c1e384/538cf2ec-b34f-4bae-a332-3820ef9e7773/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
	GuestId pulumi.StringPtrInput
	// The hardware version number. Valid range is from 4 to 19. The hardware version cannot be downgraded. See [virtual machine hardware compatibility][virtual-machine-hardware-compatibility] for more information.
	//
	// [virtual-machine-hardware-compatibility]: https://kb.vmware.com/s/article/2007240
	HardwareVersion pulumi.IntPtrInput
	// The managed object reference ID of a host on which to place the virtual machine. See the section on virtual machine migration for more information on modifying this value. When using a vSphere cluster, if a `hostSystemId` is not supplied, vSphere will select a host in the cluster to place the virtual machine, according to any defaults or vSphere DRS placement policies.
	HostSystemId pulumi.StringPtrInput
	// The hardware virtualization (non-nested) setting for the virtual machine. One of `hvAuto`, `hvOn`, or `hvOff`. Default: `hvAuto`.
	HvMode pulumi.StringPtrInput
	// The number of IDE controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: `2`.
	IdeControllerCount pulumi.IntPtrInput
	// List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: `[]`.
	IgnoredGuestIps pulumi.StringArrayInput
	// Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard devices. One of `low`, `normal`, `medium`, or `high`.
	//
	// > **NOTE:** On higher sensitivities, you may need to adjust the `memoryReservation` to the full amount of memory provisioned for the virtual machine.
	LatencySensitivity pulumi.StringPtrInput
	// The memory size to assign to the virtual machine, in MB. Default: `1024` (1 GB).
	Memory pulumi.IntPtrInput
	// Allow memory to be added to the virtual machine while it is powered on.
	//
	// > **NOTE:** CPU and memory hot add options are not available on all guest operating systems. Please refer to the [VMware Guest OS Compatibility Guide][vmware-docs-compat-guide] to which settings are allow for your guest operating system. In addition, at least one `pulumi up` must be run before you are able to use CPU and memory hot add.
	//
	// [vmware-docs-compat-guide]: http://partnerweb.vmware.com/comp_guide2/pdf/VMware_GOS_Compatibility_Guide.pdf
	//
	// > **NOTE:** For Linux 64-bit guest operating systems with less than or equal to 3GB, the virtual machine must powered off to add memory beyond 3GB. Subsequent hot add of memory does not require the virtual machine to be powered-off to apply the plan. Please refer to [VMware KB 2008405][vmware-kb-2008405].
	//
	// [vmware-kb-2008405]: https://kb.vmware.com/s/article/2008405
	MemoryHotAddEnabled pulumi.BoolPtrInput
	// The maximum amount of memory (in MB) that th virtual machine can consume, regardless of available resources. The default is no limit.
	MemoryLimit pulumi.IntPtrInput
	// The amount of memory (in MB) that the virtual machine is guaranteed. The default is no reservation.
	MemoryReservation pulumi.IntPtrInput
	// The number of memory shares allocated to the virtual machine when the `memoryShareLevel` is `custom`.
	MemoryShareCount pulumi.IntPtrInput
	// The allocation level for the virtual machine memory resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
	MemoryShareLevel pulumi.StringPtrInput
	// The amount of time, in minutes, to wait for a virtual machine migration to complete before failing. Default: `10` minutes. See the section on virtual machine migration for more information.
	MigrateWaitTimeout pulumi.IntPtrInput
	// The name of the virtual machine.
	Name pulumi.StringPtrInput
	// Enable nested hardware virtualization on the virtual machine, facilitating nested virtualization in the guest operating system. Default: `false`.
	NestedHvEnabled pulumi.BoolPtrInput
	// A specification for a virtual NIC on the virtual machine. See network interface options for more information.
	NetworkInterfaces VirtualMachineNetworkInterfaceArrayInput
	// The number of cores per socket in the virtual machine. The number of vCPUs on the virtual machine will be `numCpus` divided by `numCoresPerSocket`. If specified, the value supplied to `numCpus` must be evenly divisible by this value. Default: `1`.
	NumCoresPerSocket pulumi.IntPtrInput
	// The total number of virtual processor cores to assign to the virtual machine. Default: `1`.
	NumCpus pulumi.IntPtrInput
	// When specified, the virtual machine will be deployed from the provided OVF/OVA template. See creating a virtual machine from an OVF/OVA template for more information.
	OvfDeploy VirtualMachineOvfDeployPtrInput
	// List of host PCI device IDs in which to create PCI passthroughs.
	//
	// > **NOTE:** Cloning requires vCenter Server and is not supported on direct ESXi host connections.
	PciDeviceIds pulumi.StringArrayInput
	// The amount of time, in seconds, that we will be trying to power on a VM
	PoweronTimeout pulumi.IntPtrInput
	// Triggers replacement of resource whenever it changes.
	//
	// For example, `replaceTrigger = sha256(format("%s-%s",data.template_file.cloud_init_metadata.rendered,data.template_file.cloud_init_userdata.rendered))` will fingerprint the changes in cloud-init metadata and userdata templates. This will enable a replacement of the resource whenever the dependant template renders a new configuration. (Forces a replacement.)
	ReplaceTrigger pulumi.StringPtrInput
	// The managed object reference ID of the resource pool in which to place the virtual machine. See the Virtual Machine Migration section for more information on modifying this value.
	//
	// > **NOTE:** All clusters and standalone hosts have a default root resource pool. This resource argument does not directly accept the cluster or standalone host resource. For more information, see the section on specifying the Root Resource Pool in the `ResourcePool` data source documentation on using the root resource pool.
	ResourcePoolId pulumi.StringInput
	// Enable post-power-on scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsAfterPowerOn pulumi.BoolPtrInput
	// Enable ost-resume scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsAfterResume pulumi.BoolPtrInput
	// Enable pre-reboot scripts to run when VMware Tools is installed. Default: `false`.
	RunToolsScriptsBeforeGuestReboot pulumi.BoolPtrInput
	// Enable pre-shutdown scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestShutdown pulumi.BoolPtrInput
	// Enable pre-standby scripts to run when VMware Tools is installed. Default: `true`.
	RunToolsScriptsBeforeGuestStandby pulumi.BoolPtrInput
	// The number of SATA controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	SataControllerCount pulumi.IntPtrInput
	// The type of SCSI bus sharing for the virtual machine SCSI controller. One of `physicalSharing`, `virtualSharing`, and `noSharing`. Default: `noSharing`.
	ScsiBusSharing pulumi.StringPtrInput
	// The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
	// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
	// controllers.
	ScsiControllerCount pulumi.IntPtrInput
	// The SCSI controller type for the virtual machine. One of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic SAS) or `pvscsi` (VMware Paravirtual). Default: `pvscsi`.
	ScsiType pulumi.StringPtrInput
	// The amount of time, in minutes, to wait for a graceful guest shutdown when making necessary updates to the virtual machine. If `forcePowerOff` is set to `true`, the virtual machine will be forced to power-off after the timeout, otherwise an error is returned. Default: `3` minutes.
	ShutdownWaitTimeout pulumi.IntPtrInput
	// The UUID of the storage policy to assign to the virtual disk.
	StoragePolicyId pulumi.StringPtrInput
	// The swap file placement policy for the virtual machine. One of `inherit`, `hostLocal`, or `vmDirectory`. Default: `inherit`.
	SwapPlacementPolicy pulumi.StringPtrInput
	// Enable the guest operating system to synchronization its clock with the host when the virtual machine is powered on or resumed. Requires vSphere 7.0 Update 1 and later. Requires VMware Tools to be installed. Default: `false`.
	SyncTimeWithHost pulumi.BoolPtrInput
	// Enable the guest operating system to periodically synchronize its clock with the host. Requires vSphere 7.0 Update 1 and later. On previous versions, setting `syncTimeWithHost` is will enable periodic synchronization. Requires VMware Tools to be installed. Default: `false`.
	SyncTimeWithHostPeriodically pulumi.BoolPtrInput
	// The IDs of any tags to attach to this resource. Please refer to the `Tag` resource for more information on applying tags to virtual machine resources.
	//
	// > **NOTE:** Tagging support is unsupported on direct ESXi host connections and requires vCenter Server instance.
	Tags pulumi.StringArrayInput
	// Enable automatic upgrade of the VMware Tools version when the virtual machine is rebooted. If necessary, VMware Tools is upgraded to the latest version supported by the host on which the virtual machine is running. Requires VMware Tools to be installed. One of `manual` or `upgradeAtPowerCycle`. Default: `manual`.
	ToolsUpgradePolicy pulumi.StringPtrInput
	// Used for vApp configurations. The only sub-key available is `properties`, which is a key/value map of properties for virtual machines imported from and OVF/OVA. See Using vApp Properties for OVF/OVA Configuration for more information.
	Vapp VirtualMachineVappPtrInput
	// Enable Virtualization Based Security. Requires `firmware` to be `efi`. In addition, `vvtdEnabled`, `nestedHvEnabled`, and `efiSecureBootEnabled` must all have a value of `true`. Supported on vSphere 6.7 and later. Default: `false`.
	VbsEnabled pulumi.BoolPtrInput
	// Enable Intel Virtualization Technology for Directed I/O for the virtual machine (_I/O MMU_ in the vSphere Client). Supported on vSphere 6.7 and later. Default: `false`.
	VvtdEnabled pulumi.BoolPtrInput
	// The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. This should only be used if the version VMware Tools does not allow the `waitForGuestNetTimeout` waiter to be used. A value less than `1` disables the waiter. Default: `0`.
	WaitForGuestIpTimeout pulumi.IntPtrInput
	// Controls whether or not the guest network waiter waits for a routable address. When `false`, the waiter does not wait for a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria. This property is ignored if the `waitForGuestIpTimeout` waiter is used. Default: `true`.
	WaitForGuestNetRoutable pulumi.BoolPtrInput
	// The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. Older versions of VMware Tools do not populate this property. In those cases, this waiter can be disabled and the `waitForGuestIpTimeout` waiter can be used instead. A value less than `1` disables the waiter. Default: `5` minutes.
	WaitForGuestNetTimeout pulumi.IntPtrInput
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineArgs)(nil)).Elem()
}

type VirtualMachineInput interface {
	pulumi.Input

	ToVirtualMachineOutput() VirtualMachineOutput
	ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput
}

func (*VirtualMachine) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (i *VirtualMachine) ToVirtualMachineOutput() VirtualMachineOutput {
	return i.ToVirtualMachineOutputWithContext(context.Background())
}

func (i *VirtualMachine) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput)
}

func (i *VirtualMachine) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachine] {
	return pulumix.Output[*VirtualMachine]{
		OutputState: i.ToVirtualMachineOutputWithContext(ctx).OutputState,
	}
}

// VirtualMachineArrayInput is an input type that accepts VirtualMachineArray and VirtualMachineArrayOutput values.
// You can construct a concrete instance of `VirtualMachineArrayInput` via:
//
//	VirtualMachineArray{ VirtualMachineArgs{...} }
type VirtualMachineArrayInput interface {
	pulumi.Input

	ToVirtualMachineArrayOutput() VirtualMachineArrayOutput
	ToVirtualMachineArrayOutputWithContext(context.Context) VirtualMachineArrayOutput
}

type VirtualMachineArray []VirtualMachineInput

func (VirtualMachineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return i.ToVirtualMachineArrayOutputWithContext(context.Background())
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineArrayOutput)
}

func (i VirtualMachineArray) ToOutput(ctx context.Context) pulumix.Output[[]*VirtualMachine] {
	return pulumix.Output[[]*VirtualMachine]{
		OutputState: i.ToVirtualMachineArrayOutputWithContext(ctx).OutputState,
	}
}

// VirtualMachineMapInput is an input type that accepts VirtualMachineMap and VirtualMachineMapOutput values.
// You can construct a concrete instance of `VirtualMachineMapInput` via:
//
//	VirtualMachineMap{ "key": VirtualMachineArgs{...} }
type VirtualMachineMapInput interface {
	pulumi.Input

	ToVirtualMachineMapOutput() VirtualMachineMapOutput
	ToVirtualMachineMapOutputWithContext(context.Context) VirtualMachineMapOutput
}

type VirtualMachineMap map[string]VirtualMachineInput

func (VirtualMachineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineMap) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return i.ToVirtualMachineMapOutputWithContext(context.Background())
}

func (i VirtualMachineMap) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineMapOutput)
}

func (i VirtualMachineMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VirtualMachine] {
	return pulumix.Output[map[string]*VirtualMachine]{
		OutputState: i.ToVirtualMachineMapOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineOutput struct{ *pulumi.OutputState }

func (VirtualMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineOutput) ToVirtualMachineOutput() VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachine] {
	return pulumix.Output[*VirtualMachine]{
		OutputState: o.OutputState,
	}
}

// The guest name for the operating system when `guestId` is `otherGuest` or `otherGuest64`.
func (o VirtualMachineOutput) AlternateGuestName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.AlternateGuestName }).(pulumi.StringPtrOutput)
}

// A user-provided description of the virtual machine.
func (o VirtualMachineOutput) Annotation() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.Annotation }).(pulumi.StringOutput)
}

// The number of milliseconds to wait before starting the boot sequence. The default is no delay.
func (o VirtualMachineOutput) BootDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.BootDelay }).(pulumi.IntPtrOutput)
}

// The number of milliseconds to wait before retrying the boot sequence. This option is only valid if `bootRetryEnabled` is `true`. Default: `10000` (10 seconds).
func (o VirtualMachineOutput) BootRetryDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.BootRetryDelay }).(pulumi.IntPtrOutput)
}

// If set to `true`, a virtual machine that fails to boot will try again after the delay defined in `bootRetryDelay`. Default: `false`.
func (o VirtualMachineOutput) BootRetryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.BootRetryEnabled }).(pulumi.BoolPtrOutput)
}

// A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.
func (o VirtualMachineOutput) Cdroms() VirtualMachineCdromArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineCdromArrayOutput { return v.Cdroms }).(VirtualMachineCdromArrayOutput)
}

// A unique identifier for a given version of the last configuration was applied.
func (o VirtualMachineOutput) ChangeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.ChangeVersion }).(pulumi.StringOutput)
}

// When specified, the virtual machine will be created as a clone of a specified template. Optional customization options can be submitted for the resource. See creating a virtual machine from a template for more information.
func (o VirtualMachineOutput) Clone() VirtualMachineClonePtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineClonePtrOutput { return v.Clone }).(VirtualMachineClonePtrOutput)
}

// Allow CPUs to be added to the virtual machine while it is powered on.
func (o VirtualMachineOutput) CpuHotAddEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.CpuHotAddEnabled }).(pulumi.BoolPtrOutput)
}

// Allow CPUs to be removed to the virtual machine while it is powered on.
func (o VirtualMachineOutput) CpuHotRemoveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.CpuHotRemoveEnabled }).(pulumi.BoolPtrOutput)
}

// The maximum amount of CPU (in MHz) that the virtual machine can consume, regardless of available resources. The default is no limit.
func (o VirtualMachineOutput) CpuLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.CpuLimit }).(pulumi.IntPtrOutput)
}

// Enable CPU performance counters on the virtual machine. Default: `false`.
func (o VirtualMachineOutput) CpuPerformanceCountersEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.CpuPerformanceCountersEnabled }).(pulumi.BoolPtrOutput)
}

// The amount of CPU (in MHz) that the virtual machine is guaranteed. The default is no reservation.
func (o VirtualMachineOutput) CpuReservation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.CpuReservation }).(pulumi.IntPtrOutput)
}

// The number of CPU shares allocated to the virtual machine when the `cpuShareLevel` is `custom`.
func (o VirtualMachineOutput) CpuShareCount() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntOutput { return v.CpuShareCount }).(pulumi.IntOutput)
}

// The allocation level for the virtual machine CPU resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
func (o VirtualMachineOutput) CpuShareLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.CpuShareLevel }).(pulumi.StringPtrOutput)
}

// Map of custom attribute ids to attribute value strings to set for virtual machine. Please refer to the `vsphereCustomAttributes` resource for more information on setting custom attributes.
//
// > **NOTE:** Custom attributes requires vCenter Server and is not supported on direct ESXi host connections.
func (o VirtualMachineOutput) CustomAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.CustomAttributes }).(pulumi.StringMapOutput)
}

// The datacenter ID. Required only when deploying an OVF/OVA template.
func (o VirtualMachineOutput) DatacenterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.DatacenterId }).(pulumi.StringPtrOutput)
}

// The managed object reference ID of the datastore cluster in which to place the virtual machine. This setting applies to entire virtual machine and implies that you wish to use vSphere Storage DRS with the virtual machine. See the section on virtual machine migration for more information on modifying this value.
//
// > **NOTE:** One of `datastoreId` or `datastoreClusterId` must be specified.
//
// > **NOTE:** Use of `datastoreClusterId` requires vSphere Storage DRS to be enabled on the specified datastore cluster.
//
// > **NOTE:** The `datastoreClusterId` setting applies to the entire virtual machine resource. You cannot assign individual individual disks to datastore clusters. In addition, you cannot use the `attach` setting to attach external disks on virtual machines that are assigned to datastore clusters.
func (o VirtualMachineOutput) DatastoreClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.DatastoreClusterId }).(pulumi.StringPtrOutput)
}

// The datastore ID that on which the ISO is located. Required for using a datastore ISO. Conflicts with `clientDevice`.
func (o VirtualMachineOutput) DatastoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.DatastoreId }).(pulumi.StringOutput)
}

// The IP address selected by the provider to be used with any provisioners configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.
func (o VirtualMachineOutput) DefaultIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.DefaultIpAddress }).(pulumi.StringOutput)
}

// A specification for a virtual disk device on the virtual machine. See disk options for more information.
func (o VirtualMachineOutput) Disks() VirtualMachineDiskArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineDiskArrayOutput { return v.Disks }).(VirtualMachineDiskArrayOutput)
}

// Use this option to enable EFI secure boot when the `firmware` type is set to is `efi`. Default: `false`.
//
// > **NOTE:** EFI secure boot is only available on vSphere 6.5 and later.
func (o VirtualMachineOutput) EfiSecureBootEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.EfiSecureBootEnabled }).(pulumi.BoolPtrOutput)
}

// Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest. Default: `false`.
func (o VirtualMachineOutput) EnableDiskUuid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.EnableDiskUuid }).(pulumi.BoolPtrOutput)
}

// Enable logging of virtual machine events to a log file stored in the virtual machine directory. Default: `false`.
func (o VirtualMachineOutput) EnableLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.EnableLogging }).(pulumi.BoolPtrOutput)
}

// The EPT/RVI (hardware memory virtualization) setting for the virtual machine. One of `automatic`, `on`, or `off`. Default: `automatic`.
func (o VirtualMachineOutput) EptRviMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.EptRviMode }).(pulumi.StringPtrOutput)
}

// Extra configuration data for the virtual machine. Can be used to supply advanced parameters not normally in configuration, such as instance metadata and userdata.
//
// > **NOTE:** Do not use `extraConfig` when working with a template imported from OVF/OVA as your settings may be ignored. Use the `vapp` block `properties` section as described in Using vApp Properties for OVF/OVA Configuration.
func (o VirtualMachineOutput) ExtraConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.ExtraConfig }).(pulumi.StringMapOutput)
}

// Allow the virtual machine to be rebooted when a change to `extraConfig` occurs. Default: `true`.
func (o VirtualMachineOutput) ExtraConfigRebootRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.ExtraConfigRebootRequired }).(pulumi.BoolPtrOutput)
}

// The firmware for the virtual machine. One of `bios` or `efi`.
func (o VirtualMachineOutput) Firmware() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.Firmware }).(pulumi.StringPtrOutput)
}

// The path to the virtual machine folder in which to place the virtual machine, relative to the datacenter path (`/<datacenter-name>/vm`).  For example, `/dc-01/vm/foo`
func (o VirtualMachineOutput) Folder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.Folder }).(pulumi.StringPtrOutput)
}

// If a guest shutdown failed or times out while updating or destroying (see `shutdownWaitTimeout`), force the power-off of the virtual machine. Default: `true`.
func (o VirtualMachineOutput) ForcePowerOff() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.ForcePowerOff }).(pulumi.BoolPtrOutput)
}

// The guest ID for the operating system type. For a full list of possible values, see [here][vmware-docs-guest-ids]. Default: `otherGuest64`.
//
// [vmware-docs-guest-ids]: https://vdc-download.vmware.com/vmwb-repository/dcr-public/b50dcbbf-051d-4204-a3e7-e1b618c1e384/538cf2ec-b34f-4bae-a332-3820ef9e7773/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
func (o VirtualMachineOutput) GuestId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.GuestId }).(pulumi.StringOutput)
}

// The current list of IP addresses on this machine, including the value of `defaultIpAddress`. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.
func (o VirtualMachineOutput) GuestIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.GuestIpAddresses }).(pulumi.StringArrayOutput)
}

// The hardware version number. Valid range is from 4 to 19. The hardware version cannot be downgraded. See [virtual machine hardware compatibility][virtual-machine-hardware-compatibility] for more information.
//
// [virtual-machine-hardware-compatibility]: https://kb.vmware.com/s/article/2007240
func (o VirtualMachineOutput) HardwareVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntOutput { return v.HardwareVersion }).(pulumi.IntOutput)
}

// The managed object reference ID of a host on which to place the virtual machine. See the section on virtual machine migration for more information on modifying this value. When using a vSphere cluster, if a `hostSystemId` is not supplied, vSphere will select a host in the cluster to place the virtual machine, according to any defaults or vSphere DRS placement policies.
func (o VirtualMachineOutput) HostSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.HostSystemId }).(pulumi.StringOutput)
}

// The hardware virtualization (non-nested) setting for the virtual machine. One of `hvAuto`, `hvOn`, or `hvOff`. Default: `hvAuto`.
func (o VirtualMachineOutput) HvMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.HvMode }).(pulumi.StringPtrOutput)
}

// The number of IDE controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: `2`.
func (o VirtualMachineOutput) IdeControllerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.IdeControllerCount }).(pulumi.IntPtrOutput)
}

// List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: `[]`.
func (o VirtualMachineOutput) IgnoredGuestIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.IgnoredGuestIps }).(pulumi.StringArrayOutput)
}

// Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.
func (o VirtualMachineOutput) Imported() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolOutput { return v.Imported }).(pulumi.BoolOutput)
}

// Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard devices. One of `low`, `normal`, `medium`, or `high`.
//
// > **NOTE:** On higher sensitivities, you may need to adjust the `memoryReservation` to the full amount of memory provisioned for the virtual machine.
func (o VirtualMachineOutput) LatencySensitivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.LatencySensitivity }).(pulumi.StringPtrOutput)
}

// The memory size to assign to the virtual machine, in MB. Default: `1024` (1 GB).
func (o VirtualMachineOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.Memory }).(pulumi.IntPtrOutput)
}

// Allow memory to be added to the virtual machine while it is powered on.
//
// > **NOTE:** CPU and memory hot add options are not available on all guest operating systems. Please refer to the [VMware Guest OS Compatibility Guide][vmware-docs-compat-guide] to which settings are allow for your guest operating system. In addition, at least one `pulumi up` must be run before you are able to use CPU and memory hot add.
//
// > **NOTE:** For Linux 64-bit guest operating systems with less than or equal to 3GB, the virtual machine must powered off to add memory beyond 3GB. Subsequent hot add of memory does not require the virtual machine to be powered-off to apply the plan. Please refer to [VMware KB 2008405][vmware-kb-2008405].
//
// [vmware-docs-compat-guide]: http://partnerweb.vmware.com/comp_guide2/pdf/VMware_GOS_Compatibility_Guide.pdf
// [vmware-kb-2008405]: https://kb.vmware.com/s/article/2008405
func (o VirtualMachineOutput) MemoryHotAddEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.MemoryHotAddEnabled }).(pulumi.BoolPtrOutput)
}

// The maximum amount of memory (in MB) that th virtual machine can consume, regardless of available resources. The default is no limit.
func (o VirtualMachineOutput) MemoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.MemoryLimit }).(pulumi.IntPtrOutput)
}

// The amount of memory (in MB) that the virtual machine is guaranteed. The default is no reservation.
func (o VirtualMachineOutput) MemoryReservation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.MemoryReservation }).(pulumi.IntPtrOutput)
}

// The number of memory shares allocated to the virtual machine when the `memoryShareLevel` is `custom`.
func (o VirtualMachineOutput) MemoryShareCount() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntOutput { return v.MemoryShareCount }).(pulumi.IntOutput)
}

// The allocation level for the virtual machine memory resources. One of `high`, `low`, `normal`, or `custom`. Default: `custom`.
func (o VirtualMachineOutput) MemoryShareLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.MemoryShareLevel }).(pulumi.StringPtrOutput)
}

// The amount of time, in minutes, to wait for a virtual machine migration to complete before failing. Default: `10` minutes. See the section on virtual machine migration for more information.
func (o VirtualMachineOutput) MigrateWaitTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.MigrateWaitTimeout }).(pulumi.IntPtrOutput)
}

// The managed object reference ID of the created virtual machine.
func (o VirtualMachineOutput) Moid() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.Moid }).(pulumi.StringOutput)
}

// The name of the virtual machine.
func (o VirtualMachineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable nested hardware virtualization on the virtual machine, facilitating nested virtualization in the guest operating system. Default: `false`.
func (o VirtualMachineOutput) NestedHvEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.NestedHvEnabled }).(pulumi.BoolPtrOutput)
}

// A specification for a virtual NIC on the virtual machine. See network interface options for more information.
func (o VirtualMachineOutput) NetworkInterfaces() VirtualMachineNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineNetworkInterfaceArrayOutput { return v.NetworkInterfaces }).(VirtualMachineNetworkInterfaceArrayOutput)
}

// The number of cores per socket in the virtual machine. The number of vCPUs on the virtual machine will be `numCpus` divided by `numCoresPerSocket`. If specified, the value supplied to `numCpus` must be evenly divisible by this value. Default: `1`.
func (o VirtualMachineOutput) NumCoresPerSocket() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.NumCoresPerSocket }).(pulumi.IntPtrOutput)
}

// The total number of virtual processor cores to assign to the virtual machine. Default: `1`.
func (o VirtualMachineOutput) NumCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.NumCpus }).(pulumi.IntPtrOutput)
}

// When specified, the virtual machine will be deployed from the provided OVF/OVA template. See creating a virtual machine from an OVF/OVA template for more information.
func (o VirtualMachineOutput) OvfDeploy() VirtualMachineOvfDeployPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineOvfDeployPtrOutput { return v.OvfDeploy }).(VirtualMachineOvfDeployPtrOutput)
}

// List of host PCI device IDs in which to create PCI passthroughs.
//
// > **NOTE:** Cloning requires vCenter Server and is not supported on direct ESXi host connections.
func (o VirtualMachineOutput) PciDeviceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.PciDeviceIds }).(pulumi.StringArrayOutput)
}

// A computed value for the current power state of the virtual machine. One of `on`, `off`, or `suspended`.
func (o VirtualMachineOutput) PowerState() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.PowerState }).(pulumi.StringOutput)
}

// The amount of time, in seconds, that we will be trying to power on a VM
func (o VirtualMachineOutput) PoweronTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.PoweronTimeout }).(pulumi.IntPtrOutput)
}

// Value internal to Terraform used to determine if a configuration set change requires a reboot.
func (o VirtualMachineOutput) RebootRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolOutput { return v.RebootRequired }).(pulumi.BoolOutput)
}

// Triggers replacement of resource whenever it changes.
//
// For example, `replaceTrigger = sha256(format("%s-%s",data.template_file.cloud_init_metadata.rendered,data.template_file.cloud_init_userdata.rendered))` will fingerprint the changes in cloud-init metadata and userdata templates. This will enable a replacement of the resource whenever the dependant template renders a new configuration. (Forces a replacement.)
func (o VirtualMachineOutput) ReplaceTrigger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.ReplaceTrigger }).(pulumi.StringPtrOutput)
}

// The managed object reference ID of the resource pool in which to place the virtual machine. See the Virtual Machine Migration section for more information on modifying this value.
//
// > **NOTE:** All clusters and standalone hosts have a default root resource pool. This resource argument does not directly accept the cluster or standalone host resource. For more information, see the section on specifying the Root Resource Pool in the `ResourcePool` data source documentation on using the root resource pool.
func (o VirtualMachineOutput) ResourcePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.ResourcePoolId }).(pulumi.StringOutput)
}

// Enable post-power-on scripts to run when VMware Tools is installed. Default: `true`.
func (o VirtualMachineOutput) RunToolsScriptsAfterPowerOn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.RunToolsScriptsAfterPowerOn }).(pulumi.BoolPtrOutput)
}

// Enable ost-resume scripts to run when VMware Tools is installed. Default: `true`.
func (o VirtualMachineOutput) RunToolsScriptsAfterResume() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.RunToolsScriptsAfterResume }).(pulumi.BoolPtrOutput)
}

// Enable pre-reboot scripts to run when VMware Tools is installed. Default: `false`.
func (o VirtualMachineOutput) RunToolsScriptsBeforeGuestReboot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.RunToolsScriptsBeforeGuestReboot }).(pulumi.BoolPtrOutput)
}

// Enable pre-shutdown scripts to run when VMware Tools is installed. Default: `true`.
func (o VirtualMachineOutput) RunToolsScriptsBeforeGuestShutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.RunToolsScriptsBeforeGuestShutdown }).(pulumi.BoolPtrOutput)
}

// Enable pre-standby scripts to run when VMware Tools is installed. Default: `true`.
func (o VirtualMachineOutput) RunToolsScriptsBeforeGuestStandby() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.RunToolsScriptsBeforeGuestStandby }).(pulumi.BoolPtrOutput)
}

// The number of SATA controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
// controllers.
func (o VirtualMachineOutput) SataControllerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.SataControllerCount }).(pulumi.IntPtrOutput)
}

// The type of SCSI bus sharing for the virtual machine SCSI controller. One of `physicalSharing`, `virtualSharing`, and `noSharing`. Default: `noSharing`.
func (o VirtualMachineOutput) ScsiBusSharing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.ScsiBusSharing }).(pulumi.StringPtrOutput)
}

// The number of SCSI controllers that Terraform manages on this virtual machine. This directly affects the amount of disks
// you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove
// controllers.
func (o VirtualMachineOutput) ScsiControllerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.ScsiControllerCount }).(pulumi.IntPtrOutput)
}

// The SCSI controller type for the virtual machine. One of `lsilogic` (LSI Logic Parallel), `lsilogic-sas` (LSI Logic SAS) or `pvscsi` (VMware Paravirtual). Default: `pvscsi`.
func (o VirtualMachineOutput) ScsiType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.ScsiType }).(pulumi.StringPtrOutput)
}

// The amount of time, in minutes, to wait for a graceful guest shutdown when making necessary updates to the virtual machine. If `forcePowerOff` is set to `true`, the virtual machine will be forced to power-off after the timeout, otherwise an error is returned. Default: `3` minutes.
func (o VirtualMachineOutput) ShutdownWaitTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.ShutdownWaitTimeout }).(pulumi.IntPtrOutput)
}

// The UUID of the storage policy to assign to the virtual disk.
func (o VirtualMachineOutput) StoragePolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.StoragePolicyId }).(pulumi.StringOutput)
}

// The swap file placement policy for the virtual machine. One of `inherit`, `hostLocal`, or `vmDirectory`. Default: `inherit`.
func (o VirtualMachineOutput) SwapPlacementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.SwapPlacementPolicy }).(pulumi.StringPtrOutput)
}

// Enable the guest operating system to synchronization its clock with the host when the virtual machine is powered on or resumed. Requires vSphere 7.0 Update 1 and later. Requires VMware Tools to be installed. Default: `false`.
func (o VirtualMachineOutput) SyncTimeWithHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.SyncTimeWithHost }).(pulumi.BoolPtrOutput)
}

// Enable the guest operating system to periodically synchronize its clock with the host. Requires vSphere 7.0 Update 1 and later. On previous versions, setting `syncTimeWithHost` is will enable periodic synchronization. Requires VMware Tools to be installed. Default: `false`.
func (o VirtualMachineOutput) SyncTimeWithHostPeriodically() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.SyncTimeWithHostPeriodically }).(pulumi.BoolPtrOutput)
}

// The IDs of any tags to attach to this resource. Please refer to the `Tag` resource for more information on applying tags to virtual machine resources.
//
// > **NOTE:** Tagging support is unsupported on direct ESXi host connections and requires vCenter Server instance.
func (o VirtualMachineOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Enable automatic upgrade of the VMware Tools version when the virtual machine is rebooted. If necessary, VMware Tools is upgraded to the latest version supported by the host on which the virtual machine is running. Requires VMware Tools to be installed. One of `manual` or `upgradeAtPowerCycle`. Default: `manual`.
func (o VirtualMachineOutput) ToolsUpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.ToolsUpgradePolicy }).(pulumi.StringPtrOutput)
}

// The UUID of the virtual disk VMDK file. This is used to track the virtual disk on the virtual machine.
func (o VirtualMachineOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Used for vApp configurations. The only sub-key available is `properties`, which is a key/value map of properties for virtual machines imported from and OVF/OVA. See Using vApp Properties for OVF/OVA Configuration for more information.
func (o VirtualMachineOutput) Vapp() VirtualMachineVappPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineVappPtrOutput { return v.Vapp }).(VirtualMachineVappPtrOutput)
}

// Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.
func (o VirtualMachineOutput) VappTransports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.VappTransports }).(pulumi.StringArrayOutput)
}

// Enable Virtualization Based Security. Requires `firmware` to be `efi`. In addition, `vvtdEnabled`, `nestedHvEnabled`, and `efiSecureBootEnabled` must all have a value of `true`. Supported on vSphere 6.7 and later. Default: `false`.
func (o VirtualMachineOutput) VbsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.VbsEnabled }).(pulumi.BoolPtrOutput)
}

// The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.
func (o VirtualMachineOutput) VmwareToolsStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.VmwareToolsStatus }).(pulumi.StringOutput)
}

// The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.
func (o VirtualMachineOutput) VmxPath() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.VmxPath }).(pulumi.StringOutput)
}

// Enable Intel Virtualization Technology for Directed I/O for the virtual machine (_I/O MMU_ in the vSphere Client). Supported on vSphere 6.7 and later. Default: `false`.
func (o VirtualMachineOutput) VvtdEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.VvtdEnabled }).(pulumi.BoolPtrOutput)
}

// The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. This should only be used if the version VMware Tools does not allow the `waitForGuestNetTimeout` waiter to be used. A value less than `1` disables the waiter. Default: `0`.
func (o VirtualMachineOutput) WaitForGuestIpTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.WaitForGuestIpTimeout }).(pulumi.IntPtrOutput)
}

// Controls whether or not the guest network waiter waits for a routable address. When `false`, the waiter does not wait for a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria. This property is ignored if the `waitForGuestIpTimeout` waiter is used. Default: `true`.
func (o VirtualMachineOutput) WaitForGuestNetRoutable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.WaitForGuestNetRoutable }).(pulumi.BoolPtrOutput)
}

// The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. Older versions of VMware Tools do not populate this property. In those cases, this waiter can be disabled and the `waitForGuestIpTimeout` waiter can be used instead. A value less than `1` disables the waiter. Default: `5` minutes.
func (o VirtualMachineOutput) WaitForGuestNetTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.WaitForGuestNetTimeout }).(pulumi.IntPtrOutput)
}

type VirtualMachineArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VirtualMachine] {
	return pulumix.Output[[]*VirtualMachine]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineArrayOutput) Index(i pulumi.IntInput) VirtualMachineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualMachine {
		return vs[0].([]*VirtualMachine)[vs[1].(int)]
	}).(VirtualMachineOutput)
}

type VirtualMachineMapOutput struct{ *pulumi.OutputState }

func (VirtualMachineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VirtualMachine] {
	return pulumix.Output[map[string]*VirtualMachine]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineMapOutput) MapIndex(k pulumi.StringInput) VirtualMachineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualMachine {
		return vs[0].(map[string]*VirtualMachine)[vs[1].(string)]
	}).(VirtualMachineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInput)(nil)).Elem(), &VirtualMachine{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineArrayInput)(nil)).Elem(), VirtualMachineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineMapInput)(nil)).Elem(), VirtualMachineMap{})
	pulumi.RegisterOutputType(VirtualMachineOutput{})
	pulumi.RegisterOutputType(VirtualMachineArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineMapOutput{})
}
