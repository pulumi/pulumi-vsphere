// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a VMware vSphere datacenter resource. This can be used as the primary
// container of inventory objects such as hosts and virtual machines.
type Datacenter struct {
	s *pulumi.ResourceState
}

// NewDatacenter registers a new resource with the given unique name, arguments, and options.
func NewDatacenter(ctx *pulumi.Context,
	name string, args *DatacenterArgs, opts ...pulumi.ResourceOpt) (*Datacenter, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["customAttributes"] = nil
		inputs["folder"] = nil
		inputs["name"] = nil
		inputs["tags"] = nil
	} else {
		inputs["customAttributes"] = args.CustomAttributes
		inputs["folder"] = args.Folder
		inputs["name"] = args.Name
		inputs["tags"] = args.Tags
	}
	inputs["moid"] = nil
	s, err := ctx.RegisterResource("vsphere:index/datacenter:Datacenter", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Datacenter{s: s}, nil
}

// GetDatacenter gets an existing Datacenter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatacenter(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DatacenterState, opts ...pulumi.ResourceOpt) (*Datacenter, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["customAttributes"] = state.CustomAttributes
		inputs["folder"] = state.Folder
		inputs["moid"] = state.Moid
		inputs["name"] = state.Name
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("vsphere:index/datacenter:Datacenter", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Datacenter{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Datacenter) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Datacenter) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Map of custom attribute ids to value 
// strings to set for datacenter resource. See
// [here][docs-setting-custom-attributes] for a reference on how to set values
// for custom attributes.
func (r *Datacenter) CustomAttributes() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["customAttributes"])
}

// The folder where the datacenter should be created.
// Forces a new resource if changed.
func (r *Datacenter) Folder() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["folder"])
}

// [Managed object ID][docs-about-morefs] of this datacenter.
func (r *Datacenter) Moid() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["moid"])
}

// The name of the datacenter. This name needs to be unique
// within the folder. Forces a new resource if changed.
func (r *Datacenter) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The IDs of any tags to attach to this resource. See
// [here][docs-applying-tags] for a reference on how to apply tags.
func (r *Datacenter) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Datacenter resources.
type DatacenterState struct {
	// Map of custom attribute ids to value 
	// strings to set for datacenter resource. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	CustomAttributes interface{}
	// The folder where the datacenter should be created.
	// Forces a new resource if changed.
	Folder interface{}
	// [Managed object ID][docs-about-morefs] of this datacenter.
	Moid interface{}
	// The name of the datacenter. This name needs to be unique
	// within the folder. Forces a new resource if changed.
	Name interface{}
	// The IDs of any tags to attach to this resource. See
	// [here][docs-applying-tags] for a reference on how to apply tags.
	Tags interface{}
}

// The set of arguments for constructing a Datacenter resource.
type DatacenterArgs struct {
	// Map of custom attribute ids to value 
	// strings to set for datacenter resource. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	CustomAttributes interface{}
	// The folder where the datacenter should be created.
	// Forces a new resource if changed.
	Folder interface{}
	// The name of the datacenter. This name needs to be unique
	// within the folder. Forces a new resource if changed.
	Name interface{}
	// The IDs of any tags to attach to this resource. See
	// [here][docs-applying-tags] for a reference on how to apply tags.
	Tags interface{}
}
