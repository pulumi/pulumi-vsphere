// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `VappContainer` data source can be used to discover the ID of a
// vApp container in vSphere. This is useful to return the ID of a vApp container
// that you want to use to create virtual machines in using the
// `VirtualMachine` resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			datacenter, err := vsphere.LookupDatacenter(ctx, &vsphere.LookupDatacenterArgs{
//				Name: pulumi.StringRef("dc-01"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vsphere.LookupVappContainer(ctx, &vsphere.LookupVappContainerArgs{
//				Name:         "vapp-container-01",
//				DatacenterId: datacenter.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupVappContainer(ctx *pulumi.Context, args *LookupVappContainerArgs, opts ...pulumi.InvokeOption) (*LookupVappContainerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVappContainerResult
	err := ctx.Invoke("vsphere:index/getVappContainer:getVappContainer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVappContainer.
type LookupVappContainerArgs struct {
	// The managed object reference ID
	// of the datacenter in which the vApp container is located.
	DatacenterId string `pulumi:"datacenterId"`
	// The name of the vApp container. This can be a name or
	// path.
	Name string `pulumi:"name"`
}

// A collection of values returned by getVappContainer.
type LookupVappContainerResult struct {
	DatacenterId string `pulumi:"datacenterId"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func LookupVappContainerOutput(ctx *pulumi.Context, args LookupVappContainerOutputArgs, opts ...pulumi.InvokeOption) LookupVappContainerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVappContainerResult, error) {
			args := v.(LookupVappContainerArgs)
			r, err := LookupVappContainer(ctx, &args, opts...)
			var s LookupVappContainerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVappContainerResultOutput)
}

// A collection of arguments for invoking getVappContainer.
type LookupVappContainerOutputArgs struct {
	// The managed object reference ID
	// of the datacenter in which the vApp container is located.
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// The name of the vApp container. This can be a name or
	// path.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupVappContainerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVappContainerArgs)(nil)).Elem()
}

// A collection of values returned by getVappContainer.
type LookupVappContainerResultOutput struct{ *pulumi.OutputState }

func (LookupVappContainerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVappContainerResult)(nil)).Elem()
}

func (o LookupVappContainerResultOutput) ToLookupVappContainerResultOutput() LookupVappContainerResultOutput {
	return o
}

func (o LookupVappContainerResultOutput) ToLookupVappContainerResultOutputWithContext(ctx context.Context) LookupVappContainerResultOutput {
	return o
}

func (o LookupVappContainerResultOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappContainerResult) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVappContainerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappContainerResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupVappContainerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappContainerResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVappContainerResultOutput{})
}
