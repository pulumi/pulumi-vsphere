// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
)

// If set, VMware vSphere client will permit unverifiable SSL certificates.
func GetAllowUnverifiedSsl(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "vsphere:allowUnverifiedSsl")
	if err == nil {
		return v
	}
	var value bool
	if d := getEnvOrDefault(nil, parseEnvBool, "VSPHERE_ALLOW_UNVERIFIED_SSL"); d != nil {
		value = d.(bool)
	}
	return value
}

// API timeout in minutes (Default: 5)
func GetApiTimeout(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "vsphere:apiTimeout")
}

// govmomi debug
func GetClientDebug(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "vsphere:clientDebug")
	if err == nil {
		return v
	}
	var value bool
	if d := getEnvOrDefault(nil, parseEnvBool, "VSPHERE_CLIENT_DEBUG"); d != nil {
		value = d.(bool)
	}
	return value
}

// govmomi debug path for debug
func GetClientDebugPath(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "vsphere:clientDebugPath")
	if err == nil {
		return v
	}
	var value string
	if d := getEnvOrDefault(nil, nil, "VSPHERE_CLIENT_DEBUG_PATH"); d != nil {
		value = d.(string)
	}
	return value
}

// govmomi debug path for a single run
func GetClientDebugPathRun(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "vsphere:clientDebugPathRun")
	if err == nil {
		return v
	}
	var value string
	if d := getEnvOrDefault(nil, nil, "VSPHERE_CLIENT_DEBUG_PATH_RUN"); d != nil {
		value = d.(string)
	}
	return value
}

// The user password for vSphere API operations.
func GetPassword(ctx *pulumi.Context) string {
	return config.Get(ctx, "vsphere:password")
}

// Persist vSphere client sessions to disk
func GetPersistSession(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "vsphere:persistSession")
	if err == nil {
		return v
	}
	var value bool
	if d := getEnvOrDefault(nil, parseEnvBool, "VSPHERE_PERSIST_SESSION"); d != nil {
		value = d.(bool)
	}
	return value
}

// The directory to save vSphere REST API sessions to
func GetRestSessionPath(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "vsphere:restSessionPath")
	if err == nil {
		return v
	}
	var value string
	if d := getEnvOrDefault(nil, nil, "VSPHERE_REST_SESSION_PATH"); d != nil {
		value = d.(string)
	}
	return value
}

// The user name for vSphere API operations.
func GetUser(ctx *pulumi.Context) string {
	return config.Get(ctx, "vsphere:user")
}

// Deprecated: This field has been renamed to vsphere_server.
func GetVcenterServer(ctx *pulumi.Context) string {
	return config.Get(ctx, "vsphere:vcenterServer")
}

// Keep alive interval for the VIM session in minutes
func GetVimKeepAlive(ctx *pulumi.Context) int {
	v, err := config.TryInt(ctx, "vsphere:vimKeepAlive")
	if err == nil {
		return v
	}
	var value int
	if d := getEnvOrDefault(nil, parseEnvInt, "VSPHERE_VIM_KEEP_ALIVE"); d != nil {
		value = d.(int)
	}
	return value
}

// The directory to save vSphere SOAP API sessions to
func GetVimSessionPath(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "vsphere:vimSessionPath")
	if err == nil {
		return v
	}
	var value string
	if d := getEnvOrDefault(nil, nil, "VSPHERE_VIM_SESSION_PATH"); d != nil {
		value = d.(string)
	}
	return value
}

// The vSphere Server name for vSphere API operations.
func GetVsphereServer(ctx *pulumi.Context) string {
	return config.Get(ctx, "vsphere:vsphereServer")
}
