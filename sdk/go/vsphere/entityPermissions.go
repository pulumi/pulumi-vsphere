// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type EntityPermissions struct {
	pulumi.CustomResourceState

	// The managed object id (uuid for some entities) on which permissions are to be created.
	EntityId pulumi.StringOutput `pulumi:"entityId"`
	// The managed object type, types can be found in the managed object type section
	// [here](https://code.vmware.com/apis/968/vsphere).
	EntityType pulumi.StringOutput `pulumi:"entityType"`
	// The permissions to be given on this entity. Keep the permissions sorted
	// alphabetically on `userOrGroup` for a better user experience.
	Permissions EntityPermissionsPermissionArrayOutput `pulumi:"permissions"`
}

// NewEntityPermissions registers a new resource with the given unique name, arguments, and options.
func NewEntityPermissions(ctx *pulumi.Context,
	name string, args *EntityPermissionsArgs, opts ...pulumi.ResourceOption) (*EntityPermissions, error) {
	if args == nil || args.EntityId == nil {
		return nil, errors.New("missing required argument 'EntityId'")
	}
	if args == nil || args.EntityType == nil {
		return nil, errors.New("missing required argument 'EntityType'")
	}
	if args == nil || args.Permissions == nil {
		return nil, errors.New("missing required argument 'Permissions'")
	}
	if args == nil {
		args = &EntityPermissionsArgs{}
	}
	var resource EntityPermissions
	err := ctx.RegisterResource("vsphere:index/entityPermissions:EntityPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntityPermissions gets an existing EntityPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntityPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntityPermissionsState, opts ...pulumi.ResourceOption) (*EntityPermissions, error) {
	var resource EntityPermissions
	err := ctx.ReadResource("vsphere:index/entityPermissions:EntityPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EntityPermissions resources.
type entityPermissionsState struct {
	// The managed object id (uuid for some entities) on which permissions are to be created.
	EntityId *string `pulumi:"entityId"`
	// The managed object type, types can be found in the managed object type section
	// [here](https://code.vmware.com/apis/968/vsphere).
	EntityType *string `pulumi:"entityType"`
	// The permissions to be given on this entity. Keep the permissions sorted
	// alphabetically on `userOrGroup` for a better user experience.
	Permissions []EntityPermissionsPermission `pulumi:"permissions"`
}

type EntityPermissionsState struct {
	// The managed object id (uuid for some entities) on which permissions are to be created.
	EntityId pulumi.StringPtrInput
	// The managed object type, types can be found in the managed object type section
	// [here](https://code.vmware.com/apis/968/vsphere).
	EntityType pulumi.StringPtrInput
	// The permissions to be given on this entity. Keep the permissions sorted
	// alphabetically on `userOrGroup` for a better user experience.
	Permissions EntityPermissionsPermissionArrayInput
}

func (EntityPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*entityPermissionsState)(nil)).Elem()
}

type entityPermissionsArgs struct {
	// The managed object id (uuid for some entities) on which permissions are to be created.
	EntityId string `pulumi:"entityId"`
	// The managed object type, types can be found in the managed object type section
	// [here](https://code.vmware.com/apis/968/vsphere).
	EntityType string `pulumi:"entityType"`
	// The permissions to be given on this entity. Keep the permissions sorted
	// alphabetically on `userOrGroup` for a better user experience.
	Permissions []EntityPermissionsPermission `pulumi:"permissions"`
}

// The set of arguments for constructing a EntityPermissions resource.
type EntityPermissionsArgs struct {
	// The managed object id (uuid for some entities) on which permissions are to be created.
	EntityId pulumi.StringInput
	// The managed object type, types can be found in the managed object type section
	// [here](https://code.vmware.com/apis/968/vsphere).
	EntityType pulumi.StringInput
	// The permissions to be given on this entity. Keep the permissions sorted
	// alphabetically on `userOrGroup` for a better user experience.
	Permissions EntityPermissionsPermissionArrayInput
}

func (EntityPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entityPermissionsArgs)(nil)).Elem()
}

type EntityPermissionsInput interface {
	pulumi.Input

	ToEntityPermissionsOutput() EntityPermissionsOutput
	ToEntityPermissionsOutputWithContext(ctx context.Context) EntityPermissionsOutput
}

func (EntityPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPermissions)(nil)).Elem()
}

func (i EntityPermissions) ToEntityPermissionsOutput() EntityPermissionsOutput {
	return i.ToEntityPermissionsOutputWithContext(context.Background())
}

func (i EntityPermissions) ToEntityPermissionsOutputWithContext(ctx context.Context) EntityPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPermissionsOutput)
}

type EntityPermissionsOutput struct {
	*pulumi.OutputState
}

func (EntityPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPermissionsOutput)(nil)).Elem()
}

func (o EntityPermissionsOutput) ToEntityPermissionsOutput() EntityPermissionsOutput {
	return o
}

func (o EntityPermissionsOutput) ToEntityPermissionsOutputWithContext(ctx context.Context) EntityPermissionsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(EntityPermissionsOutput{})
}
