// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `DatastoreCluster` resource can be used to create and manage
// datastore clusters. This can be used to create groups of datastores with a
// shared management interface, allowing for resource control and load balancing
// through Storage DRS.
//
// For more information on vSphere datastore clusters and Storage DRS, see [this
// page][ref-vsphere-datastore-clusters].
//
// > **NOTE:** This resource requires vCenter and is not available on direct ESXi
// connections.
//
// > **NOTE:** Storage DRS requires a vSphere Enterprise Plus license.
//
// ## Import
//
// # An existing datastore cluster can be imported into this resource
//
// via the path to the cluster, via the following command:
//
// ```sh
// $ pulumi import vsphere:index/datastoreCluster:DatastoreCluster datastore_cluster /dc1/datastore/ds-cluster
// ```
//
// # The above would import the datastore cluster named `ds-cluster` that is located
//
// in the `dc1` datacenter.
//
// [ref-vsphere-datastore-clusters]: https://techdocs.broadcom.com/us/en/vmware-cis/vsphere/vsphere/8-0/vsphere-resource-management-8-0/creating-a-datastore-cluster.html
//
// [docs-import]: https://developer.hashicorp.com/terraform/cli/import
type DatastoreCluster struct {
	pulumi.CustomResourceState

	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	//
	// [docs-setting-custom-attributes]: /docs/providers/vsphere/r/custom_attribute.html#using-custom-attributes-in-a-supported-resource
	//
	// > **NOTE:** Custom attributes are unsupported on direct ESXi connections
	// and require vCenter.
	CustomAttributes pulumi.StringMapOutput `pulumi:"customAttributes"`
	// The managed object ID of
	// the datacenter to create the datastore cluster in. Forces a new resource if
	// changed.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// The relative path to a folder to put this datastore
	// cluster in.  This is a path relative to the datacenter you are deploying the
	// datastore to.  Example: for the `dc1` datacenter, and a provided `folder` of
	// `foo/bar`, The provider will place a datastore cluster named
	// `datastore-cluster-test` in a datastore folder located at
	// `/dc1/datastore/foo/bar`, with the final inventory path being
	// `/dc1/datastore/foo/bar/datastore-cluster-test`.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// The name of the datastore cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// Advanced configuration options for storage DRS.
	SdrsAdvancedOptions pulumi.StringMapOutput `pulumi:"sdrsAdvancedOptions"`
	// The default automation level for all virtual machines in this storage cluster.
	SdrsAutomationLevel pulumi.StringPtrOutput `pulumi:"sdrsAutomationLevel"`
	// When true, storage DRS keeps VMDKs for individual VMs on the same datastore by default.
	SdrsDefaultIntraVmAffinity pulumi.BoolPtrOutput `pulumi:"sdrsDefaultIntraVmAffinity"`
	// Enable Storage DRS for this datastore cluster.
	// Default: `false`.
	SdrsEnabled pulumi.BoolPtrOutput `pulumi:"sdrsEnabled"`
	// The threshold, in GB, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	SdrsFreeSpaceThreshold pulumi.IntPtrOutput `pulumi:"sdrsFreeSpaceThreshold"`
	// The free space threshold to use. When set to utilization, drsSpaceUtilizationThreshold is used, and when set to
	// freeSpace, drsFreeSpaceThreshold is used.
	SdrsFreeSpaceThresholdMode pulumi.StringPtrOutput `pulumi:"sdrsFreeSpaceThresholdMode"`
	// The threshold, in percent, of difference between space utilization in datastores before storage DRS makes decisions to
	// balance the space.
	SdrsFreeSpaceUtilizationDifference pulumi.IntPtrOutput `pulumi:"sdrsFreeSpaceUtilizationDifference"`
	// Overrides the default automation settings when correcting I/O load imbalances.
	SdrsIoBalanceAutomationLevel pulumi.StringPtrOutput `pulumi:"sdrsIoBalanceAutomationLevel"`
	// The I/O latency threshold, in milliseconds, that storage DRS uses to make recommendations to move disks from this
	// datastore.
	SdrsIoLatencyThreshold pulumi.IntPtrOutput `pulumi:"sdrsIoLatencyThreshold"`
	// Enable I/O load balancing for this datastore cluster.
	SdrsIoLoadBalanceEnabled pulumi.BoolPtrOutput `pulumi:"sdrsIoLoadBalanceEnabled"`
	// The difference between load in datastores in the cluster before storage DRS makes recommendations to balance the load.
	SdrsIoLoadImbalanceThreshold pulumi.IntPtrOutput `pulumi:"sdrsIoLoadImbalanceThreshold"`
	// The threshold of reservable IOPS of all virtual machines on the datastore before storage DRS makes recommendations to
	// move VMs off of a datastore.
	SdrsIoReservableIopsThreshold pulumi.IntPtrOutput `pulumi:"sdrsIoReservableIopsThreshold"`
	// The threshold, in percent, of actual estimated performance of the datastore (in IOPS) that storage DRS uses to make
	// recommendations to move VMs off of a datastore when the total reservable IOPS exceeds the threshold.
	SdrsIoReservablePercentThreshold pulumi.IntPtrOutput `pulumi:"sdrsIoReservablePercentThreshold"`
	// The reservable IOPS threshold to use, percent in the event of automatic, or manual threshold in the event of manual.
	SdrsIoReservableThresholdMode pulumi.StringPtrOutput `pulumi:"sdrsIoReservableThresholdMode"`
	// The storage DRS poll interval, in minutes.
	SdrsLoadBalanceInterval pulumi.IntPtrOutput `pulumi:"sdrsLoadBalanceInterval"`
	// Overrides the default automation settings when correcting storage and VM policy violations.
	SdrsPolicyEnforcementAutomationLevel pulumi.StringPtrOutput `pulumi:"sdrsPolicyEnforcementAutomationLevel"`
	// Overrides the default automation settings when correcting affinity rule violations.
	SdrsRuleEnforcementAutomationLevel pulumi.StringPtrOutput `pulumi:"sdrsRuleEnforcementAutomationLevel"`
	// Overrides the default automation settings when correcting disk space imbalances.
	SdrsSpaceBalanceAutomationLevel pulumi.StringPtrOutput `pulumi:"sdrsSpaceBalanceAutomationLevel"`
	// The threshold, in percent of used space, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	SdrsSpaceUtilizationThreshold pulumi.IntPtrOutput `pulumi:"sdrsSpaceUtilizationThreshold"`
	// Overrides the default automation settings when generating recommendations for datastore evacuation.
	SdrsVmEvacuationAutomationLevel pulumi.StringPtrOutput `pulumi:"sdrsVmEvacuationAutomationLevel"`
	// The IDs of any tags to attach to this resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewDatastoreCluster registers a new resource with the given unique name, arguments, and options.
func NewDatastoreCluster(ctx *pulumi.Context,
	name string, args *DatastoreClusterArgs, opts ...pulumi.ResourceOption) (*DatastoreCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatastoreCluster
	err := ctx.RegisterResource("vsphere:index/datastoreCluster:DatastoreCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatastoreCluster gets an existing DatastoreCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatastoreCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatastoreClusterState, opts ...pulumi.ResourceOption) (*DatastoreCluster, error) {
	var resource DatastoreCluster
	err := ctx.ReadResource("vsphere:index/datastoreCluster:DatastoreCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatastoreCluster resources.
type datastoreClusterState struct {
	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	//
	// [docs-setting-custom-attributes]: /docs/providers/vsphere/r/custom_attribute.html#using-custom-attributes-in-a-supported-resource
	//
	// > **NOTE:** Custom attributes are unsupported on direct ESXi connections
	// and require vCenter.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// The managed object ID of
	// the datacenter to create the datastore cluster in. Forces a new resource if
	// changed.
	DatacenterId *string `pulumi:"datacenterId"`
	// The relative path to a folder to put this datastore
	// cluster in.  This is a path relative to the datacenter you are deploying the
	// datastore to.  Example: for the `dc1` datacenter, and a provided `folder` of
	// `foo/bar`, The provider will place a datastore cluster named
	// `datastore-cluster-test` in a datastore folder located at
	// `/dc1/datastore/foo/bar`, with the final inventory path being
	// `/dc1/datastore/foo/bar/datastore-cluster-test`.
	Folder *string `pulumi:"folder"`
	// The name of the datastore cluster.
	Name *string `pulumi:"name"`
	// Advanced configuration options for storage DRS.
	SdrsAdvancedOptions map[string]string `pulumi:"sdrsAdvancedOptions"`
	// The default automation level for all virtual machines in this storage cluster.
	SdrsAutomationLevel *string `pulumi:"sdrsAutomationLevel"`
	// When true, storage DRS keeps VMDKs for individual VMs on the same datastore by default.
	SdrsDefaultIntraVmAffinity *bool `pulumi:"sdrsDefaultIntraVmAffinity"`
	// Enable Storage DRS for this datastore cluster.
	// Default: `false`.
	SdrsEnabled *bool `pulumi:"sdrsEnabled"`
	// The threshold, in GB, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	SdrsFreeSpaceThreshold *int `pulumi:"sdrsFreeSpaceThreshold"`
	// The free space threshold to use. When set to utilization, drsSpaceUtilizationThreshold is used, and when set to
	// freeSpace, drsFreeSpaceThreshold is used.
	SdrsFreeSpaceThresholdMode *string `pulumi:"sdrsFreeSpaceThresholdMode"`
	// The threshold, in percent, of difference between space utilization in datastores before storage DRS makes decisions to
	// balance the space.
	SdrsFreeSpaceUtilizationDifference *int `pulumi:"sdrsFreeSpaceUtilizationDifference"`
	// Overrides the default automation settings when correcting I/O load imbalances.
	SdrsIoBalanceAutomationLevel *string `pulumi:"sdrsIoBalanceAutomationLevel"`
	// The I/O latency threshold, in milliseconds, that storage DRS uses to make recommendations to move disks from this
	// datastore.
	SdrsIoLatencyThreshold *int `pulumi:"sdrsIoLatencyThreshold"`
	// Enable I/O load balancing for this datastore cluster.
	SdrsIoLoadBalanceEnabled *bool `pulumi:"sdrsIoLoadBalanceEnabled"`
	// The difference between load in datastores in the cluster before storage DRS makes recommendations to balance the load.
	SdrsIoLoadImbalanceThreshold *int `pulumi:"sdrsIoLoadImbalanceThreshold"`
	// The threshold of reservable IOPS of all virtual machines on the datastore before storage DRS makes recommendations to
	// move VMs off of a datastore.
	SdrsIoReservableIopsThreshold *int `pulumi:"sdrsIoReservableIopsThreshold"`
	// The threshold, in percent, of actual estimated performance of the datastore (in IOPS) that storage DRS uses to make
	// recommendations to move VMs off of a datastore when the total reservable IOPS exceeds the threshold.
	SdrsIoReservablePercentThreshold *int `pulumi:"sdrsIoReservablePercentThreshold"`
	// The reservable IOPS threshold to use, percent in the event of automatic, or manual threshold in the event of manual.
	SdrsIoReservableThresholdMode *string `pulumi:"sdrsIoReservableThresholdMode"`
	// The storage DRS poll interval, in minutes.
	SdrsLoadBalanceInterval *int `pulumi:"sdrsLoadBalanceInterval"`
	// Overrides the default automation settings when correcting storage and VM policy violations.
	SdrsPolicyEnforcementAutomationLevel *string `pulumi:"sdrsPolicyEnforcementAutomationLevel"`
	// Overrides the default automation settings when correcting affinity rule violations.
	SdrsRuleEnforcementAutomationLevel *string `pulumi:"sdrsRuleEnforcementAutomationLevel"`
	// Overrides the default automation settings when correcting disk space imbalances.
	SdrsSpaceBalanceAutomationLevel *string `pulumi:"sdrsSpaceBalanceAutomationLevel"`
	// The threshold, in percent of used space, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	SdrsSpaceUtilizationThreshold *int `pulumi:"sdrsSpaceUtilizationThreshold"`
	// Overrides the default automation settings when generating recommendations for datastore evacuation.
	SdrsVmEvacuationAutomationLevel *string `pulumi:"sdrsVmEvacuationAutomationLevel"`
	// The IDs of any tags to attach to this resource.
	Tags []string `pulumi:"tags"`
}

type DatastoreClusterState struct {
	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	//
	// [docs-setting-custom-attributes]: /docs/providers/vsphere/r/custom_attribute.html#using-custom-attributes-in-a-supported-resource
	//
	// > **NOTE:** Custom attributes are unsupported on direct ESXi connections
	// and require vCenter.
	CustomAttributes pulumi.StringMapInput
	// The managed object ID of
	// the datacenter to create the datastore cluster in. Forces a new resource if
	// changed.
	DatacenterId pulumi.StringPtrInput
	// The relative path to a folder to put this datastore
	// cluster in.  This is a path relative to the datacenter you are deploying the
	// datastore to.  Example: for the `dc1` datacenter, and a provided `folder` of
	// `foo/bar`, The provider will place a datastore cluster named
	// `datastore-cluster-test` in a datastore folder located at
	// `/dc1/datastore/foo/bar`, with the final inventory path being
	// `/dc1/datastore/foo/bar/datastore-cluster-test`.
	Folder pulumi.StringPtrInput
	// The name of the datastore cluster.
	Name pulumi.StringPtrInput
	// Advanced configuration options for storage DRS.
	SdrsAdvancedOptions pulumi.StringMapInput
	// The default automation level for all virtual machines in this storage cluster.
	SdrsAutomationLevel pulumi.StringPtrInput
	// When true, storage DRS keeps VMDKs for individual VMs on the same datastore by default.
	SdrsDefaultIntraVmAffinity pulumi.BoolPtrInput
	// Enable Storage DRS for this datastore cluster.
	// Default: `false`.
	SdrsEnabled pulumi.BoolPtrInput
	// The threshold, in GB, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	SdrsFreeSpaceThreshold pulumi.IntPtrInput
	// The free space threshold to use. When set to utilization, drsSpaceUtilizationThreshold is used, and when set to
	// freeSpace, drsFreeSpaceThreshold is used.
	SdrsFreeSpaceThresholdMode pulumi.StringPtrInput
	// The threshold, in percent, of difference between space utilization in datastores before storage DRS makes decisions to
	// balance the space.
	SdrsFreeSpaceUtilizationDifference pulumi.IntPtrInput
	// Overrides the default automation settings when correcting I/O load imbalances.
	SdrsIoBalanceAutomationLevel pulumi.StringPtrInput
	// The I/O latency threshold, in milliseconds, that storage DRS uses to make recommendations to move disks from this
	// datastore.
	SdrsIoLatencyThreshold pulumi.IntPtrInput
	// Enable I/O load balancing for this datastore cluster.
	SdrsIoLoadBalanceEnabled pulumi.BoolPtrInput
	// The difference between load in datastores in the cluster before storage DRS makes recommendations to balance the load.
	SdrsIoLoadImbalanceThreshold pulumi.IntPtrInput
	// The threshold of reservable IOPS of all virtual machines on the datastore before storage DRS makes recommendations to
	// move VMs off of a datastore.
	SdrsIoReservableIopsThreshold pulumi.IntPtrInput
	// The threshold, in percent, of actual estimated performance of the datastore (in IOPS) that storage DRS uses to make
	// recommendations to move VMs off of a datastore when the total reservable IOPS exceeds the threshold.
	SdrsIoReservablePercentThreshold pulumi.IntPtrInput
	// The reservable IOPS threshold to use, percent in the event of automatic, or manual threshold in the event of manual.
	SdrsIoReservableThresholdMode pulumi.StringPtrInput
	// The storage DRS poll interval, in minutes.
	SdrsLoadBalanceInterval pulumi.IntPtrInput
	// Overrides the default automation settings when correcting storage and VM policy violations.
	SdrsPolicyEnforcementAutomationLevel pulumi.StringPtrInput
	// Overrides the default automation settings when correcting affinity rule violations.
	SdrsRuleEnforcementAutomationLevel pulumi.StringPtrInput
	// Overrides the default automation settings when correcting disk space imbalances.
	SdrsSpaceBalanceAutomationLevel pulumi.StringPtrInput
	// The threshold, in percent of used space, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	SdrsSpaceUtilizationThreshold pulumi.IntPtrInput
	// Overrides the default automation settings when generating recommendations for datastore evacuation.
	SdrsVmEvacuationAutomationLevel pulumi.StringPtrInput
	// The IDs of any tags to attach to this resource.
	Tags pulumi.StringArrayInput
}

func (DatastoreClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*datastoreClusterState)(nil)).Elem()
}

type datastoreClusterArgs struct {
	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	//
	// [docs-setting-custom-attributes]: /docs/providers/vsphere/r/custom_attribute.html#using-custom-attributes-in-a-supported-resource
	//
	// > **NOTE:** Custom attributes are unsupported on direct ESXi connections
	// and require vCenter.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// The managed object ID of
	// the datacenter to create the datastore cluster in. Forces a new resource if
	// changed.
	DatacenterId string `pulumi:"datacenterId"`
	// The relative path to a folder to put this datastore
	// cluster in.  This is a path relative to the datacenter you are deploying the
	// datastore to.  Example: for the `dc1` datacenter, and a provided `folder` of
	// `foo/bar`, The provider will place a datastore cluster named
	// `datastore-cluster-test` in a datastore folder located at
	// `/dc1/datastore/foo/bar`, with the final inventory path being
	// `/dc1/datastore/foo/bar/datastore-cluster-test`.
	Folder *string `pulumi:"folder"`
	// The name of the datastore cluster.
	Name *string `pulumi:"name"`
	// Advanced configuration options for storage DRS.
	SdrsAdvancedOptions map[string]string `pulumi:"sdrsAdvancedOptions"`
	// The default automation level for all virtual machines in this storage cluster.
	SdrsAutomationLevel *string `pulumi:"sdrsAutomationLevel"`
	// When true, storage DRS keeps VMDKs for individual VMs on the same datastore by default.
	SdrsDefaultIntraVmAffinity *bool `pulumi:"sdrsDefaultIntraVmAffinity"`
	// Enable Storage DRS for this datastore cluster.
	// Default: `false`.
	SdrsEnabled *bool `pulumi:"sdrsEnabled"`
	// The threshold, in GB, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	SdrsFreeSpaceThreshold *int `pulumi:"sdrsFreeSpaceThreshold"`
	// The free space threshold to use. When set to utilization, drsSpaceUtilizationThreshold is used, and when set to
	// freeSpace, drsFreeSpaceThreshold is used.
	SdrsFreeSpaceThresholdMode *string `pulumi:"sdrsFreeSpaceThresholdMode"`
	// The threshold, in percent, of difference between space utilization in datastores before storage DRS makes decisions to
	// balance the space.
	SdrsFreeSpaceUtilizationDifference *int `pulumi:"sdrsFreeSpaceUtilizationDifference"`
	// Overrides the default automation settings when correcting I/O load imbalances.
	SdrsIoBalanceAutomationLevel *string `pulumi:"sdrsIoBalanceAutomationLevel"`
	// The I/O latency threshold, in milliseconds, that storage DRS uses to make recommendations to move disks from this
	// datastore.
	SdrsIoLatencyThreshold *int `pulumi:"sdrsIoLatencyThreshold"`
	// Enable I/O load balancing for this datastore cluster.
	SdrsIoLoadBalanceEnabled *bool `pulumi:"sdrsIoLoadBalanceEnabled"`
	// The difference between load in datastores in the cluster before storage DRS makes recommendations to balance the load.
	SdrsIoLoadImbalanceThreshold *int `pulumi:"sdrsIoLoadImbalanceThreshold"`
	// The threshold of reservable IOPS of all virtual machines on the datastore before storage DRS makes recommendations to
	// move VMs off of a datastore.
	SdrsIoReservableIopsThreshold *int `pulumi:"sdrsIoReservableIopsThreshold"`
	// The threshold, in percent, of actual estimated performance of the datastore (in IOPS) that storage DRS uses to make
	// recommendations to move VMs off of a datastore when the total reservable IOPS exceeds the threshold.
	SdrsIoReservablePercentThreshold *int `pulumi:"sdrsIoReservablePercentThreshold"`
	// The reservable IOPS threshold to use, percent in the event of automatic, or manual threshold in the event of manual.
	SdrsIoReservableThresholdMode *string `pulumi:"sdrsIoReservableThresholdMode"`
	// The storage DRS poll interval, in minutes.
	SdrsLoadBalanceInterval *int `pulumi:"sdrsLoadBalanceInterval"`
	// Overrides the default automation settings when correcting storage and VM policy violations.
	SdrsPolicyEnforcementAutomationLevel *string `pulumi:"sdrsPolicyEnforcementAutomationLevel"`
	// Overrides the default automation settings when correcting affinity rule violations.
	SdrsRuleEnforcementAutomationLevel *string `pulumi:"sdrsRuleEnforcementAutomationLevel"`
	// Overrides the default automation settings when correcting disk space imbalances.
	SdrsSpaceBalanceAutomationLevel *string `pulumi:"sdrsSpaceBalanceAutomationLevel"`
	// The threshold, in percent of used space, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	SdrsSpaceUtilizationThreshold *int `pulumi:"sdrsSpaceUtilizationThreshold"`
	// Overrides the default automation settings when generating recommendations for datastore evacuation.
	SdrsVmEvacuationAutomationLevel *string `pulumi:"sdrsVmEvacuationAutomationLevel"`
	// The IDs of any tags to attach to this resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a DatastoreCluster resource.
type DatastoreClusterArgs struct {
	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster. See
	// [here][docs-setting-custom-attributes] for a reference on how to set values
	// for custom attributes.
	//
	// [docs-setting-custom-attributes]: /docs/providers/vsphere/r/custom_attribute.html#using-custom-attributes-in-a-supported-resource
	//
	// > **NOTE:** Custom attributes are unsupported on direct ESXi connections
	// and require vCenter.
	CustomAttributes pulumi.StringMapInput
	// The managed object ID of
	// the datacenter to create the datastore cluster in. Forces a new resource if
	// changed.
	DatacenterId pulumi.StringInput
	// The relative path to a folder to put this datastore
	// cluster in.  This is a path relative to the datacenter you are deploying the
	// datastore to.  Example: for the `dc1` datacenter, and a provided `folder` of
	// `foo/bar`, The provider will place a datastore cluster named
	// `datastore-cluster-test` in a datastore folder located at
	// `/dc1/datastore/foo/bar`, with the final inventory path being
	// `/dc1/datastore/foo/bar/datastore-cluster-test`.
	Folder pulumi.StringPtrInput
	// The name of the datastore cluster.
	Name pulumi.StringPtrInput
	// Advanced configuration options for storage DRS.
	SdrsAdvancedOptions pulumi.StringMapInput
	// The default automation level for all virtual machines in this storage cluster.
	SdrsAutomationLevel pulumi.StringPtrInput
	// When true, storage DRS keeps VMDKs for individual VMs on the same datastore by default.
	SdrsDefaultIntraVmAffinity pulumi.BoolPtrInput
	// Enable Storage DRS for this datastore cluster.
	// Default: `false`.
	SdrsEnabled pulumi.BoolPtrInput
	// The threshold, in GB, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	SdrsFreeSpaceThreshold pulumi.IntPtrInput
	// The free space threshold to use. When set to utilization, drsSpaceUtilizationThreshold is used, and when set to
	// freeSpace, drsFreeSpaceThreshold is used.
	SdrsFreeSpaceThresholdMode pulumi.StringPtrInput
	// The threshold, in percent, of difference between space utilization in datastores before storage DRS makes decisions to
	// balance the space.
	SdrsFreeSpaceUtilizationDifference pulumi.IntPtrInput
	// Overrides the default automation settings when correcting I/O load imbalances.
	SdrsIoBalanceAutomationLevel pulumi.StringPtrInput
	// The I/O latency threshold, in milliseconds, that storage DRS uses to make recommendations to move disks from this
	// datastore.
	SdrsIoLatencyThreshold pulumi.IntPtrInput
	// Enable I/O load balancing for this datastore cluster.
	SdrsIoLoadBalanceEnabled pulumi.BoolPtrInput
	// The difference between load in datastores in the cluster before storage DRS makes recommendations to balance the load.
	SdrsIoLoadImbalanceThreshold pulumi.IntPtrInput
	// The threshold of reservable IOPS of all virtual machines on the datastore before storage DRS makes recommendations to
	// move VMs off of a datastore.
	SdrsIoReservableIopsThreshold pulumi.IntPtrInput
	// The threshold, in percent, of actual estimated performance of the datastore (in IOPS) that storage DRS uses to make
	// recommendations to move VMs off of a datastore when the total reservable IOPS exceeds the threshold.
	SdrsIoReservablePercentThreshold pulumi.IntPtrInput
	// The reservable IOPS threshold to use, percent in the event of automatic, or manual threshold in the event of manual.
	SdrsIoReservableThresholdMode pulumi.StringPtrInput
	// The storage DRS poll interval, in minutes.
	SdrsLoadBalanceInterval pulumi.IntPtrInput
	// Overrides the default automation settings when correcting storage and VM policy violations.
	SdrsPolicyEnforcementAutomationLevel pulumi.StringPtrInput
	// Overrides the default automation settings when correcting affinity rule violations.
	SdrsRuleEnforcementAutomationLevel pulumi.StringPtrInput
	// Overrides the default automation settings when correcting disk space imbalances.
	SdrsSpaceBalanceAutomationLevel pulumi.StringPtrInput
	// The threshold, in percent of used space, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	SdrsSpaceUtilizationThreshold pulumi.IntPtrInput
	// Overrides the default automation settings when generating recommendations for datastore evacuation.
	SdrsVmEvacuationAutomationLevel pulumi.StringPtrInput
	// The IDs of any tags to attach to this resource.
	Tags pulumi.StringArrayInput
}

func (DatastoreClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datastoreClusterArgs)(nil)).Elem()
}

type DatastoreClusterInput interface {
	pulumi.Input

	ToDatastoreClusterOutput() DatastoreClusterOutput
	ToDatastoreClusterOutputWithContext(ctx context.Context) DatastoreClusterOutput
}

func (*DatastoreCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**DatastoreCluster)(nil)).Elem()
}

func (i *DatastoreCluster) ToDatastoreClusterOutput() DatastoreClusterOutput {
	return i.ToDatastoreClusterOutputWithContext(context.Background())
}

func (i *DatastoreCluster) ToDatastoreClusterOutputWithContext(ctx context.Context) DatastoreClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreClusterOutput)
}

// DatastoreClusterArrayInput is an input type that accepts DatastoreClusterArray and DatastoreClusterArrayOutput values.
// You can construct a concrete instance of `DatastoreClusterArrayInput` via:
//
//	DatastoreClusterArray{ DatastoreClusterArgs{...} }
type DatastoreClusterArrayInput interface {
	pulumi.Input

	ToDatastoreClusterArrayOutput() DatastoreClusterArrayOutput
	ToDatastoreClusterArrayOutputWithContext(context.Context) DatastoreClusterArrayOutput
}

type DatastoreClusterArray []DatastoreClusterInput

func (DatastoreClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatastoreCluster)(nil)).Elem()
}

func (i DatastoreClusterArray) ToDatastoreClusterArrayOutput() DatastoreClusterArrayOutput {
	return i.ToDatastoreClusterArrayOutputWithContext(context.Background())
}

func (i DatastoreClusterArray) ToDatastoreClusterArrayOutputWithContext(ctx context.Context) DatastoreClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreClusterArrayOutput)
}

// DatastoreClusterMapInput is an input type that accepts DatastoreClusterMap and DatastoreClusterMapOutput values.
// You can construct a concrete instance of `DatastoreClusterMapInput` via:
//
//	DatastoreClusterMap{ "key": DatastoreClusterArgs{...} }
type DatastoreClusterMapInput interface {
	pulumi.Input

	ToDatastoreClusterMapOutput() DatastoreClusterMapOutput
	ToDatastoreClusterMapOutputWithContext(context.Context) DatastoreClusterMapOutput
}

type DatastoreClusterMap map[string]DatastoreClusterInput

func (DatastoreClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatastoreCluster)(nil)).Elem()
}

func (i DatastoreClusterMap) ToDatastoreClusterMapOutput() DatastoreClusterMapOutput {
	return i.ToDatastoreClusterMapOutputWithContext(context.Background())
}

func (i DatastoreClusterMap) ToDatastoreClusterMapOutputWithContext(ctx context.Context) DatastoreClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreClusterMapOutput)
}

type DatastoreClusterOutput struct{ *pulumi.OutputState }

func (DatastoreClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatastoreCluster)(nil)).Elem()
}

func (o DatastoreClusterOutput) ToDatastoreClusterOutput() DatastoreClusterOutput {
	return o
}

func (o DatastoreClusterOutput) ToDatastoreClusterOutputWithContext(ctx context.Context) DatastoreClusterOutput {
	return o
}

// A map of custom attribute ids to attribute
// value strings to set for the datastore cluster. See
// [here][docs-setting-custom-attributes] for a reference on how to set values
// for custom attributes.
//
// [docs-setting-custom-attributes]: /docs/providers/vsphere/r/custom_attribute.html#using-custom-attributes-in-a-supported-resource
//
// > **NOTE:** Custom attributes are unsupported on direct ESXi connections
// and require vCenter.
func (o DatastoreClusterOutput) CustomAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.StringMapOutput { return v.CustomAttributes }).(pulumi.StringMapOutput)
}

// The managed object ID of
// the datacenter to create the datastore cluster in. Forces a new resource if
// changed.
func (o DatastoreClusterOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// The relative path to a folder to put this datastore
// cluster in.  This is a path relative to the datacenter you are deploying the
// datastore to.  Example: for the `dc1` datacenter, and a provided `folder` of
// `foo/bar`, The provider will place a datastore cluster named
// `datastore-cluster-test` in a datastore folder located at
// `/dc1/datastore/foo/bar`, with the final inventory path being
// `/dc1/datastore/foo/bar/datastore-cluster-test`.
func (o DatastoreClusterOutput) Folder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.StringPtrOutput { return v.Folder }).(pulumi.StringPtrOutput)
}

// The name of the datastore cluster.
func (o DatastoreClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Advanced configuration options for storage DRS.
func (o DatastoreClusterOutput) SdrsAdvancedOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.StringMapOutput { return v.SdrsAdvancedOptions }).(pulumi.StringMapOutput)
}

// The default automation level for all virtual machines in this storage cluster.
func (o DatastoreClusterOutput) SdrsAutomationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.StringPtrOutput { return v.SdrsAutomationLevel }).(pulumi.StringPtrOutput)
}

// When true, storage DRS keeps VMDKs for individual VMs on the same datastore by default.
func (o DatastoreClusterOutput) SdrsDefaultIntraVmAffinity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.BoolPtrOutput { return v.SdrsDefaultIntraVmAffinity }).(pulumi.BoolPtrOutput)
}

// Enable Storage DRS for this datastore cluster.
// Default: `false`.
func (o DatastoreClusterOutput) SdrsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.BoolPtrOutput { return v.SdrsEnabled }).(pulumi.BoolPtrOutput)
}

// The threshold, in GB, that storage DRS uses to make decisions to migrate VMs out of a datastore.
func (o DatastoreClusterOutput) SdrsFreeSpaceThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.IntPtrOutput { return v.SdrsFreeSpaceThreshold }).(pulumi.IntPtrOutput)
}

// The free space threshold to use. When set to utilization, drsSpaceUtilizationThreshold is used, and when set to
// freeSpace, drsFreeSpaceThreshold is used.
func (o DatastoreClusterOutput) SdrsFreeSpaceThresholdMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.StringPtrOutput { return v.SdrsFreeSpaceThresholdMode }).(pulumi.StringPtrOutput)
}

// The threshold, in percent, of difference between space utilization in datastores before storage DRS makes decisions to
// balance the space.
func (o DatastoreClusterOutput) SdrsFreeSpaceUtilizationDifference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.IntPtrOutput { return v.SdrsFreeSpaceUtilizationDifference }).(pulumi.IntPtrOutput)
}

// Overrides the default automation settings when correcting I/O load imbalances.
func (o DatastoreClusterOutput) SdrsIoBalanceAutomationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.StringPtrOutput { return v.SdrsIoBalanceAutomationLevel }).(pulumi.StringPtrOutput)
}

// The I/O latency threshold, in milliseconds, that storage DRS uses to make recommendations to move disks from this
// datastore.
func (o DatastoreClusterOutput) SdrsIoLatencyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.IntPtrOutput { return v.SdrsIoLatencyThreshold }).(pulumi.IntPtrOutput)
}

// Enable I/O load balancing for this datastore cluster.
func (o DatastoreClusterOutput) SdrsIoLoadBalanceEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.BoolPtrOutput { return v.SdrsIoLoadBalanceEnabled }).(pulumi.BoolPtrOutput)
}

// The difference between load in datastores in the cluster before storage DRS makes recommendations to balance the load.
func (o DatastoreClusterOutput) SdrsIoLoadImbalanceThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.IntPtrOutput { return v.SdrsIoLoadImbalanceThreshold }).(pulumi.IntPtrOutput)
}

// The threshold of reservable IOPS of all virtual machines on the datastore before storage DRS makes recommendations to
// move VMs off of a datastore.
func (o DatastoreClusterOutput) SdrsIoReservableIopsThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.IntPtrOutput { return v.SdrsIoReservableIopsThreshold }).(pulumi.IntPtrOutput)
}

// The threshold, in percent, of actual estimated performance of the datastore (in IOPS) that storage DRS uses to make
// recommendations to move VMs off of a datastore when the total reservable IOPS exceeds the threshold.
func (o DatastoreClusterOutput) SdrsIoReservablePercentThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.IntPtrOutput { return v.SdrsIoReservablePercentThreshold }).(pulumi.IntPtrOutput)
}

// The reservable IOPS threshold to use, percent in the event of automatic, or manual threshold in the event of manual.
func (o DatastoreClusterOutput) SdrsIoReservableThresholdMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.StringPtrOutput { return v.SdrsIoReservableThresholdMode }).(pulumi.StringPtrOutput)
}

// The storage DRS poll interval, in minutes.
func (o DatastoreClusterOutput) SdrsLoadBalanceInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.IntPtrOutput { return v.SdrsLoadBalanceInterval }).(pulumi.IntPtrOutput)
}

// Overrides the default automation settings when correcting storage and VM policy violations.
func (o DatastoreClusterOutput) SdrsPolicyEnforcementAutomationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.StringPtrOutput { return v.SdrsPolicyEnforcementAutomationLevel }).(pulumi.StringPtrOutput)
}

// Overrides the default automation settings when correcting affinity rule violations.
func (o DatastoreClusterOutput) SdrsRuleEnforcementAutomationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.StringPtrOutput { return v.SdrsRuleEnforcementAutomationLevel }).(pulumi.StringPtrOutput)
}

// Overrides the default automation settings when correcting disk space imbalances.
func (o DatastoreClusterOutput) SdrsSpaceBalanceAutomationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.StringPtrOutput { return v.SdrsSpaceBalanceAutomationLevel }).(pulumi.StringPtrOutput)
}

// The threshold, in percent of used space, that storage DRS uses to make decisions to migrate VMs out of a datastore.
func (o DatastoreClusterOutput) SdrsSpaceUtilizationThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.IntPtrOutput { return v.SdrsSpaceUtilizationThreshold }).(pulumi.IntPtrOutput)
}

// Overrides the default automation settings when generating recommendations for datastore evacuation.
func (o DatastoreClusterOutput) SdrsVmEvacuationAutomationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.StringPtrOutput { return v.SdrsVmEvacuationAutomationLevel }).(pulumi.StringPtrOutput)
}

// The IDs of any tags to attach to this resource.
func (o DatastoreClusterOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatastoreCluster) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type DatastoreClusterArrayOutput struct{ *pulumi.OutputState }

func (DatastoreClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatastoreCluster)(nil)).Elem()
}

func (o DatastoreClusterArrayOutput) ToDatastoreClusterArrayOutput() DatastoreClusterArrayOutput {
	return o
}

func (o DatastoreClusterArrayOutput) ToDatastoreClusterArrayOutputWithContext(ctx context.Context) DatastoreClusterArrayOutput {
	return o
}

func (o DatastoreClusterArrayOutput) Index(i pulumi.IntInput) DatastoreClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatastoreCluster {
		return vs[0].([]*DatastoreCluster)[vs[1].(int)]
	}).(DatastoreClusterOutput)
}

type DatastoreClusterMapOutput struct{ *pulumi.OutputState }

func (DatastoreClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatastoreCluster)(nil)).Elem()
}

func (o DatastoreClusterMapOutput) ToDatastoreClusterMapOutput() DatastoreClusterMapOutput {
	return o
}

func (o DatastoreClusterMapOutput) ToDatastoreClusterMapOutputWithContext(ctx context.Context) DatastoreClusterMapOutput {
	return o
}

func (o DatastoreClusterMapOutput) MapIndex(k pulumi.StringInput) DatastoreClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatastoreCluster {
		return vs[0].(map[string]*DatastoreCluster)[vs[1].(string)]
	}).(DatastoreClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatastoreClusterInput)(nil)).Elem(), &DatastoreCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatastoreClusterArrayInput)(nil)).Elem(), DatastoreClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatastoreClusterMapInput)(nil)).Elem(), DatastoreClusterMap{})
	pulumi.RegisterOutputType(DatastoreClusterOutput{})
	pulumi.RegisterOutputType(DatastoreClusterArrayOutput{})
	pulumi.RegisterOutputType(DatastoreClusterMapOutput{})
}
