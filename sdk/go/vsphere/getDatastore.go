// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getDatastore` data source can be used to discover the ID of a
// vSphere datastore object. This can then be used with resources or data sources
// that require a datastore. For example, to create virtual machines in using the
// `VirtualMachine` resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			datacenter, err := vsphere.LookupDatacenter(ctx, &vsphere.LookupDatacenterArgs{
//				Name: pulumi.StringRef("dc-01"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vsphere.GetDatastore(ctx, &vsphere.GetDatastoreArgs{
//				Name:         "datastore-01",
//				DatacenterId: pulumi.StringRef(datacenter.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDatastore(ctx *pulumi.Context, args *GetDatastoreArgs, opts ...pulumi.InvokeOption) (*GetDatastoreResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDatastoreResult
	err := ctx.Invoke("vsphere:index/getDatastore:getDatastore", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatastore.
type GetDatastoreArgs struct {
	// The managed object reference ID
	// of the datacenter the datastore is located in. This can be omitted if the
	// search path used in `name` is an absolute path. For default datacenters, use
	// the `id` attribute from an empty `Datacenter` data source.
	DatacenterId *string `pulumi:"datacenterId"`
	// The name of the datastore. This can be a name or path.
	Name string `pulumi:"name"`
	// The disk space usage statistics for the specific datastore. The total
	// datastore capacity is represented as `capacity` and the free remaining disk is
	// represented as `free`.
	Stats map[string]interface{} `pulumi:"stats"`
}

// A collection of values returned by getDatastore.
type GetDatastoreResult struct {
	DatacenterId *string `pulumi:"datacenterId"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// The disk space usage statistics for the specific datastore. The total
	// datastore capacity is represented as `capacity` and the free remaining disk is
	// represented as `free`.
	Stats map[string]interface{} `pulumi:"stats"`
}

func GetDatastoreOutput(ctx *pulumi.Context, args GetDatastoreOutputArgs, opts ...pulumi.InvokeOption) GetDatastoreResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDatastoreResult, error) {
			args := v.(GetDatastoreArgs)
			r, err := GetDatastore(ctx, &args, opts...)
			var s GetDatastoreResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDatastoreResultOutput)
}

// A collection of arguments for invoking getDatastore.
type GetDatastoreOutputArgs struct {
	// The managed object reference ID
	// of the datacenter the datastore is located in. This can be omitted if the
	// search path used in `name` is an absolute path. For default datacenters, use
	// the `id` attribute from an empty `Datacenter` data source.
	DatacenterId pulumi.StringPtrInput `pulumi:"datacenterId"`
	// The name of the datastore. This can be a name or path.
	Name pulumi.StringInput `pulumi:"name"`
	// The disk space usage statistics for the specific datastore. The total
	// datastore capacity is represented as `capacity` and the free remaining disk is
	// represented as `free`.
	Stats pulumi.MapInput `pulumi:"stats"`
}

func (GetDatastoreOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatastoreArgs)(nil)).Elem()
}

// A collection of values returned by getDatastore.
type GetDatastoreResultOutput struct{ *pulumi.OutputState }

func (GetDatastoreResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatastoreResult)(nil)).Elem()
}

func (o GetDatastoreResultOutput) ToGetDatastoreResultOutput() GetDatastoreResultOutput {
	return o
}

func (o GetDatastoreResultOutput) ToGetDatastoreResultOutputWithContext(ctx context.Context) GetDatastoreResultOutput {
	return o
}

func (o GetDatastoreResultOutput) DatacenterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatastoreResult) *string { return v.DatacenterId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDatastoreResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatastoreResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDatastoreResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatastoreResult) string { return v.Name }).(pulumi.StringOutput)
}

// The disk space usage statistics for the specific datastore. The total
// datastore capacity is represented as `capacity` and the free remaining disk is
// represented as `free`.
func (o GetDatastoreResultOutput) Stats() pulumi.MapOutput {
	return o.ApplyT(func(v GetDatastoreResult) map[string]interface{} { return v.Stats }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDatastoreResultOutput{})
}
