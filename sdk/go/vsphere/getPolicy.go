// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getPolicy` data source can be used to discover the UUID of a
// vSphere storage policy. This can then be used with resources or data sources that
// require a storage policy.
//
// > **NOTE:** Storage policy support is unsupported on direct ESXi connections and
// requires vCenter 6.0 or higher.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vsphere.GetPolicy(ctx, &GetPolicyArgs{
// 			Name: "policy1",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetPolicy(ctx *pulumi.Context, args *GetPolicyArgs, opts ...pulumi.InvokeOption) (*GetPolicyResult, error) {
	var rv GetPolicyResult
	err := ctx.Invoke("vsphere:index/getPolicy:getPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPolicy.
type GetPolicyArgs struct {
	// The name of the storage policy.
	Name string `pulumi:"name"`
}

// A collection of values returned by getPolicy.
type GetPolicyResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func GetPolicyOutput(ctx *pulumi.Context, args GetPolicyOutputArgs, opts ...pulumi.InvokeOption) GetPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPolicyResult, error) {
			args := v.(GetPolicyArgs)
			r, err := GetPolicy(ctx, &args, opts...)
			return *r, err
		}).(GetPolicyResultOutput)
}

// A collection of arguments for invoking getPolicy.
type GetPolicyOutputArgs struct {
	// The name of the storage policy.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getPolicy.
type GetPolicyResultOutput struct{ *pulumi.OutputState }

func (GetPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyResult)(nil)).Elem()
}

func (o GetPolicyResultOutput) ToGetPolicyResultOutput() GetPolicyResultOutput {
	return o
}

func (o GetPolicyResultOutput) ToGetPolicyResultOutputWithContext(ctx context.Context) GetPolicyResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPolicyResultOutput{})
}
