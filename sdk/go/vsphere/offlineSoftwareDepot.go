// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VMware vSphere offline software depot resource.
//
// ## Example Usage
//
// ### S
type OfflineSoftwareDepot struct {
	pulumi.CustomResourceState

	// The list of custom components in the depot.
	Components OfflineSoftwareDepotComponentArrayOutput `pulumi:"components"`
	// The URL where the depot source is hosted.
	Location pulumi.StringOutput `pulumi:"location"`
}

// NewOfflineSoftwareDepot registers a new resource with the given unique name, arguments, and options.
func NewOfflineSoftwareDepot(ctx *pulumi.Context,
	name string, args *OfflineSoftwareDepotArgs, opts ...pulumi.ResourceOption) (*OfflineSoftwareDepot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OfflineSoftwareDepot
	err := ctx.RegisterResource("vsphere:index/offlineSoftwareDepot:OfflineSoftwareDepot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOfflineSoftwareDepot gets an existing OfflineSoftwareDepot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOfflineSoftwareDepot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OfflineSoftwareDepotState, opts ...pulumi.ResourceOption) (*OfflineSoftwareDepot, error) {
	var resource OfflineSoftwareDepot
	err := ctx.ReadResource("vsphere:index/offlineSoftwareDepot:OfflineSoftwareDepot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OfflineSoftwareDepot resources.
type offlineSoftwareDepotState struct {
	// The list of custom components in the depot.
	Components []OfflineSoftwareDepotComponent `pulumi:"components"`
	// The URL where the depot source is hosted.
	Location *string `pulumi:"location"`
}

type OfflineSoftwareDepotState struct {
	// The list of custom components in the depot.
	Components OfflineSoftwareDepotComponentArrayInput
	// The URL where the depot source is hosted.
	Location pulumi.StringPtrInput
}

func (OfflineSoftwareDepotState) ElementType() reflect.Type {
	return reflect.TypeOf((*offlineSoftwareDepotState)(nil)).Elem()
}

type offlineSoftwareDepotArgs struct {
	// The URL where the depot source is hosted.
	Location string `pulumi:"location"`
}

// The set of arguments for constructing a OfflineSoftwareDepot resource.
type OfflineSoftwareDepotArgs struct {
	// The URL where the depot source is hosted.
	Location pulumi.StringInput
}

func (OfflineSoftwareDepotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*offlineSoftwareDepotArgs)(nil)).Elem()
}

type OfflineSoftwareDepotInput interface {
	pulumi.Input

	ToOfflineSoftwareDepotOutput() OfflineSoftwareDepotOutput
	ToOfflineSoftwareDepotOutputWithContext(ctx context.Context) OfflineSoftwareDepotOutput
}

func (*OfflineSoftwareDepot) ElementType() reflect.Type {
	return reflect.TypeOf((**OfflineSoftwareDepot)(nil)).Elem()
}

func (i *OfflineSoftwareDepot) ToOfflineSoftwareDepotOutput() OfflineSoftwareDepotOutput {
	return i.ToOfflineSoftwareDepotOutputWithContext(context.Background())
}

func (i *OfflineSoftwareDepot) ToOfflineSoftwareDepotOutputWithContext(ctx context.Context) OfflineSoftwareDepotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OfflineSoftwareDepotOutput)
}

// OfflineSoftwareDepotArrayInput is an input type that accepts OfflineSoftwareDepotArray and OfflineSoftwareDepotArrayOutput values.
// You can construct a concrete instance of `OfflineSoftwareDepotArrayInput` via:
//
//	OfflineSoftwareDepotArray{ OfflineSoftwareDepotArgs{...} }
type OfflineSoftwareDepotArrayInput interface {
	pulumi.Input

	ToOfflineSoftwareDepotArrayOutput() OfflineSoftwareDepotArrayOutput
	ToOfflineSoftwareDepotArrayOutputWithContext(context.Context) OfflineSoftwareDepotArrayOutput
}

type OfflineSoftwareDepotArray []OfflineSoftwareDepotInput

func (OfflineSoftwareDepotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OfflineSoftwareDepot)(nil)).Elem()
}

func (i OfflineSoftwareDepotArray) ToOfflineSoftwareDepotArrayOutput() OfflineSoftwareDepotArrayOutput {
	return i.ToOfflineSoftwareDepotArrayOutputWithContext(context.Background())
}

func (i OfflineSoftwareDepotArray) ToOfflineSoftwareDepotArrayOutputWithContext(ctx context.Context) OfflineSoftwareDepotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OfflineSoftwareDepotArrayOutput)
}

// OfflineSoftwareDepotMapInput is an input type that accepts OfflineSoftwareDepotMap and OfflineSoftwareDepotMapOutput values.
// You can construct a concrete instance of `OfflineSoftwareDepotMapInput` via:
//
//	OfflineSoftwareDepotMap{ "key": OfflineSoftwareDepotArgs{...} }
type OfflineSoftwareDepotMapInput interface {
	pulumi.Input

	ToOfflineSoftwareDepotMapOutput() OfflineSoftwareDepotMapOutput
	ToOfflineSoftwareDepotMapOutputWithContext(context.Context) OfflineSoftwareDepotMapOutput
}

type OfflineSoftwareDepotMap map[string]OfflineSoftwareDepotInput

func (OfflineSoftwareDepotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OfflineSoftwareDepot)(nil)).Elem()
}

func (i OfflineSoftwareDepotMap) ToOfflineSoftwareDepotMapOutput() OfflineSoftwareDepotMapOutput {
	return i.ToOfflineSoftwareDepotMapOutputWithContext(context.Background())
}

func (i OfflineSoftwareDepotMap) ToOfflineSoftwareDepotMapOutputWithContext(ctx context.Context) OfflineSoftwareDepotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OfflineSoftwareDepotMapOutput)
}

type OfflineSoftwareDepotOutput struct{ *pulumi.OutputState }

func (OfflineSoftwareDepotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OfflineSoftwareDepot)(nil)).Elem()
}

func (o OfflineSoftwareDepotOutput) ToOfflineSoftwareDepotOutput() OfflineSoftwareDepotOutput {
	return o
}

func (o OfflineSoftwareDepotOutput) ToOfflineSoftwareDepotOutputWithContext(ctx context.Context) OfflineSoftwareDepotOutput {
	return o
}

// The list of custom components in the depot.
func (o OfflineSoftwareDepotOutput) Components() OfflineSoftwareDepotComponentArrayOutput {
	return o.ApplyT(func(v *OfflineSoftwareDepot) OfflineSoftwareDepotComponentArrayOutput { return v.Components }).(OfflineSoftwareDepotComponentArrayOutput)
}

// The URL where the depot source is hosted.
func (o OfflineSoftwareDepotOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *OfflineSoftwareDepot) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

type OfflineSoftwareDepotArrayOutput struct{ *pulumi.OutputState }

func (OfflineSoftwareDepotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OfflineSoftwareDepot)(nil)).Elem()
}

func (o OfflineSoftwareDepotArrayOutput) ToOfflineSoftwareDepotArrayOutput() OfflineSoftwareDepotArrayOutput {
	return o
}

func (o OfflineSoftwareDepotArrayOutput) ToOfflineSoftwareDepotArrayOutputWithContext(ctx context.Context) OfflineSoftwareDepotArrayOutput {
	return o
}

func (o OfflineSoftwareDepotArrayOutput) Index(i pulumi.IntInput) OfflineSoftwareDepotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OfflineSoftwareDepot {
		return vs[0].([]*OfflineSoftwareDepot)[vs[1].(int)]
	}).(OfflineSoftwareDepotOutput)
}

type OfflineSoftwareDepotMapOutput struct{ *pulumi.OutputState }

func (OfflineSoftwareDepotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OfflineSoftwareDepot)(nil)).Elem()
}

func (o OfflineSoftwareDepotMapOutput) ToOfflineSoftwareDepotMapOutput() OfflineSoftwareDepotMapOutput {
	return o
}

func (o OfflineSoftwareDepotMapOutput) ToOfflineSoftwareDepotMapOutputWithContext(ctx context.Context) OfflineSoftwareDepotMapOutput {
	return o
}

func (o OfflineSoftwareDepotMapOutput) MapIndex(k pulumi.StringInput) OfflineSoftwareDepotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OfflineSoftwareDepot {
		return vs[0].(map[string]*OfflineSoftwareDepot)[vs[1].(string)]
	}).(OfflineSoftwareDepotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OfflineSoftwareDepotInput)(nil)).Elem(), &OfflineSoftwareDepot{})
	pulumi.RegisterInputType(reflect.TypeOf((*OfflineSoftwareDepotArrayInput)(nil)).Elem(), OfflineSoftwareDepotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OfflineSoftwareDepotMapInput)(nil)).Elem(), OfflineSoftwareDepotMap{})
	pulumi.RegisterOutputType(OfflineSoftwareDepotOutput{})
	pulumi.RegisterOutputType(OfflineSoftwareDepotArrayOutput{})
	pulumi.RegisterOutputType(OfflineSoftwareDepotMapOutput{})
}
