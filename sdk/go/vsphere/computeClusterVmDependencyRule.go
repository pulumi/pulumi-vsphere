// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The `vsphere_compute_cluster_vm_dependency_rule` resource can be used to manage
// VM dependency rules in a cluster, either created by the
// [`vsphere_compute_cluster`][tf-vsphere-cluster-resource] resource or looked up
// by the [`vsphere_compute_cluster`][tf-vsphere-cluster-data-source] data source.
// 
// [tf-vsphere-cluster-resource]: /docs/providers/vsphere/r/compute_cluster.html
// [tf-vsphere-cluster-data-source]: /docs/providers/vsphere/d/compute_cluster.html
// 
// A virtual machine dependency rule applies to vSphere HA, and allows
// user-defined startup orders for virtual machines in the case of host failure.
// Virtual machines are supplied via groups, which can be managed via the
// [`vsphere_compute_cluster_vm_group`][tf-vsphere-cluster-vm-group-resource]
// resource.
// 
// [tf-vsphere-cluster-vm-group-resource]: /docs/providers/vsphere/r/compute_cluster_vm_group.html
// 
// ~> **NOTE:** This resource requires vCenter and is not available on direct ESXi
// connections.
type ComputeClusterVmDependencyRule struct {
	s *pulumi.ResourceState
}

// NewComputeClusterVmDependencyRule registers a new resource with the given unique name, arguments, and options.
func NewComputeClusterVmDependencyRule(ctx *pulumi.Context,
	name string, args *ComputeClusterVmDependencyRuleArgs, opts ...pulumi.ResourceOpt) (*ComputeClusterVmDependencyRule, error) {
	if args == nil || args.ComputeClusterId == nil {
		return nil, errors.New("missing required argument 'ComputeClusterId'")
	}
	if args == nil || args.DependencyVmGroupName == nil {
		return nil, errors.New("missing required argument 'DependencyVmGroupName'")
	}
	if args == nil || args.VmGroupName == nil {
		return nil, errors.New("missing required argument 'VmGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["computeClusterId"] = nil
		inputs["dependencyVmGroupName"] = nil
		inputs["enabled"] = nil
		inputs["mandatory"] = nil
		inputs["name"] = nil
		inputs["vmGroupName"] = nil
	} else {
		inputs["computeClusterId"] = args.ComputeClusterId
		inputs["dependencyVmGroupName"] = args.DependencyVmGroupName
		inputs["enabled"] = args.Enabled
		inputs["mandatory"] = args.Mandatory
		inputs["name"] = args.Name
		inputs["vmGroupName"] = args.VmGroupName
	}
	s, err := ctx.RegisterResource("vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ComputeClusterVmDependencyRule{s: s}, nil
}

// GetComputeClusterVmDependencyRule gets an existing ComputeClusterVmDependencyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeClusterVmDependencyRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ComputeClusterVmDependencyRuleState, opts ...pulumi.ResourceOpt) (*ComputeClusterVmDependencyRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["computeClusterId"] = state.ComputeClusterId
		inputs["dependencyVmGroupName"] = state.DependencyVmGroupName
		inputs["enabled"] = state.Enabled
		inputs["mandatory"] = state.Mandatory
		inputs["name"] = state.Name
		inputs["vmGroupName"] = state.VmGroupName
	}
	s, err := ctx.ReadResource("vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ComputeClusterVmDependencyRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ComputeClusterVmDependencyRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ComputeClusterVmDependencyRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The [managed object reference
// ID][docs-about-morefs] of the cluster to put the group in.  Forces a new
// resource if changed.
func (r *ComputeClusterVmDependencyRule) ComputeClusterId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["computeClusterId"])
}

// The name of the VM group that this
// rule depends on. The VMs defined in the group specified by
// `vm_group_name` will not be started until the VMs in this
// group are started.
func (r *ComputeClusterVmDependencyRule) DependencyVmGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dependencyVmGroupName"])
}

// Enable this rule in the cluster. Default: `true`.
func (r *ComputeClusterVmDependencyRule) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// When this value is `true`, prevents any virtual
// machine operations that may violate this rule. Default: `false`.
func (r *ComputeClusterVmDependencyRule) Mandatory() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["mandatory"])
}

// The name of the rule. This must be unique in the
// cluster.
func (r *ComputeClusterVmDependencyRule) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The name of the VM group that is the subject of
// this rule. The VMs defined in this group will not be started until the VMs in
// the group specified by
// `dependency_vm_group_name` are started.
func (r *ComputeClusterVmDependencyRule) VmGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vmGroupName"])
}

// Input properties used for looking up and filtering ComputeClusterVmDependencyRule resources.
type ComputeClusterVmDependencyRuleState struct {
	// The [managed object reference
	// ID][docs-about-morefs] of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId interface{}
	// The name of the VM group that this
	// rule depends on. The VMs defined in the group specified by
	// `vm_group_name` will not be started until the VMs in this
	// group are started.
	DependencyVmGroupName interface{}
	// Enable this rule in the cluster. Default: `true`.
	Enabled interface{}
	// When this value is `true`, prevents any virtual
	// machine operations that may violate this rule. Default: `false`.
	Mandatory interface{}
	// The name of the rule. This must be unique in the
	// cluster.
	Name interface{}
	// The name of the VM group that is the subject of
	// this rule. The VMs defined in this group will not be started until the VMs in
	// the group specified by
	// `dependency_vm_group_name` are started.
	VmGroupName interface{}
}

// The set of arguments for constructing a ComputeClusterVmDependencyRule resource.
type ComputeClusterVmDependencyRuleArgs struct {
	// The [managed object reference
	// ID][docs-about-morefs] of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId interface{}
	// The name of the VM group that this
	// rule depends on. The VMs defined in the group specified by
	// `vm_group_name` will not be started until the VMs in this
	// group are started.
	DependencyVmGroupName interface{}
	// Enable this rule in the cluster. Default: `true`.
	Enabled interface{}
	// When this value is `true`, prevents any virtual
	// machine operations that may violate this rule. Default: `false`.
	Mandatory interface{}
	// The name of the rule. This must be unique in the
	// cluster.
	Name interface{}
	// The name of the VM group that is the subject of
	// this rule. The VMs defined in this group will not be started until the VMs in
	// the group specified by
	// `dependency_vm_group_name` are started.
	VmGroupName interface{}
}
