// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ComputeClusterVmDependencyRule struct {
	pulumi.CustomResourceState

	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId pulumi.StringOutput `pulumi:"computeClusterId"`
	// The name of the VM group that this
	// rule depends on. The VMs defined in the group specified by
	// `vmGroupName` will not be started until the VMs in this
	// group are started.
	DependencyVmGroupName pulumi.StringOutput `pulumi:"dependencyVmGroupName"`
	// Enable this rule in the cluster. Default: `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// When this value is `true`, prevents any virtual
	// machine operations that may violate this rule. Default: `false`.
	Mandatory pulumi.BoolPtrOutput `pulumi:"mandatory"`
	// The name of the rule. This must be unique in the
	// cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the VM group that is the subject of
	// this rule. The VMs defined in this group will not be started until the VMs in
	// the group specified by
	// `dependencyVmGroupName` are started.
	VmGroupName pulumi.StringOutput `pulumi:"vmGroupName"`
}

// NewComputeClusterVmDependencyRule registers a new resource with the given unique name, arguments, and options.
func NewComputeClusterVmDependencyRule(ctx *pulumi.Context,
	name string, args *ComputeClusterVmDependencyRuleArgs, opts ...pulumi.ResourceOption) (*ComputeClusterVmDependencyRule, error) {
	if args == nil || args.ComputeClusterId == nil {
		return nil, errors.New("missing required argument 'ComputeClusterId'")
	}
	if args == nil || args.DependencyVmGroupName == nil {
		return nil, errors.New("missing required argument 'DependencyVmGroupName'")
	}
	if args == nil || args.VmGroupName == nil {
		return nil, errors.New("missing required argument 'VmGroupName'")
	}
	if args == nil {
		args = &ComputeClusterVmDependencyRuleArgs{}
	}
	var resource ComputeClusterVmDependencyRule
	err := ctx.RegisterResource("vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeClusterVmDependencyRule gets an existing ComputeClusterVmDependencyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeClusterVmDependencyRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeClusterVmDependencyRuleState, opts ...pulumi.ResourceOption) (*ComputeClusterVmDependencyRule, error) {
	var resource ComputeClusterVmDependencyRule
	err := ctx.ReadResource("vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeClusterVmDependencyRule resources.
type computeClusterVmDependencyRuleState struct {
	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId *string `pulumi:"computeClusterId"`
	// The name of the VM group that this
	// rule depends on. The VMs defined in the group specified by
	// `vmGroupName` will not be started until the VMs in this
	// group are started.
	DependencyVmGroupName *string `pulumi:"dependencyVmGroupName"`
	// Enable this rule in the cluster. Default: `true`.
	Enabled *bool `pulumi:"enabled"`
	// When this value is `true`, prevents any virtual
	// machine operations that may violate this rule. Default: `false`.
	Mandatory *bool `pulumi:"mandatory"`
	// The name of the rule. This must be unique in the
	// cluster.
	Name *string `pulumi:"name"`
	// The name of the VM group that is the subject of
	// this rule. The VMs defined in this group will not be started until the VMs in
	// the group specified by
	// `dependencyVmGroupName` are started.
	VmGroupName *string `pulumi:"vmGroupName"`
}

type ComputeClusterVmDependencyRuleState struct {
	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId pulumi.StringPtrInput
	// The name of the VM group that this
	// rule depends on. The VMs defined in the group specified by
	// `vmGroupName` will not be started until the VMs in this
	// group are started.
	DependencyVmGroupName pulumi.StringPtrInput
	// Enable this rule in the cluster. Default: `true`.
	Enabled pulumi.BoolPtrInput
	// When this value is `true`, prevents any virtual
	// machine operations that may violate this rule. Default: `false`.
	Mandatory pulumi.BoolPtrInput
	// The name of the rule. This must be unique in the
	// cluster.
	Name pulumi.StringPtrInput
	// The name of the VM group that is the subject of
	// this rule. The VMs defined in this group will not be started until the VMs in
	// the group specified by
	// `dependencyVmGroupName` are started.
	VmGroupName pulumi.StringPtrInput
}

func (ComputeClusterVmDependencyRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeClusterVmDependencyRuleState)(nil)).Elem()
}

type computeClusterVmDependencyRuleArgs struct {
	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId string `pulumi:"computeClusterId"`
	// The name of the VM group that this
	// rule depends on. The VMs defined in the group specified by
	// `vmGroupName` will not be started until the VMs in this
	// group are started.
	DependencyVmGroupName string `pulumi:"dependencyVmGroupName"`
	// Enable this rule in the cluster. Default: `true`.
	Enabled *bool `pulumi:"enabled"`
	// When this value is `true`, prevents any virtual
	// machine operations that may violate this rule. Default: `false`.
	Mandatory *bool `pulumi:"mandatory"`
	// The name of the rule. This must be unique in the
	// cluster.
	Name *string `pulumi:"name"`
	// The name of the VM group that is the subject of
	// this rule. The VMs defined in this group will not be started until the VMs in
	// the group specified by
	// `dependencyVmGroupName` are started.
	VmGroupName string `pulumi:"vmGroupName"`
}

// The set of arguments for constructing a ComputeClusterVmDependencyRule resource.
type ComputeClusterVmDependencyRuleArgs struct {
	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId pulumi.StringInput
	// The name of the VM group that this
	// rule depends on. The VMs defined in the group specified by
	// `vmGroupName` will not be started until the VMs in this
	// group are started.
	DependencyVmGroupName pulumi.StringInput
	// Enable this rule in the cluster. Default: `true`.
	Enabled pulumi.BoolPtrInput
	// When this value is `true`, prevents any virtual
	// machine operations that may violate this rule. Default: `false`.
	Mandatory pulumi.BoolPtrInput
	// The name of the rule. This must be unique in the
	// cluster.
	Name pulumi.StringPtrInput
	// The name of the VM group that is the subject of
	// this rule. The VMs defined in this group will not be started until the VMs in
	// the group specified by
	// `dependencyVmGroupName` are started.
	VmGroupName pulumi.StringInput
}

func (ComputeClusterVmDependencyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeClusterVmDependencyRuleArgs)(nil)).Elem()
}
