// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeClusterVmDependencyRule struct {
	pulumi.CustomResourceState

	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId pulumi.StringOutput `pulumi:"computeClusterId"`
	// The name of the VM group that this
	// rule depends on. The VMs defined in the group specified by
	// `vmGroupName` will not be started until the VMs in this
	// group are started.
	DependencyVmGroupName pulumi.StringOutput `pulumi:"dependencyVmGroupName"`
	// Enable this rule in the cluster. Default: `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// When this value is `true`, prevents any virtual
	// machine operations that may violate this rule. Default: `false`.
	//
	// > **NOTE:** The namespace for rule names on this resource (defined by the
	// `name` argument) is shared with all rules in the cluster - consider
	// this when naming your rules.
	Mandatory pulumi.BoolPtrOutput `pulumi:"mandatory"`
	// The name of the rule. This must be unique in the
	// cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the VM group that is the subject of
	// this rule. The VMs defined in this group will not be started until the VMs in
	// the group specified by
	// `dependencyVmGroupName` are started.
	VmGroupName pulumi.StringOutput `pulumi:"vmGroupName"`
}

// NewComputeClusterVmDependencyRule registers a new resource with the given unique name, arguments, and options.
func NewComputeClusterVmDependencyRule(ctx *pulumi.Context,
	name string, args *ComputeClusterVmDependencyRuleArgs, opts ...pulumi.ResourceOption) (*ComputeClusterVmDependencyRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComputeClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ComputeClusterId'")
	}
	if args.DependencyVmGroupName == nil {
		return nil, errors.New("invalid value for required argument 'DependencyVmGroupName'")
	}
	if args.VmGroupName == nil {
		return nil, errors.New("invalid value for required argument 'VmGroupName'")
	}
	var resource ComputeClusterVmDependencyRule
	err := ctx.RegisterResource("vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeClusterVmDependencyRule gets an existing ComputeClusterVmDependencyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeClusterVmDependencyRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeClusterVmDependencyRuleState, opts ...pulumi.ResourceOption) (*ComputeClusterVmDependencyRule, error) {
	var resource ComputeClusterVmDependencyRule
	err := ctx.ReadResource("vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeClusterVmDependencyRule resources.
type computeClusterVmDependencyRuleState struct {
	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId *string `pulumi:"computeClusterId"`
	// The name of the VM group that this
	// rule depends on. The VMs defined in the group specified by
	// `vmGroupName` will not be started until the VMs in this
	// group are started.
	DependencyVmGroupName *string `pulumi:"dependencyVmGroupName"`
	// Enable this rule in the cluster. Default: `true`.
	Enabled *bool `pulumi:"enabled"`
	// When this value is `true`, prevents any virtual
	// machine operations that may violate this rule. Default: `false`.
	//
	// > **NOTE:** The namespace for rule names on this resource (defined by the
	// `name` argument) is shared with all rules in the cluster - consider
	// this when naming your rules.
	Mandatory *bool `pulumi:"mandatory"`
	// The name of the rule. This must be unique in the
	// cluster.
	Name *string `pulumi:"name"`
	// The name of the VM group that is the subject of
	// this rule. The VMs defined in this group will not be started until the VMs in
	// the group specified by
	// `dependencyVmGroupName` are started.
	VmGroupName *string `pulumi:"vmGroupName"`
}

type ComputeClusterVmDependencyRuleState struct {
	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId pulumi.StringPtrInput
	// The name of the VM group that this
	// rule depends on. The VMs defined in the group specified by
	// `vmGroupName` will not be started until the VMs in this
	// group are started.
	DependencyVmGroupName pulumi.StringPtrInput
	// Enable this rule in the cluster. Default: `true`.
	Enabled pulumi.BoolPtrInput
	// When this value is `true`, prevents any virtual
	// machine operations that may violate this rule. Default: `false`.
	//
	// > **NOTE:** The namespace for rule names on this resource (defined by the
	// `name` argument) is shared with all rules in the cluster - consider
	// this when naming your rules.
	Mandatory pulumi.BoolPtrInput
	// The name of the rule. This must be unique in the
	// cluster.
	Name pulumi.StringPtrInput
	// The name of the VM group that is the subject of
	// this rule. The VMs defined in this group will not be started until the VMs in
	// the group specified by
	// `dependencyVmGroupName` are started.
	VmGroupName pulumi.StringPtrInput
}

func (ComputeClusterVmDependencyRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeClusterVmDependencyRuleState)(nil)).Elem()
}

type computeClusterVmDependencyRuleArgs struct {
	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId string `pulumi:"computeClusterId"`
	// The name of the VM group that this
	// rule depends on. The VMs defined in the group specified by
	// `vmGroupName` will not be started until the VMs in this
	// group are started.
	DependencyVmGroupName string `pulumi:"dependencyVmGroupName"`
	// Enable this rule in the cluster. Default: `true`.
	Enabled *bool `pulumi:"enabled"`
	// When this value is `true`, prevents any virtual
	// machine operations that may violate this rule. Default: `false`.
	//
	// > **NOTE:** The namespace for rule names on this resource (defined by the
	// `name` argument) is shared with all rules in the cluster - consider
	// this when naming your rules.
	Mandatory *bool `pulumi:"mandatory"`
	// The name of the rule. This must be unique in the
	// cluster.
	Name *string `pulumi:"name"`
	// The name of the VM group that is the subject of
	// this rule. The VMs defined in this group will not be started until the VMs in
	// the group specified by
	// `dependencyVmGroupName` are started.
	VmGroupName string `pulumi:"vmGroupName"`
}

// The set of arguments for constructing a ComputeClusterVmDependencyRule resource.
type ComputeClusterVmDependencyRuleArgs struct {
	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId pulumi.StringInput
	// The name of the VM group that this
	// rule depends on. The VMs defined in the group specified by
	// `vmGroupName` will not be started until the VMs in this
	// group are started.
	DependencyVmGroupName pulumi.StringInput
	// Enable this rule in the cluster. Default: `true`.
	Enabled pulumi.BoolPtrInput
	// When this value is `true`, prevents any virtual
	// machine operations that may violate this rule. Default: `false`.
	//
	// > **NOTE:** The namespace for rule names on this resource (defined by the
	// `name` argument) is shared with all rules in the cluster - consider
	// this when naming your rules.
	Mandatory pulumi.BoolPtrInput
	// The name of the rule. This must be unique in the
	// cluster.
	Name pulumi.StringPtrInput
	// The name of the VM group that is the subject of
	// this rule. The VMs defined in this group will not be started until the VMs in
	// the group specified by
	// `dependencyVmGroupName` are started.
	VmGroupName pulumi.StringInput
}

func (ComputeClusterVmDependencyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeClusterVmDependencyRuleArgs)(nil)).Elem()
}

type ComputeClusterVmDependencyRuleInput interface {
	pulumi.Input

	ToComputeClusterVmDependencyRuleOutput() ComputeClusterVmDependencyRuleOutput
	ToComputeClusterVmDependencyRuleOutputWithContext(ctx context.Context) ComputeClusterVmDependencyRuleOutput
}

func (*ComputeClusterVmDependencyRule) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeClusterVmDependencyRule)(nil)).Elem()
}

func (i *ComputeClusterVmDependencyRule) ToComputeClusterVmDependencyRuleOutput() ComputeClusterVmDependencyRuleOutput {
	return i.ToComputeClusterVmDependencyRuleOutputWithContext(context.Background())
}

func (i *ComputeClusterVmDependencyRule) ToComputeClusterVmDependencyRuleOutputWithContext(ctx context.Context) ComputeClusterVmDependencyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterVmDependencyRuleOutput)
}

// ComputeClusterVmDependencyRuleArrayInput is an input type that accepts ComputeClusterVmDependencyRuleArray and ComputeClusterVmDependencyRuleArrayOutput values.
// You can construct a concrete instance of `ComputeClusterVmDependencyRuleArrayInput` via:
//
//	ComputeClusterVmDependencyRuleArray{ ComputeClusterVmDependencyRuleArgs{...} }
type ComputeClusterVmDependencyRuleArrayInput interface {
	pulumi.Input

	ToComputeClusterVmDependencyRuleArrayOutput() ComputeClusterVmDependencyRuleArrayOutput
	ToComputeClusterVmDependencyRuleArrayOutputWithContext(context.Context) ComputeClusterVmDependencyRuleArrayOutput
}

type ComputeClusterVmDependencyRuleArray []ComputeClusterVmDependencyRuleInput

func (ComputeClusterVmDependencyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeClusterVmDependencyRule)(nil)).Elem()
}

func (i ComputeClusterVmDependencyRuleArray) ToComputeClusterVmDependencyRuleArrayOutput() ComputeClusterVmDependencyRuleArrayOutput {
	return i.ToComputeClusterVmDependencyRuleArrayOutputWithContext(context.Background())
}

func (i ComputeClusterVmDependencyRuleArray) ToComputeClusterVmDependencyRuleArrayOutputWithContext(ctx context.Context) ComputeClusterVmDependencyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterVmDependencyRuleArrayOutput)
}

// ComputeClusterVmDependencyRuleMapInput is an input type that accepts ComputeClusterVmDependencyRuleMap and ComputeClusterVmDependencyRuleMapOutput values.
// You can construct a concrete instance of `ComputeClusterVmDependencyRuleMapInput` via:
//
//	ComputeClusterVmDependencyRuleMap{ "key": ComputeClusterVmDependencyRuleArgs{...} }
type ComputeClusterVmDependencyRuleMapInput interface {
	pulumi.Input

	ToComputeClusterVmDependencyRuleMapOutput() ComputeClusterVmDependencyRuleMapOutput
	ToComputeClusterVmDependencyRuleMapOutputWithContext(context.Context) ComputeClusterVmDependencyRuleMapOutput
}

type ComputeClusterVmDependencyRuleMap map[string]ComputeClusterVmDependencyRuleInput

func (ComputeClusterVmDependencyRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeClusterVmDependencyRule)(nil)).Elem()
}

func (i ComputeClusterVmDependencyRuleMap) ToComputeClusterVmDependencyRuleMapOutput() ComputeClusterVmDependencyRuleMapOutput {
	return i.ToComputeClusterVmDependencyRuleMapOutputWithContext(context.Background())
}

func (i ComputeClusterVmDependencyRuleMap) ToComputeClusterVmDependencyRuleMapOutputWithContext(ctx context.Context) ComputeClusterVmDependencyRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterVmDependencyRuleMapOutput)
}

type ComputeClusterVmDependencyRuleOutput struct{ *pulumi.OutputState }

func (ComputeClusterVmDependencyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeClusterVmDependencyRule)(nil)).Elem()
}

func (o ComputeClusterVmDependencyRuleOutput) ToComputeClusterVmDependencyRuleOutput() ComputeClusterVmDependencyRuleOutput {
	return o
}

func (o ComputeClusterVmDependencyRuleOutput) ToComputeClusterVmDependencyRuleOutputWithContext(ctx context.Context) ComputeClusterVmDependencyRuleOutput {
	return o
}

// The managed object reference
// ID of the cluster to put the group in.  Forces a new
// resource if changed.
func (o ComputeClusterVmDependencyRuleOutput) ComputeClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeClusterVmDependencyRule) pulumi.StringOutput { return v.ComputeClusterId }).(pulumi.StringOutput)
}

// The name of the VM group that this
// rule depends on. The VMs defined in the group specified by
// `vmGroupName` will not be started until the VMs in this
// group are started.
func (o ComputeClusterVmDependencyRuleOutput) DependencyVmGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeClusterVmDependencyRule) pulumi.StringOutput { return v.DependencyVmGroupName }).(pulumi.StringOutput)
}

// Enable this rule in the cluster. Default: `true`.
func (o ComputeClusterVmDependencyRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeClusterVmDependencyRule) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// When this value is `true`, prevents any virtual
// machine operations that may violate this rule. Default: `false`.
//
// > **NOTE:** The namespace for rule names on this resource (defined by the
// `name` argument) is shared with all rules in the cluster - consider
// this when naming your rules.
func (o ComputeClusterVmDependencyRuleOutput) Mandatory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeClusterVmDependencyRule) pulumi.BoolPtrOutput { return v.Mandatory }).(pulumi.BoolPtrOutput)
}

// The name of the rule. This must be unique in the
// cluster.
func (o ComputeClusterVmDependencyRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeClusterVmDependencyRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the VM group that is the subject of
// this rule. The VMs defined in this group will not be started until the VMs in
// the group specified by
// `dependencyVmGroupName` are started.
func (o ComputeClusterVmDependencyRuleOutput) VmGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeClusterVmDependencyRule) pulumi.StringOutput { return v.VmGroupName }).(pulumi.StringOutput)
}

type ComputeClusterVmDependencyRuleArrayOutput struct{ *pulumi.OutputState }

func (ComputeClusterVmDependencyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeClusterVmDependencyRule)(nil)).Elem()
}

func (o ComputeClusterVmDependencyRuleArrayOutput) ToComputeClusterVmDependencyRuleArrayOutput() ComputeClusterVmDependencyRuleArrayOutput {
	return o
}

func (o ComputeClusterVmDependencyRuleArrayOutput) ToComputeClusterVmDependencyRuleArrayOutputWithContext(ctx context.Context) ComputeClusterVmDependencyRuleArrayOutput {
	return o
}

func (o ComputeClusterVmDependencyRuleArrayOutput) Index(i pulumi.IntInput) ComputeClusterVmDependencyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComputeClusterVmDependencyRule {
		return vs[0].([]*ComputeClusterVmDependencyRule)[vs[1].(int)]
	}).(ComputeClusterVmDependencyRuleOutput)
}

type ComputeClusterVmDependencyRuleMapOutput struct{ *pulumi.OutputState }

func (ComputeClusterVmDependencyRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeClusterVmDependencyRule)(nil)).Elem()
}

func (o ComputeClusterVmDependencyRuleMapOutput) ToComputeClusterVmDependencyRuleMapOutput() ComputeClusterVmDependencyRuleMapOutput {
	return o
}

func (o ComputeClusterVmDependencyRuleMapOutput) ToComputeClusterVmDependencyRuleMapOutputWithContext(ctx context.Context) ComputeClusterVmDependencyRuleMapOutput {
	return o
}

func (o ComputeClusterVmDependencyRuleMapOutput) MapIndex(k pulumi.StringInput) ComputeClusterVmDependencyRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComputeClusterVmDependencyRule {
		return vs[0].(map[string]*ComputeClusterVmDependencyRule)[vs[1].(string)]
	}).(ComputeClusterVmDependencyRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterVmDependencyRuleInput)(nil)).Elem(), &ComputeClusterVmDependencyRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterVmDependencyRuleArrayInput)(nil)).Elem(), ComputeClusterVmDependencyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterVmDependencyRuleMapInput)(nil)).Elem(), ComputeClusterVmDependencyRuleMap{})
	pulumi.RegisterOutputType(ComputeClusterVmDependencyRuleOutput{})
	pulumi.RegisterOutputType(ComputeClusterVmDependencyRuleArrayOutput{})
	pulumi.RegisterOutputType(ComputeClusterVmDependencyRuleMapOutput{})
}
