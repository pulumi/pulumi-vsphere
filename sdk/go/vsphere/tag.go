// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The `vsphere_tag` resource can be used to create and manage tags, which allow
// you to attach metadata to objects in the vSphere inventory to make these
// objects more sortable and searchable.
// 
// For more information about tags, click [here][ext-tags-general].
// 
// [ext-tags-general]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.vcenterhost.doc/GUID-E8E854DD-AA97-4E0C-8419-CE84F93C4058.html
// 
// ~> **NOTE:** Tagging support is unsupported on direct ESXi connections and
// requires vCenter 6.0 or higher.
type Tag struct {
	s *pulumi.ResourceState
}

// NewTag registers a new resource with the given unique name, arguments, and options.
func NewTag(ctx *pulumi.Context,
	name string, args *TagArgs, opts ...pulumi.ResourceOpt) (*Tag, error) {
	if args == nil || args.CategoryId == nil {
		return nil, errors.New("missing required argument 'CategoryId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["categoryId"] = nil
		inputs["description"] = nil
		inputs["name"] = nil
	} else {
		inputs["categoryId"] = args.CategoryId
		inputs["description"] = args.Description
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("vsphere:index/tag:Tag", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Tag{s: s}, nil
}

// GetTag gets an existing Tag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTag(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TagState, opts ...pulumi.ResourceOpt) (*Tag, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["categoryId"] = state.CategoryId
		inputs["description"] = state.Description
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("vsphere:index/tag:Tag", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Tag{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Tag) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Tag) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The unique identifier of the parent category in
// which this tag will be created. Forces a new resource if changed.
func (r *Tag) CategoryId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["categoryId"])
}

// A description for the tag.
func (r *Tag) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The display name of the tag. The name must be unique
// within its category.
func (r *Tag) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering Tag resources.
type TagState struct {
	// The unique identifier of the parent category in
	// which this tag will be created. Forces a new resource if changed.
	CategoryId interface{}
	// A description for the tag.
	Description interface{}
	// The display name of the tag. The name must be unique
	// within its category.
	Name interface{}
}

// The set of arguments for constructing a Tag resource.
type TagArgs struct {
	// The unique identifier of the parent category in
	// which this tag will be created. Forces a new resource if changed.
	CategoryId interface{}
	// A description for the tag.
	Description interface{}
	// The display name of the tag. The name must be unique
	// within its category.
	Name interface{}
}
