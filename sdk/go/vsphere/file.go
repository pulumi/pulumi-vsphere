// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vsphere/blob/master/website/docs/r/file.html.markdown.
type File struct {
	s *pulumi.ResourceState
}

// NewFile registers a new resource with the given unique name, arguments, and options.
func NewFile(ctx *pulumi.Context,
	name string, args *FileArgs, opts ...pulumi.ResourceOpt) (*File, error) {
	if args == nil || args.Datastore == nil {
		return nil, errors.New("missing required argument 'Datastore'")
	}
	if args == nil || args.DestinationFile == nil {
		return nil, errors.New("missing required argument 'DestinationFile'")
	}
	if args == nil || args.SourceFile == nil {
		return nil, errors.New("missing required argument 'SourceFile'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["createDirectories"] = nil
		inputs["datacenter"] = nil
		inputs["datastore"] = nil
		inputs["destinationFile"] = nil
		inputs["sourceDatacenter"] = nil
		inputs["sourceDatastore"] = nil
		inputs["sourceFile"] = nil
	} else {
		inputs["createDirectories"] = args.CreateDirectories
		inputs["datacenter"] = args.Datacenter
		inputs["datastore"] = args.Datastore
		inputs["destinationFile"] = args.DestinationFile
		inputs["sourceDatacenter"] = args.SourceDatacenter
		inputs["sourceDatastore"] = args.SourceDatastore
		inputs["sourceFile"] = args.SourceFile
	}
	s, err := ctx.RegisterResource("vsphere:index/file:File", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &File{s: s}, nil
}

// GetFile gets an existing File resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFile(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FileState, opts ...pulumi.ResourceOpt) (*File, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["createDirectories"] = state.CreateDirectories
		inputs["datacenter"] = state.Datacenter
		inputs["datastore"] = state.Datastore
		inputs["destinationFile"] = state.DestinationFile
		inputs["sourceDatacenter"] = state.SourceDatacenter
		inputs["sourceDatastore"] = state.SourceDatastore
		inputs["sourceFile"] = state.SourceFile
	}
	s, err := ctx.ReadResource("vsphere:index/file:File", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &File{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *File) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *File) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Create directories in `destinationFile`
// path parameter if any missing for copy operation.
func (r *File) CreateDirectories() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["createDirectories"])
}

// The name of a datacenter in which the file will be
// uploaded to.
func (r *File) Datacenter() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["datacenter"])
}

// The name of the datastore in which to upload the
// file to.
func (r *File) Datastore() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["datastore"])
}

// The path to where the file should be uploaded
// or copied to on vSphere.
func (r *File) DestinationFile() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["destinationFile"])
}

// The name of a datacenter in which the file
// will be copied from. Forces a new resource if changed.
func (r *File) SourceDatacenter() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceDatacenter"])
}

// The name of the datastore in which file will
// be copied from. Forces a new resource if changed.
func (r *File) SourceDatastore() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceDatastore"])
}

func (r *File) SourceFile() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceFile"])
}

// Input properties used for looking up and filtering File resources.
type FileState struct {
	// Create directories in `destinationFile`
	// path parameter if any missing for copy operation.
	CreateDirectories interface{}
	// The name of a datacenter in which the file will be
	// uploaded to.
	Datacenter interface{}
	// The name of the datastore in which to upload the
	// file to.
	Datastore interface{}
	// The path to where the file should be uploaded
	// or copied to on vSphere.
	DestinationFile interface{}
	// The name of a datacenter in which the file
	// will be copied from. Forces a new resource if changed.
	SourceDatacenter interface{}
	// The name of the datastore in which file will
	// be copied from. Forces a new resource if changed.
	SourceDatastore interface{}
	SourceFile interface{}
}

// The set of arguments for constructing a File resource.
type FileArgs struct {
	// Create directories in `destinationFile`
	// path parameter if any missing for copy operation.
	CreateDirectories interface{}
	// The name of a datacenter in which the file will be
	// uploaded to.
	Datacenter interface{}
	// The name of the datastore in which to upload the
	// file to.
	Datastore interface{}
	// The path to where the file should be uploaded
	// or copied to on vSphere.
	DestinationFile interface{}
	// The name of a datacenter in which the file
	// will be copied from. Forces a new resource if changed.
	SourceDatacenter interface{}
	// The name of the datastore in which file will
	// be copied from. Forces a new resource if changed.
	SourceDatastore interface{}
	SourceFile interface{}
}
