// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the vsphere package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// govmomi debug path for debug
	ClientDebugPath pulumi.StringPtrOutput `pulumi:"clientDebugPath"`
	// govmomi debug path for a single run
	ClientDebugPathRun pulumi.StringPtrOutput `pulumi:"clientDebugPathRun"`
	// The user password for vSphere API operations.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The directory to save vSphere REST API sessions to
	RestSessionPath pulumi.StringPtrOutput `pulumi:"restSessionPath"`
	// The user name for vSphere API operations.
	User pulumi.StringPtrOutput `pulumi:"user"`
	// Deprecated: This field has been renamed to vsphere_server.
	VcenterServer pulumi.StringPtrOutput `pulumi:"vcenterServer"`
	// The directory to save vSphere SOAP API sessions to
	VimSessionPath pulumi.StringPtrOutput `pulumi:"vimSessionPath"`
	// The vSphere Server name for vSphere API operations.
	VsphereServer pulumi.StringPtrOutput `pulumi:"vsphereServer"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.AllowUnverifiedSsl == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "VSPHERE_ALLOW_UNVERIFIED_SSL"); d != nil {
			args.AllowUnverifiedSsl = pulumi.BoolPtr(d.(bool))
		}
	}
	if args.ClientDebug == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "VSPHERE_CLIENT_DEBUG"); d != nil {
			args.ClientDebug = pulumi.BoolPtr(d.(bool))
		}
	}
	if args.ClientDebugPath == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "VSPHERE_CLIENT_DEBUG_PATH"); d != nil {
			args.ClientDebugPath = pulumi.StringPtr(d.(string))
		}
	}
	if args.ClientDebugPathRun == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "VSPHERE_CLIENT_DEBUG_PATH_RUN"); d != nil {
			args.ClientDebugPathRun = pulumi.StringPtr(d.(string))
		}
	}
	if args.PersistSession == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "VSPHERE_PERSIST_SESSION"); d != nil {
			args.PersistSession = pulumi.BoolPtr(d.(bool))
		}
	}
	if args.RestSessionPath == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "VSPHERE_REST_SESSION_PATH"); d != nil {
			args.RestSessionPath = pulumi.StringPtr(d.(string))
		}
	}
	if args.VimKeepAlive == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvInt, "VSPHERE_VIM_KEEP_ALIVE"); d != nil {
			args.VimKeepAlive = pulumi.IntPtr(d.(int))
		}
	}
	if args.VimSessionPath == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "VSPHERE_VIM_SESSION_PATH"); d != nil {
			args.VimSessionPath = pulumi.StringPtr(d.(string))
		}
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:vsphere", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// If set, VMware vSphere client will permit unverifiable SSL certificates.
	AllowUnverifiedSsl *bool `pulumi:"allowUnverifiedSsl"`
	// API timeout in minutes (Default: 5)
	ApiTimeout *int `pulumi:"apiTimeout"`
	// govmomi debug
	ClientDebug *bool `pulumi:"clientDebug"`
	// govmomi debug path for debug
	ClientDebugPath *string `pulumi:"clientDebugPath"`
	// govmomi debug path for a single run
	ClientDebugPathRun *string `pulumi:"clientDebugPathRun"`
	// The user password for vSphere API operations.
	Password *string `pulumi:"password"`
	// Persist vSphere client sessions to disk
	PersistSession *bool `pulumi:"persistSession"`
	// The directory to save vSphere REST API sessions to
	RestSessionPath *string `pulumi:"restSessionPath"`
	// The user name for vSphere API operations.
	User *string `pulumi:"user"`
	// Deprecated: This field has been renamed to vsphere_server.
	VcenterServer *string `pulumi:"vcenterServer"`
	// Keep alive interval for the VIM session in minutes
	VimKeepAlive *int `pulumi:"vimKeepAlive"`
	// The directory to save vSphere SOAP API sessions to
	VimSessionPath *string `pulumi:"vimSessionPath"`
	// The vSphere Server name for vSphere API operations.
	VsphereServer *string `pulumi:"vsphereServer"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// If set, VMware vSphere client will permit unverifiable SSL certificates.
	AllowUnverifiedSsl pulumi.BoolPtrInput
	// API timeout in minutes (Default: 5)
	ApiTimeout pulumi.IntPtrInput
	// govmomi debug
	ClientDebug pulumi.BoolPtrInput
	// govmomi debug path for debug
	ClientDebugPath pulumi.StringPtrInput
	// govmomi debug path for a single run
	ClientDebugPathRun pulumi.StringPtrInput
	// The user password for vSphere API operations.
	Password pulumi.StringPtrInput
	// Persist vSphere client sessions to disk
	PersistSession pulumi.BoolPtrInput
	// The directory to save vSphere REST API sessions to
	RestSessionPath pulumi.StringPtrInput
	// The user name for vSphere API operations.
	User pulumi.StringPtrInput
	// Deprecated: This field has been renamed to vsphere_server.
	VcenterServer pulumi.StringPtrInput
	// Keep alive interval for the VIM session in minutes
	VimKeepAlive pulumi.IntPtrInput
	// The directory to save vSphere SOAP API sessions to
	VimSessionPath pulumi.StringPtrInput
	// The vSphere Server name for vSphere API operations.
	VsphereServer pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
func (r *Provider) TerraformConfig(ctx *pulumi.Context) (ProviderTerraformConfigResultOutput, error) {
	out, err := ctx.Call("pulumi:providers:vsphere/terraformConfig", nil, ProviderTerraformConfigResultOutput{}, r)
	if err != nil {
		return ProviderTerraformConfigResultOutput{}, err
	}
	return out.(ProviderTerraformConfigResultOutput), nil
}

type ProviderTerraformConfigResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

type ProviderTerraformConfigResultOutput struct{ *pulumi.OutputState }

func (ProviderTerraformConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTerraformConfigResult)(nil)).Elem()
}

func (o ProviderTerraformConfigResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v ProviderTerraformConfigResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// govmomi debug path for debug
func (o ProviderOutput) ClientDebugPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientDebugPath }).(pulumi.StringPtrOutput)
}

// govmomi debug path for a single run
func (o ProviderOutput) ClientDebugPathRun() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientDebugPathRun }).(pulumi.StringPtrOutput)
}

// The user password for vSphere API operations.
func (o ProviderOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The directory to save vSphere REST API sessions to
func (o ProviderOutput) RestSessionPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.RestSessionPath }).(pulumi.StringPtrOutput)
}

// The user name for vSphere API operations.
func (o ProviderOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.User }).(pulumi.StringPtrOutput)
}

// Deprecated: This field has been renamed to vsphere_server.
func (o ProviderOutput) VcenterServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.VcenterServer }).(pulumi.StringPtrOutput)
}

// The directory to save vSphere SOAP API sessions to
func (o ProviderOutput) VimSessionPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.VimSessionPath }).(pulumi.StringPtrOutput)
}

// The vSphere Server name for vSphere API operations.
func (o ProviderOutput) VsphereServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.VsphereServer }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderTerraformConfigResultOutput{})
}
