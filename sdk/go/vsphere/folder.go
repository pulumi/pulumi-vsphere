// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Folder struct {
	pulumi.CustomResourceState

	// Map of custom attribute ids to attribute
	// value strings to set for folder. See [here][docs-setting-custom-attributes]
	// for a reference on how to set values for custom attributes.
	CustomAttributes pulumi.StringMapOutput `pulumi:"customAttributes"`
	// The ID of the datacenter the folder will be created in.
	// Required for all folder types except for datacenter folders. Forces a new
	// resource if changed.
	DatacenterId pulumi.StringPtrOutput `pulumi:"datacenterId"`
	// The path of the folder to be created. This is relative to
	// the root of the type of folder you are creating, and the supplied datacenter.
	// For example, given a default datacenter of `default-dc`, a folder of type
	// `vm` (denoting a virtual machine folder), and a supplied folder of
	// `test-folder`, the resulting path would be
	// `/default-dc/vm/test-folder`.
	Path pulumi.StringOutput `pulumi:"path"`
	// The IDs of any tags to attach to this resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The type of folder to create. Allowed options are
	// `datacenter` for datacenter folders, `host` for host and cluster folders,
	// `vm` for virtual machine folders, `datastore` for datastore folders, and
	// `network` for network folders. Forces a new resource if changed.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFolder registers a new resource with the given unique name, arguments, and options.
func NewFolder(ctx *pulumi.Context,
	name string, args *FolderArgs, opts ...pulumi.ResourceOption) (*Folder, error) {
	if args == nil || args.Path == nil {
		return nil, errors.New("missing required argument 'Path'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &FolderArgs{}
	}
	var resource Folder
	err := ctx.RegisterResource("vsphere:index/folder:Folder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolder gets an existing Folder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderState, opts ...pulumi.ResourceOption) (*Folder, error) {
	var resource Folder
	err := ctx.ReadResource("vsphere:index/folder:Folder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Folder resources.
type folderState struct {
	// Map of custom attribute ids to attribute
	// value strings to set for folder. See [here][docs-setting-custom-attributes]
	// for a reference on how to set values for custom attributes.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// The ID of the datacenter the folder will be created in.
	// Required for all folder types except for datacenter folders. Forces a new
	// resource if changed.
	DatacenterId *string `pulumi:"datacenterId"`
	// The path of the folder to be created. This is relative to
	// the root of the type of folder you are creating, and the supplied datacenter.
	// For example, given a default datacenter of `default-dc`, a folder of type
	// `vm` (denoting a virtual machine folder), and a supplied folder of
	// `test-folder`, the resulting path would be
	// `/default-dc/vm/test-folder`.
	Path *string `pulumi:"path"`
	// The IDs of any tags to attach to this resource.
	Tags []string `pulumi:"tags"`
	// The type of folder to create. Allowed options are
	// `datacenter` for datacenter folders, `host` for host and cluster folders,
	// `vm` for virtual machine folders, `datastore` for datastore folders, and
	// `network` for network folders. Forces a new resource if changed.
	Type *string `pulumi:"type"`
}

type FolderState struct {
	// Map of custom attribute ids to attribute
	// value strings to set for folder. See [here][docs-setting-custom-attributes]
	// for a reference on how to set values for custom attributes.
	CustomAttributes pulumi.StringMapInput
	// The ID of the datacenter the folder will be created in.
	// Required for all folder types except for datacenter folders. Forces a new
	// resource if changed.
	DatacenterId pulumi.StringPtrInput
	// The path of the folder to be created. This is relative to
	// the root of the type of folder you are creating, and the supplied datacenter.
	// For example, given a default datacenter of `default-dc`, a folder of type
	// `vm` (denoting a virtual machine folder), and a supplied folder of
	// `test-folder`, the resulting path would be
	// `/default-dc/vm/test-folder`.
	Path pulumi.StringPtrInput
	// The IDs of any tags to attach to this resource.
	Tags pulumi.StringArrayInput
	// The type of folder to create. Allowed options are
	// `datacenter` for datacenter folders, `host` for host and cluster folders,
	// `vm` for virtual machine folders, `datastore` for datastore folders, and
	// `network` for network folders. Forces a new resource if changed.
	Type pulumi.StringPtrInput
}

func (FolderState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderState)(nil)).Elem()
}

type folderArgs struct {
	// Map of custom attribute ids to attribute
	// value strings to set for folder. See [here][docs-setting-custom-attributes]
	// for a reference on how to set values for custom attributes.
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// The ID of the datacenter the folder will be created in.
	// Required for all folder types except for datacenter folders. Forces a new
	// resource if changed.
	DatacenterId *string `pulumi:"datacenterId"`
	// The path of the folder to be created. This is relative to
	// the root of the type of folder you are creating, and the supplied datacenter.
	// For example, given a default datacenter of `default-dc`, a folder of type
	// `vm` (denoting a virtual machine folder), and a supplied folder of
	// `test-folder`, the resulting path would be
	// `/default-dc/vm/test-folder`.
	Path string `pulumi:"path"`
	// The IDs of any tags to attach to this resource.
	Tags []string `pulumi:"tags"`
	// The type of folder to create. Allowed options are
	// `datacenter` for datacenter folders, `host` for host and cluster folders,
	// `vm` for virtual machine folders, `datastore` for datastore folders, and
	// `network` for network folders. Forces a new resource if changed.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Folder resource.
type FolderArgs struct {
	// Map of custom attribute ids to attribute
	// value strings to set for folder. See [here][docs-setting-custom-attributes]
	// for a reference on how to set values for custom attributes.
	CustomAttributes pulumi.StringMapInput
	// The ID of the datacenter the folder will be created in.
	// Required for all folder types except for datacenter folders. Forces a new
	// resource if changed.
	DatacenterId pulumi.StringPtrInput
	// The path of the folder to be created. This is relative to
	// the root of the type of folder you are creating, and the supplied datacenter.
	// For example, given a default datacenter of `default-dc`, a folder of type
	// `vm` (denoting a virtual machine folder), and a supplied folder of
	// `test-folder`, the resulting path would be
	// `/default-dc/vm/test-folder`.
	Path pulumi.StringInput
	// The IDs of any tags to attach to this resource.
	Tags pulumi.StringArrayInput
	// The type of folder to create. Allowed options are
	// `datacenter` for datacenter folders, `host` for host and cluster folders,
	// `vm` for virtual machine folders, `datastore` for datastore folders, and
	// `network` for network folders. Forces a new resource if changed.
	Type pulumi.StringInput
}

func (FolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderArgs)(nil)).Elem()
}
