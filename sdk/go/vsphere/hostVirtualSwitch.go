// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type HostVirtualSwitch struct {
	pulumi.CustomResourceState

	// The list of active network adapters used for load
	// balancing.
	ActiveNics pulumi.StringArrayOutput `pulumi:"activeNics"`
	// Controls whether or not the virtual
	// network adapter is allowed to send network traffic with a different MAC
	// address than that of its own. Default: `true`.
	AllowForgedTransmits pulumi.BoolPtrOutput `pulumi:"allowForgedTransmits"`
	// Controls whether or not the Media Access
	// Control (MAC) address can be changed. Default: `true`.
	AllowMacChanges pulumi.BoolPtrOutput `pulumi:"allowMacChanges"`
	// Enable promiscuous mode on the network. This
	// flag indicates whether or not all traffic is seen on a given port. Default:
	// `false`.
	AllowPromiscuous pulumi.BoolPtrOutput `pulumi:"allowPromiscuous"`
	// The interval, in seconds, that a NIC beacon
	// packet is sent out. This can be used with `checkBeacon` to
	// offer link failure capability beyond link status only. Default: `1`.
	BeaconInterval pulumi.IntPtrOutput `pulumi:"beaconInterval"`
	// Enable beacon probing - this requires that the
	// `beaconInterval` option has been set in the bridge
	// options. If this is set to `false`, only link status is used to check for
	// failed NICs.  Default: `false`.
	CheckBeacon pulumi.BoolPtrOutput `pulumi:"checkBeacon"`
	// If set to `true`, the teaming policy will re-activate
	// failed interfaces higher in precedence when they come back up.  Default:
	// `true`.
	Failback pulumi.BoolPtrOutput `pulumi:"failback"`
	// The managed object ID of
	// the host to set the virtual switch up on. Forces a new resource if changed.
	HostSystemId pulumi.StringOutput `pulumi:"hostSystemId"`
	// Whether to `advertise` or `listen`
	// for link discovery traffic. Default: `listen`.
	LinkDiscoveryOperation pulumi.StringPtrOutput `pulumi:"linkDiscoveryOperation"`
	// The discovery protocol type.  Valid
	// types are `cpd` and `lldp`. Default: `cdp`.
	LinkDiscoveryProtocol pulumi.StringPtrOutput `pulumi:"linkDiscoveryProtocol"`
	// The maximum transmission unit (MTU) for the virtual
	// switch. Default: `1500`.
	Mtu pulumi.IntPtrOutput `pulumi:"mtu"`
	// The name of the virtual switch. Forces a new resource if
	// changed.
	Name pulumi.StringOutput `pulumi:"name"`
	// The network interfaces to bind to the bridge.
	NetworkAdapters pulumi.StringArrayOutput `pulumi:"networkAdapters"`
	// If set to `true`, the teaming policy will
	// notify the broadcast network of a NIC failover, triggering cache updates.
	// Default: `true`.
	NotifySwitches pulumi.BoolPtrOutput `pulumi:"notifySwitches"`
	// The number of ports to create with this
	// virtual switch. Default: `128`.
	//
	// > **NOTE:** Changing the port count requires a reboot of the host. This provider
	// will not restart the host for you.
	NumberOfPorts pulumi.IntPtrOutput `pulumi:"numberOfPorts"`
	// The average bandwidth in bits per
	// second if traffic shaping is enabled. Default: `0`
	ShapingAverageBandwidth pulumi.IntPtrOutput `pulumi:"shapingAverageBandwidth"`
	// The maximum burst size allowed in bytes if
	// shaping is enabled. Default: `0`
	ShapingBurstSize pulumi.IntPtrOutput `pulumi:"shapingBurstSize"`
	// Set to `true` to enable the traffic shaper for
	// ports managed by this virtual switch. Default: `false`.
	ShapingEnabled pulumi.BoolPtrOutput `pulumi:"shapingEnabled"`
	// The peak bandwidth during bursts in
	// bits per second if traffic shaping is enabled. Default: `0`
	ShapingPeakBandwidth pulumi.IntPtrOutput `pulumi:"shapingPeakBandwidth"`
	// The list of standby network adapters used for
	// failover.
	StandbyNics pulumi.StringArrayOutput `pulumi:"standbyNics"`
	// The network adapter teaming policy. Can be one
	// of `loadbalanceIp`, `loadbalanceSrcmac`, `loadbalanceSrcid`, or
	// `failoverExplicit`. Default: `loadbalanceSrcid`.
	TeamingPolicy pulumi.StringPtrOutput `pulumi:"teamingPolicy"`
}

// NewHostVirtualSwitch registers a new resource with the given unique name, arguments, and options.
func NewHostVirtualSwitch(ctx *pulumi.Context,
	name string, args *HostVirtualSwitchArgs, opts ...pulumi.ResourceOption) (*HostVirtualSwitch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActiveNics == nil {
		return nil, errors.New("invalid value for required argument 'ActiveNics'")
	}
	if args.HostSystemId == nil {
		return nil, errors.New("invalid value for required argument 'HostSystemId'")
	}
	if args.NetworkAdapters == nil {
		return nil, errors.New("invalid value for required argument 'NetworkAdapters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostVirtualSwitch
	err := ctx.RegisterResource("vsphere:index/hostVirtualSwitch:HostVirtualSwitch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostVirtualSwitch gets an existing HostVirtualSwitch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostVirtualSwitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostVirtualSwitchState, opts ...pulumi.ResourceOption) (*HostVirtualSwitch, error) {
	var resource HostVirtualSwitch
	err := ctx.ReadResource("vsphere:index/hostVirtualSwitch:HostVirtualSwitch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostVirtualSwitch resources.
type hostVirtualSwitchState struct {
	// The list of active network adapters used for load
	// balancing.
	ActiveNics []string `pulumi:"activeNics"`
	// Controls whether or not the virtual
	// network adapter is allowed to send network traffic with a different MAC
	// address than that of its own. Default: `true`.
	AllowForgedTransmits *bool `pulumi:"allowForgedTransmits"`
	// Controls whether or not the Media Access
	// Control (MAC) address can be changed. Default: `true`.
	AllowMacChanges *bool `pulumi:"allowMacChanges"`
	// Enable promiscuous mode on the network. This
	// flag indicates whether or not all traffic is seen on a given port. Default:
	// `false`.
	AllowPromiscuous *bool `pulumi:"allowPromiscuous"`
	// The interval, in seconds, that a NIC beacon
	// packet is sent out. This can be used with `checkBeacon` to
	// offer link failure capability beyond link status only. Default: `1`.
	BeaconInterval *int `pulumi:"beaconInterval"`
	// Enable beacon probing - this requires that the
	// `beaconInterval` option has been set in the bridge
	// options. If this is set to `false`, only link status is used to check for
	// failed NICs.  Default: `false`.
	CheckBeacon *bool `pulumi:"checkBeacon"`
	// If set to `true`, the teaming policy will re-activate
	// failed interfaces higher in precedence when they come back up.  Default:
	// `true`.
	Failback *bool `pulumi:"failback"`
	// The managed object ID of
	// the host to set the virtual switch up on. Forces a new resource if changed.
	HostSystemId *string `pulumi:"hostSystemId"`
	// Whether to `advertise` or `listen`
	// for link discovery traffic. Default: `listen`.
	LinkDiscoveryOperation *string `pulumi:"linkDiscoveryOperation"`
	// The discovery protocol type.  Valid
	// types are `cpd` and `lldp`. Default: `cdp`.
	LinkDiscoveryProtocol *string `pulumi:"linkDiscoveryProtocol"`
	// The maximum transmission unit (MTU) for the virtual
	// switch. Default: `1500`.
	Mtu *int `pulumi:"mtu"`
	// The name of the virtual switch. Forces a new resource if
	// changed.
	Name *string `pulumi:"name"`
	// The network interfaces to bind to the bridge.
	NetworkAdapters []string `pulumi:"networkAdapters"`
	// If set to `true`, the teaming policy will
	// notify the broadcast network of a NIC failover, triggering cache updates.
	// Default: `true`.
	NotifySwitches *bool `pulumi:"notifySwitches"`
	// The number of ports to create with this
	// virtual switch. Default: `128`.
	//
	// > **NOTE:** Changing the port count requires a reboot of the host. This provider
	// will not restart the host for you.
	NumberOfPorts *int `pulumi:"numberOfPorts"`
	// The average bandwidth in bits per
	// second if traffic shaping is enabled. Default: `0`
	ShapingAverageBandwidth *int `pulumi:"shapingAverageBandwidth"`
	// The maximum burst size allowed in bytes if
	// shaping is enabled. Default: `0`
	ShapingBurstSize *int `pulumi:"shapingBurstSize"`
	// Set to `true` to enable the traffic shaper for
	// ports managed by this virtual switch. Default: `false`.
	ShapingEnabled *bool `pulumi:"shapingEnabled"`
	// The peak bandwidth during bursts in
	// bits per second if traffic shaping is enabled. Default: `0`
	ShapingPeakBandwidth *int `pulumi:"shapingPeakBandwidth"`
	// The list of standby network adapters used for
	// failover.
	StandbyNics []string `pulumi:"standbyNics"`
	// The network adapter teaming policy. Can be one
	// of `loadbalanceIp`, `loadbalanceSrcmac`, `loadbalanceSrcid`, or
	// `failoverExplicit`. Default: `loadbalanceSrcid`.
	TeamingPolicy *string `pulumi:"teamingPolicy"`
}

type HostVirtualSwitchState struct {
	// The list of active network adapters used for load
	// balancing.
	ActiveNics pulumi.StringArrayInput
	// Controls whether or not the virtual
	// network adapter is allowed to send network traffic with a different MAC
	// address than that of its own. Default: `true`.
	AllowForgedTransmits pulumi.BoolPtrInput
	// Controls whether or not the Media Access
	// Control (MAC) address can be changed. Default: `true`.
	AllowMacChanges pulumi.BoolPtrInput
	// Enable promiscuous mode on the network. This
	// flag indicates whether or not all traffic is seen on a given port. Default:
	// `false`.
	AllowPromiscuous pulumi.BoolPtrInput
	// The interval, in seconds, that a NIC beacon
	// packet is sent out. This can be used with `checkBeacon` to
	// offer link failure capability beyond link status only. Default: `1`.
	BeaconInterval pulumi.IntPtrInput
	// Enable beacon probing - this requires that the
	// `beaconInterval` option has been set in the bridge
	// options. If this is set to `false`, only link status is used to check for
	// failed NICs.  Default: `false`.
	CheckBeacon pulumi.BoolPtrInput
	// If set to `true`, the teaming policy will re-activate
	// failed interfaces higher in precedence when they come back up.  Default:
	// `true`.
	Failback pulumi.BoolPtrInput
	// The managed object ID of
	// the host to set the virtual switch up on. Forces a new resource if changed.
	HostSystemId pulumi.StringPtrInput
	// Whether to `advertise` or `listen`
	// for link discovery traffic. Default: `listen`.
	LinkDiscoveryOperation pulumi.StringPtrInput
	// The discovery protocol type.  Valid
	// types are `cpd` and `lldp`. Default: `cdp`.
	LinkDiscoveryProtocol pulumi.StringPtrInput
	// The maximum transmission unit (MTU) for the virtual
	// switch. Default: `1500`.
	Mtu pulumi.IntPtrInput
	// The name of the virtual switch. Forces a new resource if
	// changed.
	Name pulumi.StringPtrInput
	// The network interfaces to bind to the bridge.
	NetworkAdapters pulumi.StringArrayInput
	// If set to `true`, the teaming policy will
	// notify the broadcast network of a NIC failover, triggering cache updates.
	// Default: `true`.
	NotifySwitches pulumi.BoolPtrInput
	// The number of ports to create with this
	// virtual switch. Default: `128`.
	//
	// > **NOTE:** Changing the port count requires a reboot of the host. This provider
	// will not restart the host for you.
	NumberOfPorts pulumi.IntPtrInput
	// The average bandwidth in bits per
	// second if traffic shaping is enabled. Default: `0`
	ShapingAverageBandwidth pulumi.IntPtrInput
	// The maximum burst size allowed in bytes if
	// shaping is enabled. Default: `0`
	ShapingBurstSize pulumi.IntPtrInput
	// Set to `true` to enable the traffic shaper for
	// ports managed by this virtual switch. Default: `false`.
	ShapingEnabled pulumi.BoolPtrInput
	// The peak bandwidth during bursts in
	// bits per second if traffic shaping is enabled. Default: `0`
	ShapingPeakBandwidth pulumi.IntPtrInput
	// The list of standby network adapters used for
	// failover.
	StandbyNics pulumi.StringArrayInput
	// The network adapter teaming policy. Can be one
	// of `loadbalanceIp`, `loadbalanceSrcmac`, `loadbalanceSrcid`, or
	// `failoverExplicit`. Default: `loadbalanceSrcid`.
	TeamingPolicy pulumi.StringPtrInput
}

func (HostVirtualSwitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostVirtualSwitchState)(nil)).Elem()
}

type hostVirtualSwitchArgs struct {
	// The list of active network adapters used for load
	// balancing.
	ActiveNics []string `pulumi:"activeNics"`
	// Controls whether or not the virtual
	// network adapter is allowed to send network traffic with a different MAC
	// address than that of its own. Default: `true`.
	AllowForgedTransmits *bool `pulumi:"allowForgedTransmits"`
	// Controls whether or not the Media Access
	// Control (MAC) address can be changed. Default: `true`.
	AllowMacChanges *bool `pulumi:"allowMacChanges"`
	// Enable promiscuous mode on the network. This
	// flag indicates whether or not all traffic is seen on a given port. Default:
	// `false`.
	AllowPromiscuous *bool `pulumi:"allowPromiscuous"`
	// The interval, in seconds, that a NIC beacon
	// packet is sent out. This can be used with `checkBeacon` to
	// offer link failure capability beyond link status only. Default: `1`.
	BeaconInterval *int `pulumi:"beaconInterval"`
	// Enable beacon probing - this requires that the
	// `beaconInterval` option has been set in the bridge
	// options. If this is set to `false`, only link status is used to check for
	// failed NICs.  Default: `false`.
	CheckBeacon *bool `pulumi:"checkBeacon"`
	// If set to `true`, the teaming policy will re-activate
	// failed interfaces higher in precedence when they come back up.  Default:
	// `true`.
	Failback *bool `pulumi:"failback"`
	// The managed object ID of
	// the host to set the virtual switch up on. Forces a new resource if changed.
	HostSystemId string `pulumi:"hostSystemId"`
	// Whether to `advertise` or `listen`
	// for link discovery traffic. Default: `listen`.
	LinkDiscoveryOperation *string `pulumi:"linkDiscoveryOperation"`
	// The discovery protocol type.  Valid
	// types are `cpd` and `lldp`. Default: `cdp`.
	LinkDiscoveryProtocol *string `pulumi:"linkDiscoveryProtocol"`
	// The maximum transmission unit (MTU) for the virtual
	// switch. Default: `1500`.
	Mtu *int `pulumi:"mtu"`
	// The name of the virtual switch. Forces a new resource if
	// changed.
	Name *string `pulumi:"name"`
	// The network interfaces to bind to the bridge.
	NetworkAdapters []string `pulumi:"networkAdapters"`
	// If set to `true`, the teaming policy will
	// notify the broadcast network of a NIC failover, triggering cache updates.
	// Default: `true`.
	NotifySwitches *bool `pulumi:"notifySwitches"`
	// The number of ports to create with this
	// virtual switch. Default: `128`.
	//
	// > **NOTE:** Changing the port count requires a reboot of the host. This provider
	// will not restart the host for you.
	NumberOfPorts *int `pulumi:"numberOfPorts"`
	// The average bandwidth in bits per
	// second if traffic shaping is enabled. Default: `0`
	ShapingAverageBandwidth *int `pulumi:"shapingAverageBandwidth"`
	// The maximum burst size allowed in bytes if
	// shaping is enabled. Default: `0`
	ShapingBurstSize *int `pulumi:"shapingBurstSize"`
	// Set to `true` to enable the traffic shaper for
	// ports managed by this virtual switch. Default: `false`.
	ShapingEnabled *bool `pulumi:"shapingEnabled"`
	// The peak bandwidth during bursts in
	// bits per second if traffic shaping is enabled. Default: `0`
	ShapingPeakBandwidth *int `pulumi:"shapingPeakBandwidth"`
	// The list of standby network adapters used for
	// failover.
	StandbyNics []string `pulumi:"standbyNics"`
	// The network adapter teaming policy. Can be one
	// of `loadbalanceIp`, `loadbalanceSrcmac`, `loadbalanceSrcid`, or
	// `failoverExplicit`. Default: `loadbalanceSrcid`.
	TeamingPolicy *string `pulumi:"teamingPolicy"`
}

// The set of arguments for constructing a HostVirtualSwitch resource.
type HostVirtualSwitchArgs struct {
	// The list of active network adapters used for load
	// balancing.
	ActiveNics pulumi.StringArrayInput
	// Controls whether or not the virtual
	// network adapter is allowed to send network traffic with a different MAC
	// address than that of its own. Default: `true`.
	AllowForgedTransmits pulumi.BoolPtrInput
	// Controls whether or not the Media Access
	// Control (MAC) address can be changed. Default: `true`.
	AllowMacChanges pulumi.BoolPtrInput
	// Enable promiscuous mode on the network. This
	// flag indicates whether or not all traffic is seen on a given port. Default:
	// `false`.
	AllowPromiscuous pulumi.BoolPtrInput
	// The interval, in seconds, that a NIC beacon
	// packet is sent out. This can be used with `checkBeacon` to
	// offer link failure capability beyond link status only. Default: `1`.
	BeaconInterval pulumi.IntPtrInput
	// Enable beacon probing - this requires that the
	// `beaconInterval` option has been set in the bridge
	// options. If this is set to `false`, only link status is used to check for
	// failed NICs.  Default: `false`.
	CheckBeacon pulumi.BoolPtrInput
	// If set to `true`, the teaming policy will re-activate
	// failed interfaces higher in precedence when they come back up.  Default:
	// `true`.
	Failback pulumi.BoolPtrInput
	// The managed object ID of
	// the host to set the virtual switch up on. Forces a new resource if changed.
	HostSystemId pulumi.StringInput
	// Whether to `advertise` or `listen`
	// for link discovery traffic. Default: `listen`.
	LinkDiscoveryOperation pulumi.StringPtrInput
	// The discovery protocol type.  Valid
	// types are `cpd` and `lldp`. Default: `cdp`.
	LinkDiscoveryProtocol pulumi.StringPtrInput
	// The maximum transmission unit (MTU) for the virtual
	// switch. Default: `1500`.
	Mtu pulumi.IntPtrInput
	// The name of the virtual switch. Forces a new resource if
	// changed.
	Name pulumi.StringPtrInput
	// The network interfaces to bind to the bridge.
	NetworkAdapters pulumi.StringArrayInput
	// If set to `true`, the teaming policy will
	// notify the broadcast network of a NIC failover, triggering cache updates.
	// Default: `true`.
	NotifySwitches pulumi.BoolPtrInput
	// The number of ports to create with this
	// virtual switch. Default: `128`.
	//
	// > **NOTE:** Changing the port count requires a reboot of the host. This provider
	// will not restart the host for you.
	NumberOfPorts pulumi.IntPtrInput
	// The average bandwidth in bits per
	// second if traffic shaping is enabled. Default: `0`
	ShapingAverageBandwidth pulumi.IntPtrInput
	// The maximum burst size allowed in bytes if
	// shaping is enabled. Default: `0`
	ShapingBurstSize pulumi.IntPtrInput
	// Set to `true` to enable the traffic shaper for
	// ports managed by this virtual switch. Default: `false`.
	ShapingEnabled pulumi.BoolPtrInput
	// The peak bandwidth during bursts in
	// bits per second if traffic shaping is enabled. Default: `0`
	ShapingPeakBandwidth pulumi.IntPtrInput
	// The list of standby network adapters used for
	// failover.
	StandbyNics pulumi.StringArrayInput
	// The network adapter teaming policy. Can be one
	// of `loadbalanceIp`, `loadbalanceSrcmac`, `loadbalanceSrcid`, or
	// `failoverExplicit`. Default: `loadbalanceSrcid`.
	TeamingPolicy pulumi.StringPtrInput
}

func (HostVirtualSwitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostVirtualSwitchArgs)(nil)).Elem()
}

type HostVirtualSwitchInput interface {
	pulumi.Input

	ToHostVirtualSwitchOutput() HostVirtualSwitchOutput
	ToHostVirtualSwitchOutputWithContext(ctx context.Context) HostVirtualSwitchOutput
}

func (*HostVirtualSwitch) ElementType() reflect.Type {
	return reflect.TypeOf((**HostVirtualSwitch)(nil)).Elem()
}

func (i *HostVirtualSwitch) ToHostVirtualSwitchOutput() HostVirtualSwitchOutput {
	return i.ToHostVirtualSwitchOutputWithContext(context.Background())
}

func (i *HostVirtualSwitch) ToHostVirtualSwitchOutputWithContext(ctx context.Context) HostVirtualSwitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostVirtualSwitchOutput)
}

func (i *HostVirtualSwitch) ToOutput(ctx context.Context) pulumix.Output[*HostVirtualSwitch] {
	return pulumix.Output[*HostVirtualSwitch]{
		OutputState: i.ToHostVirtualSwitchOutputWithContext(ctx).OutputState,
	}
}

// HostVirtualSwitchArrayInput is an input type that accepts HostVirtualSwitchArray and HostVirtualSwitchArrayOutput values.
// You can construct a concrete instance of `HostVirtualSwitchArrayInput` via:
//
//	HostVirtualSwitchArray{ HostVirtualSwitchArgs{...} }
type HostVirtualSwitchArrayInput interface {
	pulumi.Input

	ToHostVirtualSwitchArrayOutput() HostVirtualSwitchArrayOutput
	ToHostVirtualSwitchArrayOutputWithContext(context.Context) HostVirtualSwitchArrayOutput
}

type HostVirtualSwitchArray []HostVirtualSwitchInput

func (HostVirtualSwitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostVirtualSwitch)(nil)).Elem()
}

func (i HostVirtualSwitchArray) ToHostVirtualSwitchArrayOutput() HostVirtualSwitchArrayOutput {
	return i.ToHostVirtualSwitchArrayOutputWithContext(context.Background())
}

func (i HostVirtualSwitchArray) ToHostVirtualSwitchArrayOutputWithContext(ctx context.Context) HostVirtualSwitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostVirtualSwitchArrayOutput)
}

func (i HostVirtualSwitchArray) ToOutput(ctx context.Context) pulumix.Output[[]*HostVirtualSwitch] {
	return pulumix.Output[[]*HostVirtualSwitch]{
		OutputState: i.ToHostVirtualSwitchArrayOutputWithContext(ctx).OutputState,
	}
}

// HostVirtualSwitchMapInput is an input type that accepts HostVirtualSwitchMap and HostVirtualSwitchMapOutput values.
// You can construct a concrete instance of `HostVirtualSwitchMapInput` via:
//
//	HostVirtualSwitchMap{ "key": HostVirtualSwitchArgs{...} }
type HostVirtualSwitchMapInput interface {
	pulumi.Input

	ToHostVirtualSwitchMapOutput() HostVirtualSwitchMapOutput
	ToHostVirtualSwitchMapOutputWithContext(context.Context) HostVirtualSwitchMapOutput
}

type HostVirtualSwitchMap map[string]HostVirtualSwitchInput

func (HostVirtualSwitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostVirtualSwitch)(nil)).Elem()
}

func (i HostVirtualSwitchMap) ToHostVirtualSwitchMapOutput() HostVirtualSwitchMapOutput {
	return i.ToHostVirtualSwitchMapOutputWithContext(context.Background())
}

func (i HostVirtualSwitchMap) ToHostVirtualSwitchMapOutputWithContext(ctx context.Context) HostVirtualSwitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostVirtualSwitchMapOutput)
}

func (i HostVirtualSwitchMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*HostVirtualSwitch] {
	return pulumix.Output[map[string]*HostVirtualSwitch]{
		OutputState: i.ToHostVirtualSwitchMapOutputWithContext(ctx).OutputState,
	}
}

type HostVirtualSwitchOutput struct{ *pulumi.OutputState }

func (HostVirtualSwitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostVirtualSwitch)(nil)).Elem()
}

func (o HostVirtualSwitchOutput) ToHostVirtualSwitchOutput() HostVirtualSwitchOutput {
	return o
}

func (o HostVirtualSwitchOutput) ToHostVirtualSwitchOutputWithContext(ctx context.Context) HostVirtualSwitchOutput {
	return o
}

func (o HostVirtualSwitchOutput) ToOutput(ctx context.Context) pulumix.Output[*HostVirtualSwitch] {
	return pulumix.Output[*HostVirtualSwitch]{
		OutputState: o.OutputState,
	}
}

// The list of active network adapters used for load
// balancing.
func (o HostVirtualSwitchOutput) ActiveNics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.StringArrayOutput { return v.ActiveNics }).(pulumi.StringArrayOutput)
}

// Controls whether or not the virtual
// network adapter is allowed to send network traffic with a different MAC
// address than that of its own. Default: `true`.
func (o HostVirtualSwitchOutput) AllowForgedTransmits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.BoolPtrOutput { return v.AllowForgedTransmits }).(pulumi.BoolPtrOutput)
}

// Controls whether or not the Media Access
// Control (MAC) address can be changed. Default: `true`.
func (o HostVirtualSwitchOutput) AllowMacChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.BoolPtrOutput { return v.AllowMacChanges }).(pulumi.BoolPtrOutput)
}

// Enable promiscuous mode on the network. This
// flag indicates whether or not all traffic is seen on a given port. Default:
// `false`.
func (o HostVirtualSwitchOutput) AllowPromiscuous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.BoolPtrOutput { return v.AllowPromiscuous }).(pulumi.BoolPtrOutput)
}

// The interval, in seconds, that a NIC beacon
// packet is sent out. This can be used with `checkBeacon` to
// offer link failure capability beyond link status only. Default: `1`.
func (o HostVirtualSwitchOutput) BeaconInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.IntPtrOutput { return v.BeaconInterval }).(pulumi.IntPtrOutput)
}

// Enable beacon probing - this requires that the
// `beaconInterval` option has been set in the bridge
// options. If this is set to `false`, only link status is used to check for
// failed NICs.  Default: `false`.
func (o HostVirtualSwitchOutput) CheckBeacon() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.BoolPtrOutput { return v.CheckBeacon }).(pulumi.BoolPtrOutput)
}

// If set to `true`, the teaming policy will re-activate
// failed interfaces higher in precedence when they come back up.  Default:
// `true`.
func (o HostVirtualSwitchOutput) Failback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.BoolPtrOutput { return v.Failback }).(pulumi.BoolPtrOutput)
}

// The managed object ID of
// the host to set the virtual switch up on. Forces a new resource if changed.
func (o HostVirtualSwitchOutput) HostSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.StringOutput { return v.HostSystemId }).(pulumi.StringOutput)
}

// Whether to `advertise` or `listen`
// for link discovery traffic. Default: `listen`.
func (o HostVirtualSwitchOutput) LinkDiscoveryOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.StringPtrOutput { return v.LinkDiscoveryOperation }).(pulumi.StringPtrOutput)
}

// The discovery protocol type.  Valid
// types are `cpd` and `lldp`. Default: `cdp`.
func (o HostVirtualSwitchOutput) LinkDiscoveryProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.StringPtrOutput { return v.LinkDiscoveryProtocol }).(pulumi.StringPtrOutput)
}

// The maximum transmission unit (MTU) for the virtual
// switch. Default: `1500`.
func (o HostVirtualSwitchOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.IntPtrOutput { return v.Mtu }).(pulumi.IntPtrOutput)
}

// The name of the virtual switch. Forces a new resource if
// changed.
func (o HostVirtualSwitchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network interfaces to bind to the bridge.
func (o HostVirtualSwitchOutput) NetworkAdapters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.StringArrayOutput { return v.NetworkAdapters }).(pulumi.StringArrayOutput)
}

// If set to `true`, the teaming policy will
// notify the broadcast network of a NIC failover, triggering cache updates.
// Default: `true`.
func (o HostVirtualSwitchOutput) NotifySwitches() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.BoolPtrOutput { return v.NotifySwitches }).(pulumi.BoolPtrOutput)
}

// The number of ports to create with this
// virtual switch. Default: `128`.
//
// > **NOTE:** Changing the port count requires a reboot of the host. This provider
// will not restart the host for you.
func (o HostVirtualSwitchOutput) NumberOfPorts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.IntPtrOutput { return v.NumberOfPorts }).(pulumi.IntPtrOutput)
}

// The average bandwidth in bits per
// second if traffic shaping is enabled. Default: `0`
func (o HostVirtualSwitchOutput) ShapingAverageBandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.IntPtrOutput { return v.ShapingAverageBandwidth }).(pulumi.IntPtrOutput)
}

// The maximum burst size allowed in bytes if
// shaping is enabled. Default: `0`
func (o HostVirtualSwitchOutput) ShapingBurstSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.IntPtrOutput { return v.ShapingBurstSize }).(pulumi.IntPtrOutput)
}

// Set to `true` to enable the traffic shaper for
// ports managed by this virtual switch. Default: `false`.
func (o HostVirtualSwitchOutput) ShapingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.BoolPtrOutput { return v.ShapingEnabled }).(pulumi.BoolPtrOutput)
}

// The peak bandwidth during bursts in
// bits per second if traffic shaping is enabled. Default: `0`
func (o HostVirtualSwitchOutput) ShapingPeakBandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.IntPtrOutput { return v.ShapingPeakBandwidth }).(pulumi.IntPtrOutput)
}

// The list of standby network adapters used for
// failover.
func (o HostVirtualSwitchOutput) StandbyNics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.StringArrayOutput { return v.StandbyNics }).(pulumi.StringArrayOutput)
}

// The network adapter teaming policy. Can be one
// of `loadbalanceIp`, `loadbalanceSrcmac`, `loadbalanceSrcid`, or
// `failoverExplicit`. Default: `loadbalanceSrcid`.
func (o HostVirtualSwitchOutput) TeamingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostVirtualSwitch) pulumi.StringPtrOutput { return v.TeamingPolicy }).(pulumi.StringPtrOutput)
}

type HostVirtualSwitchArrayOutput struct{ *pulumi.OutputState }

func (HostVirtualSwitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostVirtualSwitch)(nil)).Elem()
}

func (o HostVirtualSwitchArrayOutput) ToHostVirtualSwitchArrayOutput() HostVirtualSwitchArrayOutput {
	return o
}

func (o HostVirtualSwitchArrayOutput) ToHostVirtualSwitchArrayOutputWithContext(ctx context.Context) HostVirtualSwitchArrayOutput {
	return o
}

func (o HostVirtualSwitchArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*HostVirtualSwitch] {
	return pulumix.Output[[]*HostVirtualSwitch]{
		OutputState: o.OutputState,
	}
}

func (o HostVirtualSwitchArrayOutput) Index(i pulumi.IntInput) HostVirtualSwitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostVirtualSwitch {
		return vs[0].([]*HostVirtualSwitch)[vs[1].(int)]
	}).(HostVirtualSwitchOutput)
}

type HostVirtualSwitchMapOutput struct{ *pulumi.OutputState }

func (HostVirtualSwitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostVirtualSwitch)(nil)).Elem()
}

func (o HostVirtualSwitchMapOutput) ToHostVirtualSwitchMapOutput() HostVirtualSwitchMapOutput {
	return o
}

func (o HostVirtualSwitchMapOutput) ToHostVirtualSwitchMapOutputWithContext(ctx context.Context) HostVirtualSwitchMapOutput {
	return o
}

func (o HostVirtualSwitchMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*HostVirtualSwitch] {
	return pulumix.Output[map[string]*HostVirtualSwitch]{
		OutputState: o.OutputState,
	}
}

func (o HostVirtualSwitchMapOutput) MapIndex(k pulumi.StringInput) HostVirtualSwitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostVirtualSwitch {
		return vs[0].(map[string]*HostVirtualSwitch)[vs[1].(string)]
	}).(HostVirtualSwitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostVirtualSwitchInput)(nil)).Elem(), &HostVirtualSwitch{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostVirtualSwitchArrayInput)(nil)).Elem(), HostVirtualSwitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostVirtualSwitchMapInput)(nil)).Elem(), HostVirtualSwitchMap{})
	pulumi.RegisterOutputType(HostVirtualSwitchOutput{})
	pulumi.RegisterOutputType(HostVirtualSwitchArrayOutput{})
	pulumi.RegisterOutputType(HostVirtualSwitchMapOutput{})
}
