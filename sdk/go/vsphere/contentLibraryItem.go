// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The `.ContentLibraryItem` resource can be used to create items in a Content Library. Each item can contain
// multiple files. Each `fileUrl` must be accessible from the vSphere environment as it will be downloaded from the
// specified location and stored on the Content Library's storage backing.
//
// To make a `contentLibraryItem` a functioning template, the template must be in OVF format. The .ovf and .vmdk
// file(s) can then be set as the `fileUrl` list.
type ContentLibraryItem struct {
	pulumi.CustomResourceState

	// A description for the item.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of files to download for the Content Library item.
	FileUrls pulumi.StringArrayOutput `pulumi:"fileUrls"`
	// The ID of the Content Library the item should be created in.
	LibraryId pulumi.StringOutput `pulumi:"libraryId"`
	// The name of the item to be created in the Content Library.
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of content library item.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewContentLibraryItem registers a new resource with the given unique name, arguments, and options.
func NewContentLibraryItem(ctx *pulumi.Context,
	name string, args *ContentLibraryItemArgs, opts ...pulumi.ResourceOption) (*ContentLibraryItem, error) {
	if args == nil || args.FileUrls == nil {
		return nil, errors.New("missing required argument 'FileUrls'")
	}
	if args == nil || args.LibraryId == nil {
		return nil, errors.New("missing required argument 'LibraryId'")
	}
	if args == nil {
		args = &ContentLibraryItemArgs{}
	}
	var resource ContentLibraryItem
	err := ctx.RegisterResource("vsphere:index/contentLibraryItem:ContentLibraryItem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContentLibraryItem gets an existing ContentLibraryItem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContentLibraryItem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContentLibraryItemState, opts ...pulumi.ResourceOption) (*ContentLibraryItem, error) {
	var resource ContentLibraryItem
	err := ctx.ReadResource("vsphere:index/contentLibraryItem:ContentLibraryItem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContentLibraryItem resources.
type contentLibraryItemState struct {
	// A description for the item.
	Description *string `pulumi:"description"`
	// A list of files to download for the Content Library item.
	FileUrls []string `pulumi:"fileUrls"`
	// The ID of the Content Library the item should be created in.
	LibraryId *string `pulumi:"libraryId"`
	// The name of the item to be created in the Content Library.
	Name *string `pulumi:"name"`
	// Type of content library item.
	Type *string `pulumi:"type"`
}

type ContentLibraryItemState struct {
	// A description for the item.
	Description pulumi.StringPtrInput
	// A list of files to download for the Content Library item.
	FileUrls pulumi.StringArrayInput
	// The ID of the Content Library the item should be created in.
	LibraryId pulumi.StringPtrInput
	// The name of the item to be created in the Content Library.
	Name pulumi.StringPtrInput
	// Type of content library item.
	Type pulumi.StringPtrInput
}

func (ContentLibraryItemState) ElementType() reflect.Type {
	return reflect.TypeOf((*contentLibraryItemState)(nil)).Elem()
}

type contentLibraryItemArgs struct {
	// A description for the item.
	Description *string `pulumi:"description"`
	// A list of files to download for the Content Library item.
	FileUrls []string `pulumi:"fileUrls"`
	// The ID of the Content Library the item should be created in.
	LibraryId string `pulumi:"libraryId"`
	// The name of the item to be created in the Content Library.
	Name *string `pulumi:"name"`
	// Type of content library item.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a ContentLibraryItem resource.
type ContentLibraryItemArgs struct {
	// A description for the item.
	Description pulumi.StringPtrInput
	// A list of files to download for the Content Library item.
	FileUrls pulumi.StringArrayInput
	// The ID of the Content Library the item should be created in.
	LibraryId pulumi.StringInput
	// The name of the item to be created in the Content Library.
	Name pulumi.StringPtrInput
	// Type of content library item.
	Type pulumi.StringPtrInput
}

func (ContentLibraryItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contentLibraryItemArgs)(nil)).Elem()
}
