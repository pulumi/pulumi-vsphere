// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContentLibraryItem struct {
	pulumi.CustomResourceState

	// A description for the content library item.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// File to import as the content library item.
	FileUrl pulumi.StringPtrOutput `pulumi:"fileUrl"`
	// The ID of the content library in which to create the item.
	LibraryId pulumi.StringOutput `pulumi:"libraryId"`
	// The name of the item to be created in the content library.
	Name pulumi.StringOutput `pulumi:"name"`
	// Virtual machine UUID to clone to content library.
	SourceUuid pulumi.StringPtrOutput `pulumi:"sourceUuid"`
	// Type of content library item.
	// One of "ovf", "iso", or "vm-template". Default: `ovf`.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewContentLibraryItem registers a new resource with the given unique name, arguments, and options.
func NewContentLibraryItem(ctx *pulumi.Context,
	name string, args *ContentLibraryItemArgs, opts ...pulumi.ResourceOption) (*ContentLibraryItem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LibraryId == nil {
		return nil, errors.New("invalid value for required argument 'LibraryId'")
	}
	var resource ContentLibraryItem
	err := ctx.RegisterResource("vsphere:index/contentLibraryItem:ContentLibraryItem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContentLibraryItem gets an existing ContentLibraryItem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContentLibraryItem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContentLibraryItemState, opts ...pulumi.ResourceOption) (*ContentLibraryItem, error) {
	var resource ContentLibraryItem
	err := ctx.ReadResource("vsphere:index/contentLibraryItem:ContentLibraryItem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContentLibraryItem resources.
type contentLibraryItemState struct {
	// A description for the content library item.
	Description *string `pulumi:"description"`
	// File to import as the content library item.
	FileUrl *string `pulumi:"fileUrl"`
	// The ID of the content library in which to create the item.
	LibraryId *string `pulumi:"libraryId"`
	// The name of the item to be created in the content library.
	Name *string `pulumi:"name"`
	// Virtual machine UUID to clone to content library.
	SourceUuid *string `pulumi:"sourceUuid"`
	// Type of content library item.
	// One of "ovf", "iso", or "vm-template". Default: `ovf`.
	Type *string `pulumi:"type"`
}

type ContentLibraryItemState struct {
	// A description for the content library item.
	Description pulumi.StringPtrInput
	// File to import as the content library item.
	FileUrl pulumi.StringPtrInput
	// The ID of the content library in which to create the item.
	LibraryId pulumi.StringPtrInput
	// The name of the item to be created in the content library.
	Name pulumi.StringPtrInput
	// Virtual machine UUID to clone to content library.
	SourceUuid pulumi.StringPtrInput
	// Type of content library item.
	// One of "ovf", "iso", or "vm-template". Default: `ovf`.
	Type pulumi.StringPtrInput
}

func (ContentLibraryItemState) ElementType() reflect.Type {
	return reflect.TypeOf((*contentLibraryItemState)(nil)).Elem()
}

type contentLibraryItemArgs struct {
	// A description for the content library item.
	Description *string `pulumi:"description"`
	// File to import as the content library item.
	FileUrl *string `pulumi:"fileUrl"`
	// The ID of the content library in which to create the item.
	LibraryId string `pulumi:"libraryId"`
	// The name of the item to be created in the content library.
	Name *string `pulumi:"name"`
	// Virtual machine UUID to clone to content library.
	SourceUuid *string `pulumi:"sourceUuid"`
	// Type of content library item.
	// One of "ovf", "iso", or "vm-template". Default: `ovf`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a ContentLibraryItem resource.
type ContentLibraryItemArgs struct {
	// A description for the content library item.
	Description pulumi.StringPtrInput
	// File to import as the content library item.
	FileUrl pulumi.StringPtrInput
	// The ID of the content library in which to create the item.
	LibraryId pulumi.StringInput
	// The name of the item to be created in the content library.
	Name pulumi.StringPtrInput
	// Virtual machine UUID to clone to content library.
	SourceUuid pulumi.StringPtrInput
	// Type of content library item.
	// One of "ovf", "iso", or "vm-template". Default: `ovf`.
	Type pulumi.StringPtrInput
}

func (ContentLibraryItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contentLibraryItemArgs)(nil)).Elem()
}

type ContentLibraryItemInput interface {
	pulumi.Input

	ToContentLibraryItemOutput() ContentLibraryItemOutput
	ToContentLibraryItemOutputWithContext(ctx context.Context) ContentLibraryItemOutput
}

func (*ContentLibraryItem) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentLibraryItem)(nil)).Elem()
}

func (i *ContentLibraryItem) ToContentLibraryItemOutput() ContentLibraryItemOutput {
	return i.ToContentLibraryItemOutputWithContext(context.Background())
}

func (i *ContentLibraryItem) ToContentLibraryItemOutputWithContext(ctx context.Context) ContentLibraryItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLibraryItemOutput)
}

// ContentLibraryItemArrayInput is an input type that accepts ContentLibraryItemArray and ContentLibraryItemArrayOutput values.
// You can construct a concrete instance of `ContentLibraryItemArrayInput` via:
//
//	ContentLibraryItemArray{ ContentLibraryItemArgs{...} }
type ContentLibraryItemArrayInput interface {
	pulumi.Input

	ToContentLibraryItemArrayOutput() ContentLibraryItemArrayOutput
	ToContentLibraryItemArrayOutputWithContext(context.Context) ContentLibraryItemArrayOutput
}

type ContentLibraryItemArray []ContentLibraryItemInput

func (ContentLibraryItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContentLibraryItem)(nil)).Elem()
}

func (i ContentLibraryItemArray) ToContentLibraryItemArrayOutput() ContentLibraryItemArrayOutput {
	return i.ToContentLibraryItemArrayOutputWithContext(context.Background())
}

func (i ContentLibraryItemArray) ToContentLibraryItemArrayOutputWithContext(ctx context.Context) ContentLibraryItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLibraryItemArrayOutput)
}

// ContentLibraryItemMapInput is an input type that accepts ContentLibraryItemMap and ContentLibraryItemMapOutput values.
// You can construct a concrete instance of `ContentLibraryItemMapInput` via:
//
//	ContentLibraryItemMap{ "key": ContentLibraryItemArgs{...} }
type ContentLibraryItemMapInput interface {
	pulumi.Input

	ToContentLibraryItemMapOutput() ContentLibraryItemMapOutput
	ToContentLibraryItemMapOutputWithContext(context.Context) ContentLibraryItemMapOutput
}

type ContentLibraryItemMap map[string]ContentLibraryItemInput

func (ContentLibraryItemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContentLibraryItem)(nil)).Elem()
}

func (i ContentLibraryItemMap) ToContentLibraryItemMapOutput() ContentLibraryItemMapOutput {
	return i.ToContentLibraryItemMapOutputWithContext(context.Background())
}

func (i ContentLibraryItemMap) ToContentLibraryItemMapOutputWithContext(ctx context.Context) ContentLibraryItemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLibraryItemMapOutput)
}

type ContentLibraryItemOutput struct{ *pulumi.OutputState }

func (ContentLibraryItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentLibraryItem)(nil)).Elem()
}

func (o ContentLibraryItemOutput) ToContentLibraryItemOutput() ContentLibraryItemOutput {
	return o
}

func (o ContentLibraryItemOutput) ToContentLibraryItemOutputWithContext(ctx context.Context) ContentLibraryItemOutput {
	return o
}

// A description for the content library item.
func (o ContentLibraryItemOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentLibraryItem) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// File to import as the content library item.
func (o ContentLibraryItemOutput) FileUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentLibraryItem) pulumi.StringPtrOutput { return v.FileUrl }).(pulumi.StringPtrOutput)
}

// The ID of the content library in which to create the item.
func (o ContentLibraryItemOutput) LibraryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContentLibraryItem) pulumi.StringOutput { return v.LibraryId }).(pulumi.StringOutput)
}

// The name of the item to be created in the content library.
func (o ContentLibraryItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContentLibraryItem) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Virtual machine UUID to clone to content library.
func (o ContentLibraryItemOutput) SourceUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentLibraryItem) pulumi.StringPtrOutput { return v.SourceUuid }).(pulumi.StringPtrOutput)
}

// Type of content library item.
// One of "ovf", "iso", or "vm-template". Default: `ovf`.
func (o ContentLibraryItemOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentLibraryItem) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type ContentLibraryItemArrayOutput struct{ *pulumi.OutputState }

func (ContentLibraryItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContentLibraryItem)(nil)).Elem()
}

func (o ContentLibraryItemArrayOutput) ToContentLibraryItemArrayOutput() ContentLibraryItemArrayOutput {
	return o
}

func (o ContentLibraryItemArrayOutput) ToContentLibraryItemArrayOutputWithContext(ctx context.Context) ContentLibraryItemArrayOutput {
	return o
}

func (o ContentLibraryItemArrayOutput) Index(i pulumi.IntInput) ContentLibraryItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContentLibraryItem {
		return vs[0].([]*ContentLibraryItem)[vs[1].(int)]
	}).(ContentLibraryItemOutput)
}

type ContentLibraryItemMapOutput struct{ *pulumi.OutputState }

func (ContentLibraryItemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContentLibraryItem)(nil)).Elem()
}

func (o ContentLibraryItemMapOutput) ToContentLibraryItemMapOutput() ContentLibraryItemMapOutput {
	return o
}

func (o ContentLibraryItemMapOutput) ToContentLibraryItemMapOutputWithContext(ctx context.Context) ContentLibraryItemMapOutput {
	return o
}

func (o ContentLibraryItemMapOutput) MapIndex(k pulumi.StringInput) ContentLibraryItemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContentLibraryItem {
		return vs[0].(map[string]*ContentLibraryItem)[vs[1].(string)]
	}).(ContentLibraryItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContentLibraryItemInput)(nil)).Elem(), &ContentLibraryItem{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentLibraryItemArrayInput)(nil)).Elem(), ContentLibraryItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentLibraryItemMapInput)(nil)).Elem(), ContentLibraryItemMap{})
	pulumi.RegisterOutputType(ContentLibraryItemOutput{})
	pulumi.RegisterOutputType(ContentLibraryItemArrayOutput{})
	pulumi.RegisterOutputType(ContentLibraryItemMapOutput{})
}
