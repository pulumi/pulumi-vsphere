// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContentLibraryItem struct {
	pulumi.CustomResourceState

	// A description for the item.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// File to import into the Content Library item. OVFs and
	// OVAs will be parsed and associated files will also be imported.
	FileUrl pulumi.StringPtrOutput `pulumi:"fileUrl"`
	// The ID of the Content Library the item should be created in.
	LibraryId pulumi.StringOutput `pulumi:"libraryId"`
	// The name of the item to be created in the Content Library.
	Name pulumi.StringOutput `pulumi:"name"`
	// Virtual machine UUID to clone to Content Library.
	SourceUuid pulumi.StringPtrOutput `pulumi:"sourceUuid"`
	// Type of content library item.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewContentLibraryItem registers a new resource with the given unique name, arguments, and options.
func NewContentLibraryItem(ctx *pulumi.Context,
	name string, args *ContentLibraryItemArgs, opts ...pulumi.ResourceOption) (*ContentLibraryItem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LibraryId == nil {
		return nil, errors.New("invalid value for required argument 'LibraryId'")
	}
	var resource ContentLibraryItem
	err := ctx.RegisterResource("vsphere:index/contentLibraryItem:ContentLibraryItem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContentLibraryItem gets an existing ContentLibraryItem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContentLibraryItem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContentLibraryItemState, opts ...pulumi.ResourceOption) (*ContentLibraryItem, error) {
	var resource ContentLibraryItem
	err := ctx.ReadResource("vsphere:index/contentLibraryItem:ContentLibraryItem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContentLibraryItem resources.
type contentLibraryItemState struct {
	// A description for the item.
	Description *string `pulumi:"description"`
	// File to import into the Content Library item. OVFs and
	// OVAs will be parsed and associated files will also be imported.
	FileUrl *string `pulumi:"fileUrl"`
	// The ID of the Content Library the item should be created in.
	LibraryId *string `pulumi:"libraryId"`
	// The name of the item to be created in the Content Library.
	Name *string `pulumi:"name"`
	// Virtual machine UUID to clone to Content Library.
	SourceUuid *string `pulumi:"sourceUuid"`
	// Type of content library item.
	Type *string `pulumi:"type"`
}

type ContentLibraryItemState struct {
	// A description for the item.
	Description pulumi.StringPtrInput
	// File to import into the Content Library item. OVFs and
	// OVAs will be parsed and associated files will also be imported.
	FileUrl pulumi.StringPtrInput
	// The ID of the Content Library the item should be created in.
	LibraryId pulumi.StringPtrInput
	// The name of the item to be created in the Content Library.
	Name pulumi.StringPtrInput
	// Virtual machine UUID to clone to Content Library.
	SourceUuid pulumi.StringPtrInput
	// Type of content library item.
	Type pulumi.StringPtrInput
}

func (ContentLibraryItemState) ElementType() reflect.Type {
	return reflect.TypeOf((*contentLibraryItemState)(nil)).Elem()
}

type contentLibraryItemArgs struct {
	// A description for the item.
	Description *string `pulumi:"description"`
	// File to import into the Content Library item. OVFs and
	// OVAs will be parsed and associated files will also be imported.
	FileUrl *string `pulumi:"fileUrl"`
	// The ID of the Content Library the item should be created in.
	LibraryId string `pulumi:"libraryId"`
	// The name of the item to be created in the Content Library.
	Name *string `pulumi:"name"`
	// Virtual machine UUID to clone to Content Library.
	SourceUuid *string `pulumi:"sourceUuid"`
	// Type of content library item.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a ContentLibraryItem resource.
type ContentLibraryItemArgs struct {
	// A description for the item.
	Description pulumi.StringPtrInput
	// File to import into the Content Library item. OVFs and
	// OVAs will be parsed and associated files will also be imported.
	FileUrl pulumi.StringPtrInput
	// The ID of the Content Library the item should be created in.
	LibraryId pulumi.StringInput
	// The name of the item to be created in the Content Library.
	Name pulumi.StringPtrInput
	// Virtual machine UUID to clone to Content Library.
	SourceUuid pulumi.StringPtrInput
	// Type of content library item.
	Type pulumi.StringPtrInput
}

func (ContentLibraryItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contentLibraryItemArgs)(nil)).Elem()
}

type ContentLibraryItemInput interface {
	pulumi.Input

	ToContentLibraryItemOutput() ContentLibraryItemOutput
	ToContentLibraryItemOutputWithContext(ctx context.Context) ContentLibraryItemOutput
}

func (*ContentLibraryItem) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentLibraryItem)(nil))
}

func (i *ContentLibraryItem) ToContentLibraryItemOutput() ContentLibraryItemOutput {
	return i.ToContentLibraryItemOutputWithContext(context.Background())
}

func (i *ContentLibraryItem) ToContentLibraryItemOutputWithContext(ctx context.Context) ContentLibraryItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLibraryItemOutput)
}

func (i *ContentLibraryItem) ToContentLibraryItemPtrOutput() ContentLibraryItemPtrOutput {
	return i.ToContentLibraryItemPtrOutputWithContext(context.Background())
}

func (i *ContentLibraryItem) ToContentLibraryItemPtrOutputWithContext(ctx context.Context) ContentLibraryItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLibraryItemPtrOutput)
}

type ContentLibraryItemPtrInput interface {
	pulumi.Input

	ToContentLibraryItemPtrOutput() ContentLibraryItemPtrOutput
	ToContentLibraryItemPtrOutputWithContext(ctx context.Context) ContentLibraryItemPtrOutput
}

type contentLibraryItemPtrType ContentLibraryItemArgs

func (*contentLibraryItemPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentLibraryItem)(nil))
}

func (i *contentLibraryItemPtrType) ToContentLibraryItemPtrOutput() ContentLibraryItemPtrOutput {
	return i.ToContentLibraryItemPtrOutputWithContext(context.Background())
}

func (i *contentLibraryItemPtrType) ToContentLibraryItemPtrOutputWithContext(ctx context.Context) ContentLibraryItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLibraryItemPtrOutput)
}

// ContentLibraryItemArrayInput is an input type that accepts ContentLibraryItemArray and ContentLibraryItemArrayOutput values.
// You can construct a concrete instance of `ContentLibraryItemArrayInput` via:
//
//          ContentLibraryItemArray{ ContentLibraryItemArgs{...} }
type ContentLibraryItemArrayInput interface {
	pulumi.Input

	ToContentLibraryItemArrayOutput() ContentLibraryItemArrayOutput
	ToContentLibraryItemArrayOutputWithContext(context.Context) ContentLibraryItemArrayOutput
}

type ContentLibraryItemArray []ContentLibraryItemInput

func (ContentLibraryItemArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ContentLibraryItem)(nil))
}

func (i ContentLibraryItemArray) ToContentLibraryItemArrayOutput() ContentLibraryItemArrayOutput {
	return i.ToContentLibraryItemArrayOutputWithContext(context.Background())
}

func (i ContentLibraryItemArray) ToContentLibraryItemArrayOutputWithContext(ctx context.Context) ContentLibraryItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLibraryItemArrayOutput)
}

// ContentLibraryItemMapInput is an input type that accepts ContentLibraryItemMap and ContentLibraryItemMapOutput values.
// You can construct a concrete instance of `ContentLibraryItemMapInput` via:
//
//          ContentLibraryItemMap{ "key": ContentLibraryItemArgs{...} }
type ContentLibraryItemMapInput interface {
	pulumi.Input

	ToContentLibraryItemMapOutput() ContentLibraryItemMapOutput
	ToContentLibraryItemMapOutputWithContext(context.Context) ContentLibraryItemMapOutput
}

type ContentLibraryItemMap map[string]ContentLibraryItemInput

func (ContentLibraryItemMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ContentLibraryItem)(nil))
}

func (i ContentLibraryItemMap) ToContentLibraryItemMapOutput() ContentLibraryItemMapOutput {
	return i.ToContentLibraryItemMapOutputWithContext(context.Background())
}

func (i ContentLibraryItemMap) ToContentLibraryItemMapOutputWithContext(ctx context.Context) ContentLibraryItemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLibraryItemMapOutput)
}

type ContentLibraryItemOutput struct {
	*pulumi.OutputState
}

func (ContentLibraryItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentLibraryItem)(nil))
}

func (o ContentLibraryItemOutput) ToContentLibraryItemOutput() ContentLibraryItemOutput {
	return o
}

func (o ContentLibraryItemOutput) ToContentLibraryItemOutputWithContext(ctx context.Context) ContentLibraryItemOutput {
	return o
}

func (o ContentLibraryItemOutput) ToContentLibraryItemPtrOutput() ContentLibraryItemPtrOutput {
	return o.ToContentLibraryItemPtrOutputWithContext(context.Background())
}

func (o ContentLibraryItemOutput) ToContentLibraryItemPtrOutputWithContext(ctx context.Context) ContentLibraryItemPtrOutput {
	return o.ApplyT(func(v ContentLibraryItem) *ContentLibraryItem {
		return &v
	}).(ContentLibraryItemPtrOutput)
}

type ContentLibraryItemPtrOutput struct {
	*pulumi.OutputState
}

func (ContentLibraryItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentLibraryItem)(nil))
}

func (o ContentLibraryItemPtrOutput) ToContentLibraryItemPtrOutput() ContentLibraryItemPtrOutput {
	return o
}

func (o ContentLibraryItemPtrOutput) ToContentLibraryItemPtrOutputWithContext(ctx context.Context) ContentLibraryItemPtrOutput {
	return o
}

type ContentLibraryItemArrayOutput struct{ *pulumi.OutputState }

func (ContentLibraryItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentLibraryItem)(nil))
}

func (o ContentLibraryItemArrayOutput) ToContentLibraryItemArrayOutput() ContentLibraryItemArrayOutput {
	return o
}

func (o ContentLibraryItemArrayOutput) ToContentLibraryItemArrayOutputWithContext(ctx context.Context) ContentLibraryItemArrayOutput {
	return o
}

func (o ContentLibraryItemArrayOutput) Index(i pulumi.IntInput) ContentLibraryItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentLibraryItem {
		return vs[0].([]ContentLibraryItem)[vs[1].(int)]
	}).(ContentLibraryItemOutput)
}

type ContentLibraryItemMapOutput struct{ *pulumi.OutputState }

func (ContentLibraryItemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ContentLibraryItem)(nil))
}

func (o ContentLibraryItemMapOutput) ToContentLibraryItemMapOutput() ContentLibraryItemMapOutput {
	return o
}

func (o ContentLibraryItemMapOutput) ToContentLibraryItemMapOutputWithContext(ctx context.Context) ContentLibraryItemMapOutput {
	return o
}

func (o ContentLibraryItemMapOutput) MapIndex(k pulumi.StringInput) ContentLibraryItemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ContentLibraryItem {
		return vs[0].(map[string]ContentLibraryItem)[vs[1].(string)]
	}).(ContentLibraryItemOutput)
}

func init() {
	pulumi.RegisterOutputType(ContentLibraryItemOutput{})
	pulumi.RegisterOutputType(ContentLibraryItemPtrOutput{})
	pulumi.RegisterOutputType(ContentLibraryItemArrayOutput{})
	pulumi.RegisterOutputType(ContentLibraryItemMapOutput{})
}
