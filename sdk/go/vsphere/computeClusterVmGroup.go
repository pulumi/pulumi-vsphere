// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ComputeClusterVmGroup` resource can be used to manage groups of
// virtual machines in a cluster, either created by the
// [`ComputeCluster`][tf-vsphere-cluster-resource] resource or looked up
// by the [`ComputeCluster`][tf-vsphere-cluster-data-source] data source.
//
// [tf-vsphere-cluster-resource]: /docs/providers/vsphere/r/compute_cluster.html
// [tf-vsphere-cluster-data-source]: /docs/providers/vsphere/d/compute_cluster.html
//
// This resource mainly serves as an input to the
// [`ComputeClusterVmDependencyRule`][tf-vsphere-cluster-vm-dependency-rule-resource]
// and
// [`ComputeClusterVmHostRule`][tf-vsphere-cluster-vm-host-rule-resource]
// resources. See the individual resource documentation pages for more information.
//
// [tf-vsphere-cluster-vm-dependency-rule-resource]: /docs/providers/vsphere/r/compute_cluster_vm_dependency_rule.html
// [tf-vsphere-cluster-vm-host-rule-resource]: /docs/providers/vsphere/r/compute_cluster_vm_host_rule.html
//
// > **NOTE:** This resource requires vCenter and is not available on direct ESXi
// connections.
//
// ## Example Usage
//
// The example below creates two virtual machines in a cluster using the
// `VirtualMachine` resource, creating the
// virtual machine in the cluster looked up by the
// `ComputeCluster` data source. It
// then creates a group from these two virtual machines.
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// datacenter, err := vsphere.LookupDatacenter(ctx, &vsphere.LookupDatacenterArgs{
// Name: pulumi.StringRef("dc-01"),
// }, nil);
// if err != nil {
// return err
// }
// datastore, err := vsphere.GetDatastore(ctx, &vsphere.GetDatastoreArgs{
// Name: "datastore1",
// DatacenterId: pulumi.StringRef(datacenter.Id),
// }, nil);
// if err != nil {
// return err
// }
// cluster, err := vsphere.LookupComputeCluster(ctx, &vsphere.LookupComputeClusterArgs{
// Name: "cluster-01",
// DatacenterId: pulumi.StringRef(datacenter.Id),
// }, nil);
// if err != nil {
// return err
// }
// network, err := vsphere.GetNetwork(ctx, &vsphere.GetNetworkArgs{
// Name: "network1",
// DatacenterId: pulumi.StringRef(datacenter.Id),
// }, nil);
// if err != nil {
// return err
// }
// var vm []*vsphere.VirtualMachine
//
//	for index := 0; index < 2; index++ {
//	    key0 := index
//	    val0 := index
//
// __res, err := vsphere.NewVirtualMachine(ctx, fmt.Sprintf("vm-%v", key0), &vsphere.VirtualMachineArgs{
// Name: pulumi.Sprintf("test-%v", val0),
// ResourcePoolId: pulumi.String(cluster.ResourcePoolId),
// DatastoreId: pulumi.String(datastore.Id),
// NumCpus: pulumi.Int(2),
// Memory: pulumi.Int(2048),
// GuestId: pulumi.String("otherLinux64Guest"),
// NetworkInterfaces: vsphere.VirtualMachineNetworkInterfaceArray{
// &vsphere.VirtualMachineNetworkInterfaceArgs{
// NetworkId: pulumi.String(network.Id),
// },
// },
// Disks: vsphere.VirtualMachineDiskArray{
// &vsphere.VirtualMachineDiskArgs{
// Label: pulumi.String("disk0"),
// Size: pulumi.Int(20),
// },
// },
// })
// if err != nil {
// return err
// }
// vm = append(vm, __res)
// }
// _, err = vsphere.NewComputeClusterVmGroup(ctx, "cluster_vm_group", &vsphere.ComputeClusterVmGroupArgs{
// Name: pulumi.String("test-cluster-vm-group"),
// ComputeClusterId: pulumi.String(cluster.Id),
// VirtualMachineIds: pulumi.StringArray{
// pulumi.String(%!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:42,27-35)),
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// # An existing group can be imported into this resource by
//
// supplying both the path to the cluster, and the name of the VM group. If the
//
// name or cluster is not found, or if the group is of a different type, an error
//
// will be returned. An example is below:
//
// ```sh
// $ pulumi import vsphere:index/computeClusterVmGroup:ComputeClusterVmGroup cluster_vm_group \
// ```
//
//	'{"compute_cluster_path": "/dc1/host/cluster1", \
//
//	"name": "pulumi-test-cluster-vm-group"}'
//
// [docs-import]: https://developer.hashicorp.com/terraform/cli/import
type ComputeClusterVmGroup struct {
	pulumi.CustomResourceState

	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId pulumi.StringOutput `pulumi:"computeClusterId"`
	// The name of the VM group. This must be unique in the
	// cluster. Forces a new resource if changed.
	Name pulumi.StringOutput `pulumi:"name"`
	// The UUIDs of the virtual machines in this
	// group.
	//
	// > **NOTE:** The namespace for cluster names on this resource (defined by the
	// `name` argument) is shared with the
	// `ComputeClusterHostGroup`
	// resource. Make sure your names are unique across both resources.
	//
	// > **NOTE:** To update a existing VM group, you must first import the group with `import` command in
	// import section. When importing a VM group, validate that all virtual machines that
	// need to be in the group are included in the `virtualMachineIds`; otherwise, any virtual machines
	// that are not in `virtualMachineIds` the included will be removed from the group.
	VirtualMachineIds pulumi.StringArrayOutput `pulumi:"virtualMachineIds"`
}

// NewComputeClusterVmGroup registers a new resource with the given unique name, arguments, and options.
func NewComputeClusterVmGroup(ctx *pulumi.Context,
	name string, args *ComputeClusterVmGroupArgs, opts ...pulumi.ResourceOption) (*ComputeClusterVmGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComputeClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ComputeClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComputeClusterVmGroup
	err := ctx.RegisterResource("vsphere:index/computeClusterVmGroup:ComputeClusterVmGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeClusterVmGroup gets an existing ComputeClusterVmGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeClusterVmGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeClusterVmGroupState, opts ...pulumi.ResourceOption) (*ComputeClusterVmGroup, error) {
	var resource ComputeClusterVmGroup
	err := ctx.ReadResource("vsphere:index/computeClusterVmGroup:ComputeClusterVmGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeClusterVmGroup resources.
type computeClusterVmGroupState struct {
	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId *string `pulumi:"computeClusterId"`
	// The name of the VM group. This must be unique in the
	// cluster. Forces a new resource if changed.
	Name *string `pulumi:"name"`
	// The UUIDs of the virtual machines in this
	// group.
	//
	// > **NOTE:** The namespace for cluster names on this resource (defined by the
	// `name` argument) is shared with the
	// `ComputeClusterHostGroup`
	// resource. Make sure your names are unique across both resources.
	//
	// > **NOTE:** To update a existing VM group, you must first import the group with `import` command in
	// import section. When importing a VM group, validate that all virtual machines that
	// need to be in the group are included in the `virtualMachineIds`; otherwise, any virtual machines
	// that are not in `virtualMachineIds` the included will be removed from the group.
	VirtualMachineIds []string `pulumi:"virtualMachineIds"`
}

type ComputeClusterVmGroupState struct {
	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId pulumi.StringPtrInput
	// The name of the VM group. This must be unique in the
	// cluster. Forces a new resource if changed.
	Name pulumi.StringPtrInput
	// The UUIDs of the virtual machines in this
	// group.
	//
	// > **NOTE:** The namespace for cluster names on this resource (defined by the
	// `name` argument) is shared with the
	// `ComputeClusterHostGroup`
	// resource. Make sure your names are unique across both resources.
	//
	// > **NOTE:** To update a existing VM group, you must first import the group with `import` command in
	// import section. When importing a VM group, validate that all virtual machines that
	// need to be in the group are included in the `virtualMachineIds`; otherwise, any virtual machines
	// that are not in `virtualMachineIds` the included will be removed from the group.
	VirtualMachineIds pulumi.StringArrayInput
}

func (ComputeClusterVmGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeClusterVmGroupState)(nil)).Elem()
}

type computeClusterVmGroupArgs struct {
	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId string `pulumi:"computeClusterId"`
	// The name of the VM group. This must be unique in the
	// cluster. Forces a new resource if changed.
	Name *string `pulumi:"name"`
	// The UUIDs of the virtual machines in this
	// group.
	//
	// > **NOTE:** The namespace for cluster names on this resource (defined by the
	// `name` argument) is shared with the
	// `ComputeClusterHostGroup`
	// resource. Make sure your names are unique across both resources.
	//
	// > **NOTE:** To update a existing VM group, you must first import the group with `import` command in
	// import section. When importing a VM group, validate that all virtual machines that
	// need to be in the group are included in the `virtualMachineIds`; otherwise, any virtual machines
	// that are not in `virtualMachineIds` the included will be removed from the group.
	VirtualMachineIds []string `pulumi:"virtualMachineIds"`
}

// The set of arguments for constructing a ComputeClusterVmGroup resource.
type ComputeClusterVmGroupArgs struct {
	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	ComputeClusterId pulumi.StringInput
	// The name of the VM group. This must be unique in the
	// cluster. Forces a new resource if changed.
	Name pulumi.StringPtrInput
	// The UUIDs of the virtual machines in this
	// group.
	//
	// > **NOTE:** The namespace for cluster names on this resource (defined by the
	// `name` argument) is shared with the
	// `ComputeClusterHostGroup`
	// resource. Make sure your names are unique across both resources.
	//
	// > **NOTE:** To update a existing VM group, you must first import the group with `import` command in
	// import section. When importing a VM group, validate that all virtual machines that
	// need to be in the group are included in the `virtualMachineIds`; otherwise, any virtual machines
	// that are not in `virtualMachineIds` the included will be removed from the group.
	VirtualMachineIds pulumi.StringArrayInput
}

func (ComputeClusterVmGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeClusterVmGroupArgs)(nil)).Elem()
}

type ComputeClusterVmGroupInput interface {
	pulumi.Input

	ToComputeClusterVmGroupOutput() ComputeClusterVmGroupOutput
	ToComputeClusterVmGroupOutputWithContext(ctx context.Context) ComputeClusterVmGroupOutput
}

func (*ComputeClusterVmGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeClusterVmGroup)(nil)).Elem()
}

func (i *ComputeClusterVmGroup) ToComputeClusterVmGroupOutput() ComputeClusterVmGroupOutput {
	return i.ToComputeClusterVmGroupOutputWithContext(context.Background())
}

func (i *ComputeClusterVmGroup) ToComputeClusterVmGroupOutputWithContext(ctx context.Context) ComputeClusterVmGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterVmGroupOutput)
}

// ComputeClusterVmGroupArrayInput is an input type that accepts ComputeClusterVmGroupArray and ComputeClusterVmGroupArrayOutput values.
// You can construct a concrete instance of `ComputeClusterVmGroupArrayInput` via:
//
//	ComputeClusterVmGroupArray{ ComputeClusterVmGroupArgs{...} }
type ComputeClusterVmGroupArrayInput interface {
	pulumi.Input

	ToComputeClusterVmGroupArrayOutput() ComputeClusterVmGroupArrayOutput
	ToComputeClusterVmGroupArrayOutputWithContext(context.Context) ComputeClusterVmGroupArrayOutput
}

type ComputeClusterVmGroupArray []ComputeClusterVmGroupInput

func (ComputeClusterVmGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeClusterVmGroup)(nil)).Elem()
}

func (i ComputeClusterVmGroupArray) ToComputeClusterVmGroupArrayOutput() ComputeClusterVmGroupArrayOutput {
	return i.ToComputeClusterVmGroupArrayOutputWithContext(context.Background())
}

func (i ComputeClusterVmGroupArray) ToComputeClusterVmGroupArrayOutputWithContext(ctx context.Context) ComputeClusterVmGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterVmGroupArrayOutput)
}

// ComputeClusterVmGroupMapInput is an input type that accepts ComputeClusterVmGroupMap and ComputeClusterVmGroupMapOutput values.
// You can construct a concrete instance of `ComputeClusterVmGroupMapInput` via:
//
//	ComputeClusterVmGroupMap{ "key": ComputeClusterVmGroupArgs{...} }
type ComputeClusterVmGroupMapInput interface {
	pulumi.Input

	ToComputeClusterVmGroupMapOutput() ComputeClusterVmGroupMapOutput
	ToComputeClusterVmGroupMapOutputWithContext(context.Context) ComputeClusterVmGroupMapOutput
}

type ComputeClusterVmGroupMap map[string]ComputeClusterVmGroupInput

func (ComputeClusterVmGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeClusterVmGroup)(nil)).Elem()
}

func (i ComputeClusterVmGroupMap) ToComputeClusterVmGroupMapOutput() ComputeClusterVmGroupMapOutput {
	return i.ToComputeClusterVmGroupMapOutputWithContext(context.Background())
}

func (i ComputeClusterVmGroupMap) ToComputeClusterVmGroupMapOutputWithContext(ctx context.Context) ComputeClusterVmGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterVmGroupMapOutput)
}

type ComputeClusterVmGroupOutput struct{ *pulumi.OutputState }

func (ComputeClusterVmGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeClusterVmGroup)(nil)).Elem()
}

func (o ComputeClusterVmGroupOutput) ToComputeClusterVmGroupOutput() ComputeClusterVmGroupOutput {
	return o
}

func (o ComputeClusterVmGroupOutput) ToComputeClusterVmGroupOutputWithContext(ctx context.Context) ComputeClusterVmGroupOutput {
	return o
}

// The managed object reference
// ID of the cluster to put the group in.  Forces a new
// resource if changed.
func (o ComputeClusterVmGroupOutput) ComputeClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeClusterVmGroup) pulumi.StringOutput { return v.ComputeClusterId }).(pulumi.StringOutput)
}

// The name of the VM group. This must be unique in the
// cluster. Forces a new resource if changed.
func (o ComputeClusterVmGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeClusterVmGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The UUIDs of the virtual machines in this
// group.
//
// > **NOTE:** The namespace for cluster names on this resource (defined by the
// `name` argument) is shared with the
// `ComputeClusterHostGroup`
// resource. Make sure your names are unique across both resources.
//
// > **NOTE:** To update a existing VM group, you must first import the group with `import` command in
// import section. When importing a VM group, validate that all virtual machines that
// need to be in the group are included in the `virtualMachineIds`; otherwise, any virtual machines
// that are not in `virtualMachineIds` the included will be removed from the group.
func (o ComputeClusterVmGroupOutput) VirtualMachineIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeClusterVmGroup) pulumi.StringArrayOutput { return v.VirtualMachineIds }).(pulumi.StringArrayOutput)
}

type ComputeClusterVmGroupArrayOutput struct{ *pulumi.OutputState }

func (ComputeClusterVmGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeClusterVmGroup)(nil)).Elem()
}

func (o ComputeClusterVmGroupArrayOutput) ToComputeClusterVmGroupArrayOutput() ComputeClusterVmGroupArrayOutput {
	return o
}

func (o ComputeClusterVmGroupArrayOutput) ToComputeClusterVmGroupArrayOutputWithContext(ctx context.Context) ComputeClusterVmGroupArrayOutput {
	return o
}

func (o ComputeClusterVmGroupArrayOutput) Index(i pulumi.IntInput) ComputeClusterVmGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComputeClusterVmGroup {
		return vs[0].([]*ComputeClusterVmGroup)[vs[1].(int)]
	}).(ComputeClusterVmGroupOutput)
}

type ComputeClusterVmGroupMapOutput struct{ *pulumi.OutputState }

func (ComputeClusterVmGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeClusterVmGroup)(nil)).Elem()
}

func (o ComputeClusterVmGroupMapOutput) ToComputeClusterVmGroupMapOutput() ComputeClusterVmGroupMapOutput {
	return o
}

func (o ComputeClusterVmGroupMapOutput) ToComputeClusterVmGroupMapOutputWithContext(ctx context.Context) ComputeClusterVmGroupMapOutput {
	return o
}

func (o ComputeClusterVmGroupMapOutput) MapIndex(k pulumi.StringInput) ComputeClusterVmGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComputeClusterVmGroup {
		return vs[0].(map[string]*ComputeClusterVmGroup)[vs[1].(string)]
	}).(ComputeClusterVmGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterVmGroupInput)(nil)).Elem(), &ComputeClusterVmGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterVmGroupArrayInput)(nil)).Elem(), ComputeClusterVmGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterVmGroupMapInput)(nil)).Elem(), ComputeClusterVmGroupMap{})
	pulumi.RegisterOutputType(ComputeClusterVmGroupOutput{})
	pulumi.RegisterOutputType(ComputeClusterVmGroupArrayOutput{})
	pulumi.RegisterOutputType(ComputeClusterVmGroupMapOutput{})
}
