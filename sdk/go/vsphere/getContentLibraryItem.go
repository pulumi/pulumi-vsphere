// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ContentLibraryItem` data source can be used to discover the ID
// of a content library item.
//
// > **NOTE:** This resource requires vCenter and is not available on direct ESXi
// host connections.
func LookupContentLibraryItem(ctx *pulumi.Context, args *LookupContentLibraryItemArgs, opts ...pulumi.InvokeOption) (*LookupContentLibraryItemResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupContentLibraryItemResult
	err := ctx.Invoke("vsphere:index/getContentLibraryItem:getContentLibraryItem", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContentLibraryItem.
type LookupContentLibraryItemArgs struct {
	// The ID of the content library in which the item
	// exists.
	LibraryId string `pulumi:"libraryId"`
	// The name of the content library item.
	Name string `pulumi:"name"`
	// The type for the content library item. One of `ovf`,
	// `vm-template`, or `iso`
	Type string `pulumi:"type"`
}

// A collection of values returned by getContentLibraryItem.
type LookupContentLibraryItemResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	LibraryId string `pulumi:"libraryId"`
	Name      string `pulumi:"name"`
	Type      string `pulumi:"type"`
}

func LookupContentLibraryItemOutput(ctx *pulumi.Context, args LookupContentLibraryItemOutputArgs, opts ...pulumi.InvokeOption) LookupContentLibraryItemResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupContentLibraryItemResultOutput, error) {
			args := v.(LookupContentLibraryItemArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vsphere:index/getContentLibraryItem:getContentLibraryItem", args, LookupContentLibraryItemResultOutput{}, options).(LookupContentLibraryItemResultOutput), nil
		}).(LookupContentLibraryItemResultOutput)
}

// A collection of arguments for invoking getContentLibraryItem.
type LookupContentLibraryItemOutputArgs struct {
	// The ID of the content library in which the item
	// exists.
	LibraryId pulumi.StringInput `pulumi:"libraryId"`
	// The name of the content library item.
	Name pulumi.StringInput `pulumi:"name"`
	// The type for the content library item. One of `ovf`,
	// `vm-template`, or `iso`
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupContentLibraryItemOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContentLibraryItemArgs)(nil)).Elem()
}

// A collection of values returned by getContentLibraryItem.
type LookupContentLibraryItemResultOutput struct{ *pulumi.OutputState }

func (LookupContentLibraryItemResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContentLibraryItemResult)(nil)).Elem()
}

func (o LookupContentLibraryItemResultOutput) ToLookupContentLibraryItemResultOutput() LookupContentLibraryItemResultOutput {
	return o
}

func (o LookupContentLibraryItemResultOutput) ToLookupContentLibraryItemResultOutputWithContext(ctx context.Context) LookupContentLibraryItemResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupContentLibraryItemResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContentLibraryItemResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupContentLibraryItemResultOutput) LibraryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContentLibraryItemResult) string { return v.LibraryId }).(pulumi.StringOutput)
}

func (o LookupContentLibraryItemResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContentLibraryItemResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupContentLibraryItemResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContentLibraryItemResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupContentLibraryItemResultOutput{})
}
