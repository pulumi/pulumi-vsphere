# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from . import utilities

class ResourcePool(pulumi.CustomResource):
    """
    The `vsphere_resource_pool` resource can be used to create and manage
    resource pools in standalone hosts or on compute clusters.
    
    For more information on vSphere resource pools, see [this
    page][ref-vsphere-resource_pools].
    
    [ref-vsphere-resource_pools]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.resmgmt.doc/GUID-60077B40-66FF-4625-934A-641703ED7601.html
    """
    def __init__(__self__, __name__, __opts__=None, cpu_expandable=None, cpu_limit=None, cpu_reservation=None, cpu_share_level=None, cpu_shares=None, custom_attributes=None, memory_expandable=None, memory_limit=None, memory_reservation=None, memory_share_level=None, memory_shares=None, name=None, parent_resource_pool_id=None, tags=None):
        """Create a ResourcePool resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['cpuExpandable'] = cpu_expandable

        __props__['cpuLimit'] = cpu_limit

        __props__['cpuReservation'] = cpu_reservation

        __props__['cpuShareLevel'] = cpu_share_level

        __props__['cpuShares'] = cpu_shares

        __props__['customAttributes'] = custom_attributes

        __props__['memoryExpandable'] = memory_expandable

        __props__['memoryLimit'] = memory_limit

        __props__['memoryReservation'] = memory_reservation

        __props__['memoryShareLevel'] = memory_share_level

        __props__['memoryShares'] = memory_shares

        __props__['name'] = name

        if not parent_resource_pool_id:
            raise TypeError('Missing required property parent_resource_pool_id')
        __props__['parentResourcePoolId'] = parent_resource_pool_id

        __props__['tags'] = tags

        super(ResourcePool, __self__).__init__(
            'vsphere:index/resourcePool:ResourcePool',
            __name__,
            __props__,
            __opts__)

