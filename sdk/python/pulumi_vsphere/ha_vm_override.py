# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from . import utilities, tables

class HaVmOverride(pulumi.CustomResource):
    """
    The `vsphere_ha_vm_override` resource can be used to add an override for
    vSphere HA settings on a cluster for a specific virtual machine. With this
    resource, one can control specific HA settings so that they are different than
    the cluster default, accommodating the needs of that specific virtual machine,
    while not affecting the rest of the cluster.
    
    For more information on vSphere HA, see [this page][ref-vsphere-ha-clusters].
    
    [ref-vsphere-ha-clusters]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.avail.doc/GUID-5432CA24-14F1-44E3-87FB-61D937831CF6.html
    
    ~> **NOTE:** This resource requires vCenter and is not available on direct ESXi
    connections.
    """
    def __init__(__self__, __name__, __opts__=None, compute_cluster_id=None, ha_datastore_apd_recovery_action=None, ha_datastore_apd_response=None, ha_datastore_apd_response_delay=None, ha_datastore_pdl_response=None, ha_host_isolation_response=None, ha_vm_failure_interval=None, ha_vm_maximum_failure_window=None, ha_vm_maximum_resets=None, ha_vm_minimum_uptime=None, ha_vm_monitoring=None, ha_vm_monitoring_use_cluster_defaults=None, ha_vm_restart_priority=None, ha_vm_restart_timeout=None, virtual_machine_id=None):
        """Create a HaVmOverride resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not compute_cluster_id:
            raise TypeError('Missing required property compute_cluster_id')
        __props__['compute_cluster_id'] = compute_cluster_id

        __props__['ha_datastore_apd_recovery_action'] = ha_datastore_apd_recovery_action

        __props__['ha_datastore_apd_response'] = ha_datastore_apd_response

        __props__['ha_datastore_apd_response_delay'] = ha_datastore_apd_response_delay

        __props__['ha_datastore_pdl_response'] = ha_datastore_pdl_response

        __props__['ha_host_isolation_response'] = ha_host_isolation_response

        __props__['ha_vm_failure_interval'] = ha_vm_failure_interval

        __props__['ha_vm_maximum_failure_window'] = ha_vm_maximum_failure_window

        __props__['ha_vm_maximum_resets'] = ha_vm_maximum_resets

        __props__['ha_vm_minimum_uptime'] = ha_vm_minimum_uptime

        __props__['ha_vm_monitoring'] = ha_vm_monitoring

        __props__['ha_vm_monitoring_use_cluster_defaults'] = ha_vm_monitoring_use_cluster_defaults

        __props__['ha_vm_restart_priority'] = ha_vm_restart_priority

        __props__['ha_vm_restart_timeout'] = ha_vm_restart_timeout

        if not virtual_machine_id:
            raise TypeError('Missing required property virtual_machine_id')
        __props__['virtual_machine_id'] = virtual_machine_id

        super(HaVmOverride, __self__).__init__(
            'vsphere:index/haVmOverride:HaVmOverride',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

