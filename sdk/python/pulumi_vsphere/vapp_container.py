# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from . import utilities, tables

class VappContainer(pulumi.CustomResource):
    """
    The `vsphere_vapp_container` resource can be used to create and manage
    vApps.
    
    For more information on vSphere vApps, see [this
    page][ref-vsphere-vapp].
    
    [ref-vsphere-vapp]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.vm_admin.doc/GUID-2A95EBB8-1779-40FA-B4FB-4D0845750879.html
    """
    def __init__(__self__, __name__, __opts__=None, cpu_expandable=None, cpu_limit=None, cpu_reservation=None, cpu_share_level=None, cpu_shares=None, custom_attributes=None, memory_expandable=None, memory_limit=None, memory_reservation=None, memory_share_level=None, memory_shares=None, name=None, parent_folder_id=None, parent_resource_pool_id=None, tags=None):
        """Create a VappContainer resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['cpu_expandable'] = cpu_expandable

        __props__['cpu_limit'] = cpu_limit

        __props__['cpu_reservation'] = cpu_reservation

        __props__['cpu_share_level'] = cpu_share_level

        __props__['cpu_shares'] = cpu_shares

        __props__['custom_attributes'] = custom_attributes

        __props__['memory_expandable'] = memory_expandable

        __props__['memory_limit'] = memory_limit

        __props__['memory_reservation'] = memory_reservation

        __props__['memory_share_level'] = memory_share_level

        __props__['memory_shares'] = memory_shares

        __props__['name'] = name

        __props__['parent_folder_id'] = parent_folder_id

        if not parent_resource_pool_id:
            raise TypeError('Missing required property parent_resource_pool_id')
        __props__['parent_resource_pool_id'] = parent_resource_pool_id

        __props__['tags'] = tags

        super(VappContainer, __self__).__init__(
            'vsphere:index/vappContainer:VappContainer',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

