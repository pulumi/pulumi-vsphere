# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from . import utilities, tables

class DistributedVirtualSwitch(pulumi.CustomResource):
    """
    The `vsphere_distributed_virtual_switch` resource can be used to manage VMware
    Distributed Virtual Switches.
    
    An essential component of a distributed, scalable VMware datacenter, the
    vSphere Distributed Virtual Switch (DVS) provides centralized management and
    monitoring of the networking configuration of all the hosts that are associated
    with the switch. In addition to adding port groups (see the
    [`vsphere_distributed_port_group`][distributed-port-group] resource) that can
    be used as networks for virtual machines, a DVS can be configured to perform
    advanced high availability, traffic shaping, network monitoring, and more.
    
    For an overview on vSphere networking concepts, see [this
    page][ref-vsphere-net-concepts]. For more information on vSphere DVS, see [this
    page][ref-vsphere-dvs].
    
    [distributed-port-group]: /docs/providers/vsphere/r/distributed_port_group.html
    [ref-vsphere-net-concepts]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.networking.doc/GUID-2B11DBB8-CB3C-4AFF-8885-EFEA0FC562F4.html
    [ref-vsphere-dvs]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.networking.doc/GUID-375B45C7-684C-4C51-BA3C-70E48DFABF04.html
    
    ~> **NOTE:** This resource requires vCenter and is not available on direct ESXi
    connections.
    """
    def __init__(__self__, __name__, __opts__=None, active_uplinks=None, allow_forged_transmits=None, allow_mac_changes=None, allow_promiscuous=None, block_all_ports=None, check_beacon=None, contact_detail=None, contact_name=None, custom_attributes=None, datacenter_id=None, description=None, directpath_gen2_allowed=None, egress_shaping_average_bandwidth=None, egress_shaping_burst_size=None, egress_shaping_enabled=None, egress_shaping_peak_bandwidth=None, failback=None, faulttolerance_maximum_mbit=None, faulttolerance_reservation_mbit=None, faulttolerance_share_count=None, faulttolerance_share_level=None, folder=None, hbr_maximum_mbit=None, hbr_reservation_mbit=None, hbr_share_count=None, hbr_share_level=None, hosts=None, ingress_shaping_average_bandwidth=None, ingress_shaping_burst_size=None, ingress_shaping_enabled=None, ingress_shaping_peak_bandwidth=None, ipv4_address=None, iscsi_maximum_mbit=None, iscsi_reservation_mbit=None, iscsi_share_count=None, iscsi_share_level=None, lacp_api_version=None, lacp_enabled=None, lacp_mode=None, link_discovery_operation=None, link_discovery_protocol=None, management_maximum_mbit=None, management_reservation_mbit=None, management_share_count=None, management_share_level=None, max_mtu=None, multicast_filtering_mode=None, name=None, netflow_active_flow_timeout=None, netflow_collector_ip_address=None, netflow_collector_port=None, netflow_enabled=None, netflow_idle_flow_timeout=None, netflow_internal_flows_only=None, netflow_observation_domain_id=None, netflow_sampling_rate=None, network_resource_control_enabled=None, network_resource_control_version=None, nfs_maximum_mbit=None, nfs_reservation_mbit=None, nfs_share_count=None, nfs_share_level=None, notify_switches=None, port_private_secondary_vlan_id=None, standby_uplinks=None, tags=None, teaming_policy=None, tx_uplink=None, uplinks=None, vdp_maximum_mbit=None, vdp_reservation_mbit=None, vdp_share_count=None, vdp_share_level=None, version=None, virtualmachine_maximum_mbit=None, virtualmachine_reservation_mbit=None, virtualmachine_share_count=None, virtualmachine_share_level=None, vlan_id=None, vlan_ranges=None, vmotion_maximum_mbit=None, vmotion_reservation_mbit=None, vmotion_share_count=None, vmotion_share_level=None, vsan_maximum_mbit=None, vsan_reservation_mbit=None, vsan_share_count=None, vsan_share_level=None):
        """Create a DistributedVirtualSwitch resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['active_uplinks'] = active_uplinks

        __props__['allow_forged_transmits'] = allow_forged_transmits

        __props__['allow_mac_changes'] = allow_mac_changes

        __props__['allow_promiscuous'] = allow_promiscuous

        __props__['block_all_ports'] = block_all_ports

        __props__['check_beacon'] = check_beacon

        __props__['contact_detail'] = contact_detail

        __props__['contact_name'] = contact_name

        __props__['custom_attributes'] = custom_attributes

        if not datacenter_id:
            raise TypeError('Missing required property datacenter_id')
        __props__['datacenter_id'] = datacenter_id

        __props__['description'] = description

        __props__['directpath_gen2_allowed'] = directpath_gen2_allowed

        __props__['egress_shaping_average_bandwidth'] = egress_shaping_average_bandwidth

        __props__['egress_shaping_burst_size'] = egress_shaping_burst_size

        __props__['egress_shaping_enabled'] = egress_shaping_enabled

        __props__['egress_shaping_peak_bandwidth'] = egress_shaping_peak_bandwidth

        __props__['failback'] = failback

        __props__['faulttolerance_maximum_mbit'] = faulttolerance_maximum_mbit

        __props__['faulttolerance_reservation_mbit'] = faulttolerance_reservation_mbit

        __props__['faulttolerance_share_count'] = faulttolerance_share_count

        __props__['faulttolerance_share_level'] = faulttolerance_share_level

        __props__['folder'] = folder

        __props__['hbr_maximum_mbit'] = hbr_maximum_mbit

        __props__['hbr_reservation_mbit'] = hbr_reservation_mbit

        __props__['hbr_share_count'] = hbr_share_count

        __props__['hbr_share_level'] = hbr_share_level

        __props__['hosts'] = hosts

        __props__['ingress_shaping_average_bandwidth'] = ingress_shaping_average_bandwidth

        __props__['ingress_shaping_burst_size'] = ingress_shaping_burst_size

        __props__['ingress_shaping_enabled'] = ingress_shaping_enabled

        __props__['ingress_shaping_peak_bandwidth'] = ingress_shaping_peak_bandwidth

        __props__['ipv4_address'] = ipv4_address

        __props__['iscsi_maximum_mbit'] = iscsi_maximum_mbit

        __props__['iscsi_reservation_mbit'] = iscsi_reservation_mbit

        __props__['iscsi_share_count'] = iscsi_share_count

        __props__['iscsi_share_level'] = iscsi_share_level

        __props__['lacp_api_version'] = lacp_api_version

        __props__['lacp_enabled'] = lacp_enabled

        __props__['lacp_mode'] = lacp_mode

        __props__['link_discovery_operation'] = link_discovery_operation

        __props__['link_discovery_protocol'] = link_discovery_protocol

        __props__['management_maximum_mbit'] = management_maximum_mbit

        __props__['management_reservation_mbit'] = management_reservation_mbit

        __props__['management_share_count'] = management_share_count

        __props__['management_share_level'] = management_share_level

        __props__['max_mtu'] = max_mtu

        __props__['multicast_filtering_mode'] = multicast_filtering_mode

        __props__['name'] = name

        __props__['netflow_active_flow_timeout'] = netflow_active_flow_timeout

        __props__['netflow_collector_ip_address'] = netflow_collector_ip_address

        __props__['netflow_collector_port'] = netflow_collector_port

        __props__['netflow_enabled'] = netflow_enabled

        __props__['netflow_idle_flow_timeout'] = netflow_idle_flow_timeout

        __props__['netflow_internal_flows_only'] = netflow_internal_flows_only

        __props__['netflow_observation_domain_id'] = netflow_observation_domain_id

        __props__['netflow_sampling_rate'] = netflow_sampling_rate

        __props__['network_resource_control_enabled'] = network_resource_control_enabled

        __props__['network_resource_control_version'] = network_resource_control_version

        __props__['nfs_maximum_mbit'] = nfs_maximum_mbit

        __props__['nfs_reservation_mbit'] = nfs_reservation_mbit

        __props__['nfs_share_count'] = nfs_share_count

        __props__['nfs_share_level'] = nfs_share_level

        __props__['notify_switches'] = notify_switches

        __props__['port_private_secondary_vlan_id'] = port_private_secondary_vlan_id

        __props__['standby_uplinks'] = standby_uplinks

        __props__['tags'] = tags

        __props__['teaming_policy'] = teaming_policy

        __props__['tx_uplink'] = tx_uplink

        __props__['uplinks'] = uplinks

        __props__['vdp_maximum_mbit'] = vdp_maximum_mbit

        __props__['vdp_reservation_mbit'] = vdp_reservation_mbit

        __props__['vdp_share_count'] = vdp_share_count

        __props__['vdp_share_level'] = vdp_share_level

        __props__['version'] = version

        __props__['virtualmachine_maximum_mbit'] = virtualmachine_maximum_mbit

        __props__['virtualmachine_reservation_mbit'] = virtualmachine_reservation_mbit

        __props__['virtualmachine_share_count'] = virtualmachine_share_count

        __props__['virtualmachine_share_level'] = virtualmachine_share_level

        __props__['vlan_id'] = vlan_id

        __props__['vlan_ranges'] = vlan_ranges

        __props__['vmotion_maximum_mbit'] = vmotion_maximum_mbit

        __props__['vmotion_reservation_mbit'] = vmotion_reservation_mbit

        __props__['vmotion_share_count'] = vmotion_share_count

        __props__['vmotion_share_level'] = vmotion_share_level

        __props__['vsan_maximum_mbit'] = vsan_maximum_mbit

        __props__['vsan_reservation_mbit'] = vsan_reservation_mbit

        __props__['vsan_share_count'] = vsan_share_count

        __props__['vsan_share_level'] = vsan_share_level

        __props__['config_version'] = None

        super(DistributedVirtualSwitch, __self__).__init__(
            'vsphere:index/distributedVirtualSwitch:DistributedVirtualSwitch',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

