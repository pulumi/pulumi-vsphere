# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from . import utilities, tables

class VirtualMachineSnapshot(pulumi.CustomResource):
    """
    The `vsphere_virtual_machine_snapshot` resource can be used to manage snapshots
    for a virtual machine.
    
    For more information on managing snapshots and how they work in VMware, see
    [here][ext-vm-snapshot-management].
    
    [ext-vm-snapshot-management]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.vm_admin.doc/GUID-CA948C69-7F58-4519-AEB1-739545EA94E5.html
    
    ~> **NOTE:** A snapshot in VMware differs from traditional disk snapshots, and
    can contain the actual running state of the virtual machine, data for all disks
    that have not been set to be independent from the snapshot (including ones that
    have been attached via the [attach][docs-vsphere-virtual-machine-disk-attach]
    parameter to the `vsphere_virtual_machine` `disk` block), and even the
    configuration of the virtual machine at the time of the snapshot. Virtual
    machine, disk activity, and configuration changes post-snapshot are not
    included in the original state. Use this resource with care! Neither VMware nor
    HashiCorp recommends retaining snapshots for a extended period of time and does
    NOT recommend using them as as backup feature. For more information on the
    limitation of virtual machine snapshots, see [here][ext-vm-snap-limitations].
    
    [docs-vsphere-virtual-machine-disk-attach]: /docs/providers/vsphere/r/virtual_machine.html#attach
    [ext-vm-snap-limitations]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.vm_admin.doc/GUID-53F65726-A23B-4CF0-A7D5-48E584B88613.html
    """
    def __init__(__self__, __name__, __opts__=None, consolidate=None, description=None, memory=None, quiesce=None, remove_children=None, snapshot_name=None, virtual_machine_uuid=None):
        """Create a VirtualMachineSnapshot resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['consolidate'] = consolidate

        if not description:
            raise TypeError('Missing required property description')
        __props__['description'] = description

        if not memory:
            raise TypeError('Missing required property memory')
        __props__['memory'] = memory

        if not quiesce:
            raise TypeError('Missing required property quiesce')
        __props__['quiesce'] = quiesce

        __props__['remove_children'] = remove_children

        if not snapshot_name:
            raise TypeError('Missing required property snapshot_name')
        __props__['snapshot_name'] = snapshot_name

        if not virtual_machine_uuid:
            raise TypeError('Missing required property virtual_machine_uuid')
        __props__['virtual_machine_uuid'] = virtual_machine_uuid

        super(VirtualMachineSnapshot, __self__).__init__(
            'vsphere:index/virtualMachineSnapshot:VirtualMachineSnapshot',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

