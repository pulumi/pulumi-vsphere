# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from . import utilities, tables

class TagCategory(pulumi.CustomResource):
    """
    The `vsphere_tag_category` resource can be used to create and manage tag
    categories, which determine how tags are grouped together and applied to
    specific objects.
    
    For more information about tags, click [here][ext-tags-general]. For more
    information about tag categories specifically, click
    [here][ext-tag-categories].
    
    [ext-tags-general]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.vcenterhost.doc/GUID-E8E854DD-AA97-4E0C-8419-CE84F93C4058.html
    [ext-tag-categories]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.vcenterhost.doc/GUID-BA3D1794-28F2-43F3-BCE9-3964CB207FB6.html
    
    ~> **NOTE:** Tagging support is unsupported on direct ESXi connections and
    requires vCenter 6.0 or higher.
    """
    def __init__(__self__, __name__, __opts__=None, associable_types=None, cardinality=None, description=None, name=None):
        """Create a TagCategory resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not associable_types:
            raise TypeError('Missing required property associable_types')
        __props__['associable_types'] = associable_types

        if not cardinality:
            raise TypeError('Missing required property cardinality')
        __props__['cardinality'] = cardinality

        __props__['description'] = description

        __props__['name'] = name

        super(TagCategory, __self__).__init__(
            'vsphere:index/tagCategory:TagCategory',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

