# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from . import utilities

class VmfsDatastore(pulumi.CustomResource):
    """
    The `vsphere_vmfs_datastore` resource can be used to create and manage VMFS
    datastores on an ESXi host or a set of hosts. The resource supports using any
    SCSI device that can generally be used in a datastore, such as local disks, or
    disks presented to a host or multiple hosts over Fibre Channel or iSCSI.
    Devices can be specified manually, or discovered using the
    [`vsphere_vmfs_disks`][data-source-vmfs-disks] data source.
    
    [data-source-vmfs-disks]: /docs/providers/vsphere/d/vmfs_disks.html 
    """
    def __init__(__self__, __name__, __opts__=None, custom_attributes=None, datastore_cluster_id=None, disks=None, folder=None, host_system_id=None, name=None, tags=None):
        """Create a VmfsDatastore resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['customAttributes'] = custom_attributes

        __props__['datastoreClusterId'] = datastore_cluster_id

        if not disks:
            raise TypeError('Missing required property disks')
        __props__['disks'] = disks

        __props__['folder'] = folder

        if not host_system_id:
            raise TypeError('Missing required property host_system_id')
        __props__['hostSystemId'] = host_system_id

        __props__['name'] = name

        __props__['tags'] = tags

        __props__['accessible'] = None
        __props__['capacity'] = None
        __props__['free_space'] = None
        __props__['maintenance_mode'] = None
        __props__['multiple_host_access'] = None
        __props__['uncommitted_space'] = None
        __props__['url'] = None

        super(VmfsDatastore, __self__).__init__(
            'vsphere:index/vmfsDatastore:VmfsDatastore',
            __name__,
            __props__,
            __opts__)

