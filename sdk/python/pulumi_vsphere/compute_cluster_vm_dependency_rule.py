# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ComputeClusterVmDependencyRuleArgs', 'ComputeClusterVmDependencyRule']

@pulumi.input_type
class ComputeClusterVmDependencyRuleArgs:
    def __init__(__self__, *,
                 compute_cluster_id: pulumi.Input[str],
                 dependency_vm_group_name: pulumi.Input[str],
                 vm_group_name: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 mandatory: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ComputeClusterVmDependencyRule resource.
        :param pulumi.Input[str] compute_cluster_id: The managed object reference
               ID of the cluster to put the group in.  Forces a new
               resource if changed.
        :param pulumi.Input[str] dependency_vm_group_name: The name of the VM group that this
               rule depends on. The VMs defined in the group specified by
               `vm_group_name` will not be started until the VMs in this
               group are started.
        :param pulumi.Input[str] vm_group_name: The name of the VM group that is the subject of
               this rule. The VMs defined in this group will not be started until the VMs in
               the group specified by
               `dependency_vm_group_name` are started.
        :param pulumi.Input[bool] enabled: Enable this rule in the cluster. Default: `true`.
        :param pulumi.Input[bool] mandatory: When this value is `true`, prevents any virtual
               machine operations that may violate this rule. Default: `false`.
               
               > **NOTE:** The namespace for rule names on this resource (defined by the
               `name` argument) is shared with all rules in the cluster - consider
               this when naming your rules.
        :param pulumi.Input[str] name: The name of the rule. This must be unique in the
               cluster.
        """
        pulumi.set(__self__, "compute_cluster_id", compute_cluster_id)
        pulumi.set(__self__, "dependency_vm_group_name", dependency_vm_group_name)
        pulumi.set(__self__, "vm_group_name", vm_group_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mandatory is not None:
            pulumi.set(__self__, "mandatory", mandatory)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="computeClusterId")
    def compute_cluster_id(self) -> pulumi.Input[str]:
        """
        The managed object reference
        ID of the cluster to put the group in.  Forces a new
        resource if changed.
        """
        return pulumi.get(self, "compute_cluster_id")

    @compute_cluster_id.setter
    def compute_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compute_cluster_id", value)

    @property
    @pulumi.getter(name="dependencyVmGroupName")
    def dependency_vm_group_name(self) -> pulumi.Input[str]:
        """
        The name of the VM group that this
        rule depends on. The VMs defined in the group specified by
        `vm_group_name` will not be started until the VMs in this
        group are started.
        """
        return pulumi.get(self, "dependency_vm_group_name")

    @dependency_vm_group_name.setter
    def dependency_vm_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "dependency_vm_group_name", value)

    @property
    @pulumi.getter(name="vmGroupName")
    def vm_group_name(self) -> pulumi.Input[str]:
        """
        The name of the VM group that is the subject of
        this rule. The VMs defined in this group will not be started until the VMs in
        the group specified by
        `dependency_vm_group_name` are started.
        """
        return pulumi.get(self, "vm_group_name")

    @vm_group_name.setter
    def vm_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_group_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable this rule in the cluster. Default: `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def mandatory(self) -> Optional[pulumi.Input[bool]]:
        """
        When this value is `true`, prevents any virtual
        machine operations that may violate this rule. Default: `false`.

        > **NOTE:** The namespace for rule names on this resource (defined by the
        `name` argument) is shared with all rules in the cluster - consider
        this when naming your rules.
        """
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mandatory", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rule. This must be unique in the
        cluster.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ComputeClusterVmDependencyRuleState:
    def __init__(__self__, *,
                 compute_cluster_id: Optional[pulumi.Input[str]] = None,
                 dependency_vm_group_name: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 mandatory: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vm_group_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ComputeClusterVmDependencyRule resources.
        :param pulumi.Input[str] compute_cluster_id: The managed object reference
               ID of the cluster to put the group in.  Forces a new
               resource if changed.
        :param pulumi.Input[str] dependency_vm_group_name: The name of the VM group that this
               rule depends on. The VMs defined in the group specified by
               `vm_group_name` will not be started until the VMs in this
               group are started.
        :param pulumi.Input[bool] enabled: Enable this rule in the cluster. Default: `true`.
        :param pulumi.Input[bool] mandatory: When this value is `true`, prevents any virtual
               machine operations that may violate this rule. Default: `false`.
               
               > **NOTE:** The namespace for rule names on this resource (defined by the
               `name` argument) is shared with all rules in the cluster - consider
               this when naming your rules.
        :param pulumi.Input[str] name: The name of the rule. This must be unique in the
               cluster.
        :param pulumi.Input[str] vm_group_name: The name of the VM group that is the subject of
               this rule. The VMs defined in this group will not be started until the VMs in
               the group specified by
               `dependency_vm_group_name` are started.
        """
        if compute_cluster_id is not None:
            pulumi.set(__self__, "compute_cluster_id", compute_cluster_id)
        if dependency_vm_group_name is not None:
            pulumi.set(__self__, "dependency_vm_group_name", dependency_vm_group_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mandatory is not None:
            pulumi.set(__self__, "mandatory", mandatory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vm_group_name is not None:
            pulumi.set(__self__, "vm_group_name", vm_group_name)

    @property
    @pulumi.getter(name="computeClusterId")
    def compute_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The managed object reference
        ID of the cluster to put the group in.  Forces a new
        resource if changed.
        """
        return pulumi.get(self, "compute_cluster_id")

    @compute_cluster_id.setter
    def compute_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compute_cluster_id", value)

    @property
    @pulumi.getter(name="dependencyVmGroupName")
    def dependency_vm_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the VM group that this
        rule depends on. The VMs defined in the group specified by
        `vm_group_name` will not be started until the VMs in this
        group are started.
        """
        return pulumi.get(self, "dependency_vm_group_name")

    @dependency_vm_group_name.setter
    def dependency_vm_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dependency_vm_group_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable this rule in the cluster. Default: `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def mandatory(self) -> Optional[pulumi.Input[bool]]:
        """
        When this value is `true`, prevents any virtual
        machine operations that may violate this rule. Default: `false`.

        > **NOTE:** The namespace for rule names on this resource (defined by the
        `name` argument) is shared with all rules in the cluster - consider
        this when naming your rules.
        """
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mandatory", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rule. This must be unique in the
        cluster.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="vmGroupName")
    def vm_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the VM group that is the subject of
        this rule. The VMs defined in this group will not be started until the VMs in
        the group specified by
        `dependency_vm_group_name` are started.
        """
        return pulumi.get(self, "vm_group_name")

    @vm_group_name.setter
    def vm_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_group_name", value)


class ComputeClusterVmDependencyRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_cluster_id: Optional[pulumi.Input[str]] = None,
                 dependency_vm_group_name: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 mandatory: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vm_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The `ComputeClusterVmDependencyRule` resource can be used to manage
        VM dependency rules in a cluster, either created by the
        `ComputeCluster` resource or looked up
        by the `ComputeCluster` data source.

        A virtual machine dependency rule applies to vSphere HA, and allows
        user-defined startup orders for virtual machines in the case of host failure.
        Virtual machines are supplied via groups, which can be managed via the
        `ComputeClusterVmGroup`
        resource.

        > **NOTE:** This resource requires vCenter and is not available on direct ESXi
        connections.

        ## Example Usage

        The example below creates two virtual machine in a cluster using the
        `VirtualMachine` resource in a cluster
        looked up by the `ComputeCluster`
        data source. It then creates a group with this virtual machine. Two groups are created, each with one of the created VMs. Finally, a rule is created to ensure that `vm1` starts before `vm2`.

        > Note how `dependency_vm_group_name` and
        `vm_group_name` are sourced off of the `name` attributes from
        the `ComputeClusterVmGroup`
        resource. This is to ensure that the rule is not created before the groups
        exist, which may not possibly happen in the event that the names came from a
        "static" source such as a variable.

        ```python
        import pulumi
        import pulumi_vsphere as vsphere

        datacenter = vsphere.get_datacenter(name="dc-01")
        datastore = vsphere.get_datastore(name="datastore1",
            datacenter_id=datacenter.id)
        cluster = vsphere.get_compute_cluster(name="cluster-01",
            datacenter_id=datacenter.id)
        network = vsphere.get_network(name="network1",
            datacenter_id=datacenter.id)
        vm1 = vsphere.VirtualMachine("vm1",
            name="test1",
            resource_pool_id=cluster.resource_pool_id,
            datastore_id=datastore.id,
            num_cpus=2,
            memory=2048,
            guest_id="otherLinux64Guest",
            network_interfaces=[{
                "network_id": network.id,
            }],
            disks=[{
                "label": "disk0",
                "size": 20,
            }])
        vm2 = vsphere.VirtualMachine("vm2",
            name="test2",
            resource_pool_id=cluster.resource_pool_id,
            datastore_id=datastore.id,
            num_cpus=2,
            memory=2048,
            guest_id="otherLinux64Guest",
            network_interfaces=[{
                "network_id": network.id,
            }],
            disks=[{
                "label": "disk0",
                "size": 20,
            }])
        cluster_vm_group1 = vsphere.ComputeClusterVmGroup("cluster_vm_group1",
            name="test-cluster-vm-group1",
            compute_cluster_id=cluster.id,
            virtual_machine_ids=[vm1.id])
        cluster_vm_group2 = vsphere.ComputeClusterVmGroup("cluster_vm_group2",
            name="test-cluster-vm-group2",
            compute_cluster_id=cluster.id,
            virtual_machine_ids=[vm2.id])
        cluster_vm_dependency_rule = vsphere.ComputeClusterVmDependencyRule("cluster_vm_dependency_rule",
            compute_cluster_id=cluster.id,
            name="test-cluster-vm-dependency-rule",
            dependency_vm_group_name=cluster_vm_group1.name,
            vm_group_name=cluster_vm_group2.name)
        ```

        ## Import

        An existing rule can be imported into this resource by supplying

        both the path to the cluster, and the name the rule. If the name or cluster is

        not found, or if the rule is of a different type, an error will be returned. An

        example is below:

        ```sh
        $ pulumi import vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule cluster_vm_dependency_rule \\
        ```

          '{"compute_cluster_path": "/dc1/host/cluster1", \\

          "name": "pulumi-test-cluster-vm-dependency-rule"}'

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compute_cluster_id: The managed object reference
               ID of the cluster to put the group in.  Forces a new
               resource if changed.
        :param pulumi.Input[str] dependency_vm_group_name: The name of the VM group that this
               rule depends on. The VMs defined in the group specified by
               `vm_group_name` will not be started until the VMs in this
               group are started.
        :param pulumi.Input[bool] enabled: Enable this rule in the cluster. Default: `true`.
        :param pulumi.Input[bool] mandatory: When this value is `true`, prevents any virtual
               machine operations that may violate this rule. Default: `false`.
               
               > **NOTE:** The namespace for rule names on this resource (defined by the
               `name` argument) is shared with all rules in the cluster - consider
               this when naming your rules.
        :param pulumi.Input[str] name: The name of the rule. This must be unique in the
               cluster.
        :param pulumi.Input[str] vm_group_name: The name of the VM group that is the subject of
               this rule. The VMs defined in this group will not be started until the VMs in
               the group specified by
               `dependency_vm_group_name` are started.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComputeClusterVmDependencyRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The `ComputeClusterVmDependencyRule` resource can be used to manage
        VM dependency rules in a cluster, either created by the
        `ComputeCluster` resource or looked up
        by the `ComputeCluster` data source.

        A virtual machine dependency rule applies to vSphere HA, and allows
        user-defined startup orders for virtual machines in the case of host failure.
        Virtual machines are supplied via groups, which can be managed via the
        `ComputeClusterVmGroup`
        resource.

        > **NOTE:** This resource requires vCenter and is not available on direct ESXi
        connections.

        ## Example Usage

        The example below creates two virtual machine in a cluster using the
        `VirtualMachine` resource in a cluster
        looked up by the `ComputeCluster`
        data source. It then creates a group with this virtual machine. Two groups are created, each with one of the created VMs. Finally, a rule is created to ensure that `vm1` starts before `vm2`.

        > Note how `dependency_vm_group_name` and
        `vm_group_name` are sourced off of the `name` attributes from
        the `ComputeClusterVmGroup`
        resource. This is to ensure that the rule is not created before the groups
        exist, which may not possibly happen in the event that the names came from a
        "static" source such as a variable.

        ```python
        import pulumi
        import pulumi_vsphere as vsphere

        datacenter = vsphere.get_datacenter(name="dc-01")
        datastore = vsphere.get_datastore(name="datastore1",
            datacenter_id=datacenter.id)
        cluster = vsphere.get_compute_cluster(name="cluster-01",
            datacenter_id=datacenter.id)
        network = vsphere.get_network(name="network1",
            datacenter_id=datacenter.id)
        vm1 = vsphere.VirtualMachine("vm1",
            name="test1",
            resource_pool_id=cluster.resource_pool_id,
            datastore_id=datastore.id,
            num_cpus=2,
            memory=2048,
            guest_id="otherLinux64Guest",
            network_interfaces=[{
                "network_id": network.id,
            }],
            disks=[{
                "label": "disk0",
                "size": 20,
            }])
        vm2 = vsphere.VirtualMachine("vm2",
            name="test2",
            resource_pool_id=cluster.resource_pool_id,
            datastore_id=datastore.id,
            num_cpus=2,
            memory=2048,
            guest_id="otherLinux64Guest",
            network_interfaces=[{
                "network_id": network.id,
            }],
            disks=[{
                "label": "disk0",
                "size": 20,
            }])
        cluster_vm_group1 = vsphere.ComputeClusterVmGroup("cluster_vm_group1",
            name="test-cluster-vm-group1",
            compute_cluster_id=cluster.id,
            virtual_machine_ids=[vm1.id])
        cluster_vm_group2 = vsphere.ComputeClusterVmGroup("cluster_vm_group2",
            name="test-cluster-vm-group2",
            compute_cluster_id=cluster.id,
            virtual_machine_ids=[vm2.id])
        cluster_vm_dependency_rule = vsphere.ComputeClusterVmDependencyRule("cluster_vm_dependency_rule",
            compute_cluster_id=cluster.id,
            name="test-cluster-vm-dependency-rule",
            dependency_vm_group_name=cluster_vm_group1.name,
            vm_group_name=cluster_vm_group2.name)
        ```

        ## Import

        An existing rule can be imported into this resource by supplying

        both the path to the cluster, and the name the rule. If the name or cluster is

        not found, or if the rule is of a different type, an error will be returned. An

        example is below:

        ```sh
        $ pulumi import vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule cluster_vm_dependency_rule \\
        ```

          '{"compute_cluster_path": "/dc1/host/cluster1", \\

          "name": "pulumi-test-cluster-vm-dependency-rule"}'

        :param str resource_name: The name of the resource.
        :param ComputeClusterVmDependencyRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputeClusterVmDependencyRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_cluster_id: Optional[pulumi.Input[str]] = None,
                 dependency_vm_group_name: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 mandatory: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vm_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputeClusterVmDependencyRuleArgs.__new__(ComputeClusterVmDependencyRuleArgs)

            if compute_cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'compute_cluster_id'")
            __props__.__dict__["compute_cluster_id"] = compute_cluster_id
            if dependency_vm_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'dependency_vm_group_name'")
            __props__.__dict__["dependency_vm_group_name"] = dependency_vm_group_name
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["mandatory"] = mandatory
            __props__.__dict__["name"] = name
            if vm_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'vm_group_name'")
            __props__.__dict__["vm_group_name"] = vm_group_name
        super(ComputeClusterVmDependencyRule, __self__).__init__(
            'vsphere:index/computeClusterVmDependencyRule:ComputeClusterVmDependencyRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compute_cluster_id: Optional[pulumi.Input[str]] = None,
            dependency_vm_group_name: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            mandatory: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            vm_group_name: Optional[pulumi.Input[str]] = None) -> 'ComputeClusterVmDependencyRule':
        """
        Get an existing ComputeClusterVmDependencyRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compute_cluster_id: The managed object reference
               ID of the cluster to put the group in.  Forces a new
               resource if changed.
        :param pulumi.Input[str] dependency_vm_group_name: The name of the VM group that this
               rule depends on. The VMs defined in the group specified by
               `vm_group_name` will not be started until the VMs in this
               group are started.
        :param pulumi.Input[bool] enabled: Enable this rule in the cluster. Default: `true`.
        :param pulumi.Input[bool] mandatory: When this value is `true`, prevents any virtual
               machine operations that may violate this rule. Default: `false`.
               
               > **NOTE:** The namespace for rule names on this resource (defined by the
               `name` argument) is shared with all rules in the cluster - consider
               this when naming your rules.
        :param pulumi.Input[str] name: The name of the rule. This must be unique in the
               cluster.
        :param pulumi.Input[str] vm_group_name: The name of the VM group that is the subject of
               this rule. The VMs defined in this group will not be started until the VMs in
               the group specified by
               `dependency_vm_group_name` are started.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputeClusterVmDependencyRuleState.__new__(_ComputeClusterVmDependencyRuleState)

        __props__.__dict__["compute_cluster_id"] = compute_cluster_id
        __props__.__dict__["dependency_vm_group_name"] = dependency_vm_group_name
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["mandatory"] = mandatory
        __props__.__dict__["name"] = name
        __props__.__dict__["vm_group_name"] = vm_group_name
        return ComputeClusterVmDependencyRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="computeClusterId")
    def compute_cluster_id(self) -> pulumi.Output[str]:
        """
        The managed object reference
        ID of the cluster to put the group in.  Forces a new
        resource if changed.
        """
        return pulumi.get(self, "compute_cluster_id")

    @property
    @pulumi.getter(name="dependencyVmGroupName")
    def dependency_vm_group_name(self) -> pulumi.Output[str]:
        """
        The name of the VM group that this
        rule depends on. The VMs defined in the group specified by
        `vm_group_name` will not be started until the VMs in this
        group are started.
        """
        return pulumi.get(self, "dependency_vm_group_name")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable this rule in the cluster. Default: `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def mandatory(self) -> pulumi.Output[Optional[bool]]:
        """
        When this value is `true`, prevents any virtual
        machine operations that may violate this rule. Default: `false`.

        > **NOTE:** The namespace for rule names on this resource (defined by the
        `name` argument) is shared with all rules in the cluster - consider
        this when naming your rules.
        """
        return pulumi.get(self, "mandatory")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the rule. This must be unique in the
        cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="vmGroupName")
    def vm_group_name(self) -> pulumi.Output[str]:
        """
        The name of the VM group that is the subject of
        this rule. The VMs defined in this group will not be started until the VMs in
        the group specified by
        `dependency_vm_group_name` are started.
        """
        return pulumi.get(self, "vm_group_name")

