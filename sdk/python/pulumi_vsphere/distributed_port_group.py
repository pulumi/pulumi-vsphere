# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from . import utilities, tables

class DistributedPortGroup(pulumi.CustomResource):
    """
    The `vsphere_distributed_port_group` resource can be used to manage vSphere
    distributed virtual port groups. These port groups are connected to distributed
    virtual switches, which can be managed by the
    [`vsphere_distributed_virtual_switch`][distributed-virtual-switch] resource.
    
    Distributed port groups can be used as networks for virtual machines, allowing
    VMs to use the networking supplied by a distributed virtual switch (DVS), with
    a set of policies that apply to that individual newtork, if desired.
    
    For an overview on vSphere networking concepts, see [this
    page][ref-vsphere-net-concepts]. For more information on vSphere DVS
    portgroups, see [this page][ref-vsphere-dvportgroup].
    
    [distributed-virtual-switch]: /docs/providers/vsphere/r/distributed_virtual_switch.html
    [ref-vsphere-net-concepts]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.networking.doc/GUID-2B11DBB8-CB3C-4AFF-8885-EFEA0FC562F4.html
    [ref-vsphere-dvportgroup]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.networking.doc/GUID-69933F6E-2442-46CF-AA17-1196CB9A0A09.html
    
    ~> **NOTE:** This resource requires vCenter and is not available on direct ESXi
    connections.
    """
    def __init__(__self__, __name__, __opts__=None, active_uplinks=None, allow_forged_transmits=None, allow_mac_changes=None, allow_promiscuous=None, auto_expand=None, block_all_ports=None, block_override_allowed=None, check_beacon=None, custom_attributes=None, description=None, directpath_gen2_allowed=None, distributed_virtual_switch_uuid=None, egress_shaping_average_bandwidth=None, egress_shaping_burst_size=None, egress_shaping_enabled=None, egress_shaping_peak_bandwidth=None, failback=None, ingress_shaping_average_bandwidth=None, ingress_shaping_burst_size=None, ingress_shaping_enabled=None, ingress_shaping_peak_bandwidth=None, lacp_enabled=None, lacp_mode=None, live_port_moving_allowed=None, name=None, netflow_enabled=None, netflow_override_allowed=None, network_resource_pool_key=None, network_resource_pool_override_allowed=None, notify_switches=None, number_of_ports=None, port_config_reset_at_disconnect=None, port_name_format=None, port_private_secondary_vlan_id=None, security_policy_override_allowed=None, shaping_override_allowed=None, standby_uplinks=None, tags=None, teaming_policy=None, traffic_filter_override_allowed=None, tx_uplink=None, type=None, uplink_teaming_override_allowed=None, vlan_id=None, vlan_override_allowed=None, vlan_ranges=None):
        """Create a DistributedPortGroup resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['active_uplinks'] = active_uplinks

        __props__['allow_forged_transmits'] = allow_forged_transmits

        __props__['allow_mac_changes'] = allow_mac_changes

        __props__['allow_promiscuous'] = allow_promiscuous

        __props__['auto_expand'] = auto_expand

        __props__['block_all_ports'] = block_all_ports

        __props__['block_override_allowed'] = block_override_allowed

        __props__['check_beacon'] = check_beacon

        __props__['custom_attributes'] = custom_attributes

        __props__['description'] = description

        __props__['directpath_gen2_allowed'] = directpath_gen2_allowed

        if not distributed_virtual_switch_uuid:
            raise TypeError('Missing required property distributed_virtual_switch_uuid')
        __props__['distributed_virtual_switch_uuid'] = distributed_virtual_switch_uuid

        __props__['egress_shaping_average_bandwidth'] = egress_shaping_average_bandwidth

        __props__['egress_shaping_burst_size'] = egress_shaping_burst_size

        __props__['egress_shaping_enabled'] = egress_shaping_enabled

        __props__['egress_shaping_peak_bandwidth'] = egress_shaping_peak_bandwidth

        __props__['failback'] = failback

        __props__['ingress_shaping_average_bandwidth'] = ingress_shaping_average_bandwidth

        __props__['ingress_shaping_burst_size'] = ingress_shaping_burst_size

        __props__['ingress_shaping_enabled'] = ingress_shaping_enabled

        __props__['ingress_shaping_peak_bandwidth'] = ingress_shaping_peak_bandwidth

        __props__['lacp_enabled'] = lacp_enabled

        __props__['lacp_mode'] = lacp_mode

        __props__['live_port_moving_allowed'] = live_port_moving_allowed

        __props__['name'] = name

        __props__['netflow_enabled'] = netflow_enabled

        __props__['netflow_override_allowed'] = netflow_override_allowed

        __props__['network_resource_pool_key'] = network_resource_pool_key

        __props__['network_resource_pool_override_allowed'] = network_resource_pool_override_allowed

        __props__['notify_switches'] = notify_switches

        __props__['number_of_ports'] = number_of_ports

        __props__['port_config_reset_at_disconnect'] = port_config_reset_at_disconnect

        __props__['port_name_format'] = port_name_format

        __props__['port_private_secondary_vlan_id'] = port_private_secondary_vlan_id

        __props__['security_policy_override_allowed'] = security_policy_override_allowed

        __props__['shaping_override_allowed'] = shaping_override_allowed

        __props__['standby_uplinks'] = standby_uplinks

        __props__['tags'] = tags

        __props__['teaming_policy'] = teaming_policy

        __props__['traffic_filter_override_allowed'] = traffic_filter_override_allowed

        __props__['tx_uplink'] = tx_uplink

        __props__['type'] = type

        __props__['uplink_teaming_override_allowed'] = uplink_teaming_override_allowed

        __props__['vlan_id'] = vlan_id

        __props__['vlan_override_allowed'] = vlan_override_allowed

        __props__['vlan_ranges'] = vlan_ranges

        __props__['config_version'] = None
        __props__['key'] = None

        super(DistributedPortGroup, __self__).__init__(
            'vsphere:index/distributedPortGroup:DistributedPortGroup',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

